diff --git a/src/domain/datever.js b/src/domain/datever.js
index 55ccc0ff6940ee437f920a8ef0c82720cd5667c5..1551c1a0f70ff860115897f979ce2c1f4c6341bd 100644
--- a/src/domain/datever.js
+++ b/src/domain/datever.js
@@ -1,5 +1,4 @@
 module.exports = function createDateVersion(format, ver, now, alltags) {
-  let updated = null
   const tags = format.split('.').filter(f => alltags.date.indexOf(f) !== -1)
   const verarr = ver.length > 0 ? ver.split(/[.-]/) : []
 
@@ -96,34 +95,24 @@ module.exports = function createDateVersion(format, ver, now, alltags) {
     return Date.UTC(getYear(), getMonth(), getDay())
   }
 
-  function inc(level, multipleLevels=false) {
-    if (updated === false && alltags.modifier.indexOf(level) !== -1) updated = true
-    if (level != 'CALENDAR') return;
-
-    updated = false
+  function inc(level) {
+    if (level !== 'CALENDAR') return false;
+    let updated = false
     for (let i = 0; i < tags.length; i++) {
       const t = tags[i]
       const lv = getLiveValue(t)
-      if (dateversion[t] != lv) updated = true
-      dateversion[t] = lv
-    }
-
-    if (updated === false && multipleLevels === false) {
-      throw new Error('There is no change in the version.')
+      if (Number(dateversion[t]) !== lv) updated = true
+      dateversion[t] = lv.toString()
     }
-
     return updated
   }
 
   function asString() {
-    //if (updated === false && verarr.length > 0)
-      //throw new Error('There is no change in the version.');
-
     return Object.keys(dateversion).map(t => dateversion[t]).join('.')
   }
 
   function pretty(locale=undefined) {
-    return new Date(asNumeric()).toLocaleString(locale, {year: 'numeric', month: 'long'})
+    return new Date(asNumeric()).toLocaleString(locale, {year: 'numeric', month: 'long', timeZone: 'UTC'})
   }
 
   return {
diff --git a/src/domain/semver.js b/src/domain/semver.js
index 79b01d3c83e01641b0b89c65ee06c843a90f6bb7..d6e28e0c875c3180dea31c9ea6687acab2b4e1e6 100644
--- a/src/domain/semver.js
+++ b/src/domain/semver.js
@@ -18,7 +18,7 @@ module.exports = function createSemanticVersion(format, ver, alltags) {
     }
   }
 
-  function inc(level, dateUpdated=false) {
+  function inc(level) {
     if (['DEV', 'ALPHA', 'BETA', 'RC'].indexOf(level) !== -1) {
       const isLevelChanged = semversion.MODIFIER.split('.')[0].toUpperCase() != level
       const mv = semversion.MODIFIER.split('.')[1]
@@ -31,17 +31,20 @@ module.exports = function createSemanticVersion(format, ver, alltags) {
     }
 
     if (['MAJOR', 'MINOR', 'MICRO'].indexOf(level) !== -1) {
-      semversion[level] = parseInt(semversion[level]) + 1
+      semversion[level] = (Number(semversion[level]) + 1).toString()
       semversion.MODIFIER = ''
-      if ((level == 'MINOR' || dateUpdated) && semversion.hasOwnProperty('MICRO'))
-        semversion.MICRO = '0';
-      if ((level == 'MAJOR' || dateUpdated) && semversion.hasOwnProperty('MICRO'))
-        semversion.MICRO = '0';
-      if ((level == 'MAJOR' || dateUpdated) && semversion.hasOwnProperty('MINOR'))
-        semversion.MINOR = '0';
+      switch (level) {
+        case 'MINOR':
+          if (semversion.hasOwnProperty('MICRO')) semversion.MICRO = '0'
+          break;
+        case 'MAJOR':
+          if (semversion.hasOwnProperty('MICRO')) semversion.MICRO = '0'
+          if (semversion.hasOwnProperty('MINOR')) semversion.MINOR = '0'
+          break;
+      }
     }
 
-    if ('CALENDAR' == level) {
+    if ('CALENDAR' === level) {
       semversion.MODIFIER = ''
       if (semversion.hasOwnProperty('MICRO')) semversion.MICRO = '0'
       if (semversion.hasOwnProperty('MINOR')) semversion.MINOR = '0'
diff --git a/src/index.js b/src/index.js
index f5ab6af5f8adfbf21cf943628aefd919f9e4c4cb..a03f76e9f9fbb3389fad413058279ad29d4d3eda 100644
--- a/src/index.js
+++ b/src/index.js
@@ -7,7 +7,7 @@ function Calver() {
     semantic: ['MAJOR', 'MINOR', 'MICRO', 'MODIFIER'],
     modifier: ['DEV', 'ALPHA', 'BETA', 'RC']
   }
-  const levels = ['CALENDAR', 'MAJOR', 'MINOR', 'MICRO', 'DEV', 'ALPHA', 'BETA', 'RC']
+  const levels = ['CALENDAR', 'MAJOR', 'MINOR', 'MICRO', ...tags.modifier]
   const date = {
     now: new Date(Date.now())
   }
@@ -54,16 +54,23 @@ function Calver() {
     const datever = createDateVersion(format, ver, date.now, tags)
     const semver = createSemanticVersion(format, ver, tags)
 
-    let dateUpdated = false
-    const levelsarr = level.split('.')
-    for (let i = 0; i < levelsarr.length; i++) {
-      const l = levelsarr[i]
-      const updated = datever.inc(l, levelsarr.length > 1)
-      if (l == 'CALENDAR') dateUpdated = updated
-      semver.inc(l, dateUpdated)
+    let dateUpdated = false;
+    for (const l of level.split('.')) {
+      if (l === 'CALENDAR') {
+        if (datever.inc(l)) {
+          dateUpdated = true;
+          semver.inc('CALENDAR')
+        }
+      } else if (!dateUpdated || tags.modifier.includes(l))
+        semver.inc(l)
     }
 
-    return [datever.asString(), semver.asString()].filter(s => s).join('.')
+    const newVer = [datever.asString(), semver.asString()].filter(s => s).join('.');
+    if (ver === newVer) {
+      throw new Error('There is no change in the version.')
+    }
+
+    return newVer;
   }
 
   function pretty(format, ver, locale=undefined) {
