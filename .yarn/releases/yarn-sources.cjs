#!/usr/bin/env node
/* eslint-disable */
//prettier-ignore
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
  var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b)) {
        if (__propIsEnum.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      }
    return a;
  };
  var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
  var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
  var __objRest = (source, exclude) => {
    var target = {};
    for (var prop in source)
      if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
        target[prop] = source[prop];
    if (source != null && __getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(source)) {
        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
          target[prop] = source[prop];
      }
    return target;
  };
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[Object.keys(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod2) => function __require() {
    return mod2 || (0, cb[Object.keys(cb)[0]])((mod2 = {exports: {}}).exports, mod2), mod2.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, {get: all[name], enumerable: true});
  };
  var __reExport = (target, module, desc) => {
    if (module && typeof module === "object" || typeof module === "function") {
      for (let key of __getOwnPropNames(module))
        if (!__hasOwnProp.call(target, key) && key !== "default")
          __defProp(target, key, {get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable});
    }
    return target;
  };
  var __toModule = (module) => {
    return __reExport(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", module && module.__esModule && "default" in module ? {get: () => module.default, enumerable: true} : {value: module, enumerable: true})), module);
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/isexe-npm-2.0.0-b58870bd2e-26bf6c5480.zip/node_modules/isexe/windows.js
  var require_windows = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/isexe-npm-2.0.0-b58870bd2e-26bf6c5480.zip/node_modules/isexe/windows.js"(exports, module) {
      module.exports = isexe;
      isexe.sync = sync;
      var fs8 = require("fs");
      function checkPathExt(path3, options) {
        var pathext = options.pathExt !== void 0 ? options.pathExt : process.env.PATHEXT;
        if (!pathext) {
          return true;
        }
        pathext = pathext.split(";");
        if (pathext.indexOf("") !== -1) {
          return true;
        }
        for (var i = 0; i < pathext.length; i++) {
          var p = pathext[i].toLowerCase();
          if (p && path3.substr(-p.length).toLowerCase() === p) {
            return true;
          }
        }
        return false;
      }
      function checkStat(stat, path3, options) {
        if (!stat.isSymbolicLink() && !stat.isFile()) {
          return false;
        }
        return checkPathExt(path3, options);
      }
      function isexe(path3, options, cb) {
        fs8.stat(path3, function(er, stat) {
          cb(er, er ? false : checkStat(stat, path3, options));
        });
      }
      function sync(path3, options) {
        return checkStat(fs8.statSync(path3), path3, options);
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/isexe-npm-2.0.0-b58870bd2e-26bf6c5480.zip/node_modules/isexe/mode.js
  var require_mode = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/isexe-npm-2.0.0-b58870bd2e-26bf6c5480.zip/node_modules/isexe/mode.js"(exports, module) {
      module.exports = isexe;
      isexe.sync = sync;
      var fs8 = require("fs");
      function isexe(path3, options, cb) {
        fs8.stat(path3, function(er, stat) {
          cb(er, er ? false : checkStat(stat, options));
        });
      }
      function sync(path3, options) {
        return checkStat(fs8.statSync(path3), options);
      }
      function checkStat(stat, options) {
        return stat.isFile() && checkMode(stat, options);
      }
      function checkMode(stat, options) {
        var mod2 = stat.mode;
        var uid = stat.uid;
        var gid = stat.gid;
        var myUid = options.uid !== void 0 ? options.uid : process.getuid && process.getuid();
        var myGid = options.gid !== void 0 ? options.gid : process.getgid && process.getgid();
        var u = parseInt("100", 8);
        var g = parseInt("010", 8);
        var o = parseInt("001", 8);
        var ug = u | g;
        var ret = mod2 & o || mod2 & g && gid === myGid || mod2 & u && uid === myUid || mod2 & ug && myUid === 0;
        return ret;
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/isexe-npm-2.0.0-b58870bd2e-26bf6c5480.zip/node_modules/isexe/index.js
  var require_isexe = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/isexe-npm-2.0.0-b58870bd2e-26bf6c5480.zip/node_modules/isexe/index.js"(exports, module) {
      var fs8 = require("fs");
      var core;
      if (process.platform === "win32" || global.TESTING_WINDOWS) {
        core = require_windows();
      } else {
        core = require_mode();
      }
      module.exports = isexe;
      isexe.sync = sync;
      function isexe(path3, options, cb) {
        if (typeof options === "function") {
          cb = options;
          options = {};
        }
        if (!cb) {
          if (typeof Promise !== "function") {
            throw new TypeError("callback not provided");
          }
          return new Promise(function(resolve, reject) {
            isexe(path3, options || {}, function(er, is) {
              if (er) {
                reject(er);
              } else {
                resolve(is);
              }
            });
          });
        }
        core(path3, options || {}, function(er, is) {
          if (er) {
            if (er.code === "EACCES" || options && options.ignoreErrors) {
              er = null;
              is = false;
            }
          }
          cb(er, is);
        });
      }
      function sync(path3, options) {
        try {
          return core.sync(path3, options || {});
        } catch (er) {
          if (options && options.ignoreErrors || er.code === "EACCES") {
            return false;
          } else {
            throw er;
          }
        }
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/which-npm-2.0.2-320ddf72f7-1a5c563d3c.zip/node_modules/which/which.js
  var require_which = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/which-npm-2.0.2-320ddf72f7-1a5c563d3c.zip/node_modules/which/which.js"(exports, module) {
      var isWindows = process.platform === "win32" || process.env.OSTYPE === "cygwin" || process.env.OSTYPE === "msys";
      var path3 = require("path");
      var COLON = isWindows ? ";" : ":";
      var isexe = require_isexe();
      var getNotFoundError = (cmd) => Object.assign(new Error(`not found: ${cmd}`), {code: "ENOENT"});
      var getPathInfo = (cmd, opt) => {
        const colon = opt.colon || COLON;
        const pathEnv = cmd.match(/\//) || isWindows && cmd.match(/\\/) ? [""] : [
          ...isWindows ? [process.cwd()] : [],
          ...(opt.path || process.env.PATH || "").split(colon)
        ];
        const pathExtExe = isWindows ? opt.pathExt || process.env.PATHEXT || ".EXE;.CMD;.BAT;.COM" : "";
        const pathExt = isWindows ? pathExtExe.split(colon) : [""];
        if (isWindows) {
          if (cmd.indexOf(".") !== -1 && pathExt[0] !== "")
            pathExt.unshift("");
        }
        return {
          pathEnv,
          pathExt,
          pathExtExe
        };
      };
      var which = (cmd, opt, cb) => {
        if (typeof opt === "function") {
          cb = opt;
          opt = {};
        }
        if (!opt)
          opt = {};
        const {pathEnv, pathExt, pathExtExe} = getPathInfo(cmd, opt);
        const found = [];
        const step = (i) => new Promise((resolve, reject) => {
          if (i === pathEnv.length)
            return opt.all && found.length ? resolve(found) : reject(getNotFoundError(cmd));
          const ppRaw = pathEnv[i];
          const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;
          const pCmd = path3.join(pathPart, cmd);
          const p = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;
          resolve(subStep(p, i, 0));
        });
        const subStep = (p, i, ii) => new Promise((resolve, reject) => {
          if (ii === pathExt.length)
            return resolve(step(i + 1));
          const ext = pathExt[ii];
          isexe(p + ext, {pathExt: pathExtExe}, (er, is) => {
            if (!er && is) {
              if (opt.all)
                found.push(p + ext);
              else
                return resolve(p + ext);
            }
            return resolve(subStep(p, i, ii + 1));
          });
        });
        return cb ? step(0).then((res) => cb(null, res), cb) : step(0);
      };
      var whichSync = (cmd, opt) => {
        opt = opt || {};
        const {pathEnv, pathExt, pathExtExe} = getPathInfo(cmd, opt);
        const found = [];
        for (let i = 0; i < pathEnv.length; i++) {
          const ppRaw = pathEnv[i];
          const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;
          const pCmd = path3.join(pathPart, cmd);
          const p = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;
          for (let j = 0; j < pathExt.length; j++) {
            const cur = p + pathExt[j];
            try {
              const is = isexe.sync(cur, {pathExt: pathExtExe});
              if (is) {
                if (opt.all)
                  found.push(cur);
                else
                  return cur;
              }
            } catch (ex) {
            }
          }
        }
        if (opt.all && found.length)
          return found;
        if (opt.nothrow)
          return null;
        throw getNotFoundError(cmd);
      };
      module.exports = which;
      which.sync = whichSync;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/path-key-npm-3.1.1-0e66ea8321-55cd7a9dd4.zip/node_modules/path-key/index.js
  var require_path_key = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/path-key-npm-3.1.1-0e66ea8321-55cd7a9dd4.zip/node_modules/path-key/index.js"(exports, module) {
      "use strict";
      var pathKey = (options = {}) => {
        const environment = options.env || process.env;
        const platform = options.platform || process.platform;
        if (platform !== "win32") {
          return "PATH";
        }
        return Object.keys(environment).reverse().find((key) => key.toUpperCase() === "PATH") || "Path";
      };
      module.exports = pathKey;
      module.exports.default = pathKey;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/cross-spawn-npm-7.0.3-e4ff3e65b3-671cc7c728.zip/node_modules/cross-spawn/lib/util/resolveCommand.js
  var require_resolveCommand = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/cross-spawn-npm-7.0.3-e4ff3e65b3-671cc7c728.zip/node_modules/cross-spawn/lib/util/resolveCommand.js"(exports, module) {
      "use strict";
      var path3 = require("path");
      var which = require_which();
      var getPathKey = require_path_key();
      function resolveCommandAttempt(parsed, withoutPathExt) {
        const env = parsed.options.env || process.env;
        const cwd = process.cwd();
        const hasCustomCwd = parsed.options.cwd != null;
        const shouldSwitchCwd = hasCustomCwd && process.chdir !== void 0 && !process.chdir.disabled;
        if (shouldSwitchCwd) {
          try {
            process.chdir(parsed.options.cwd);
          } catch (err) {
          }
        }
        let resolved;
        try {
          resolved = which.sync(parsed.command, {
            path: env[getPathKey({env})],
            pathExt: withoutPathExt ? path3.delimiter : void 0
          });
        } catch (e) {
        } finally {
          if (shouldSwitchCwd) {
            process.chdir(cwd);
          }
        }
        if (resolved) {
          resolved = path3.resolve(hasCustomCwd ? parsed.options.cwd : "", resolved);
        }
        return resolved;
      }
      function resolveCommand(parsed) {
        return resolveCommandAttempt(parsed) || resolveCommandAttempt(parsed, true);
      }
      module.exports = resolveCommand;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/cross-spawn-npm-7.0.3-e4ff3e65b3-671cc7c728.zip/node_modules/cross-spawn/lib/util/escape.js
  var require_escape = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/cross-spawn-npm-7.0.3-e4ff3e65b3-671cc7c728.zip/node_modules/cross-spawn/lib/util/escape.js"(exports, module) {
      "use strict";
      var metaCharsRegExp = /([()\][%!^"`<>&|;, *?])/g;
      function escapeCommand(arg) {
        arg = arg.replace(metaCharsRegExp, "^$1");
        return arg;
      }
      function escapeArgument(arg, doubleEscapeMetaChars) {
        arg = `${arg}`;
        arg = arg.replace(/(\\*)"/g, '$1$1\\"');
        arg = arg.replace(/(\\*)$/, "$1$1");
        arg = `"${arg}"`;
        arg = arg.replace(metaCharsRegExp, "^$1");
        if (doubleEscapeMetaChars) {
          arg = arg.replace(metaCharsRegExp, "^$1");
        }
        return arg;
      }
      module.exports.command = escapeCommand;
      module.exports.argument = escapeArgument;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/shebang-regex-npm-3.0.0-899a0cd65e-1a2bcae50d.zip/node_modules/shebang-regex/index.js
  var require_shebang_regex = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/shebang-regex-npm-3.0.0-899a0cd65e-1a2bcae50d.zip/node_modules/shebang-regex/index.js"(exports, module) {
      "use strict";
      module.exports = /^#!(.*)/;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/shebang-command-npm-2.0.0-eb2b01921d-6b52fe8727.zip/node_modules/shebang-command/index.js
  var require_shebang_command = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/shebang-command-npm-2.0.0-eb2b01921d-6b52fe8727.zip/node_modules/shebang-command/index.js"(exports, module) {
      "use strict";
      var shebangRegex = require_shebang_regex();
      module.exports = (string = "") => {
        const match2 = string.match(shebangRegex);
        if (!match2) {
          return null;
        }
        const [path3, argument] = match2[0].replace(/#! ?/, "").split(" ");
        const binary = path3.split("/").pop();
        if (binary === "env") {
          return argument;
        }
        return argument ? `${binary} ${argument}` : binary;
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/cross-spawn-npm-7.0.3-e4ff3e65b3-671cc7c728.zip/node_modules/cross-spawn/lib/util/readShebang.js
  var require_readShebang = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/cross-spawn-npm-7.0.3-e4ff3e65b3-671cc7c728.zip/node_modules/cross-spawn/lib/util/readShebang.js"(exports, module) {
      "use strict";
      var fs8 = require("fs");
      var shebangCommand = require_shebang_command();
      function readShebang(command) {
        const size = 150;
        const buffer = Buffer.alloc(size);
        let fd;
        try {
          fd = fs8.openSync(command, "r");
          fs8.readSync(fd, buffer, 0, size, 0);
          fs8.closeSync(fd);
        } catch (e) {
        }
        return shebangCommand(buffer.toString());
      }
      module.exports = readShebang;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/cross-spawn-npm-7.0.3-e4ff3e65b3-671cc7c728.zip/node_modules/cross-spawn/lib/parse.js
  var require_parse = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/cross-spawn-npm-7.0.3-e4ff3e65b3-671cc7c728.zip/node_modules/cross-spawn/lib/parse.js"(exports, module) {
      "use strict";
      var path3 = require("path");
      var resolveCommand = require_resolveCommand();
      var escape = require_escape();
      var readShebang = require_readShebang();
      var isWin = process.platform === "win32";
      var isExecutableRegExp = /\.(?:com|exe)$/i;
      var isCmdShimRegExp = /node_modules[\\/].bin[\\/][^\\/]+\.cmd$/i;
      function detectShebang(parsed) {
        parsed.file = resolveCommand(parsed);
        const shebang = parsed.file && readShebang(parsed.file);
        if (shebang) {
          parsed.args.unshift(parsed.file);
          parsed.command = shebang;
          return resolveCommand(parsed);
        }
        return parsed.file;
      }
      function parseNonShell(parsed) {
        if (!isWin) {
          return parsed;
        }
        const commandFile = detectShebang(parsed);
        const needsShell = !isExecutableRegExp.test(commandFile);
        if (parsed.options.forceShell || needsShell) {
          const needsDoubleEscapeMetaChars = isCmdShimRegExp.test(commandFile);
          parsed.command = path3.normalize(parsed.command);
          parsed.command = escape.command(parsed.command);
          parsed.args = parsed.args.map((arg) => escape.argument(arg, needsDoubleEscapeMetaChars));
          const shellCommand = [parsed.command].concat(parsed.args).join(" ");
          parsed.args = ["/d", "/s", "/c", `"${shellCommand}"`];
          parsed.command = process.env.comspec || "cmd.exe";
          parsed.options.windowsVerbatimArguments = true;
        }
        return parsed;
      }
      function parse4(command, args, options) {
        if (args && !Array.isArray(args)) {
          options = args;
          args = null;
        }
        args = args ? args.slice(0) : [];
        options = Object.assign({}, options);
        const parsed = {
          command,
          args,
          options,
          file: void 0,
          original: {
            command,
            args
          }
        };
        return options.shell ? parsed : parseNonShell(parsed);
      }
      module.exports = parse4;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/cross-spawn-npm-7.0.3-e4ff3e65b3-671cc7c728.zip/node_modules/cross-spawn/lib/enoent.js
  var require_enoent = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/cross-spawn-npm-7.0.3-e4ff3e65b3-671cc7c728.zip/node_modules/cross-spawn/lib/enoent.js"(exports, module) {
      "use strict";
      var isWin = process.platform === "win32";
      function notFoundError(original, syscall) {
        return Object.assign(new Error(`${syscall} ${original.command} ENOENT`), {
          code: "ENOENT",
          errno: "ENOENT",
          syscall: `${syscall} ${original.command}`,
          path: original.command,
          spawnargs: original.args
        });
      }
      function hookChildProcess(cp, parsed) {
        if (!isWin) {
          return;
        }
        const originalEmit = cp.emit;
        cp.emit = function(name, arg1) {
          if (name === "exit") {
            const err = verifyENOENT(arg1, parsed, "spawn");
            if (err) {
              return originalEmit.call(cp, "error", err);
            }
          }
          return originalEmit.apply(cp, arguments);
        };
      }
      function verifyENOENT(status, parsed) {
        if (isWin && status === 1 && !parsed.file) {
          return notFoundError(parsed.original, "spawn");
        }
        return null;
      }
      function verifyENOENTSync(status, parsed) {
        if (isWin && status === 1 && !parsed.file) {
          return notFoundError(parsed.original, "spawnSync");
        }
        return null;
      }
      module.exports = {
        hookChildProcess,
        verifyENOENT,
        verifyENOENTSync,
        notFoundError
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/cross-spawn-npm-7.0.3-e4ff3e65b3-671cc7c728.zip/node_modules/cross-spawn/index.js
  var require_cross_spawn = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/cross-spawn-npm-7.0.3-e4ff3e65b3-671cc7c728.zip/node_modules/cross-spawn/index.js"(exports, module) {
      "use strict";
      var cp = require("child_process");
      var parse4 = require_parse();
      var enoent = require_enoent();
      function spawn(command, args, options) {
        const parsed = parse4(command, args, options);
        const spawned = cp.spawn(parsed.command, parsed.args, parsed.options);
        enoent.hookChildProcess(spawned, parsed);
        return spawned;
      }
      function spawnSync(command, args, options) {
        const parsed = parse4(command, args, options);
        const result = cp.spawnSync(parsed.command, parsed.args, parsed.options);
        result.error = result.error || enoent.verifyENOENTSync(result.status, parsed);
        return result;
      }
      module.exports = spawn;
      module.exports.spawn = spawn;
      module.exports.sync = spawnSync;
      module.exports._parse = parse4;
      module.exports._enoent = enoent;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/color-name-npm-1.1.4-025792b0ea-b044585952.zip/node_modules/color-name/index.js
  var require_color_name = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/color-name-npm-1.1.4-025792b0ea-b044585952.zip/node_modules/color-name/index.js"(exports, module) {
      "use strict";
      module.exports = {
        "aliceblue": [240, 248, 255],
        "antiquewhite": [250, 235, 215],
        "aqua": [0, 255, 255],
        "aquamarine": [127, 255, 212],
        "azure": [240, 255, 255],
        "beige": [245, 245, 220],
        "bisque": [255, 228, 196],
        "black": [0, 0, 0],
        "blanchedalmond": [255, 235, 205],
        "blue": [0, 0, 255],
        "blueviolet": [138, 43, 226],
        "brown": [165, 42, 42],
        "burlywood": [222, 184, 135],
        "cadetblue": [95, 158, 160],
        "chartreuse": [127, 255, 0],
        "chocolate": [210, 105, 30],
        "coral": [255, 127, 80],
        "cornflowerblue": [100, 149, 237],
        "cornsilk": [255, 248, 220],
        "crimson": [220, 20, 60],
        "cyan": [0, 255, 255],
        "darkblue": [0, 0, 139],
        "darkcyan": [0, 139, 139],
        "darkgoldenrod": [184, 134, 11],
        "darkgray": [169, 169, 169],
        "darkgreen": [0, 100, 0],
        "darkgrey": [169, 169, 169],
        "darkkhaki": [189, 183, 107],
        "darkmagenta": [139, 0, 139],
        "darkolivegreen": [85, 107, 47],
        "darkorange": [255, 140, 0],
        "darkorchid": [153, 50, 204],
        "darkred": [139, 0, 0],
        "darksalmon": [233, 150, 122],
        "darkseagreen": [143, 188, 143],
        "darkslateblue": [72, 61, 139],
        "darkslategray": [47, 79, 79],
        "darkslategrey": [47, 79, 79],
        "darkturquoise": [0, 206, 209],
        "darkviolet": [148, 0, 211],
        "deeppink": [255, 20, 147],
        "deepskyblue": [0, 191, 255],
        "dimgray": [105, 105, 105],
        "dimgrey": [105, 105, 105],
        "dodgerblue": [30, 144, 255],
        "firebrick": [178, 34, 34],
        "floralwhite": [255, 250, 240],
        "forestgreen": [34, 139, 34],
        "fuchsia": [255, 0, 255],
        "gainsboro": [220, 220, 220],
        "ghostwhite": [248, 248, 255],
        "gold": [255, 215, 0],
        "goldenrod": [218, 165, 32],
        "gray": [128, 128, 128],
        "green": [0, 128, 0],
        "greenyellow": [173, 255, 47],
        "grey": [128, 128, 128],
        "honeydew": [240, 255, 240],
        "hotpink": [255, 105, 180],
        "indianred": [205, 92, 92],
        "indigo": [75, 0, 130],
        "ivory": [255, 255, 240],
        "khaki": [240, 230, 140],
        "lavender": [230, 230, 250],
        "lavenderblush": [255, 240, 245],
        "lawngreen": [124, 252, 0],
        "lemonchiffon": [255, 250, 205],
        "lightblue": [173, 216, 230],
        "lightcoral": [240, 128, 128],
        "lightcyan": [224, 255, 255],
        "lightgoldenrodyellow": [250, 250, 210],
        "lightgray": [211, 211, 211],
        "lightgreen": [144, 238, 144],
        "lightgrey": [211, 211, 211],
        "lightpink": [255, 182, 193],
        "lightsalmon": [255, 160, 122],
        "lightseagreen": [32, 178, 170],
        "lightskyblue": [135, 206, 250],
        "lightslategray": [119, 136, 153],
        "lightslategrey": [119, 136, 153],
        "lightsteelblue": [176, 196, 222],
        "lightyellow": [255, 255, 224],
        "lime": [0, 255, 0],
        "limegreen": [50, 205, 50],
        "linen": [250, 240, 230],
        "magenta": [255, 0, 255],
        "maroon": [128, 0, 0],
        "mediumaquamarine": [102, 205, 170],
        "mediumblue": [0, 0, 205],
        "mediumorchid": [186, 85, 211],
        "mediumpurple": [147, 112, 219],
        "mediumseagreen": [60, 179, 113],
        "mediumslateblue": [123, 104, 238],
        "mediumspringgreen": [0, 250, 154],
        "mediumturquoise": [72, 209, 204],
        "mediumvioletred": [199, 21, 133],
        "midnightblue": [25, 25, 112],
        "mintcream": [245, 255, 250],
        "mistyrose": [255, 228, 225],
        "moccasin": [255, 228, 181],
        "navajowhite": [255, 222, 173],
        "navy": [0, 0, 128],
        "oldlace": [253, 245, 230],
        "olive": [128, 128, 0],
        "olivedrab": [107, 142, 35],
        "orange": [255, 165, 0],
        "orangered": [255, 69, 0],
        "orchid": [218, 112, 214],
        "palegoldenrod": [238, 232, 170],
        "palegreen": [152, 251, 152],
        "paleturquoise": [175, 238, 238],
        "palevioletred": [219, 112, 147],
        "papayawhip": [255, 239, 213],
        "peachpuff": [255, 218, 185],
        "peru": [205, 133, 63],
        "pink": [255, 192, 203],
        "plum": [221, 160, 221],
        "powderblue": [176, 224, 230],
        "purple": [128, 0, 128],
        "rebeccapurple": [102, 51, 153],
        "red": [255, 0, 0],
        "rosybrown": [188, 143, 143],
        "royalblue": [65, 105, 225],
        "saddlebrown": [139, 69, 19],
        "salmon": [250, 128, 114],
        "sandybrown": [244, 164, 96],
        "seagreen": [46, 139, 87],
        "seashell": [255, 245, 238],
        "sienna": [160, 82, 45],
        "silver": [192, 192, 192],
        "skyblue": [135, 206, 235],
        "slateblue": [106, 90, 205],
        "slategray": [112, 128, 144],
        "slategrey": [112, 128, 144],
        "snow": [255, 250, 250],
        "springgreen": [0, 255, 127],
        "steelblue": [70, 130, 180],
        "tan": [210, 180, 140],
        "teal": [0, 128, 128],
        "thistle": [216, 191, 216],
        "tomato": [255, 99, 71],
        "turquoise": [64, 224, 208],
        "violet": [238, 130, 238],
        "wheat": [245, 222, 179],
        "white": [255, 255, 255],
        "whitesmoke": [245, 245, 245],
        "yellow": [255, 255, 0],
        "yellowgreen": [154, 205, 50]
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/color-convert-npm-2.0.1-79730e935b-79e6bdb9fd.zip/node_modules/color-convert/conversions.js
  var require_conversions = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/color-convert-npm-2.0.1-79730e935b-79e6bdb9fd.zip/node_modules/color-convert/conversions.js"(exports, module) {
      var cssKeywords = require_color_name();
      var reverseKeywords = {};
      for (const key of Object.keys(cssKeywords)) {
        reverseKeywords[cssKeywords[key]] = key;
      }
      var convert = {
        rgb: {channels: 3, labels: "rgb"},
        hsl: {channels: 3, labels: "hsl"},
        hsv: {channels: 3, labels: "hsv"},
        hwb: {channels: 3, labels: "hwb"},
        cmyk: {channels: 4, labels: "cmyk"},
        xyz: {channels: 3, labels: "xyz"},
        lab: {channels: 3, labels: "lab"},
        lch: {channels: 3, labels: "lch"},
        hex: {channels: 1, labels: ["hex"]},
        keyword: {channels: 1, labels: ["keyword"]},
        ansi16: {channels: 1, labels: ["ansi16"]},
        ansi256: {channels: 1, labels: ["ansi256"]},
        hcg: {channels: 3, labels: ["h", "c", "g"]},
        apple: {channels: 3, labels: ["r16", "g16", "b16"]},
        gray: {channels: 1, labels: ["gray"]}
      };
      module.exports = convert;
      for (const model of Object.keys(convert)) {
        if (!("channels" in convert[model])) {
          throw new Error("missing channels property: " + model);
        }
        if (!("labels" in convert[model])) {
          throw new Error("missing channel labels property: " + model);
        }
        if (convert[model].labels.length !== convert[model].channels) {
          throw new Error("channel and label counts mismatch: " + model);
        }
        const {channels, labels} = convert[model];
        delete convert[model].channels;
        delete convert[model].labels;
        Object.defineProperty(convert[model], "channels", {value: channels});
        Object.defineProperty(convert[model], "labels", {value: labels});
      }
      convert.rgb.hsl = function(rgb) {
        const r = rgb[0] / 255;
        const g = rgb[1] / 255;
        const b = rgb[2] / 255;
        const min = Math.min(r, g, b);
        const max = Math.max(r, g, b);
        const delta = max - min;
        let h;
        let s;
        if (max === min) {
          h = 0;
        } else if (r === max) {
          h = (g - b) / delta;
        } else if (g === max) {
          h = 2 + (b - r) / delta;
        } else if (b === max) {
          h = 4 + (r - g) / delta;
        }
        h = Math.min(h * 60, 360);
        if (h < 0) {
          h += 360;
        }
        const l = (min + max) / 2;
        if (max === min) {
          s = 0;
        } else if (l <= 0.5) {
          s = delta / (max + min);
        } else {
          s = delta / (2 - max - min);
        }
        return [h, s * 100, l * 100];
      };
      convert.rgb.hsv = function(rgb) {
        let rdif;
        let gdif;
        let bdif;
        let h;
        let s;
        const r = rgb[0] / 255;
        const g = rgb[1] / 255;
        const b = rgb[2] / 255;
        const v = Math.max(r, g, b);
        const diff = v - Math.min(r, g, b);
        const diffc = function(c) {
          return (v - c) / 6 / diff + 1 / 2;
        };
        if (diff === 0) {
          h = 0;
          s = 0;
        } else {
          s = diff / v;
          rdif = diffc(r);
          gdif = diffc(g);
          bdif = diffc(b);
          if (r === v) {
            h = bdif - gdif;
          } else if (g === v) {
            h = 1 / 3 + rdif - bdif;
          } else if (b === v) {
            h = 2 / 3 + gdif - rdif;
          }
          if (h < 0) {
            h += 1;
          } else if (h > 1) {
            h -= 1;
          }
        }
        return [
          h * 360,
          s * 100,
          v * 100
        ];
      };
      convert.rgb.hwb = function(rgb) {
        const r = rgb[0];
        const g = rgb[1];
        let b = rgb[2];
        const h = convert.rgb.hsl(rgb)[0];
        const w = 1 / 255 * Math.min(r, Math.min(g, b));
        b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
        return [h, w * 100, b * 100];
      };
      convert.rgb.cmyk = function(rgb) {
        const r = rgb[0] / 255;
        const g = rgb[1] / 255;
        const b = rgb[2] / 255;
        const k = Math.min(1 - r, 1 - g, 1 - b);
        const c = (1 - r - k) / (1 - k) || 0;
        const m = (1 - g - k) / (1 - k) || 0;
        const y = (1 - b - k) / (1 - k) || 0;
        return [c * 100, m * 100, y * 100, k * 100];
      };
      function comparativeDistance(x, y) {
        return (x[0] - y[0]) ** 2 + (x[1] - y[1]) ** 2 + (x[2] - y[2]) ** 2;
      }
      convert.rgb.keyword = function(rgb) {
        const reversed = reverseKeywords[rgb];
        if (reversed) {
          return reversed;
        }
        let currentClosestDistance = Infinity;
        let currentClosestKeyword;
        for (const keyword of Object.keys(cssKeywords)) {
          const value = cssKeywords[keyword];
          const distance = comparativeDistance(rgb, value);
          if (distance < currentClosestDistance) {
            currentClosestDistance = distance;
            currentClosestKeyword = keyword;
          }
        }
        return currentClosestKeyword;
      };
      convert.keyword.rgb = function(keyword) {
        return cssKeywords[keyword];
      };
      convert.rgb.xyz = function(rgb) {
        let r = rgb[0] / 255;
        let g = rgb[1] / 255;
        let b = rgb[2] / 255;
        r = r > 0.04045 ? ((r + 0.055) / 1.055) ** 2.4 : r / 12.92;
        g = g > 0.04045 ? ((g + 0.055) / 1.055) ** 2.4 : g / 12.92;
        b = b > 0.04045 ? ((b + 0.055) / 1.055) ** 2.4 : b / 12.92;
        const x = r * 0.4124 + g * 0.3576 + b * 0.1805;
        const y = r * 0.2126 + g * 0.7152 + b * 0.0722;
        const z = r * 0.0193 + g * 0.1192 + b * 0.9505;
        return [x * 100, y * 100, z * 100];
      };
      convert.rgb.lab = function(rgb) {
        const xyz = convert.rgb.xyz(rgb);
        let x = xyz[0];
        let y = xyz[1];
        let z = xyz[2];
        x /= 95.047;
        y /= 100;
        z /= 108.883;
        x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
        y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
        z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
        const l = 116 * y - 16;
        const a = 500 * (x - y);
        const b = 200 * (y - z);
        return [l, a, b];
      };
      convert.hsl.rgb = function(hsl) {
        const h = hsl[0] / 360;
        const s = hsl[1] / 100;
        const l = hsl[2] / 100;
        let t22;
        let t32;
        let val;
        if (s === 0) {
          val = l * 255;
          return [val, val, val];
        }
        if (l < 0.5) {
          t22 = l * (1 + s);
        } else {
          t22 = l + s - l * s;
        }
        const t1 = 2 * l - t22;
        const rgb = [0, 0, 0];
        for (let i = 0; i < 3; i++) {
          t32 = h + 1 / 3 * -(i - 1);
          if (t32 < 0) {
            t32++;
          }
          if (t32 > 1) {
            t32--;
          }
          if (6 * t32 < 1) {
            val = t1 + (t22 - t1) * 6 * t32;
          } else if (2 * t32 < 1) {
            val = t22;
          } else if (3 * t32 < 2) {
            val = t1 + (t22 - t1) * (2 / 3 - t32) * 6;
          } else {
            val = t1;
          }
          rgb[i] = val * 255;
        }
        return rgb;
      };
      convert.hsl.hsv = function(hsl) {
        const h = hsl[0];
        let s = hsl[1] / 100;
        let l = hsl[2] / 100;
        let smin = s;
        const lmin = Math.max(l, 0.01);
        l *= 2;
        s *= l <= 1 ? l : 2 - l;
        smin *= lmin <= 1 ? lmin : 2 - lmin;
        const v = (l + s) / 2;
        const sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
        return [h, sv * 100, v * 100];
      };
      convert.hsv.rgb = function(hsv) {
        const h = hsv[0] / 60;
        const s = hsv[1] / 100;
        let v = hsv[2] / 100;
        const hi = Math.floor(h) % 6;
        const f = h - Math.floor(h);
        const p = 255 * v * (1 - s);
        const q = 255 * v * (1 - s * f);
        const t5 = 255 * v * (1 - s * (1 - f));
        v *= 255;
        switch (hi) {
          case 0:
            return [v, t5, p];
          case 1:
            return [q, v, p];
          case 2:
            return [p, v, t5];
          case 3:
            return [p, q, v];
          case 4:
            return [t5, p, v];
          case 5:
            return [v, p, q];
        }
      };
      convert.hsv.hsl = function(hsv) {
        const h = hsv[0];
        const s = hsv[1] / 100;
        const v = hsv[2] / 100;
        const vmin = Math.max(v, 0.01);
        let sl;
        let l;
        l = (2 - s) * v;
        const lmin = (2 - s) * vmin;
        sl = s * vmin;
        sl /= lmin <= 1 ? lmin : 2 - lmin;
        sl = sl || 0;
        l /= 2;
        return [h, sl * 100, l * 100];
      };
      convert.hwb.rgb = function(hwb) {
        const h = hwb[0] / 360;
        let wh = hwb[1] / 100;
        let bl = hwb[2] / 100;
        const ratio = wh + bl;
        let f;
        if (ratio > 1) {
          wh /= ratio;
          bl /= ratio;
        }
        const i = Math.floor(6 * h);
        const v = 1 - bl;
        f = 6 * h - i;
        if ((i & 1) !== 0) {
          f = 1 - f;
        }
        const n = wh + f * (v - wh);
        let r;
        let g;
        let b;
        switch (i) {
          default:
          case 6:
          case 0:
            r = v;
            g = n;
            b = wh;
            break;
          case 1:
            r = n;
            g = v;
            b = wh;
            break;
          case 2:
            r = wh;
            g = v;
            b = n;
            break;
          case 3:
            r = wh;
            g = n;
            b = v;
            break;
          case 4:
            r = n;
            g = wh;
            b = v;
            break;
          case 5:
            r = v;
            g = wh;
            b = n;
            break;
        }
        return [r * 255, g * 255, b * 255];
      };
      convert.cmyk.rgb = function(cmyk) {
        const c = cmyk[0] / 100;
        const m = cmyk[1] / 100;
        const y = cmyk[2] / 100;
        const k = cmyk[3] / 100;
        const r = 1 - Math.min(1, c * (1 - k) + k);
        const g = 1 - Math.min(1, m * (1 - k) + k);
        const b = 1 - Math.min(1, y * (1 - k) + k);
        return [r * 255, g * 255, b * 255];
      };
      convert.xyz.rgb = function(xyz) {
        const x = xyz[0] / 100;
        const y = xyz[1] / 100;
        const z = xyz[2] / 100;
        let r;
        let g;
        let b;
        r = x * 3.2406 + y * -1.5372 + z * -0.4986;
        g = x * -0.9689 + y * 1.8758 + z * 0.0415;
        b = x * 0.0557 + y * -0.204 + z * 1.057;
        r = r > 31308e-7 ? 1.055 * r ** (1 / 2.4) - 0.055 : r * 12.92;
        g = g > 31308e-7 ? 1.055 * g ** (1 / 2.4) - 0.055 : g * 12.92;
        b = b > 31308e-7 ? 1.055 * b ** (1 / 2.4) - 0.055 : b * 12.92;
        r = Math.min(Math.max(0, r), 1);
        g = Math.min(Math.max(0, g), 1);
        b = Math.min(Math.max(0, b), 1);
        return [r * 255, g * 255, b * 255];
      };
      convert.xyz.lab = function(xyz) {
        let x = xyz[0];
        let y = xyz[1];
        let z = xyz[2];
        x /= 95.047;
        y /= 100;
        z /= 108.883;
        x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
        y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
        z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
        const l = 116 * y - 16;
        const a = 500 * (x - y);
        const b = 200 * (y - z);
        return [l, a, b];
      };
      convert.lab.xyz = function(lab) {
        const l = lab[0];
        const a = lab[1];
        const b = lab[2];
        let x;
        let y;
        let z;
        y = (l + 16) / 116;
        x = a / 500 + y;
        z = y - b / 200;
        const y2 = y ** 3;
        const x2 = x ** 3;
        const z2 = z ** 3;
        y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
        x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
        z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
        x *= 95.047;
        y *= 100;
        z *= 108.883;
        return [x, y, z];
      };
      convert.lab.lch = function(lab) {
        const l = lab[0];
        const a = lab[1];
        const b = lab[2];
        let h;
        const hr = Math.atan2(b, a);
        h = hr * 360 / 2 / Math.PI;
        if (h < 0) {
          h += 360;
        }
        const c = Math.sqrt(a * a + b * b);
        return [l, c, h];
      };
      convert.lch.lab = function(lch) {
        const l = lch[0];
        const c = lch[1];
        const h = lch[2];
        const hr = h / 360 * 2 * Math.PI;
        const a = c * Math.cos(hr);
        const b = c * Math.sin(hr);
        return [l, a, b];
      };
      convert.rgb.ansi16 = function(args, saturation = null) {
        const [r, g, b] = args;
        let value = saturation === null ? convert.rgb.hsv(args)[2] : saturation;
        value = Math.round(value / 50);
        if (value === 0) {
          return 30;
        }
        let ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
        if (value === 2) {
          ansi += 60;
        }
        return ansi;
      };
      convert.hsv.ansi16 = function(args) {
        return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
      };
      convert.rgb.ansi256 = function(args) {
        const r = args[0];
        const g = args[1];
        const b = args[2];
        if (r === g && g === b) {
          if (r < 8) {
            return 16;
          }
          if (r > 248) {
            return 231;
          }
          return Math.round((r - 8) / 247 * 24) + 232;
        }
        const ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
        return ansi;
      };
      convert.ansi16.rgb = function(args) {
        let color = args % 10;
        if (color === 0 || color === 7) {
          if (args > 50) {
            color += 3.5;
          }
          color = color / 10.5 * 255;
          return [color, color, color];
        }
        const mult = (~~(args > 50) + 1) * 0.5;
        const r = (color & 1) * mult * 255;
        const g = (color >> 1 & 1) * mult * 255;
        const b = (color >> 2 & 1) * mult * 255;
        return [r, g, b];
      };
      convert.ansi256.rgb = function(args) {
        if (args >= 232) {
          const c = (args - 232) * 10 + 8;
          return [c, c, c];
        }
        args -= 16;
        let rem;
        const r = Math.floor(args / 36) / 5 * 255;
        const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
        const b = rem % 6 / 5 * 255;
        return [r, g, b];
      };
      convert.rgb.hex = function(args) {
        const integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
        const string = integer.toString(16).toUpperCase();
        return "000000".substring(string.length) + string;
      };
      convert.hex.rgb = function(args) {
        const match2 = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
        if (!match2) {
          return [0, 0, 0];
        }
        let colorString = match2[0];
        if (match2[0].length === 3) {
          colorString = colorString.split("").map((char) => {
            return char + char;
          }).join("");
        }
        const integer = parseInt(colorString, 16);
        const r = integer >> 16 & 255;
        const g = integer >> 8 & 255;
        const b = integer & 255;
        return [r, g, b];
      };
      convert.rgb.hcg = function(rgb) {
        const r = rgb[0] / 255;
        const g = rgb[1] / 255;
        const b = rgb[2] / 255;
        const max = Math.max(Math.max(r, g), b);
        const min = Math.min(Math.min(r, g), b);
        const chroma = max - min;
        let grayscale;
        let hue;
        if (chroma < 1) {
          grayscale = min / (1 - chroma);
        } else {
          grayscale = 0;
        }
        if (chroma <= 0) {
          hue = 0;
        } else if (max === r) {
          hue = (g - b) / chroma % 6;
        } else if (max === g) {
          hue = 2 + (b - r) / chroma;
        } else {
          hue = 4 + (r - g) / chroma;
        }
        hue /= 6;
        hue %= 1;
        return [hue * 360, chroma * 100, grayscale * 100];
      };
      convert.hsl.hcg = function(hsl) {
        const s = hsl[1] / 100;
        const l = hsl[2] / 100;
        const c = l < 0.5 ? 2 * s * l : 2 * s * (1 - l);
        let f = 0;
        if (c < 1) {
          f = (l - 0.5 * c) / (1 - c);
        }
        return [hsl[0], c * 100, f * 100];
      };
      convert.hsv.hcg = function(hsv) {
        const s = hsv[1] / 100;
        const v = hsv[2] / 100;
        const c = s * v;
        let f = 0;
        if (c < 1) {
          f = (v - c) / (1 - c);
        }
        return [hsv[0], c * 100, f * 100];
      };
      convert.hcg.rgb = function(hcg) {
        const h = hcg[0] / 360;
        const c = hcg[1] / 100;
        const g = hcg[2] / 100;
        if (c === 0) {
          return [g * 255, g * 255, g * 255];
        }
        const pure = [0, 0, 0];
        const hi = h % 1 * 6;
        const v = hi % 1;
        const w = 1 - v;
        let mg = 0;
        switch (Math.floor(hi)) {
          case 0:
            pure[0] = 1;
            pure[1] = v;
            pure[2] = 0;
            break;
          case 1:
            pure[0] = w;
            pure[1] = 1;
            pure[2] = 0;
            break;
          case 2:
            pure[0] = 0;
            pure[1] = 1;
            pure[2] = v;
            break;
          case 3:
            pure[0] = 0;
            pure[1] = w;
            pure[2] = 1;
            break;
          case 4:
            pure[0] = v;
            pure[1] = 0;
            pure[2] = 1;
            break;
          default:
            pure[0] = 1;
            pure[1] = 0;
            pure[2] = w;
        }
        mg = (1 - c) * g;
        return [
          (c * pure[0] + mg) * 255,
          (c * pure[1] + mg) * 255,
          (c * pure[2] + mg) * 255
        ];
      };
      convert.hcg.hsv = function(hcg) {
        const c = hcg[1] / 100;
        const g = hcg[2] / 100;
        const v = c + g * (1 - c);
        let f = 0;
        if (v > 0) {
          f = c / v;
        }
        return [hcg[0], f * 100, v * 100];
      };
      convert.hcg.hsl = function(hcg) {
        const c = hcg[1] / 100;
        const g = hcg[2] / 100;
        const l = g * (1 - c) + 0.5 * c;
        let s = 0;
        if (l > 0 && l < 0.5) {
          s = c / (2 * l);
        } else if (l >= 0.5 && l < 1) {
          s = c / (2 * (1 - l));
        }
        return [hcg[0], s * 100, l * 100];
      };
      convert.hcg.hwb = function(hcg) {
        const c = hcg[1] / 100;
        const g = hcg[2] / 100;
        const v = c + g * (1 - c);
        return [hcg[0], (v - c) * 100, (1 - v) * 100];
      };
      convert.hwb.hcg = function(hwb) {
        const w = hwb[1] / 100;
        const b = hwb[2] / 100;
        const v = 1 - b;
        const c = v - w;
        let g = 0;
        if (c < 1) {
          g = (v - c) / (1 - c);
        }
        return [hwb[0], c * 100, g * 100];
      };
      convert.apple.rgb = function(apple) {
        return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
      };
      convert.rgb.apple = function(rgb) {
        return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
      };
      convert.gray.rgb = function(args) {
        return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
      };
      convert.gray.hsl = function(args) {
        return [0, 0, args[0]];
      };
      convert.gray.hsv = convert.gray.hsl;
      convert.gray.hwb = function(gray) {
        return [0, 100, gray[0]];
      };
      convert.gray.cmyk = function(gray) {
        return [0, 0, 0, gray[0]];
      };
      convert.gray.lab = function(gray) {
        return [gray[0], 0, 0];
      };
      convert.gray.hex = function(gray) {
        const val = Math.round(gray[0] / 100 * 255) & 255;
        const integer = (val << 16) + (val << 8) + val;
        const string = integer.toString(16).toUpperCase();
        return "000000".substring(string.length) + string;
      };
      convert.rgb.gray = function(rgb) {
        const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
        return [val / 255 * 100];
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/color-convert-npm-2.0.1-79730e935b-79e6bdb9fd.zip/node_modules/color-convert/route.js
  var require_route = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/color-convert-npm-2.0.1-79730e935b-79e6bdb9fd.zip/node_modules/color-convert/route.js"(exports, module) {
      var conversions = require_conversions();
      function buildGraph() {
        const graph = {};
        const models = Object.keys(conversions);
        for (let len = models.length, i = 0; i < len; i++) {
          graph[models[i]] = {
            distance: -1,
            parent: null
          };
        }
        return graph;
      }
      function deriveBFS(fromModel) {
        const graph = buildGraph();
        const queue = [fromModel];
        graph[fromModel].distance = 0;
        while (queue.length) {
          const current = queue.pop();
          const adjacents = Object.keys(conversions[current]);
          for (let len = adjacents.length, i = 0; i < len; i++) {
            const adjacent = adjacents[i];
            const node = graph[adjacent];
            if (node.distance === -1) {
              node.distance = graph[current].distance + 1;
              node.parent = current;
              queue.unshift(adjacent);
            }
          }
        }
        return graph;
      }
      function link(from, to) {
        return function(args) {
          return to(from(args));
        };
      }
      function wrapConversion(toModel, graph) {
        const path3 = [graph[toModel].parent, toModel];
        let fn = conversions[graph[toModel].parent][toModel];
        let cur = graph[toModel].parent;
        while (graph[cur].parent) {
          path3.unshift(graph[cur].parent);
          fn = link(conversions[graph[cur].parent][cur], fn);
          cur = graph[cur].parent;
        }
        fn.conversion = path3;
        return fn;
      }
      module.exports = function(fromModel) {
        const graph = deriveBFS(fromModel);
        const conversion = {};
        const models = Object.keys(graph);
        for (let len = models.length, i = 0; i < len; i++) {
          const toModel = models[i];
          const node = graph[toModel];
          if (node.parent === null) {
            continue;
          }
          conversion[toModel] = wrapConversion(toModel, graph);
        }
        return conversion;
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/color-convert-npm-2.0.1-79730e935b-79e6bdb9fd.zip/node_modules/color-convert/index.js
  var require_color_convert = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/color-convert-npm-2.0.1-79730e935b-79e6bdb9fd.zip/node_modules/color-convert/index.js"(exports, module) {
      var conversions = require_conversions();
      var route = require_route();
      var convert = {};
      var models = Object.keys(conversions);
      function wrapRaw(fn) {
        const wrappedFn = function(...args) {
          const arg0 = args[0];
          if (arg0 === void 0 || arg0 === null) {
            return arg0;
          }
          if (arg0.length > 1) {
            args = arg0;
          }
          return fn(args);
        };
        if ("conversion" in fn) {
          wrappedFn.conversion = fn.conversion;
        }
        return wrappedFn;
      }
      function wrapRounded(fn) {
        const wrappedFn = function(...args) {
          const arg0 = args[0];
          if (arg0 === void 0 || arg0 === null) {
            return arg0;
          }
          if (arg0.length > 1) {
            args = arg0;
          }
          const result = fn(args);
          if (typeof result === "object") {
            for (let len = result.length, i = 0; i < len; i++) {
              result[i] = Math.round(result[i]);
            }
          }
          return result;
        };
        if ("conversion" in fn) {
          wrappedFn.conversion = fn.conversion;
        }
        return wrappedFn;
      }
      models.forEach((fromModel) => {
        convert[fromModel] = {};
        Object.defineProperty(convert[fromModel], "channels", {value: conversions[fromModel].channels});
        Object.defineProperty(convert[fromModel], "labels", {value: conversions[fromModel].labels});
        const routes = route(fromModel);
        const routeModels = Object.keys(routes);
        routeModels.forEach((toModel) => {
          const fn = routes[toModel];
          convert[fromModel][toModel] = wrapRounded(fn);
          convert[fromModel][toModel].raw = wrapRaw(fn);
        });
      });
      module.exports = convert;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/ansi-styles-npm-4.2.0-1fc112ccec-97f0f21a77.zip/node_modules/ansi-styles/index.js
  var require_ansi_styles = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/ansi-styles-npm-4.2.0-1fc112ccec-97f0f21a77.zip/node_modules/ansi-styles/index.js"(exports, module) {
      "use strict";
      var wrapAnsi16 = (fn, offset) => (...args) => {
        const code = fn(...args);
        return `[${code + offset}m`;
      };
      var wrapAnsi256 = (fn, offset) => (...args) => {
        const code = fn(...args);
        return `[${38 + offset};5;${code}m`;
      };
      var wrapAnsi16m = (fn, offset) => (...args) => {
        const rgb = fn(...args);
        return `[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
      };
      var ansi2ansi = (n) => n;
      var rgb2rgb = (r, g, b) => [r, g, b];
      var setLazyProperty = (object, property, get3) => {
        Object.defineProperty(object, property, {
          get: () => {
            const value = get3();
            Object.defineProperty(object, property, {
              value,
              enumerable: true,
              configurable: true
            });
            return value;
          },
          enumerable: true,
          configurable: true
        });
      };
      var colorConvert;
      var makeDynamicStyles = (wrap, targetSpace, identity, isBackground) => {
        if (colorConvert === void 0) {
          colorConvert = require_color_convert();
        }
        const offset = isBackground ? 10 : 0;
        const styles = {};
        for (const [sourceSpace, suite] of Object.entries(colorConvert)) {
          const name = sourceSpace === "ansi16" ? "ansi" : sourceSpace;
          if (sourceSpace === targetSpace) {
            styles[name] = wrap(identity, offset);
          } else if (typeof suite === "object") {
            styles[name] = wrap(suite[targetSpace], offset);
          }
        }
        return styles;
      };
      function assembleStyles() {
        const codes = new Map();
        const styles = {
          modifier: {
            reset: [0, 0],
            bold: [1, 22],
            dim: [2, 22],
            italic: [3, 23],
            underline: [4, 24],
            inverse: [7, 27],
            hidden: [8, 28],
            strikethrough: [9, 29]
          },
          color: {
            black: [30, 39],
            red: [31, 39],
            green: [32, 39],
            yellow: [33, 39],
            blue: [34, 39],
            magenta: [35, 39],
            cyan: [36, 39],
            white: [37, 39],
            blackBright: [90, 39],
            redBright: [91, 39],
            greenBright: [92, 39],
            yellowBright: [93, 39],
            blueBright: [94, 39],
            magentaBright: [95, 39],
            cyanBright: [96, 39],
            whiteBright: [97, 39]
          },
          bgColor: {
            bgBlack: [40, 49],
            bgRed: [41, 49],
            bgGreen: [42, 49],
            bgYellow: [43, 49],
            bgBlue: [44, 49],
            bgMagenta: [45, 49],
            bgCyan: [46, 49],
            bgWhite: [47, 49],
            bgBlackBright: [100, 49],
            bgRedBright: [101, 49],
            bgGreenBright: [102, 49],
            bgYellowBright: [103, 49],
            bgBlueBright: [104, 49],
            bgMagentaBright: [105, 49],
            bgCyanBright: [106, 49],
            bgWhiteBright: [107, 49]
          }
        };
        styles.color.gray = styles.color.blackBright;
        styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
        styles.color.grey = styles.color.blackBright;
        styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;
        for (const [groupName, group] of Object.entries(styles)) {
          for (const [styleName, style] of Object.entries(group)) {
            styles[styleName] = {
              open: `[${style[0]}m`,
              close: `[${style[1]}m`
            };
            group[styleName] = styles[styleName];
            codes.set(style[0], style[1]);
          }
          Object.defineProperty(styles, groupName, {
            value: group,
            enumerable: false
          });
        }
        Object.defineProperty(styles, "codes", {
          value: codes,
          enumerable: false
        });
        styles.color.close = "[39m";
        styles.bgColor.close = "[49m";
        setLazyProperty(styles.color, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, false));
        setLazyProperty(styles.color, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, false));
        setLazyProperty(styles.color, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, false));
        setLazyProperty(styles.bgColor, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, true));
        setLazyProperty(styles.bgColor, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, true));
        setLazyProperty(styles.bgColor, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, true));
        return styles;
      }
      Object.defineProperty(module, "exports", {
        enumerable: true,
        get: assembleStyles
      });
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/has-flag-npm-4.0.0-32af9f0536-261a135703.zip/node_modules/has-flag/index.js
  var require_has_flag = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/has-flag-npm-4.0.0-32af9f0536-261a135703.zip/node_modules/has-flag/index.js"(exports, module) {
      "use strict";
      module.exports = (flag, argv = process.argv) => {
        const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
        const position = argv.indexOf(prefix + flag);
        const terminatorPosition = argv.indexOf("--");
        return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/supports-color-npm-7.1.0-df2ba1e338-899480ac85.zip/node_modules/supports-color/index.js
  var require_supports_color = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/supports-color-npm-7.1.0-df2ba1e338-899480ac85.zip/node_modules/supports-color/index.js"(exports, module) {
      "use strict";
      var os2 = require("os");
      var tty = require("tty");
      var hasFlag = require_has_flag();
      var {env} = process;
      var forceColor;
      if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never")) {
        forceColor = 0;
      } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
        forceColor = 1;
      }
      if ("FORCE_COLOR" in env) {
        if (env.FORCE_COLOR === "true") {
          forceColor = 1;
        } else if (env.FORCE_COLOR === "false") {
          forceColor = 0;
        } else {
          forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
        }
      }
      function translateLevel(level) {
        if (level === 0) {
          return false;
        }
        return {
          level,
          hasBasic: true,
          has256: level >= 2,
          has16m: level >= 3
        };
      }
      function supportsColor2(haveStream, streamIsTTY) {
        if (forceColor === 0) {
          return 0;
        }
        if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
          return 3;
        }
        if (hasFlag("color=256")) {
          return 2;
        }
        if (haveStream && !streamIsTTY && forceColor === void 0) {
          return 0;
        }
        const min = forceColor || 0;
        if (env.TERM === "dumb") {
          return min;
        }
        if (process.platform === "win32") {
          const osRelease = os2.release().split(".");
          if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
            return Number(osRelease[2]) >= 14931 ? 3 : 2;
          }
          return 1;
        }
        if ("CI" in env) {
          if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some((sign) => sign in env) || env.CI_NAME === "codeship") {
            return 1;
          }
          return min;
        }
        if ("TEAMCITY_VERSION" in env) {
          return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
        }
        if ("GITHUB_ACTIONS" in env) {
          return 1;
        }
        if (env.COLORTERM === "truecolor") {
          return 3;
        }
        if ("TERM_PROGRAM" in env) {
          const version = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
          switch (env.TERM_PROGRAM) {
            case "iTerm.app":
              return version >= 3 ? 3 : 2;
            case "Apple_Terminal":
              return 2;
          }
        }
        if (/-256(color)?$/i.test(env.TERM)) {
          return 2;
        }
        if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
          return 1;
        }
        if ("COLORTERM" in env) {
          return 1;
        }
        return min;
      }
      function getSupportLevel(stream) {
        const level = supportsColor2(stream, stream && stream.isTTY);
        return translateLevel(level);
      }
      module.exports = {
        supportsColor: getSupportLevel,
        stdout: translateLevel(supportsColor2(true, tty.isatty(1))),
        stderr: translateLevel(supportsColor2(true, tty.isatty(2)))
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/chalk-npm-3.0.0-e813208025-8e3ddf3981.zip/node_modules/chalk/source/util.js
  var require_util = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/chalk-npm-3.0.0-e813208025-8e3ddf3981.zip/node_modules/chalk/source/util.js"(exports, module) {
      "use strict";
      var stringReplaceAll = (string, substring, replacer) => {
        let index = string.indexOf(substring);
        if (index === -1) {
          return string;
        }
        const substringLength = substring.length;
        let endIndex = 0;
        let returnValue = "";
        do {
          returnValue += string.substr(endIndex, index - endIndex) + substring + replacer;
          endIndex = index + substringLength;
          index = string.indexOf(substring, endIndex);
        } while (index !== -1);
        returnValue += string.substr(endIndex);
        return returnValue;
      };
      var stringEncaseCRLFWithFirstIndex = (string, prefix, postfix, index) => {
        let endIndex = 0;
        let returnValue = "";
        do {
          const gotCR = string[index - 1] === "\r";
          returnValue += string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? "\r\n" : "\n") + postfix;
          endIndex = index + 1;
          index = string.indexOf("\n", endIndex);
        } while (index !== -1);
        returnValue += string.substr(endIndex);
        return returnValue;
      };
      module.exports = {
        stringReplaceAll,
        stringEncaseCRLFWithFirstIndex
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/chalk-npm-3.0.0-e813208025-8e3ddf3981.zip/node_modules/chalk/source/templates.js
  var require_templates = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/chalk-npm-3.0.0-e813208025-8e3ddf3981.zip/node_modules/chalk/source/templates.js"(exports, module) {
      "use strict";
      var TEMPLATE_REGEX = /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
      var STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
      var STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
      var ESCAPE_REGEX = /\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.)|([^\\])/gi;
      var ESCAPES = new Map([
        ["n", "\n"],
        ["r", "\r"],
        ["t", "	"],
        ["b", "\b"],
        ["f", "\f"],
        ["v", "\v"],
        ["0", "\0"],
        ["\\", "\\"],
        ["e", ""],
        ["a", "\x07"]
      ]);
      function unescape(c) {
        const u = c[0] === "u";
        const bracket = c[1] === "{";
        if (u && !bracket && c.length === 5 || c[0] === "x" && c.length === 3) {
          return String.fromCharCode(parseInt(c.slice(1), 16));
        }
        if (u && bracket) {
          return String.fromCodePoint(parseInt(c.slice(2, -1), 16));
        }
        return ESCAPES.get(c) || c;
      }
      function parseArguments(name, arguments_) {
        const results = [];
        const chunks = arguments_.trim().split(/\s*,\s*/g);
        let matches;
        for (const chunk of chunks) {
          const number = Number(chunk);
          if (!Number.isNaN(number)) {
            results.push(number);
          } else if (matches = chunk.match(STRING_REGEX)) {
            results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, character) => escape ? unescape(escape) : character));
          } else {
            throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
          }
        }
        return results;
      }
      function parseStyle(style) {
        STYLE_REGEX.lastIndex = 0;
        const results = [];
        let matches;
        while ((matches = STYLE_REGEX.exec(style)) !== null) {
          const name = matches[1];
          if (matches[2]) {
            const args = parseArguments(name, matches[2]);
            results.push([name].concat(args));
          } else {
            results.push([name]);
          }
        }
        return results;
      }
      function buildStyle(chalk3, styles) {
        const enabled = {};
        for (const layer of styles) {
          for (const style of layer.styles) {
            enabled[style[0]] = layer.inverse ? null : style.slice(1);
          }
        }
        let current = chalk3;
        for (const [styleName, styles2] of Object.entries(enabled)) {
          if (!Array.isArray(styles2)) {
            continue;
          }
          if (!(styleName in current)) {
            throw new Error(`Unknown Chalk style: ${styleName}`);
          }
          current = styles2.length > 0 ? current[styleName](...styles2) : current[styleName];
        }
        return current;
      }
      module.exports = (chalk3, temporary) => {
        const styles = [];
        const chunks = [];
        let chunk = [];
        temporary.replace(TEMPLATE_REGEX, (m, escapeCharacter, inverse, style, close, character) => {
          if (escapeCharacter) {
            chunk.push(unescape(escapeCharacter));
          } else if (style) {
            const string = chunk.join("");
            chunk = [];
            chunks.push(styles.length === 0 ? string : buildStyle(chalk3, styles)(string));
            styles.push({inverse, styles: parseStyle(style)});
          } else if (close) {
            if (styles.length === 0) {
              throw new Error("Found extraneous } in Chalk template literal");
            }
            chunks.push(buildStyle(chalk3, styles)(chunk.join("")));
            chunk = [];
            styles.pop();
          } else {
            chunk.push(character);
          }
        });
        chunks.push(chunk.join(""));
        if (styles.length > 0) {
          const errMsg = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? "" : "s"} (\`}\`)`;
          throw new Error(errMsg);
        }
        return chunks.join("");
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/chalk-npm-3.0.0-e813208025-8e3ddf3981.zip/node_modules/chalk/source/index.js
  var require_source = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/chalk-npm-3.0.0-e813208025-8e3ddf3981.zip/node_modules/chalk/source/index.js"(exports, module) {
      "use strict";
      var ansiStyles = require_ansi_styles();
      var {stdout: stdoutColor, stderr: stderrColor} = require_supports_color();
      var {
        stringReplaceAll,
        stringEncaseCRLFWithFirstIndex
      } = require_util();
      var levelMapping = [
        "ansi",
        "ansi",
        "ansi256",
        "ansi16m"
      ];
      var styles = Object.create(null);
      var applyOptions = (object, options = {}) => {
        if (options.level > 3 || options.level < 0) {
          throw new Error("The `level` option should be an integer from 0 to 3");
        }
        const colorLevel = stdoutColor ? stdoutColor.level : 0;
        object.level = options.level === void 0 ? colorLevel : options.level;
      };
      var ChalkClass = class {
        constructor(options) {
          return chalkFactory(options);
        }
      };
      var chalkFactory = (options) => {
        const chalk4 = {};
        applyOptions(chalk4, options);
        chalk4.template = (...arguments_) => chalkTag(chalk4.template, ...arguments_);
        Object.setPrototypeOf(chalk4, Chalk.prototype);
        Object.setPrototypeOf(chalk4.template, chalk4);
        chalk4.template.constructor = () => {
          throw new Error("`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.");
        };
        chalk4.template.Instance = ChalkClass;
        return chalk4.template;
      };
      function Chalk(options) {
        return chalkFactory(options);
      }
      for (const [styleName, style] of Object.entries(ansiStyles)) {
        styles[styleName] = {
          get() {
            const builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);
            Object.defineProperty(this, styleName, {value: builder});
            return builder;
          }
        };
      }
      styles.visible = {
        get() {
          const builder = createBuilder(this, this._styler, true);
          Object.defineProperty(this, "visible", {value: builder});
          return builder;
        }
      };
      var usedModels = ["rgb", "hex", "keyword", "hsl", "hsv", "hwb", "ansi", "ansi256"];
      for (const model of usedModels) {
        styles[model] = {
          get() {
            const {level} = this;
            return function(...arguments_) {
              const styler = createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_), ansiStyles.color.close, this._styler);
              return createBuilder(this, styler, this._isEmpty);
            };
          }
        };
      }
      for (const model of usedModels) {
        const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
        styles[bgModel] = {
          get() {
            const {level} = this;
            return function(...arguments_) {
              const styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_), ansiStyles.bgColor.close, this._styler);
              return createBuilder(this, styler, this._isEmpty);
            };
          }
        };
      }
      var proto = Object.defineProperties(() => {
      }, __spreadProps(__spreadValues({}, styles), {
        level: {
          enumerable: true,
          get() {
            return this._generator.level;
          },
          set(level) {
            this._generator.level = level;
          }
        }
      }));
      var createStyler = (open, close, parent) => {
        let openAll;
        let closeAll;
        if (parent === void 0) {
          openAll = open;
          closeAll = close;
        } else {
          openAll = parent.openAll + open;
          closeAll = close + parent.closeAll;
        }
        return {
          open,
          close,
          openAll,
          closeAll,
          parent
        };
      };
      var createBuilder = (self2, _styler, _isEmpty) => {
        const builder = (...arguments_) => {
          return applyStyle2(builder, arguments_.length === 1 ? "" + arguments_[0] : arguments_.join(" "));
        };
        builder.__proto__ = proto;
        builder._generator = self2;
        builder._styler = _styler;
        builder._isEmpty = _isEmpty;
        return builder;
      };
      var applyStyle2 = (self2, string) => {
        if (self2.level <= 0 || !string) {
          return self2._isEmpty ? "" : string;
        }
        let styler = self2._styler;
        if (styler === void 0) {
          return string;
        }
        const {openAll, closeAll} = styler;
        if (string.indexOf("") !== -1) {
          while (styler !== void 0) {
            string = stringReplaceAll(string, styler.close, styler.open);
            styler = styler.parent;
          }
        }
        const lfIndex = string.indexOf("\n");
        if (lfIndex !== -1) {
          string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
        }
        return openAll + string + closeAll;
      };
      var template;
      var chalkTag = (chalk4, ...strings) => {
        const [firstString] = strings;
        if (!Array.isArray(firstString)) {
          return strings.join(" ");
        }
        const arguments_ = strings.slice(1);
        const parts = [firstString.raw[0]];
        for (let i = 1; i < firstString.length; i++) {
          parts.push(String(arguments_[i - 1]).replace(/[{}\\]/g, "\\$&"), String(firstString.raw[i]));
        }
        if (template === void 0) {
          template = require_templates();
        }
        return template(chalk4, parts.join(""));
      };
      Object.defineProperties(Chalk.prototype, styles);
      var chalk3 = Chalk();
      chalk3.supportsColor = stdoutColor;
      chalk3.stderr = Chalk({level: stderrColor ? stderrColor.level : 0});
      chalk3.stderr.supportsColor = stderrColor;
      chalk3.Level = {
        None: 0,
        Basic: 1,
        Ansi256: 2,
        TrueColor: 3,
        0: "None",
        1: "Basic",
        2: "Ansi256",
        3: "TrueColor"
      };
      module.exports = chalk3;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/ci-info-npm-2.0.0-78012236a1-3b374666a8.zip/node_modules/ci-info/vendors.json
  var require_vendors = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/ci-info-npm-2.0.0-78012236a1-3b374666a8.zip/node_modules/ci-info/vendors.json"(exports, module) {
      module.exports = [
        {
          name: "AppVeyor",
          constant: "APPVEYOR",
          env: "APPVEYOR",
          pr: "APPVEYOR_PULL_REQUEST_NUMBER"
        },
        {
          name: "Azure Pipelines",
          constant: "AZURE_PIPELINES",
          env: "SYSTEM_TEAMFOUNDATIONCOLLECTIONURI",
          pr: "SYSTEM_PULLREQUEST_PULLREQUESTID"
        },
        {
          name: "Bamboo",
          constant: "BAMBOO",
          env: "bamboo_planKey"
        },
        {
          name: "Bitbucket Pipelines",
          constant: "BITBUCKET",
          env: "BITBUCKET_COMMIT",
          pr: "BITBUCKET_PR_ID"
        },
        {
          name: "Bitrise",
          constant: "BITRISE",
          env: "BITRISE_IO",
          pr: "BITRISE_PULL_REQUEST"
        },
        {
          name: "Buddy",
          constant: "BUDDY",
          env: "BUDDY_WORKSPACE_ID",
          pr: "BUDDY_EXECUTION_PULL_REQUEST_ID"
        },
        {
          name: "Buildkite",
          constant: "BUILDKITE",
          env: "BUILDKITE",
          pr: {env: "BUILDKITE_PULL_REQUEST", ne: "false"}
        },
        {
          name: "CircleCI",
          constant: "CIRCLE",
          env: "CIRCLECI",
          pr: "CIRCLE_PULL_REQUEST"
        },
        {
          name: "Cirrus CI",
          constant: "CIRRUS",
          env: "CIRRUS_CI",
          pr: "CIRRUS_PR"
        },
        {
          name: "AWS CodeBuild",
          constant: "CODEBUILD",
          env: "CODEBUILD_BUILD_ARN"
        },
        {
          name: "Codeship",
          constant: "CODESHIP",
          env: {CI_NAME: "codeship"}
        },
        {
          name: "Drone",
          constant: "DRONE",
          env: "DRONE",
          pr: {DRONE_BUILD_EVENT: "pull_request"}
        },
        {
          name: "dsari",
          constant: "DSARI",
          env: "DSARI"
        },
        {
          name: "GitLab CI",
          constant: "GITLAB",
          env: "GITLAB_CI"
        },
        {
          name: "GoCD",
          constant: "GOCD",
          env: "GO_PIPELINE_LABEL"
        },
        {
          name: "Hudson",
          constant: "HUDSON",
          env: "HUDSON_URL"
        },
        {
          name: "Jenkins",
          constant: "JENKINS",
          env: ["JENKINS_URL", "BUILD_ID"],
          pr: {any: ["ghprbPullId", "CHANGE_ID"]}
        },
        {
          name: "Magnum CI",
          constant: "MAGNUM",
          env: "MAGNUM"
        },
        {
          name: "Netlify CI",
          constant: "NETLIFY",
          env: "NETLIFY_BUILD_BASE",
          pr: {env: "PULL_REQUEST", ne: "false"}
        },
        {
          name: "Sail CI",
          constant: "SAIL",
          env: "SAILCI",
          pr: "SAIL_PULL_REQUEST_NUMBER"
        },
        {
          name: "Semaphore",
          constant: "SEMAPHORE",
          env: "SEMAPHORE",
          pr: "PULL_REQUEST_NUMBER"
        },
        {
          name: "Shippable",
          constant: "SHIPPABLE",
          env: "SHIPPABLE",
          pr: {IS_PULL_REQUEST: "true"}
        },
        {
          name: "Solano CI",
          constant: "SOLANO",
          env: "TDDIUM",
          pr: "TDDIUM_PR_ID"
        },
        {
          name: "Strider CD",
          constant: "STRIDER",
          env: "STRIDER"
        },
        {
          name: "TaskCluster",
          constant: "TASKCLUSTER",
          env: ["TASK_ID", "RUN_ID"]
        },
        {
          name: "TeamCity",
          constant: "TEAMCITY",
          env: "TEAMCITY_VERSION"
        },
        {
          name: "Travis CI",
          constant: "TRAVIS",
          env: "TRAVIS",
          pr: {env: "TRAVIS_PULL_REQUEST", ne: "false"}
        }
      ];
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/ci-info-npm-2.0.0-78012236a1-3b374666a8.zip/node_modules/ci-info/index.js
  var require_ci_info = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/ci-info-npm-2.0.0-78012236a1-3b374666a8.zip/node_modules/ci-info/index.js"(exports) {
      "use strict";
      var vendors = require_vendors();
      var env = process.env;
      Object.defineProperty(exports, "_vendors", {
        value: vendors.map(function(v) {
          return v.constant;
        })
      });
      exports.name = null;
      exports.isPR = null;
      vendors.forEach(function(vendor) {
        var envs = Array.isArray(vendor.env) ? vendor.env : [vendor.env];
        var isCI4 = envs.every(function(obj) {
          return checkEnv(obj);
        });
        exports[vendor.constant] = isCI4;
        if (isCI4) {
          exports.name = vendor.name;
          switch (typeof vendor.pr) {
            case "string":
              exports.isPR = !!env[vendor.pr];
              break;
            case "object":
              if ("env" in vendor.pr) {
                exports.isPR = vendor.pr.env in env && env[vendor.pr.env] !== vendor.pr.ne;
              } else if ("any" in vendor.pr) {
                exports.isPR = vendor.pr.any.some(function(key) {
                  return !!env[key];
                });
              } else {
                exports.isPR = checkEnv(vendor.pr);
              }
              break;
            default:
              exports.isPR = null;
          }
        }
      });
      exports.isCI = !!(env.CI || env.CONTINUOUS_INTEGRATION || env.BUILD_NUMBER || env.RUN_ID || exports.name || false);
      function checkEnv(obj) {
        if (typeof obj === "string")
          return !!env[obj];
        return Object.keys(obj).every(function(k) {
          return env[k] === obj[k];
        });
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/ansi-regex-npm-5.0.0-9c076068d9-b1bb4e992a.zip/node_modules/ansi-regex/index.js
  var require_ansi_regex = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/ansi-regex-npm-5.0.0-9c076068d9-b1bb4e992a.zip/node_modules/ansi-regex/index.js"(exports, module) {
      "use strict";
      module.exports = ({onlyFirst = false} = {}) => {
        const pattern = [
          "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
          "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"
        ].join("|");
        return new RegExp(pattern, onlyFirst ? void 0 : "g");
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/strip-ansi-npm-6.0.0-904613e9eb-04c3239ede.zip/node_modules/strip-ansi/index.js
  var require_strip_ansi = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/strip-ansi-npm-6.0.0-904613e9eb-04c3239ede.zip/node_modules/strip-ansi/index.js"(exports, module) {
      "use strict";
      var ansiRegex = require_ansi_regex();
      module.exports = (string) => typeof string === "string" ? string.replace(ansiRegex(), "") : string;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/typanion-npm-3.3.0-9d1255e428-659a5dcd9c.zip/node_modules/typanion/lib/index.mjs
  var lib_exports = {};
  __export(lib_exports, {
    KeyRelationship: () => KeyRelationship,
    applyCascade: () => applyCascade,
    base64RegExp: () => base64RegExp,
    colorStringAlphaRegExp: () => colorStringAlphaRegExp,
    colorStringRegExp: () => colorStringRegExp,
    computeKey: () => computeKey,
    getPrintable: () => getPrintable,
    hasExactLength: () => hasExactLength,
    hasForbiddenKeys: () => hasForbiddenKeys,
    hasKeyRelationship: () => hasKeyRelationship,
    hasMaxLength: () => hasMaxLength,
    hasMinLength: () => hasMinLength,
    hasMutuallyExclusiveKeys: () => hasMutuallyExclusiveKeys,
    hasRequiredKeys: () => hasRequiredKeys,
    hasUniqueItems: () => hasUniqueItems,
    isArray: () => isArray,
    isAtLeast: () => isAtLeast,
    isAtMost: () => isAtMost,
    isBase64: () => isBase64,
    isBoolean: () => isBoolean,
    isDate: () => isDate2,
    isDict: () => isDict,
    isEnum: () => isEnum,
    isHexColor: () => isHexColor,
    isISO8601: () => isISO8601,
    isInExclusiveRange: () => isInExclusiveRange,
    isInInclusiveRange: () => isInInclusiveRange,
    isInstanceOf: () => isInstanceOf,
    isInteger: () => isInteger,
    isJSON: () => isJSON,
    isLiteral: () => isLiteral,
    isLowerCase: () => isLowerCase,
    isNegative: () => isNegative,
    isNullable: () => isNullable,
    isNumber: () => isNumber,
    isObject: () => isObject,
    isOneOf: () => isOneOf,
    isOptional: () => isOptional,
    isPositive: () => isPositive,
    isString: () => isString,
    isTuple: () => isTuple,
    isUUID4: () => isUUID4,
    isUnknown: () => isUnknown,
    isUpperCase: () => isUpperCase,
    iso8601RegExp: () => iso8601RegExp,
    makeCoercionFn: () => makeCoercionFn,
    makeSetter: () => makeSetter,
    makeTrait: () => makeTrait,
    makeValidator: () => makeValidator,
    matchesRegExp: () => matchesRegExp,
    plural: () => plural,
    pushError: () => pushError,
    simpleKeyRegExp: () => simpleKeyRegExp,
    uuid4RegExp: () => uuid4RegExp
  });
  function makeValidator({test}) {
    return makeTrait(test)();
  }
  function getPrintable(value) {
    if (value === null)
      return `null`;
    if (value === void 0)
      return `undefined`;
    if (value === ``)
      return `an empty string`;
    return JSON.stringify(value);
  }
  function computeKey(state, key) {
    var _a2, _b, _c;
    if (typeof key === `number`) {
      return `${(_a2 = state === null || state === void 0 ? void 0 : state.p) !== null && _a2 !== void 0 ? _a2 : `.`}[${key}]`;
    } else if (simpleKeyRegExp.test(key)) {
      return `${(_b = state === null || state === void 0 ? void 0 : state.p) !== null && _b !== void 0 ? _b : ``}.${key}`;
    } else {
      return `${(_c = state === null || state === void 0 ? void 0 : state.p) !== null && _c !== void 0 ? _c : `.`}[${JSON.stringify(key)}]`;
    }
  }
  function makeCoercionFn(target, key) {
    return (v) => {
      const previous = target[key];
      target[key] = v;
      return makeCoercionFn(target, key).bind(null, previous);
    };
  }
  function makeSetter(target, key) {
    return (v) => {
      target[key] = v;
    };
  }
  function plural(n, singular, plural2) {
    return n === 1 ? singular : plural2;
  }
  function pushError({errors: errors4, p} = {}, message) {
    errors4 === null || errors4 === void 0 ? void 0 : errors4.push(`${p !== null && p !== void 0 ? p : `.`}: ${message}`);
    return false;
  }
  function isLiteral(expected) {
    return makeValidator({
      test: (value, state) => {
        if (value !== expected)
          return pushError(state, `Expected a literal (got ${getPrintable(expected)})`);
        return true;
      }
    });
  }
  function isEnum(enumSpec) {
    const valuesArray = Array.isArray(enumSpec) ? enumSpec : Object.values(enumSpec);
    const values = new Set(valuesArray);
    return makeValidator({
      test: (value, state) => {
        if (!values.has(value))
          return pushError(state, `Expected a valid enumeration value (got ${getPrintable(value)})`);
        return true;
      }
    });
  }
  var simpleKeyRegExp, colorStringRegExp, colorStringAlphaRegExp, base64RegExp, uuid4RegExp, iso8601RegExp, makeTrait, isUnknown, isString, BOOLEAN_COERCIONS, isBoolean, isNumber, isDate2, isArray, isTuple, isDict, isObject, isInstanceOf, isOneOf, applyCascade, isOptional, isNullable, hasMinLength, hasMaxLength, hasExactLength, hasUniqueItems, isNegative, isPositive, isAtLeast, isAtMost, isInInclusiveRange, isInExclusiveRange, isInteger, matchesRegExp, isLowerCase, isUpperCase, isUUID4, isISO8601, isHexColor, isBase64, isJSON, hasRequiredKeys, hasForbiddenKeys, hasMutuallyExclusiveKeys, KeyRelationship, keyRelationships, hasKeyRelationship;
  var init_lib = __esm({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/typanion-npm-3.3.0-9d1255e428-659a5dcd9c.zip/node_modules/typanion/lib/index.mjs"() {
      simpleKeyRegExp = /^[a-zA-Z_][a-zA-Z0-9_]*$/;
      colorStringRegExp = /^#[0-9a-f]{6}$/i;
      colorStringAlphaRegExp = /^#[0-9a-f]{6}([0-9a-f]{2})?$/i;
      base64RegExp = /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/;
      uuid4RegExp = /^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$/i;
      iso8601RegExp = /^(?:[1-9]\d{3}(-?)(?:(?:0[1-9]|1[0-2])\1(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])\1(?:29|30)|(?:0[13578]|1[02])(?:\1)31|00[1-9]|0[1-9]\d|[12]\d{2}|3(?:[0-5]\d|6[0-5]))|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)(?:(-?)02(?:\2)29|-?366))T(?:[01]\d|2[0-3])(:?)[0-5]\d(?:\3[0-5]\d)?(?:Z|[+-][01]\d(?:\3[0-5]\d)?)$/;
      makeTrait = (value) => () => {
        return value;
      };
      isUnknown = () => makeValidator({
        test: (value, state) => {
          return true;
        }
      });
      isString = () => makeValidator({
        test: (value, state) => {
          if (typeof value !== `string`)
            return pushError(state, `Expected a string (got ${getPrintable(value)})`);
          return true;
        }
      });
      BOOLEAN_COERCIONS = new Map([
        [`true`, true],
        [`True`, true],
        [`1`, true],
        [1, true],
        [`false`, false],
        [`False`, false],
        [`0`, false],
        [0, false]
      ]);
      isBoolean = () => makeValidator({
        test: (value, state) => {
          var _a2;
          if (typeof value !== `boolean`) {
            if (typeof (state === null || state === void 0 ? void 0 : state.coercions) !== `undefined`) {
              if (typeof (state === null || state === void 0 ? void 0 : state.coercion) === `undefined`)
                return pushError(state, `Unbound coercion result`);
              const coercion = BOOLEAN_COERCIONS.get(value);
              if (typeof coercion !== `undefined`) {
                state.coercions.push([(_a2 = state.p) !== null && _a2 !== void 0 ? _a2 : `.`, state.coercion.bind(null, coercion)]);
                return true;
              }
            }
            return pushError(state, `Expected a boolean (got ${getPrintable(value)})`);
          }
          return true;
        }
      });
      isNumber = () => makeValidator({
        test: (value, state) => {
          var _a2;
          if (typeof value !== `number`) {
            if (typeof (state === null || state === void 0 ? void 0 : state.coercions) !== `undefined`) {
              if (typeof (state === null || state === void 0 ? void 0 : state.coercion) === `undefined`)
                return pushError(state, `Unbound coercion result`);
              let coercion;
              if (typeof value === `string`) {
                let val;
                try {
                  val = JSON.parse(value);
                } catch (_b) {
                }
                if (typeof val === `number`) {
                  if (JSON.stringify(val) === value) {
                    coercion = val;
                  } else {
                    return pushError(state, `Received a number that can't be safely represented by the runtime (${value})`);
                  }
                }
              }
              if (typeof coercion !== `undefined`) {
                state.coercions.push([(_a2 = state.p) !== null && _a2 !== void 0 ? _a2 : `.`, state.coercion.bind(null, coercion)]);
                return true;
              }
            }
            return pushError(state, `Expected a number (got ${getPrintable(value)})`);
          }
          return true;
        }
      });
      isDate2 = () => makeValidator({
        test: (value, state) => {
          var _a2;
          if (!(value instanceof Date)) {
            if (typeof (state === null || state === void 0 ? void 0 : state.coercions) !== `undefined`) {
              if (typeof (state === null || state === void 0 ? void 0 : state.coercion) === `undefined`)
                return pushError(state, `Unbound coercion result`);
              let coercion;
              if (typeof value === `string` && iso8601RegExp.test(value)) {
                coercion = new Date(value);
              } else {
                let timestamp;
                if (typeof value === `string`) {
                  let val;
                  try {
                    val = JSON.parse(value);
                  } catch (_b) {
                  }
                  if (typeof val === `number`) {
                    timestamp = val;
                  }
                } else if (typeof value === `number`) {
                  timestamp = value;
                }
                if (typeof timestamp !== `undefined`) {
                  if (Number.isSafeInteger(timestamp) || !Number.isSafeInteger(timestamp * 1e3)) {
                    coercion = new Date(timestamp * 1e3);
                  } else {
                    return pushError(state, `Received a timestamp that can't be safely represented by the runtime (${value})`);
                  }
                }
              }
              if (typeof coercion !== `undefined`) {
                state.coercions.push([(_a2 = state.p) !== null && _a2 !== void 0 ? _a2 : `.`, state.coercion.bind(null, coercion)]);
                return true;
              }
            }
            return pushError(state, `Expected a date (got ${getPrintable(value)})`);
          }
          return true;
        }
      });
      isArray = (spec, {delimiter} = {}) => makeValidator({
        test: (value, state) => {
          var _a2;
          if (typeof value === `string` && typeof delimiter !== `undefined`) {
            if (typeof (state === null || state === void 0 ? void 0 : state.coercions) !== `undefined`) {
              if (typeof (state === null || state === void 0 ? void 0 : state.coercion) === `undefined`)
                return pushError(state, `Unbound coercion result`);
              value = value.split(delimiter);
              state.coercions.push([(_a2 = state.p) !== null && _a2 !== void 0 ? _a2 : `.`, state.coercion.bind(null, value)]);
            }
          }
          if (!Array.isArray(value))
            return pushError(state, `Expected an array (got ${getPrintable(value)})`);
          let valid = true;
          for (let t5 = 0, T = value.length; t5 < T; ++t5) {
            valid = spec(value[t5], Object.assign(Object.assign({}, state), {p: computeKey(state, t5), coercion: makeCoercionFn(value, t5)})) && valid;
            if (!valid && (state === null || state === void 0 ? void 0 : state.errors) == null) {
              break;
            }
          }
          return valid;
        }
      });
      isTuple = (spec, {delimiter} = {}) => {
        const lengthValidator = hasExactLength(spec.length);
        return makeValidator({
          test: (value, state) => {
            var _a2;
            if (typeof value === `string` && typeof delimiter !== `undefined`) {
              if (typeof (state === null || state === void 0 ? void 0 : state.coercions) !== `undefined`) {
                if (typeof (state === null || state === void 0 ? void 0 : state.coercion) === `undefined`)
                  return pushError(state, `Unbound coercion result`);
                value = value.split(delimiter);
                state.coercions.push([(_a2 = state.p) !== null && _a2 !== void 0 ? _a2 : `.`, state.coercion.bind(null, value)]);
              }
            }
            if (!Array.isArray(value))
              return pushError(state, `Expected a tuple (got ${getPrintable(value)})`);
            let valid = lengthValidator(value, Object.assign({}, state));
            for (let t5 = 0, T = value.length; t5 < T && t5 < spec.length; ++t5) {
              valid = spec[t5](value[t5], Object.assign(Object.assign({}, state), {p: computeKey(state, t5), coercion: makeCoercionFn(value, t5)})) && valid;
              if (!valid && (state === null || state === void 0 ? void 0 : state.errors) == null) {
                break;
              }
            }
            return valid;
          }
        });
      };
      isDict = (spec, {keys: keySpec = null} = {}) => makeValidator({
        test: (value, state) => {
          if (typeof value !== `object` || value === null)
            return pushError(state, `Expected an object (got ${getPrintable(value)})`);
          const keys = Object.keys(value);
          let valid = true;
          for (let t5 = 0, T = keys.length && (valid || (state === null || state === void 0 ? void 0 : state.errors) != null); t5 < T; ++t5) {
            const key = keys[t5];
            const sub = value[key];
            if (key === `__proto__` || key === `constructor`) {
              valid = pushError(Object.assign(Object.assign({}, state), {p: computeKey(state, key)}), `Unsafe property name`);
              continue;
            }
            if (keySpec !== null && !keySpec(key, state)) {
              valid = false;
              continue;
            }
            if (!spec(sub, Object.assign(Object.assign({}, state), {p: computeKey(state, key), coercion: makeCoercionFn(value, key)}))) {
              valid = false;
              continue;
            }
          }
          return valid;
        }
      });
      isObject = (props, {extra: extraSpec = null} = {}) => {
        const specKeys = Object.keys(props);
        return makeValidator({
          test: (value, state) => {
            if (typeof value !== `object` || value === null)
              return pushError(state, `Expected an object (got ${getPrintable(value)})`);
            const keys = new Set([...specKeys, ...Object.keys(value)]);
            const extra = {};
            let valid = true;
            for (const key of keys) {
              if (key === `constructor` || key === `__proto__`) {
                valid = pushError(Object.assign(Object.assign({}, state), {p: computeKey(state, key)}), `Unsafe property name`);
              } else {
                const spec = Object.prototype.hasOwnProperty.call(props, key) ? props[key] : void 0;
                const sub = Object.prototype.hasOwnProperty.call(value, key) ? value[key] : void 0;
                if (typeof spec !== `undefined`) {
                  valid = spec(sub, Object.assign(Object.assign({}, state), {p: computeKey(state, key), coercion: makeCoercionFn(value, key)})) && valid;
                } else if (extraSpec === null) {
                  valid = pushError(Object.assign(Object.assign({}, state), {p: computeKey(state, key)}), `Extraneous property (got ${getPrintable(sub)})`);
                } else {
                  Object.defineProperty(extra, key, {
                    enumerable: true,
                    get: () => sub,
                    set: makeSetter(value, key)
                  });
                }
              }
              if (!valid && (state === null || state === void 0 ? void 0 : state.errors) == null) {
                break;
              }
            }
            if (extraSpec !== null && (valid || (state === null || state === void 0 ? void 0 : state.errors) != null))
              valid = extraSpec(extra, state) && valid;
            return valid;
          }
        });
      };
      isInstanceOf = (constructor) => makeValidator({
        test: (value, state) => {
          if (!(value instanceof constructor))
            return pushError(state, `Expected an instance of ${constructor.name} (got ${getPrintable(value)})`);
          return true;
        }
      });
      isOneOf = (specs, {exclusive = false} = {}) => makeValidator({
        test: (value, state) => {
          var _a2, _b, _c;
          const matches = [];
          const errorBuffer = typeof (state === null || state === void 0 ? void 0 : state.errors) !== `undefined` ? [] : void 0;
          for (let t5 = 0, T = specs.length; t5 < T; ++t5) {
            const subErrors = typeof (state === null || state === void 0 ? void 0 : state.errors) !== `undefined` ? [] : void 0;
            const subCoercions = typeof (state === null || state === void 0 ? void 0 : state.coercions) !== `undefined` ? [] : void 0;
            if (specs[t5](value, Object.assign(Object.assign({}, state), {errors: subErrors, coercions: subCoercions, p: `${(_a2 = state === null || state === void 0 ? void 0 : state.p) !== null && _a2 !== void 0 ? _a2 : `.`}#${t5 + 1}`}))) {
              matches.push([`#${t5 + 1}`, subCoercions]);
              if (!exclusive) {
                break;
              }
            } else {
              errorBuffer === null || errorBuffer === void 0 ? void 0 : errorBuffer.push(subErrors[0]);
            }
          }
          if (matches.length === 1) {
            const [, subCoercions] = matches[0];
            if (typeof subCoercions !== `undefined`)
              (_b = state === null || state === void 0 ? void 0 : state.coercions) === null || _b === void 0 ? void 0 : _b.push(...subCoercions);
            return true;
          }
          if (matches.length > 1)
            pushError(state, `Expected to match exactly a single predicate (matched ${matches.join(`, `)})`);
          else
            (_c = state === null || state === void 0 ? void 0 : state.errors) === null || _c === void 0 ? void 0 : _c.push(...errorBuffer);
          return false;
        }
      });
      applyCascade = (spec, followups) => makeValidator({
        test: (value, state) => {
          var _a2, _b;
          const context = {value};
          const subCoercion = typeof (state === null || state === void 0 ? void 0 : state.coercions) !== `undefined` ? makeCoercionFn(context, `value`) : void 0;
          const subCoercions = typeof (state === null || state === void 0 ? void 0 : state.coercions) !== `undefined` ? [] : void 0;
          if (!spec(value, Object.assign(Object.assign({}, state), {coercion: subCoercion, coercions: subCoercions})))
            return false;
          const reverts = [];
          if (typeof subCoercions !== `undefined`)
            for (const [, coercion] of subCoercions)
              reverts.push(coercion());
          try {
            if (typeof (state === null || state === void 0 ? void 0 : state.coercions) !== `undefined`) {
              if (context.value !== value) {
                if (typeof (state === null || state === void 0 ? void 0 : state.coercion) === `undefined`)
                  return pushError(state, `Unbound coercion result`);
                state.coercions.push([(_a2 = state.p) !== null && _a2 !== void 0 ? _a2 : `.`, state.coercion.bind(null, context.value)]);
              }
              (_b = state === null || state === void 0 ? void 0 : state.coercions) === null || _b === void 0 ? void 0 : _b.push(...subCoercions);
            }
            return followups.every((spec2) => {
              return spec2(context.value, state);
            });
          } finally {
            for (const revert of reverts) {
              revert();
            }
          }
        }
      });
      isOptional = (spec) => makeValidator({
        test: (value, state) => {
          if (typeof value === `undefined`)
            return true;
          return spec(value, state);
        }
      });
      isNullable = (spec) => makeValidator({
        test: (value, state) => {
          if (value === null)
            return true;
          return spec(value, state);
        }
      });
      hasMinLength = (length) => makeValidator({
        test: (value, state) => {
          if (!(value.length >= length))
            return pushError(state, `Expected to have a length of at least ${length} elements (got ${value.length})`);
          return true;
        }
      });
      hasMaxLength = (length) => makeValidator({
        test: (value, state) => {
          if (!(value.length <= length))
            return pushError(state, `Expected to have a length of at most ${length} elements (got ${value.length})`);
          return true;
        }
      });
      hasExactLength = (length) => makeValidator({
        test: (value, state) => {
          if (!(value.length === length))
            return pushError(state, `Expected to have a length of exactly ${length} elements (got ${value.length})`);
          return true;
        }
      });
      hasUniqueItems = ({map} = {}) => makeValidator({
        test: (value, state) => {
          const set = new Set();
          const dup = new Set();
          for (let t5 = 0, T = value.length; t5 < T; ++t5) {
            const sub = value[t5];
            const key = typeof map !== `undefined` ? map(sub) : sub;
            if (set.has(key)) {
              if (dup.has(key))
                continue;
              pushError(state, `Expected to contain unique elements; got a duplicate with ${getPrintable(value)}`);
              dup.add(key);
            } else {
              set.add(key);
            }
          }
          return dup.size === 0;
        }
      });
      isNegative = () => makeValidator({
        test: (value, state) => {
          if (!(value <= 0))
            return pushError(state, `Expected to be negative (got ${value})`);
          return true;
        }
      });
      isPositive = () => makeValidator({
        test: (value, state) => {
          if (!(value >= 0))
            return pushError(state, `Expected to be positive (got ${value})`);
          return true;
        }
      });
      isAtLeast = (n) => makeValidator({
        test: (value, state) => {
          if (!(value >= n))
            return pushError(state, `Expected to be at least ${n} (got ${value})`);
          return true;
        }
      });
      isAtMost = (n) => makeValidator({
        test: (value, state) => {
          if (!(value <= n))
            return pushError(state, `Expected to be at most ${n} (got ${value})`);
          return true;
        }
      });
      isInInclusiveRange = (a, b) => makeValidator({
        test: (value, state) => {
          if (!(value >= a && value <= b))
            return pushError(state, `Expected to be in the [${a}; ${b}] range (got ${value})`);
          return true;
        }
      });
      isInExclusiveRange = (a, b) => makeValidator({
        test: (value, state) => {
          if (!(value >= a && value < b))
            return pushError(state, `Expected to be in the [${a}; ${b}[ range (got ${value})`);
          return true;
        }
      });
      isInteger = ({unsafe = false} = {}) => makeValidator({
        test: (value, state) => {
          if (value !== Math.round(value))
            return pushError(state, `Expected to be an integer (got ${value})`);
          if (!Number.isSafeInteger(value))
            return pushError(state, `Expected to be a safe integer (got ${value})`);
          return true;
        }
      });
      matchesRegExp = (regExp) => makeValidator({
        test: (value, state) => {
          if (!regExp.test(value))
            return pushError(state, `Expected to match the pattern ${regExp.toString()} (got ${getPrintable(value)})`);
          return true;
        }
      });
      isLowerCase = () => makeValidator({
        test: (value, state) => {
          if (value !== value.toLowerCase())
            return pushError(state, `Expected to be all-lowercase (got ${value})`);
          return true;
        }
      });
      isUpperCase = () => makeValidator({
        test: (value, state) => {
          if (value !== value.toUpperCase())
            return pushError(state, `Expected to be all-uppercase (got ${value})`);
          return true;
        }
      });
      isUUID4 = () => makeValidator({
        test: (value, state) => {
          if (!uuid4RegExp.test(value))
            return pushError(state, `Expected to be a valid UUID v4 (got ${getPrintable(value)})`);
          return true;
        }
      });
      isISO8601 = () => makeValidator({
        test: (value, state) => {
          if (!iso8601RegExp.test(value))
            return pushError(state, `Expected to be a valid ISO 8601 date string (got ${getPrintable(value)})`);
          return false;
        }
      });
      isHexColor = ({alpha = false}) => makeValidator({
        test: (value, state) => {
          const res = alpha ? colorStringRegExp.test(value) : colorStringAlphaRegExp.test(value);
          if (!res)
            return pushError(state, `Expected to be a valid hexadecimal color string (got ${getPrintable(value)})`);
          return true;
        }
      });
      isBase64 = () => makeValidator({
        test: (value, state) => {
          if (!base64RegExp.test(value))
            return pushError(state, `Expected to be a valid base 64 string (got ${getPrintable(value)})`);
          return true;
        }
      });
      isJSON = (spec = isUnknown()) => makeValidator({
        test: (value, state) => {
          let data;
          try {
            data = JSON.parse(value);
          } catch (_a2) {
            return pushError(state, `Expected to be a valid JSON string (got ${getPrintable(value)})`);
          }
          return spec(data, state);
        }
      });
      hasRequiredKeys = (requiredKeys) => {
        const requiredSet = new Set(requiredKeys);
        return makeValidator({
          test: (value, state) => {
            const keys = new Set(Object.keys(value));
            const problems = [];
            for (const key of requiredSet)
              if (!keys.has(key))
                problems.push(key);
            if (problems.length > 0)
              return pushError(state, `Missing required ${plural(problems.length, `property`, `properties`)} ${problems.map((name) => `"${name}"`).join(`, `)}`);
            return true;
          }
        });
      };
      hasForbiddenKeys = (forbiddenKeys) => {
        const forbiddenSet = new Set(forbiddenKeys);
        return makeValidator({
          test: (value, state) => {
            const keys = new Set(Object.keys(value));
            const problems = [];
            for (const key of forbiddenSet)
              if (keys.has(key))
                problems.push(key);
            if (problems.length > 0)
              return pushError(state, `Forbidden ${plural(problems.length, `property`, `properties`)} ${problems.map((name) => `"${name}"`).join(`, `)}`);
            return true;
          }
        });
      };
      hasMutuallyExclusiveKeys = (exclusiveKeys) => {
        const exclusiveSet = new Set(exclusiveKeys);
        return makeValidator({
          test: (value, state) => {
            const keys = new Set(Object.keys(value));
            const used = [];
            for (const key of exclusiveSet)
              if (keys.has(key))
                used.push(key);
            if (used.length > 1)
              return pushError(state, `Mutually exclusive properties ${used.map((name) => `"${name}"`).join(`, `)}`);
            return true;
          }
        });
      };
      (function(KeyRelationship2) {
        KeyRelationship2["Forbids"] = "Forbids";
        KeyRelationship2["Requires"] = "Requires";
      })(KeyRelationship || (KeyRelationship = {}));
      keyRelationships = {
        [KeyRelationship.Forbids]: {
          expect: false,
          message: `forbids using`
        },
        [KeyRelationship.Requires]: {
          expect: true,
          message: `requires using`
        }
      };
      hasKeyRelationship = (subject, relationship, others, {ignore = []} = {}) => {
        const skipped = new Set(ignore);
        const otherSet = new Set(others);
        const spec = keyRelationships[relationship];
        return makeValidator({
          test: (value, state) => {
            const keys = new Set(Object.keys(value));
            if (!keys.has(subject) || skipped.has(value[subject]))
              return true;
            const problems = [];
            for (const key of otherSet)
              if ((keys.has(key) && !skipped.has(value[key])) !== spec.expect)
                problems.push(key);
            if (problems.length >= 1)
              return pushError(state, `Property "${subject}" ${spec.message} ${plural(problems.length, `property`, `properties`)} ${problems.map((name) => `"${name}"`).join(`, `)}`);
            return true;
          }
        });
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/braces-npm-3.0.2-782240b28a-e2a8e769a8.zip/node_modules/braces/lib/utils.js
  var require_utils = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/braces-npm-3.0.2-782240b28a-e2a8e769a8.zip/node_modules/braces/lib/utils.js"(exports) {
      "use strict";
      exports.isInteger = (num) => {
        if (typeof num === "number") {
          return Number.isInteger(num);
        }
        if (typeof num === "string" && num.trim() !== "") {
          return Number.isInteger(Number(num));
        }
        return false;
      };
      exports.find = (node, type) => node.nodes.find((node2) => node2.type === type);
      exports.exceedsLimit = (min, max, step = 1, limit) => {
        if (limit === false)
          return false;
        if (!exports.isInteger(min) || !exports.isInteger(max))
          return false;
        return (Number(max) - Number(min)) / Number(step) >= limit;
      };
      exports.escapeNode = (block, n = 0, type) => {
        let node = block.nodes[n];
        if (!node)
          return;
        if (type && node.type === type || node.type === "open" || node.type === "close") {
          if (node.escaped !== true) {
            node.value = "\\" + node.value;
            node.escaped = true;
          }
        }
      };
      exports.encloseBrace = (node) => {
        if (node.type !== "brace")
          return false;
        if (node.commas >> 0 + node.ranges >> 0 === 0) {
          node.invalid = true;
          return true;
        }
        return false;
      };
      exports.isInvalidBrace = (block) => {
        if (block.type !== "brace")
          return false;
        if (block.invalid === true || block.dollar)
          return true;
        if (block.commas >> 0 + block.ranges >> 0 === 0) {
          block.invalid = true;
          return true;
        }
        if (block.open !== true || block.close !== true) {
          block.invalid = true;
          return true;
        }
        return false;
      };
      exports.isOpenOrClose = (node) => {
        if (node.type === "open" || node.type === "close") {
          return true;
        }
        return node.open === true || node.close === true;
      };
      exports.reduce = (nodes) => nodes.reduce((acc, node) => {
        if (node.type === "text")
          acc.push(node.value);
        if (node.type === "range")
          node.type = "text";
        return acc;
      }, []);
      exports.flatten = (...args) => {
        const result = [];
        const flat = (arr) => {
          for (let i = 0; i < arr.length; i++) {
            let ele = arr[i];
            Array.isArray(ele) ? flat(ele, result) : ele !== void 0 && result.push(ele);
          }
          return result;
        };
        flat(args);
        return result;
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/braces-npm-3.0.2-782240b28a-e2a8e769a8.zip/node_modules/braces/lib/stringify.js
  var require_stringify = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/braces-npm-3.0.2-782240b28a-e2a8e769a8.zip/node_modules/braces/lib/stringify.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      module.exports = (ast, options = {}) => {
        let stringify = (node, parent = {}) => {
          let invalidBlock = options.escapeInvalid && utils.isInvalidBrace(parent);
          let invalidNode = node.invalid === true && options.escapeInvalid === true;
          let output = "";
          if (node.value) {
            if ((invalidBlock || invalidNode) && utils.isOpenOrClose(node)) {
              return "\\" + node.value;
            }
            return node.value;
          }
          if (node.value) {
            return node.value;
          }
          if (node.nodes) {
            for (let child of node.nodes) {
              output += stringify(child);
            }
          }
          return output;
        };
        return stringify(ast);
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/is-number-npm-7.0.0-060086935c-456ac6f8e0.zip/node_modules/is-number/index.js
  var require_is_number = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/is-number-npm-7.0.0-060086935c-456ac6f8e0.zip/node_modules/is-number/index.js"(exports, module) {
      "use strict";
      module.exports = function(num) {
        if (typeof num === "number") {
          return num - num === 0;
        }
        if (typeof num === "string" && num.trim() !== "") {
          return Number.isFinite ? Number.isFinite(+num) : isFinite(+num);
        }
        return false;
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/to-regex-range-npm-5.0.1-f1e8263b00-f76fa01b3d.zip/node_modules/to-regex-range/index.js
  var require_to_regex_range = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/to-regex-range-npm-5.0.1-f1e8263b00-f76fa01b3d.zip/node_modules/to-regex-range/index.js"(exports, module) {
      "use strict";
      var isNumber2 = require_is_number();
      var toRegexRange = (min, max, options) => {
        if (isNumber2(min) === false) {
          throw new TypeError("toRegexRange: expected the first argument to be a number");
        }
        if (max === void 0 || min === max) {
          return String(min);
        }
        if (isNumber2(max) === false) {
          throw new TypeError("toRegexRange: expected the second argument to be a number.");
        }
        let opts = __spreadValues({relaxZeros: true}, options);
        if (typeof opts.strictZeros === "boolean") {
          opts.relaxZeros = opts.strictZeros === false;
        }
        let relax = String(opts.relaxZeros);
        let shorthand = String(opts.shorthand);
        let capture = String(opts.capture);
        let wrap = String(opts.wrap);
        let cacheKey = min + ":" + max + "=" + relax + shorthand + capture + wrap;
        if (toRegexRange.cache.hasOwnProperty(cacheKey)) {
          return toRegexRange.cache[cacheKey].result;
        }
        let a = Math.min(min, max);
        let b = Math.max(min, max);
        if (Math.abs(a - b) === 1) {
          let result = min + "|" + max;
          if (opts.capture) {
            return `(${result})`;
          }
          if (opts.wrap === false) {
            return result;
          }
          return `(?:${result})`;
        }
        let isPadded = hasPadding(min) || hasPadding(max);
        let state = {min, max, a, b};
        let positives = [];
        let negatives = [];
        if (isPadded) {
          state.isPadded = isPadded;
          state.maxLen = String(state.max).length;
        }
        if (a < 0) {
          let newMin = b < 0 ? Math.abs(b) : 1;
          negatives = splitToPatterns(newMin, Math.abs(a), state, opts);
          a = state.a = 0;
        }
        if (b >= 0) {
          positives = splitToPatterns(a, b, state, opts);
        }
        state.negatives = negatives;
        state.positives = positives;
        state.result = collatePatterns(negatives, positives, opts);
        if (opts.capture === true) {
          state.result = `(${state.result})`;
        } else if (opts.wrap !== false && positives.length + negatives.length > 1) {
          state.result = `(?:${state.result})`;
        }
        toRegexRange.cache[cacheKey] = state;
        return state.result;
      };
      function collatePatterns(neg, pos, options) {
        let onlyNegative = filterPatterns(neg, pos, "-", false, options) || [];
        let onlyPositive = filterPatterns(pos, neg, "", false, options) || [];
        let intersected = filterPatterns(neg, pos, "-?", true, options) || [];
        let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive);
        return subpatterns.join("|");
      }
      function splitToRanges(min, max) {
        let nines = 1;
        let zeros = 1;
        let stop = countNines(min, nines);
        let stops = new Set([max]);
        while (min <= stop && stop <= max) {
          stops.add(stop);
          nines += 1;
          stop = countNines(min, nines);
        }
        stop = countZeros(max + 1, zeros) - 1;
        while (min < stop && stop <= max) {
          stops.add(stop);
          zeros += 1;
          stop = countZeros(max + 1, zeros) - 1;
        }
        stops = [...stops];
        stops.sort(compare);
        return stops;
      }
      function rangeToPattern(start2, stop, options) {
        if (start2 === stop) {
          return {pattern: start2, count: [], digits: 0};
        }
        let zipped = zip(start2, stop);
        let digits = zipped.length;
        let pattern = "";
        let count = 0;
        for (let i = 0; i < digits; i++) {
          let [startDigit, stopDigit] = zipped[i];
          if (startDigit === stopDigit) {
            pattern += startDigit;
          } else if (startDigit !== "0" || stopDigit !== "9") {
            pattern += toCharacterClass(startDigit, stopDigit, options);
          } else {
            count++;
          }
        }
        if (count) {
          pattern += options.shorthand === true ? "\\d" : "[0-9]";
        }
        return {pattern, count: [count], digits};
      }
      function splitToPatterns(min, max, tok, options) {
        let ranges = splitToRanges(min, max);
        let tokens = [];
        let start2 = min;
        let prev;
        for (let i = 0; i < ranges.length; i++) {
          let max2 = ranges[i];
          let obj = rangeToPattern(String(start2), String(max2), options);
          let zeros = "";
          if (!tok.isPadded && prev && prev.pattern === obj.pattern) {
            if (prev.count.length > 1) {
              prev.count.pop();
            }
            prev.count.push(obj.count[0]);
            prev.string = prev.pattern + toQuantifier(prev.count);
            start2 = max2 + 1;
            continue;
          }
          if (tok.isPadded) {
            zeros = padZeros(max2, tok, options);
          }
          obj.string = zeros + obj.pattern + toQuantifier(obj.count);
          tokens.push(obj);
          start2 = max2 + 1;
          prev = obj;
        }
        return tokens;
      }
      function filterPatterns(arr, comparison, prefix, intersection, options) {
        let result = [];
        for (let ele of arr) {
          let {string} = ele;
          if (!intersection && !contains2(comparison, "string", string)) {
            result.push(prefix + string);
          }
          if (intersection && contains2(comparison, "string", string)) {
            result.push(prefix + string);
          }
        }
        return result;
      }
      function zip(a, b) {
        let arr = [];
        for (let i = 0; i < a.length; i++)
          arr.push([a[i], b[i]]);
        return arr;
      }
      function compare(a, b) {
        return a > b ? 1 : b > a ? -1 : 0;
      }
      function contains2(arr, key, val) {
        return arr.some((ele) => ele[key] === val);
      }
      function countNines(min, len) {
        return Number(String(min).slice(0, -len) + "9".repeat(len));
      }
      function countZeros(integer, zeros) {
        return integer - integer % Math.pow(10, zeros);
      }
      function toQuantifier(digits) {
        let [start2 = 0, stop = ""] = digits;
        if (stop || start2 > 1) {
          return `{${start2 + (stop ? "," + stop : "")}}`;
        }
        return "";
      }
      function toCharacterClass(a, b, options) {
        return `[${a}${b - a === 1 ? "" : "-"}${b}]`;
      }
      function hasPadding(str) {
        return /^-?(0+)\d/.test(str);
      }
      function padZeros(value, tok, options) {
        if (!tok.isPadded) {
          return value;
        }
        let diff = Math.abs(tok.maxLen - String(value).length);
        let relax = options.relaxZeros !== false;
        switch (diff) {
          case 0:
            return "";
          case 1:
            return relax ? "0?" : "0";
          case 2:
            return relax ? "0{0,2}" : "00";
          default: {
            return relax ? `0{0,${diff}}` : `0{${diff}}`;
          }
        }
      }
      toRegexRange.cache = {};
      toRegexRange.clearCache = () => toRegexRange.cache = {};
      module.exports = toRegexRange;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fill-range-npm-7.0.1-b8b1817caa-cc283f4e65.zip/node_modules/fill-range/index.js
  var require_fill_range = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fill-range-npm-7.0.1-b8b1817caa-cc283f4e65.zip/node_modules/fill-range/index.js"(exports, module) {
      "use strict";
      var util = require("util");
      var toRegexRange = require_to_regex_range();
      var isObject2 = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
      var transform = (toNumber) => {
        return (value) => toNumber === true ? Number(value) : String(value);
      };
      var isValidValue = (value) => {
        return typeof value === "number" || typeof value === "string" && value !== "";
      };
      var isNumber2 = (num) => Number.isInteger(+num);
      var zeros = (input) => {
        let value = `${input}`;
        let index = -1;
        if (value[0] === "-")
          value = value.slice(1);
        if (value === "0")
          return false;
        while (value[++index] === "0")
          ;
        return index > 0;
      };
      var stringify = (start2, end, options) => {
        if (typeof start2 === "string" || typeof end === "string") {
          return true;
        }
        return options.stringify === true;
      };
      var pad = (input, maxLength, toNumber) => {
        if (maxLength > 0) {
          let dash = input[0] === "-" ? "-" : "";
          if (dash)
            input = input.slice(1);
          input = dash + input.padStart(dash ? maxLength - 1 : maxLength, "0");
        }
        if (toNumber === false) {
          return String(input);
        }
        return input;
      };
      var toMaxLen = (input, maxLength) => {
        let negative = input[0] === "-" ? "-" : "";
        if (negative) {
          input = input.slice(1);
          maxLength--;
        }
        while (input.length < maxLength)
          input = "0" + input;
        return negative ? "-" + input : input;
      };
      var toSequence = (parts, options) => {
        parts.negatives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
        parts.positives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
        let prefix = options.capture ? "" : "?:";
        let positives = "";
        let negatives = "";
        let result;
        if (parts.positives.length) {
          positives = parts.positives.join("|");
        }
        if (parts.negatives.length) {
          negatives = `-(${prefix}${parts.negatives.join("|")})`;
        }
        if (positives && negatives) {
          result = `${positives}|${negatives}`;
        } else {
          result = positives || negatives;
        }
        if (options.wrap) {
          return `(${prefix}${result})`;
        }
        return result;
      };
      var toRange = (a, b, isNumbers, options) => {
        if (isNumbers) {
          return toRegexRange(a, b, __spreadValues({wrap: false}, options));
        }
        let start2 = String.fromCharCode(a);
        if (a === b)
          return start2;
        let stop = String.fromCharCode(b);
        return `[${start2}-${stop}]`;
      };
      var toRegex = (start2, end, options) => {
        if (Array.isArray(start2)) {
          let wrap = options.wrap === true;
          let prefix = options.capture ? "" : "?:";
          return wrap ? `(${prefix}${start2.join("|")})` : start2.join("|");
        }
        return toRegexRange(start2, end, options);
      };
      var rangeError = (...args) => {
        return new RangeError("Invalid range arguments: " + util.inspect(...args));
      };
      var invalidRange = (start2, end, options) => {
        if (options.strictRanges === true)
          throw rangeError([start2, end]);
        return [];
      };
      var invalidStep = (step, options) => {
        if (options.strictRanges === true) {
          throw new TypeError(`Expected step "${step}" to be a number`);
        }
        return [];
      };
      var fillNumbers = (start2, end, step = 1, options = {}) => {
        let a = Number(start2);
        let b = Number(end);
        if (!Number.isInteger(a) || !Number.isInteger(b)) {
          if (options.strictRanges === true)
            throw rangeError([start2, end]);
          return [];
        }
        if (a === 0)
          a = 0;
        if (b === 0)
          b = 0;
        let descending = a > b;
        let startString = String(start2);
        let endString = String(end);
        let stepString = String(step);
        step = Math.max(Math.abs(step), 1);
        let padded = zeros(startString) || zeros(endString) || zeros(stepString);
        let maxLen = padded ? Math.max(startString.length, endString.length, stepString.length) : 0;
        let toNumber = padded === false && stringify(start2, end, options) === false;
        let format = options.transform || transform(toNumber);
        if (options.toRegex && step === 1) {
          return toRange(toMaxLen(start2, maxLen), toMaxLen(end, maxLen), true, options);
        }
        let parts = {negatives: [], positives: []};
        let push = (num) => parts[num < 0 ? "negatives" : "positives"].push(Math.abs(num));
        let range = [];
        let index = 0;
        while (descending ? a >= b : a <= b) {
          if (options.toRegex === true && step > 1) {
            push(a);
          } else {
            range.push(pad(format(a, index), maxLen, toNumber));
          }
          a = descending ? a - step : a + step;
          index++;
        }
        if (options.toRegex === true) {
          return step > 1 ? toSequence(parts, options) : toRegex(range, null, __spreadValues({wrap: false}, options));
        }
        return range;
      };
      var fillLetters = (start2, end, step = 1, options = {}) => {
        if (!isNumber2(start2) && start2.length > 1 || !isNumber2(end) && end.length > 1) {
          return invalidRange(start2, end, options);
        }
        let format = options.transform || ((val) => String.fromCharCode(val));
        let a = `${start2}`.charCodeAt(0);
        let b = `${end}`.charCodeAt(0);
        let descending = a > b;
        let min = Math.min(a, b);
        let max = Math.max(a, b);
        if (options.toRegex && step === 1) {
          return toRange(min, max, false, options);
        }
        let range = [];
        let index = 0;
        while (descending ? a >= b : a <= b) {
          range.push(format(a, index));
          a = descending ? a - step : a + step;
          index++;
        }
        if (options.toRegex === true) {
          return toRegex(range, null, {wrap: false, options});
        }
        return range;
      };
      var fill = (start2, end, step, options = {}) => {
        if (end == null && isValidValue(start2)) {
          return [start2];
        }
        if (!isValidValue(start2) || !isValidValue(end)) {
          return invalidRange(start2, end, options);
        }
        if (typeof step === "function") {
          return fill(start2, end, 1, {transform: step});
        }
        if (isObject2(step)) {
          return fill(start2, end, 0, step);
        }
        let opts = __spreadValues({}, options);
        if (opts.capture === true)
          opts.wrap = true;
        step = step || opts.step || 1;
        if (!isNumber2(step)) {
          if (step != null && !isObject2(step))
            return invalidStep(step, opts);
          return fill(start2, end, 1, step);
        }
        if (isNumber2(start2) && isNumber2(end)) {
          return fillNumbers(start2, end, step, opts);
        }
        return fillLetters(start2, end, Math.max(Math.abs(step), 1), opts);
      };
      module.exports = fill;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/braces-npm-3.0.2-782240b28a-e2a8e769a8.zip/node_modules/braces/lib/compile.js
  var require_compile = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/braces-npm-3.0.2-782240b28a-e2a8e769a8.zip/node_modules/braces/lib/compile.js"(exports, module) {
      "use strict";
      var fill = require_fill_range();
      var utils = require_utils();
      var compile = (ast, options = {}) => {
        let walk2 = (node, parent = {}) => {
          let invalidBlock = utils.isInvalidBrace(parent);
          let invalidNode = node.invalid === true && options.escapeInvalid === true;
          let invalid = invalidBlock === true || invalidNode === true;
          let prefix = options.escapeInvalid === true ? "\\" : "";
          let output = "";
          if (node.isOpen === true) {
            return prefix + node.value;
          }
          if (node.isClose === true) {
            return prefix + node.value;
          }
          if (node.type === "open") {
            return invalid ? prefix + node.value : "(";
          }
          if (node.type === "close") {
            return invalid ? prefix + node.value : ")";
          }
          if (node.type === "comma") {
            return node.prev.type === "comma" ? "" : invalid ? node.value : "|";
          }
          if (node.value) {
            return node.value;
          }
          if (node.nodes && node.ranges > 0) {
            let args = utils.reduce(node.nodes);
            let range = fill(...args, __spreadProps(__spreadValues({}, options), {wrap: false, toRegex: true}));
            if (range.length !== 0) {
              return args.length > 1 && range.length > 1 ? `(${range})` : range;
            }
          }
          if (node.nodes) {
            for (let child of node.nodes) {
              output += walk2(child, node);
            }
          }
          return output;
        };
        return walk2(ast);
      };
      module.exports = compile;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/braces-npm-3.0.2-782240b28a-e2a8e769a8.zip/node_modules/braces/lib/expand.js
  var require_expand = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/braces-npm-3.0.2-782240b28a-e2a8e769a8.zip/node_modules/braces/lib/expand.js"(exports, module) {
      "use strict";
      var fill = require_fill_range();
      var stringify = require_stringify();
      var utils = require_utils();
      var append = (queue = "", stash = "", enclose = false) => {
        let result = [];
        queue = [].concat(queue);
        stash = [].concat(stash);
        if (!stash.length)
          return queue;
        if (!queue.length) {
          return enclose ? utils.flatten(stash).map((ele) => `{${ele}}`) : stash;
        }
        for (let item of queue) {
          if (Array.isArray(item)) {
            for (let value of item) {
              result.push(append(value, stash, enclose));
            }
          } else {
            for (let ele of stash) {
              if (enclose === true && typeof ele === "string")
                ele = `{${ele}}`;
              result.push(Array.isArray(ele) ? append(item, ele, enclose) : item + ele);
            }
          }
        }
        return utils.flatten(result);
      };
      var expand = (ast, options = {}) => {
        let rangeLimit = options.rangeLimit === void 0 ? 1e3 : options.rangeLimit;
        let walk2 = (node, parent = {}) => {
          node.queue = [];
          let p = parent;
          let q = parent.queue;
          while (p.type !== "brace" && p.type !== "root" && p.parent) {
            p = p.parent;
            q = p.queue;
          }
          if (node.invalid || node.dollar) {
            q.push(append(q.pop(), stringify(node, options)));
            return;
          }
          if (node.type === "brace" && node.invalid !== true && node.nodes.length === 2) {
            q.push(append(q.pop(), ["{}"]));
            return;
          }
          if (node.nodes && node.ranges > 0) {
            let args = utils.reduce(node.nodes);
            if (utils.exceedsLimit(...args, options.step, rangeLimit)) {
              throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");
            }
            let range = fill(...args, options);
            if (range.length === 0) {
              range = stringify(node, options);
            }
            q.push(append(q.pop(), range));
            node.nodes = [];
            return;
          }
          let enclose = utils.encloseBrace(node);
          let queue = node.queue;
          let block = node;
          while (block.type !== "brace" && block.type !== "root" && block.parent) {
            block = block.parent;
            queue = block.queue;
          }
          for (let i = 0; i < node.nodes.length; i++) {
            let child = node.nodes[i];
            if (child.type === "comma" && node.type === "brace") {
              if (i === 1)
                queue.push("");
              queue.push("");
              continue;
            }
            if (child.type === "close") {
              q.push(append(q.pop(), queue, enclose));
              continue;
            }
            if (child.value && child.type !== "open") {
              queue.push(append(queue.pop(), child.value));
              continue;
            }
            if (child.nodes) {
              walk2(child, node);
            }
          }
          return queue;
        };
        return utils.flatten(walk2(ast));
      };
      module.exports = expand;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/braces-npm-3.0.2-782240b28a-e2a8e769a8.zip/node_modules/braces/lib/constants.js
  var require_constants = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/braces-npm-3.0.2-782240b28a-e2a8e769a8.zip/node_modules/braces/lib/constants.js"(exports, module) {
      "use strict";
      module.exports = {
        MAX_LENGTH: 1024 * 64,
        CHAR_0: "0",
        CHAR_9: "9",
        CHAR_UPPERCASE_A: "A",
        CHAR_LOWERCASE_A: "a",
        CHAR_UPPERCASE_Z: "Z",
        CHAR_LOWERCASE_Z: "z",
        CHAR_LEFT_PARENTHESES: "(",
        CHAR_RIGHT_PARENTHESES: ")",
        CHAR_ASTERISK: "*",
        CHAR_AMPERSAND: "&",
        CHAR_AT: "@",
        CHAR_BACKSLASH: "\\",
        CHAR_BACKTICK: "`",
        CHAR_CARRIAGE_RETURN: "\r",
        CHAR_CIRCUMFLEX_ACCENT: "^",
        CHAR_COLON: ":",
        CHAR_COMMA: ",",
        CHAR_DOLLAR: "$",
        CHAR_DOT: ".",
        CHAR_DOUBLE_QUOTE: '"',
        CHAR_EQUAL: "=",
        CHAR_EXCLAMATION_MARK: "!",
        CHAR_FORM_FEED: "\f",
        CHAR_FORWARD_SLASH: "/",
        CHAR_HASH: "#",
        CHAR_HYPHEN_MINUS: "-",
        CHAR_LEFT_ANGLE_BRACKET: "<",
        CHAR_LEFT_CURLY_BRACE: "{",
        CHAR_LEFT_SQUARE_BRACKET: "[",
        CHAR_LINE_FEED: "\n",
        CHAR_NO_BREAK_SPACE: "\xA0",
        CHAR_PERCENT: "%",
        CHAR_PLUS: "+",
        CHAR_QUESTION_MARK: "?",
        CHAR_RIGHT_ANGLE_BRACKET: ">",
        CHAR_RIGHT_CURLY_BRACE: "}",
        CHAR_RIGHT_SQUARE_BRACKET: "]",
        CHAR_SEMICOLON: ";",
        CHAR_SINGLE_QUOTE: "'",
        CHAR_SPACE: " ",
        CHAR_TAB: "	",
        CHAR_UNDERSCORE: "_",
        CHAR_VERTICAL_LINE: "|",
        CHAR_ZERO_WIDTH_NOBREAK_SPACE: "\uFEFF"
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/braces-npm-3.0.2-782240b28a-e2a8e769a8.zip/node_modules/braces/lib/parse.js
  var require_parse2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/braces-npm-3.0.2-782240b28a-e2a8e769a8.zip/node_modules/braces/lib/parse.js"(exports, module) {
      "use strict";
      var stringify = require_stringify();
      var {
        MAX_LENGTH,
        CHAR_BACKSLASH,
        CHAR_BACKTICK,
        CHAR_COMMA,
        CHAR_DOT,
        CHAR_LEFT_PARENTHESES,
        CHAR_RIGHT_PARENTHESES,
        CHAR_LEFT_CURLY_BRACE,
        CHAR_RIGHT_CURLY_BRACE,
        CHAR_LEFT_SQUARE_BRACKET,
        CHAR_RIGHT_SQUARE_BRACKET,
        CHAR_DOUBLE_QUOTE,
        CHAR_SINGLE_QUOTE,
        CHAR_NO_BREAK_SPACE,
        CHAR_ZERO_WIDTH_NOBREAK_SPACE
      } = require_constants();
      var parse4 = (input, options = {}) => {
        if (typeof input !== "string") {
          throw new TypeError("Expected a string");
        }
        let opts = options || {};
        let max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
        if (input.length > max) {
          throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);
        }
        let ast = {type: "root", input, nodes: []};
        let stack = [ast];
        let block = ast;
        let prev = ast;
        let brackets = 0;
        let length = input.length;
        let index = 0;
        let depth = 0;
        let value;
        let memo = {};
        const advance = () => input[index++];
        const push = (node) => {
          if (node.type === "text" && prev.type === "dot") {
            prev.type = "text";
          }
          if (prev && prev.type === "text" && node.type === "text") {
            prev.value += node.value;
            return;
          }
          block.nodes.push(node);
          node.parent = block;
          node.prev = prev;
          prev = node;
          return node;
        };
        push({type: "bos"});
        while (index < length) {
          block = stack[stack.length - 1];
          value = advance();
          if (value === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value === CHAR_NO_BREAK_SPACE) {
            continue;
          }
          if (value === CHAR_BACKSLASH) {
            push({type: "text", value: (options.keepEscaping ? value : "") + advance()});
            continue;
          }
          if (value === CHAR_RIGHT_SQUARE_BRACKET) {
            push({type: "text", value: "\\" + value});
            continue;
          }
          if (value === CHAR_LEFT_SQUARE_BRACKET) {
            brackets++;
            let closed = true;
            let next;
            while (index < length && (next = advance())) {
              value += next;
              if (next === CHAR_LEFT_SQUARE_BRACKET) {
                brackets++;
                continue;
              }
              if (next === CHAR_BACKSLASH) {
                value += advance();
                continue;
              }
              if (next === CHAR_RIGHT_SQUARE_BRACKET) {
                brackets--;
                if (brackets === 0) {
                  break;
                }
              }
            }
            push({type: "text", value});
            continue;
          }
          if (value === CHAR_LEFT_PARENTHESES) {
            block = push({type: "paren", nodes: []});
            stack.push(block);
            push({type: "text", value});
            continue;
          }
          if (value === CHAR_RIGHT_PARENTHESES) {
            if (block.type !== "paren") {
              push({type: "text", value});
              continue;
            }
            block = stack.pop();
            push({type: "text", value});
            block = stack[stack.length - 1];
            continue;
          }
          if (value === CHAR_DOUBLE_QUOTE || value === CHAR_SINGLE_QUOTE || value === CHAR_BACKTICK) {
            let open = value;
            let next;
            if (options.keepQuotes !== true) {
              value = "";
            }
            while (index < length && (next = advance())) {
              if (next === CHAR_BACKSLASH) {
                value += next + advance();
                continue;
              }
              if (next === open) {
                if (options.keepQuotes === true)
                  value += next;
                break;
              }
              value += next;
            }
            push({type: "text", value});
            continue;
          }
          if (value === CHAR_LEFT_CURLY_BRACE) {
            depth++;
            let dollar = prev.value && prev.value.slice(-1) === "$" || block.dollar === true;
            let brace = {
              type: "brace",
              open: true,
              close: false,
              dollar,
              depth,
              commas: 0,
              ranges: 0,
              nodes: []
            };
            block = push(brace);
            stack.push(block);
            push({type: "open", value});
            continue;
          }
          if (value === CHAR_RIGHT_CURLY_BRACE) {
            if (block.type !== "brace") {
              push({type: "text", value});
              continue;
            }
            let type = "close";
            block = stack.pop();
            block.close = true;
            push({type, value});
            depth--;
            block = stack[stack.length - 1];
            continue;
          }
          if (value === CHAR_COMMA && depth > 0) {
            if (block.ranges > 0) {
              block.ranges = 0;
              let open = block.nodes.shift();
              block.nodes = [open, {type: "text", value: stringify(block)}];
            }
            push({type: "comma", value});
            block.commas++;
            continue;
          }
          if (value === CHAR_DOT && depth > 0 && block.commas === 0) {
            let siblings = block.nodes;
            if (depth === 0 || siblings.length === 0) {
              push({type: "text", value});
              continue;
            }
            if (prev.type === "dot") {
              block.range = [];
              prev.value += value;
              prev.type = "range";
              if (block.nodes.length !== 3 && block.nodes.length !== 5) {
                block.invalid = true;
                block.ranges = 0;
                prev.type = "text";
                continue;
              }
              block.ranges++;
              block.args = [];
              continue;
            }
            if (prev.type === "range") {
              siblings.pop();
              let before = siblings[siblings.length - 1];
              before.value += prev.value + value;
              prev = before;
              block.ranges--;
              continue;
            }
            push({type: "dot", value});
            continue;
          }
          push({type: "text", value});
        }
        do {
          block = stack.pop();
          if (block.type !== "root") {
            block.nodes.forEach((node) => {
              if (!node.nodes) {
                if (node.type === "open")
                  node.isOpen = true;
                if (node.type === "close")
                  node.isClose = true;
                if (!node.nodes)
                  node.type = "text";
                node.invalid = true;
              }
            });
            let parent = stack[stack.length - 1];
            let index2 = parent.nodes.indexOf(block);
            parent.nodes.splice(index2, 1, ...block.nodes);
          }
        } while (stack.length > 0);
        push({type: "eos"});
        return ast;
      };
      module.exports = parse4;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/braces-npm-3.0.2-782240b28a-e2a8e769a8.zip/node_modules/braces/index.js
  var require_braces = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/braces-npm-3.0.2-782240b28a-e2a8e769a8.zip/node_modules/braces/index.js"(exports, module) {
      "use strict";
      var stringify = require_stringify();
      var compile = require_compile();
      var expand = require_expand();
      var parse4 = require_parse2();
      var braces = (input, options = {}) => {
        let output = [];
        if (Array.isArray(input)) {
          for (let pattern of input) {
            let result = braces.create(pattern, options);
            if (Array.isArray(result)) {
              output.push(...result);
            } else {
              output.push(result);
            }
          }
        } else {
          output = [].concat(braces.create(input, options));
        }
        if (options && options.expand === true && options.nodupes === true) {
          output = [...new Set(output)];
        }
        return output;
      };
      braces.parse = (input, options = {}) => parse4(input, options);
      braces.stringify = (input, options = {}) => {
        if (typeof input === "string") {
          return stringify(braces.parse(input, options), options);
        }
        return stringify(input, options);
      };
      braces.compile = (input, options = {}) => {
        if (typeof input === "string") {
          input = braces.parse(input, options);
        }
        return compile(input, options);
      };
      braces.expand = (input, options = {}) => {
        if (typeof input === "string") {
          input = braces.parse(input, options);
        }
        let result = expand(input, options);
        if (options.noempty === true) {
          result = result.filter(Boolean);
        }
        if (options.nodupes === true) {
          result = [...new Set(result)];
        }
        return result;
      };
      braces.create = (input, options = {}) => {
        if (input === "" || input.length < 3) {
          return [input];
        }
        return options.expand !== true ? braces.compile(input, options) : braces.expand(input, options);
      };
      module.exports = braces;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/picomatch-npm-2.2.3-3797e21cf0-45e2b882b5.zip/node_modules/picomatch/lib/constants.js
  var require_constants2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/picomatch-npm-2.2.3-3797e21cf0-45e2b882b5.zip/node_modules/picomatch/lib/constants.js"(exports, module) {
      "use strict";
      var path3 = require("path");
      var WIN_SLASH = "\\\\/";
      var WIN_NO_SLASH = `[^${WIN_SLASH}]`;
      var DOT_LITERAL = "\\.";
      var PLUS_LITERAL = "\\+";
      var QMARK_LITERAL = "\\?";
      var SLASH_LITERAL = "\\/";
      var ONE_CHAR = "(?=.)";
      var QMARK = "[^/]";
      var END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;
      var START_ANCHOR = `(?:^|${SLASH_LITERAL})`;
      var DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;
      var NO_DOT = `(?!${DOT_LITERAL})`;
      var NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;
      var NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;
      var NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;
      var QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;
      var STAR = `${QMARK}*?`;
      var POSIX_CHARS = {
        DOT_LITERAL,
        PLUS_LITERAL,
        QMARK_LITERAL,
        SLASH_LITERAL,
        ONE_CHAR,
        QMARK,
        END_ANCHOR,
        DOTS_SLASH,
        NO_DOT,
        NO_DOTS,
        NO_DOT_SLASH,
        NO_DOTS_SLASH,
        QMARK_NO_DOT,
        STAR,
        START_ANCHOR
      };
      var WINDOWS_CHARS = __spreadProps(__spreadValues({}, POSIX_CHARS), {
        SLASH_LITERAL: `[${WIN_SLASH}]`,
        QMARK: WIN_NO_SLASH,
        STAR: `${WIN_NO_SLASH}*?`,
        DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
        NO_DOT: `(?!${DOT_LITERAL})`,
        NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
        NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
        NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
        QMARK_NO_DOT: `[^.${WIN_SLASH}]`,
        START_ANCHOR: `(?:^|[${WIN_SLASH}])`,
        END_ANCHOR: `(?:[${WIN_SLASH}]|$)`
      });
      var POSIX_REGEX_SOURCE = {
        alnum: "a-zA-Z0-9",
        alpha: "a-zA-Z",
        ascii: "\\x00-\\x7F",
        blank: " \\t",
        cntrl: "\\x00-\\x1F\\x7F",
        digit: "0-9",
        graph: "\\x21-\\x7E",
        lower: "a-z",
        print: "\\x20-\\x7E ",
        punct: "\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",
        space: " \\t\\r\\n\\v\\f",
        upper: "A-Z",
        word: "A-Za-z0-9_",
        xdigit: "A-Fa-f0-9"
      };
      module.exports = {
        MAX_LENGTH: 1024 * 64,
        POSIX_REGEX_SOURCE,
        REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
        REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
        REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
        REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
        REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
        REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,
        REPLACEMENTS: {
          "***": "*",
          "**/**": "**",
          "**/**/**": "**"
        },
        CHAR_0: 48,
        CHAR_9: 57,
        CHAR_UPPERCASE_A: 65,
        CHAR_LOWERCASE_A: 97,
        CHAR_UPPERCASE_Z: 90,
        CHAR_LOWERCASE_Z: 122,
        CHAR_LEFT_PARENTHESES: 40,
        CHAR_RIGHT_PARENTHESES: 41,
        CHAR_ASTERISK: 42,
        CHAR_AMPERSAND: 38,
        CHAR_AT: 64,
        CHAR_BACKWARD_SLASH: 92,
        CHAR_CARRIAGE_RETURN: 13,
        CHAR_CIRCUMFLEX_ACCENT: 94,
        CHAR_COLON: 58,
        CHAR_COMMA: 44,
        CHAR_DOT: 46,
        CHAR_DOUBLE_QUOTE: 34,
        CHAR_EQUAL: 61,
        CHAR_EXCLAMATION_MARK: 33,
        CHAR_FORM_FEED: 12,
        CHAR_FORWARD_SLASH: 47,
        CHAR_GRAVE_ACCENT: 96,
        CHAR_HASH: 35,
        CHAR_HYPHEN_MINUS: 45,
        CHAR_LEFT_ANGLE_BRACKET: 60,
        CHAR_LEFT_CURLY_BRACE: 123,
        CHAR_LEFT_SQUARE_BRACKET: 91,
        CHAR_LINE_FEED: 10,
        CHAR_NO_BREAK_SPACE: 160,
        CHAR_PERCENT: 37,
        CHAR_PLUS: 43,
        CHAR_QUESTION_MARK: 63,
        CHAR_RIGHT_ANGLE_BRACKET: 62,
        CHAR_RIGHT_CURLY_BRACE: 125,
        CHAR_RIGHT_SQUARE_BRACKET: 93,
        CHAR_SEMICOLON: 59,
        CHAR_SINGLE_QUOTE: 39,
        CHAR_SPACE: 32,
        CHAR_TAB: 9,
        CHAR_UNDERSCORE: 95,
        CHAR_VERTICAL_LINE: 124,
        CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
        SEP: path3.sep,
        extglobChars(chars) {
          return {
            "!": {type: "negate", open: "(?:(?!(?:", close: `))${chars.STAR})`},
            "?": {type: "qmark", open: "(?:", close: ")?"},
            "+": {type: "plus", open: "(?:", close: ")+"},
            "*": {type: "star", open: "(?:", close: ")*"},
            "@": {type: "at", open: "(?:", close: ")"}
          };
        },
        globChars(win32) {
          return win32 === true ? WINDOWS_CHARS : POSIX_CHARS;
        }
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/picomatch-npm-2.2.3-3797e21cf0-45e2b882b5.zip/node_modules/picomatch/lib/utils.js
  var require_utils2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/picomatch-npm-2.2.3-3797e21cf0-45e2b882b5.zip/node_modules/picomatch/lib/utils.js"(exports) {
      "use strict";
      var path3 = require("path");
      var win32 = process.platform === "win32";
      var {
        REGEX_BACKSLASH,
        REGEX_REMOVE_BACKSLASH,
        REGEX_SPECIAL_CHARS,
        REGEX_SPECIAL_CHARS_GLOBAL
      } = require_constants2();
      exports.isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
      exports.hasRegexChars = (str) => REGEX_SPECIAL_CHARS.test(str);
      exports.isRegexChar = (str) => str.length === 1 && exports.hasRegexChars(str);
      exports.escapeRegex = (str) => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, "\\$1");
      exports.toPosixSlashes = (str) => str.replace(REGEX_BACKSLASH, "/");
      exports.removeBackslashes = (str) => {
        return str.replace(REGEX_REMOVE_BACKSLASH, (match2) => {
          return match2 === "\\" ? "" : match2;
        });
      };
      exports.supportsLookbehinds = () => {
        const segs = process.version.slice(1).split(".").map(Number);
        if (segs.length === 3 && segs[0] >= 9 || segs[0] === 8 && segs[1] >= 10) {
          return true;
        }
        return false;
      };
      exports.isWindows = (options) => {
        if (options && typeof options.windows === "boolean") {
          return options.windows;
        }
        return win32 === true || path3.sep === "\\";
      };
      exports.escapeLast = (input, char, lastIdx) => {
        const idx = input.lastIndexOf(char, lastIdx);
        if (idx === -1)
          return input;
        if (input[idx - 1] === "\\")
          return exports.escapeLast(input, char, idx - 1);
        return `${input.slice(0, idx)}\\${input.slice(idx)}`;
      };
      exports.removePrefix = (input, state = {}) => {
        let output = input;
        if (output.startsWith("./")) {
          output = output.slice(2);
          state.prefix = "./";
        }
        return output;
      };
      exports.wrapOutput = (input, state = {}, options = {}) => {
        const prepend = options.contains ? "" : "^";
        const append = options.contains ? "" : "$";
        let output = `${prepend}(?:${input})${append}`;
        if (state.negated === true) {
          output = `(?:^(?!${output}).*$)`;
        }
        return output;
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/picomatch-npm-2.2.3-3797e21cf0-45e2b882b5.zip/node_modules/picomatch/lib/scan.js
  var require_scan = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/picomatch-npm-2.2.3-3797e21cf0-45e2b882b5.zip/node_modules/picomatch/lib/scan.js"(exports, module) {
      "use strict";
      var utils = require_utils2();
      var {
        CHAR_ASTERISK,
        CHAR_AT,
        CHAR_BACKWARD_SLASH,
        CHAR_COMMA,
        CHAR_DOT,
        CHAR_EXCLAMATION_MARK,
        CHAR_FORWARD_SLASH,
        CHAR_LEFT_CURLY_BRACE,
        CHAR_LEFT_PARENTHESES,
        CHAR_LEFT_SQUARE_BRACKET,
        CHAR_PLUS,
        CHAR_QUESTION_MARK,
        CHAR_RIGHT_CURLY_BRACE,
        CHAR_RIGHT_PARENTHESES,
        CHAR_RIGHT_SQUARE_BRACKET
      } = require_constants2();
      var isPathSeparator = (code) => {
        return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;
      };
      var depth = (token) => {
        if (token.isPrefix !== true) {
          token.depth = token.isGlobstar ? Infinity : 1;
        }
      };
      var scan = (input, options) => {
        const opts = options || {};
        const length = input.length - 1;
        const scanToEnd = opts.parts === true || opts.scanToEnd === true;
        const slashes = [];
        const tokens = [];
        const parts = [];
        let str = input;
        let index = -1;
        let start2 = 0;
        let lastIndex = 0;
        let isBrace = false;
        let isBracket = false;
        let isGlob = false;
        let isExtglob = false;
        let isGlobstar = false;
        let braceEscaped = false;
        let backslashes = false;
        let negated = false;
        let finished = false;
        let braces = 0;
        let prev;
        let code;
        let token = {value: "", depth: 0, isGlob: false};
        const eos = () => index >= length;
        const peek = () => str.charCodeAt(index + 1);
        const advance = () => {
          prev = code;
          return str.charCodeAt(++index);
        };
        while (index < length) {
          code = advance();
          let next;
          if (code === CHAR_BACKWARD_SLASH) {
            backslashes = token.backslashes = true;
            code = advance();
            if (code === CHAR_LEFT_CURLY_BRACE) {
              braceEscaped = true;
            }
            continue;
          }
          if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {
            braces++;
            while (eos() !== true && (code = advance())) {
              if (code === CHAR_BACKWARD_SLASH) {
                backslashes = token.backslashes = true;
                advance();
                continue;
              }
              if (code === CHAR_LEFT_CURLY_BRACE) {
                braces++;
                continue;
              }
              if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {
                isBrace = token.isBrace = true;
                isGlob = token.isGlob = true;
                finished = true;
                if (scanToEnd === true) {
                  continue;
                }
                break;
              }
              if (braceEscaped !== true && code === CHAR_COMMA) {
                isBrace = token.isBrace = true;
                isGlob = token.isGlob = true;
                finished = true;
                if (scanToEnd === true) {
                  continue;
                }
                break;
              }
              if (code === CHAR_RIGHT_CURLY_BRACE) {
                braces--;
                if (braces === 0) {
                  braceEscaped = false;
                  isBrace = token.isBrace = true;
                  finished = true;
                  break;
                }
              }
            }
            if (scanToEnd === true) {
              continue;
            }
            break;
          }
          if (code === CHAR_FORWARD_SLASH) {
            slashes.push(index);
            tokens.push(token);
            token = {value: "", depth: 0, isGlob: false};
            if (finished === true)
              continue;
            if (prev === CHAR_DOT && index === start2 + 1) {
              start2 += 2;
              continue;
            }
            lastIndex = index + 1;
            continue;
          }
          if (opts.noext !== true) {
            const isExtglobChar = code === CHAR_PLUS || code === CHAR_AT || code === CHAR_ASTERISK || code === CHAR_QUESTION_MARK || code === CHAR_EXCLAMATION_MARK;
            if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {
              isGlob = token.isGlob = true;
              isExtglob = token.isExtglob = true;
              finished = true;
              if (scanToEnd === true) {
                while (eos() !== true && (code = advance())) {
                  if (code === CHAR_BACKWARD_SLASH) {
                    backslashes = token.backslashes = true;
                    code = advance();
                    continue;
                  }
                  if (code === CHAR_RIGHT_PARENTHESES) {
                    isGlob = token.isGlob = true;
                    finished = true;
                    break;
                  }
                }
                continue;
              }
              break;
            }
          }
          if (code === CHAR_ASTERISK) {
            if (prev === CHAR_ASTERISK)
              isGlobstar = token.isGlobstar = true;
            isGlob = token.isGlob = true;
            finished = true;
            if (scanToEnd === true) {
              continue;
            }
            break;
          }
          if (code === CHAR_QUESTION_MARK) {
            isGlob = token.isGlob = true;
            finished = true;
            if (scanToEnd === true) {
              continue;
            }
            break;
          }
          if (code === CHAR_LEFT_SQUARE_BRACKET) {
            while (eos() !== true && (next = advance())) {
              if (next === CHAR_BACKWARD_SLASH) {
                backslashes = token.backslashes = true;
                advance();
                continue;
              }
              if (next === CHAR_RIGHT_SQUARE_BRACKET) {
                isBracket = token.isBracket = true;
                isGlob = token.isGlob = true;
                finished = true;
                break;
              }
            }
            if (scanToEnd === true) {
              continue;
            }
            break;
          }
          if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start2) {
            negated = token.negated = true;
            start2++;
            continue;
          }
          if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {
            isGlob = token.isGlob = true;
            if (scanToEnd === true) {
              while (eos() !== true && (code = advance())) {
                if (code === CHAR_LEFT_PARENTHESES) {
                  backslashes = token.backslashes = true;
                  code = advance();
                  continue;
                }
                if (code === CHAR_RIGHT_PARENTHESES) {
                  finished = true;
                  break;
                }
              }
              continue;
            }
            break;
          }
          if (isGlob === true) {
            finished = true;
            if (scanToEnd === true) {
              continue;
            }
            break;
          }
        }
        if (opts.noext === true) {
          isExtglob = false;
          isGlob = false;
        }
        let base = str;
        let prefix = "";
        let glob = "";
        if (start2 > 0) {
          prefix = str.slice(0, start2);
          str = str.slice(start2);
          lastIndex -= start2;
        }
        if (base && isGlob === true && lastIndex > 0) {
          base = str.slice(0, lastIndex);
          glob = str.slice(lastIndex);
        } else if (isGlob === true) {
          base = "";
          glob = str;
        } else {
          base = str;
        }
        if (base && base !== "" && base !== "/" && base !== str) {
          if (isPathSeparator(base.charCodeAt(base.length - 1))) {
            base = base.slice(0, -1);
          }
        }
        if (opts.unescape === true) {
          if (glob)
            glob = utils.removeBackslashes(glob);
          if (base && backslashes === true) {
            base = utils.removeBackslashes(base);
          }
        }
        const state = {
          prefix,
          input,
          start: start2,
          base,
          glob,
          isBrace,
          isBracket,
          isGlob,
          isExtglob,
          isGlobstar,
          negated
        };
        if (opts.tokens === true) {
          state.maxDepth = 0;
          if (!isPathSeparator(code)) {
            tokens.push(token);
          }
          state.tokens = tokens;
        }
        if (opts.parts === true || opts.tokens === true) {
          let prevIndex;
          for (let idx = 0; idx < slashes.length; idx++) {
            const n = prevIndex ? prevIndex + 1 : start2;
            const i = slashes[idx];
            const value = input.slice(n, i);
            if (opts.tokens) {
              if (idx === 0 && start2 !== 0) {
                tokens[idx].isPrefix = true;
                tokens[idx].value = prefix;
              } else {
                tokens[idx].value = value;
              }
              depth(tokens[idx]);
              state.maxDepth += tokens[idx].depth;
            }
            if (idx !== 0 || value !== "") {
              parts.push(value);
            }
            prevIndex = i;
          }
          if (prevIndex && prevIndex + 1 < input.length) {
            const value = input.slice(prevIndex + 1);
            parts.push(value);
            if (opts.tokens) {
              tokens[tokens.length - 1].value = value;
              depth(tokens[tokens.length - 1]);
              state.maxDepth += tokens[tokens.length - 1].depth;
            }
          }
          state.slashes = slashes;
          state.parts = parts;
        }
        return state;
      };
      module.exports = scan;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/picomatch-npm-2.2.3-3797e21cf0-45e2b882b5.zip/node_modules/picomatch/lib/parse.js
  var require_parse3 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/picomatch-npm-2.2.3-3797e21cf0-45e2b882b5.zip/node_modules/picomatch/lib/parse.js"(exports, module) {
      "use strict";
      var constants3 = require_constants2();
      var utils = require_utils2();
      var {
        MAX_LENGTH,
        POSIX_REGEX_SOURCE,
        REGEX_NON_SPECIAL_CHARS,
        REGEX_SPECIAL_CHARS_BACKREF,
        REPLACEMENTS
      } = constants3;
      var expandRange = (args, options) => {
        if (typeof options.expandRange === "function") {
          return options.expandRange(...args, options);
        }
        args.sort();
        const value = `[${args.join("-")}]`;
        try {
          new RegExp(value);
        } catch (ex) {
          return args.map((v) => utils.escapeRegex(v)).join("..");
        }
        return value;
      };
      var syntaxError = (type, char) => {
        return `Missing ${type}: "${char}" - use "\\\\${char}" to match literal characters`;
      };
      var parse4 = (input, options) => {
        if (typeof input !== "string") {
          throw new TypeError("Expected a string");
        }
        input = REPLACEMENTS[input] || input;
        const opts = __spreadValues({}, options);
        const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
        let len = input.length;
        if (len > max) {
          throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
        }
        const bos = {type: "bos", value: "", output: opts.prepend || ""};
        const tokens = [bos];
        const capture = opts.capture ? "" : "?:";
        const win32 = utils.isWindows(options);
        const PLATFORM_CHARS = constants3.globChars(win32);
        const EXTGLOB_CHARS = constants3.extglobChars(PLATFORM_CHARS);
        const {
          DOT_LITERAL,
          PLUS_LITERAL,
          SLASH_LITERAL,
          ONE_CHAR,
          DOTS_SLASH,
          NO_DOT,
          NO_DOT_SLASH,
          NO_DOTS_SLASH,
          QMARK,
          QMARK_NO_DOT,
          STAR,
          START_ANCHOR
        } = PLATFORM_CHARS;
        const globstar = (opts2) => {
          return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
        };
        const nodot = opts.dot ? "" : NO_DOT;
        const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;
        let star = opts.bash === true ? globstar(opts) : STAR;
        if (opts.capture) {
          star = `(${star})`;
        }
        if (typeof opts.noext === "boolean") {
          opts.noextglob = opts.noext;
        }
        const state = {
          input,
          index: -1,
          start: 0,
          dot: opts.dot === true,
          consumed: "",
          output: "",
          prefix: "",
          backtrack: false,
          negated: false,
          brackets: 0,
          braces: 0,
          parens: 0,
          quotes: 0,
          globstar: false,
          tokens
        };
        input = utils.removePrefix(input, state);
        len = input.length;
        const extglobs = [];
        const braces = [];
        const stack = [];
        let prev = bos;
        let value;
        const eos = () => state.index === len - 1;
        const peek = state.peek = (n = 1) => input[state.index + n];
        const advance = state.advance = () => input[++state.index];
        const remaining = () => input.slice(state.index + 1);
        const consume = (value2 = "", num = 0) => {
          state.consumed += value2;
          state.index += num;
        };
        const append = (token) => {
          state.output += token.output != null ? token.output : token.value;
          consume(token.value);
        };
        const negate = () => {
          let count = 1;
          while (peek() === "!" && (peek(2) !== "(" || peek(3) === "?")) {
            advance();
            state.start++;
            count++;
          }
          if (count % 2 === 0) {
            return false;
          }
          state.negated = true;
          state.start++;
          return true;
        };
        const increment = (type) => {
          state[type]++;
          stack.push(type);
        };
        const decrement = (type) => {
          state[type]--;
          stack.pop();
        };
        const push = (tok) => {
          if (prev.type === "globstar") {
            const isBrace = state.braces > 0 && (tok.type === "comma" || tok.type === "brace");
            const isExtglob = tok.extglob === true || extglobs.length && (tok.type === "pipe" || tok.type === "paren");
            if (tok.type !== "slash" && tok.type !== "paren" && !isBrace && !isExtglob) {
              state.output = state.output.slice(0, -prev.output.length);
              prev.type = "star";
              prev.value = "*";
              prev.output = star;
              state.output += prev.output;
            }
          }
          if (extglobs.length && tok.type !== "paren" && !EXTGLOB_CHARS[tok.value]) {
            extglobs[extglobs.length - 1].inner += tok.value;
          }
          if (tok.value || tok.output)
            append(tok);
          if (prev && prev.type === "text" && tok.type === "text") {
            prev.value += tok.value;
            prev.output = (prev.output || "") + tok.value;
            return;
          }
          tok.prev = prev;
          tokens.push(tok);
          prev = tok;
        };
        const extglobOpen = (type, value2) => {
          const token = __spreadProps(__spreadValues({}, EXTGLOB_CHARS[value2]), {conditions: 1, inner: ""});
          token.prev = prev;
          token.parens = state.parens;
          token.output = state.output;
          const output = (opts.capture ? "(" : "") + token.open;
          increment("parens");
          push({type, value: value2, output: state.output ? "" : ONE_CHAR});
          push({type: "paren", extglob: true, value: advance(), output});
          extglobs.push(token);
        };
        const extglobClose = (token) => {
          let output = token.close + (opts.capture ? ")" : "");
          if (token.type === "negate") {
            let extglobStar = star;
            if (token.inner && token.inner.length > 1 && token.inner.includes("/")) {
              extglobStar = globstar(opts);
            }
            if (extglobStar !== star || eos() || /^\)+$/.test(remaining())) {
              output = token.close = `)$))${extglobStar}`;
            }
            if (token.prev.type === "bos") {
              state.negatedExtglob = true;
            }
          }
          push({type: "paren", extglob: true, value, output});
          decrement("parens");
        };
        if (opts.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(input)) {
          let backslashes = false;
          let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m, esc, chars, first, rest, index) => {
            if (first === "\\") {
              backslashes = true;
              return m;
            }
            if (first === "?") {
              if (esc) {
                return esc + first + (rest ? QMARK.repeat(rest.length) : "");
              }
              if (index === 0) {
                return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : "");
              }
              return QMARK.repeat(chars.length);
            }
            if (first === ".") {
              return DOT_LITERAL.repeat(chars.length);
            }
            if (first === "*") {
              if (esc) {
                return esc + first + (rest ? star : "");
              }
              return star;
            }
            return esc ? m : `\\${m}`;
          });
          if (backslashes === true) {
            if (opts.unescape === true) {
              output = output.replace(/\\/g, "");
            } else {
              output = output.replace(/\\+/g, (m) => {
                return m.length % 2 === 0 ? "\\\\" : m ? "\\" : "";
              });
            }
          }
          if (output === input && opts.contains === true) {
            state.output = input;
            return state;
          }
          state.output = utils.wrapOutput(output, state, options);
          return state;
        }
        while (!eos()) {
          value = advance();
          if (value === "\0") {
            continue;
          }
          if (value === "\\") {
            const next = peek();
            if (next === "/" && opts.bash !== true) {
              continue;
            }
            if (next === "." || next === ";") {
              continue;
            }
            if (!next) {
              value += "\\";
              push({type: "text", value});
              continue;
            }
            const match2 = /^\\+/.exec(remaining());
            let slashes = 0;
            if (match2 && match2[0].length > 2) {
              slashes = match2[0].length;
              state.index += slashes;
              if (slashes % 2 !== 0) {
                value += "\\";
              }
            }
            if (opts.unescape === true) {
              value = advance() || "";
            } else {
              value += advance() || "";
            }
            if (state.brackets === 0) {
              push({type: "text", value});
              continue;
            }
          }
          if (state.brackets > 0 && (value !== "]" || prev.value === "[" || prev.value === "[^")) {
            if (opts.posix !== false && value === ":") {
              const inner = prev.value.slice(1);
              if (inner.includes("[")) {
                prev.posix = true;
                if (inner.includes(":")) {
                  const idx = prev.value.lastIndexOf("[");
                  const pre = prev.value.slice(0, idx);
                  const rest2 = prev.value.slice(idx + 2);
                  const posix = POSIX_REGEX_SOURCE[rest2];
                  if (posix) {
                    prev.value = pre + posix;
                    state.backtrack = true;
                    advance();
                    if (!bos.output && tokens.indexOf(prev) === 1) {
                      bos.output = ONE_CHAR;
                    }
                    continue;
                  }
                }
              }
            }
            if (value === "[" && peek() !== ":" || value === "-" && peek() === "]") {
              value = `\\${value}`;
            }
            if (value === "]" && (prev.value === "[" || prev.value === "[^")) {
              value = `\\${value}`;
            }
            if (opts.posix === true && value === "!" && prev.value === "[") {
              value = "^";
            }
            prev.value += value;
            append({value});
            continue;
          }
          if (state.quotes === 1 && value !== '"') {
            value = utils.escapeRegex(value);
            prev.value += value;
            append({value});
            continue;
          }
          if (value === '"') {
            state.quotes = state.quotes === 1 ? 0 : 1;
            if (opts.keepQuotes === true) {
              push({type: "text", value});
            }
            continue;
          }
          if (value === "(") {
            increment("parens");
            push({type: "paren", value});
            continue;
          }
          if (value === ")") {
            if (state.parens === 0 && opts.strictBrackets === true) {
              throw new SyntaxError(syntaxError("opening", "("));
            }
            const extglob = extglobs[extglobs.length - 1];
            if (extglob && state.parens === extglob.parens + 1) {
              extglobClose(extglobs.pop());
              continue;
            }
            push({type: "paren", value, output: state.parens ? ")" : "\\)"});
            decrement("parens");
            continue;
          }
          if (value === "[") {
            if (opts.nobracket === true || !remaining().includes("]")) {
              if (opts.nobracket !== true && opts.strictBrackets === true) {
                throw new SyntaxError(syntaxError("closing", "]"));
              }
              value = `\\${value}`;
            } else {
              increment("brackets");
            }
            push({type: "bracket", value});
            continue;
          }
          if (value === "]") {
            if (opts.nobracket === true || prev && prev.type === "bracket" && prev.value.length === 1) {
              push({type: "text", value, output: `\\${value}`});
              continue;
            }
            if (state.brackets === 0) {
              if (opts.strictBrackets === true) {
                throw new SyntaxError(syntaxError("opening", "["));
              }
              push({type: "text", value, output: `\\${value}`});
              continue;
            }
            decrement("brackets");
            const prevValue = prev.value.slice(1);
            if (prev.posix !== true && prevValue[0] === "^" && !prevValue.includes("/")) {
              value = `/${value}`;
            }
            prev.value += value;
            append({value});
            if (opts.literalBrackets === false || utils.hasRegexChars(prevValue)) {
              continue;
            }
            const escaped = utils.escapeRegex(prev.value);
            state.output = state.output.slice(0, -prev.value.length);
            if (opts.literalBrackets === true) {
              state.output += escaped;
              prev.value = escaped;
              continue;
            }
            prev.value = `(${capture}${escaped}|${prev.value})`;
            state.output += prev.value;
            continue;
          }
          if (value === "{" && opts.nobrace !== true) {
            increment("braces");
            const open = {
              type: "brace",
              value,
              output: "(",
              outputIndex: state.output.length,
              tokensIndex: state.tokens.length
            };
            braces.push(open);
            push(open);
            continue;
          }
          if (value === "}") {
            const brace = braces[braces.length - 1];
            if (opts.nobrace === true || !brace) {
              push({type: "text", value, output: value});
              continue;
            }
            let output = ")";
            if (brace.dots === true) {
              const arr = tokens.slice();
              const range = [];
              for (let i = arr.length - 1; i >= 0; i--) {
                tokens.pop();
                if (arr[i].type === "brace") {
                  break;
                }
                if (arr[i].type !== "dots") {
                  range.unshift(arr[i].value);
                }
              }
              output = expandRange(range, opts);
              state.backtrack = true;
            }
            if (brace.comma !== true && brace.dots !== true) {
              const out = state.output.slice(0, brace.outputIndex);
              const toks = state.tokens.slice(brace.tokensIndex);
              brace.value = brace.output = "\\{";
              value = output = "\\}";
              state.output = out;
              for (const t5 of toks) {
                state.output += t5.output || t5.value;
              }
            }
            push({type: "brace", value, output});
            decrement("braces");
            braces.pop();
            continue;
          }
          if (value === "|") {
            if (extglobs.length > 0) {
              extglobs[extglobs.length - 1].conditions++;
            }
            push({type: "text", value});
            continue;
          }
          if (value === ",") {
            let output = value;
            const brace = braces[braces.length - 1];
            if (brace && stack[stack.length - 1] === "braces") {
              brace.comma = true;
              output = "|";
            }
            push({type: "comma", value, output});
            continue;
          }
          if (value === "/") {
            if (prev.type === "dot" && state.index === state.start + 1) {
              state.start = state.index + 1;
              state.consumed = "";
              state.output = "";
              tokens.pop();
              prev = bos;
              continue;
            }
            push({type: "slash", value, output: SLASH_LITERAL});
            continue;
          }
          if (value === ".") {
            if (state.braces > 0 && prev.type === "dot") {
              if (prev.value === ".")
                prev.output = DOT_LITERAL;
              const brace = braces[braces.length - 1];
              prev.type = "dots";
              prev.output += value;
              prev.value += value;
              brace.dots = true;
              continue;
            }
            if (state.braces + state.parens === 0 && prev.type !== "bos" && prev.type !== "slash") {
              push({type: "text", value, output: DOT_LITERAL});
              continue;
            }
            push({type: "dot", value, output: DOT_LITERAL});
            continue;
          }
          if (value === "?") {
            const isGroup = prev && prev.value === "(";
            if (!isGroup && opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
              extglobOpen("qmark", value);
              continue;
            }
            if (prev && prev.type === "paren") {
              const next = peek();
              let output = value;
              if (next === "<" && !utils.supportsLookbehinds()) {
                throw new Error("Node.js v10 or higher is required for regex lookbehinds");
              }
              if (prev.value === "(" && !/[!=<:]/.test(next) || next === "<" && !/<([!=]|\w+>)/.test(remaining())) {
                output = `\\${value}`;
              }
              push({type: "text", value, output});
              continue;
            }
            if (opts.dot !== true && (prev.type === "slash" || prev.type === "bos")) {
              push({type: "qmark", value, output: QMARK_NO_DOT});
              continue;
            }
            push({type: "qmark", value, output: QMARK});
            continue;
          }
          if (value === "!") {
            if (opts.noextglob !== true && peek() === "(") {
              if (peek(2) !== "?" || !/[!=<:]/.test(peek(3))) {
                extglobOpen("negate", value);
                continue;
              }
            }
            if (opts.nonegate !== true && state.index === 0) {
              negate();
              continue;
            }
          }
          if (value === "+") {
            if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
              extglobOpen("plus", value);
              continue;
            }
            if (prev && prev.value === "(" || opts.regex === false) {
              push({type: "plus", value, output: PLUS_LITERAL});
              continue;
            }
            if (prev && (prev.type === "bracket" || prev.type === "paren" || prev.type === "brace") || state.parens > 0) {
              push({type: "plus", value});
              continue;
            }
            push({type: "plus", value: PLUS_LITERAL});
            continue;
          }
          if (value === "@") {
            if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
              push({type: "at", extglob: true, value, output: ""});
              continue;
            }
            push({type: "text", value});
            continue;
          }
          if (value !== "*") {
            if (value === "$" || value === "^") {
              value = `\\${value}`;
            }
            const match2 = REGEX_NON_SPECIAL_CHARS.exec(remaining());
            if (match2) {
              value += match2[0];
              state.index += match2[0].length;
            }
            push({type: "text", value});
            continue;
          }
          if (prev && (prev.type === "globstar" || prev.star === true)) {
            prev.type = "star";
            prev.star = true;
            prev.value += value;
            prev.output = star;
            state.backtrack = true;
            state.globstar = true;
            consume(value);
            continue;
          }
          let rest = remaining();
          if (opts.noextglob !== true && /^\([^?]/.test(rest)) {
            extglobOpen("star", value);
            continue;
          }
          if (prev.type === "star") {
            if (opts.noglobstar === true) {
              consume(value);
              continue;
            }
            const prior = prev.prev;
            const before = prior.prev;
            const isStart = prior.type === "slash" || prior.type === "bos";
            const afterStar = before && (before.type === "star" || before.type === "globstar");
            if (opts.bash === true && (!isStart || rest[0] && rest[0] !== "/")) {
              push({type: "star", value, output: ""});
              continue;
            }
            const isBrace = state.braces > 0 && (prior.type === "comma" || prior.type === "brace");
            const isExtglob = extglobs.length && (prior.type === "pipe" || prior.type === "paren");
            if (!isStart && prior.type !== "paren" && !isBrace && !isExtglob) {
              push({type: "star", value, output: ""});
              continue;
            }
            while (rest.slice(0, 3) === "/**") {
              const after = input[state.index + 4];
              if (after && after !== "/") {
                break;
              }
              rest = rest.slice(3);
              consume("/**", 3);
            }
            if (prior.type === "bos" && eos()) {
              prev.type = "globstar";
              prev.value += value;
              prev.output = globstar(opts);
              state.output = prev.output;
              state.globstar = true;
              consume(value);
              continue;
            }
            if (prior.type === "slash" && prior.prev.type !== "bos" && !afterStar && eos()) {
              state.output = state.output.slice(0, -(prior.output + prev.output).length);
              prior.output = `(?:${prior.output}`;
              prev.type = "globstar";
              prev.output = globstar(opts) + (opts.strictSlashes ? ")" : "|$)");
              prev.value += value;
              state.globstar = true;
              state.output += prior.output + prev.output;
              consume(value);
              continue;
            }
            if (prior.type === "slash" && prior.prev.type !== "bos" && rest[0] === "/") {
              const end = rest[1] !== void 0 ? "|$" : "";
              state.output = state.output.slice(0, -(prior.output + prev.output).length);
              prior.output = `(?:${prior.output}`;
              prev.type = "globstar";
              prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;
              prev.value += value;
              state.output += prior.output + prev.output;
              state.globstar = true;
              consume(value + advance());
              push({type: "slash", value: "/", output: ""});
              continue;
            }
            if (prior.type === "bos" && rest[0] === "/") {
              prev.type = "globstar";
              prev.value += value;
              prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;
              state.output = prev.output;
              state.globstar = true;
              consume(value + advance());
              push({type: "slash", value: "/", output: ""});
              continue;
            }
            state.output = state.output.slice(0, -prev.output.length);
            prev.type = "globstar";
            prev.output = globstar(opts);
            prev.value += value;
            state.output += prev.output;
            state.globstar = true;
            consume(value);
            continue;
          }
          const token = {type: "star", value, output: star};
          if (opts.bash === true) {
            token.output = ".*?";
            if (prev.type === "bos" || prev.type === "slash") {
              token.output = nodot + token.output;
            }
            push(token);
            continue;
          }
          if (prev && (prev.type === "bracket" || prev.type === "paren") && opts.regex === true) {
            token.output = value;
            push(token);
            continue;
          }
          if (state.index === state.start || prev.type === "slash" || prev.type === "dot") {
            if (prev.type === "dot") {
              state.output += NO_DOT_SLASH;
              prev.output += NO_DOT_SLASH;
            } else if (opts.dot === true) {
              state.output += NO_DOTS_SLASH;
              prev.output += NO_DOTS_SLASH;
            } else {
              state.output += nodot;
              prev.output += nodot;
            }
            if (peek() !== "*") {
              state.output += ONE_CHAR;
              prev.output += ONE_CHAR;
            }
          }
          push(token);
        }
        while (state.brackets > 0) {
          if (opts.strictBrackets === true)
            throw new SyntaxError(syntaxError("closing", "]"));
          state.output = utils.escapeLast(state.output, "[");
          decrement("brackets");
        }
        while (state.parens > 0) {
          if (opts.strictBrackets === true)
            throw new SyntaxError(syntaxError("closing", ")"));
          state.output = utils.escapeLast(state.output, "(");
          decrement("parens");
        }
        while (state.braces > 0) {
          if (opts.strictBrackets === true)
            throw new SyntaxError(syntaxError("closing", "}"));
          state.output = utils.escapeLast(state.output, "{");
          decrement("braces");
        }
        if (opts.strictSlashes !== true && (prev.type === "star" || prev.type === "bracket")) {
          push({type: "maybe_slash", value: "", output: `${SLASH_LITERAL}?`});
        }
        if (state.backtrack === true) {
          state.output = "";
          for (const token of state.tokens) {
            state.output += token.output != null ? token.output : token.value;
            if (token.suffix) {
              state.output += token.suffix;
            }
          }
        }
        return state;
      };
      parse4.fastpaths = (input, options) => {
        const opts = __spreadValues({}, options);
        const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
        const len = input.length;
        if (len > max) {
          throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
        }
        input = REPLACEMENTS[input] || input;
        const win32 = utils.isWindows(options);
        const {
          DOT_LITERAL,
          SLASH_LITERAL,
          ONE_CHAR,
          DOTS_SLASH,
          NO_DOT,
          NO_DOTS,
          NO_DOTS_SLASH,
          STAR,
          START_ANCHOR
        } = constants3.globChars(win32);
        const nodot = opts.dot ? NO_DOTS : NO_DOT;
        const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;
        const capture = opts.capture ? "" : "?:";
        const state = {negated: false, prefix: ""};
        let star = opts.bash === true ? ".*?" : STAR;
        if (opts.capture) {
          star = `(${star})`;
        }
        const globstar = (opts2) => {
          if (opts2.noglobstar === true)
            return star;
          return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
        };
        const create = (str) => {
          switch (str) {
            case "*":
              return `${nodot}${ONE_CHAR}${star}`;
            case ".*":
              return `${DOT_LITERAL}${ONE_CHAR}${star}`;
            case "*.*":
              return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
            case "*/*":
              return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;
            case "**":
              return nodot + globstar(opts);
            case "**/*":
              return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;
            case "**/*.*":
              return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
            case "**/.*":
              return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;
            default: {
              const match2 = /^(.*?)\.(\w+)$/.exec(str);
              if (!match2)
                return;
              const source2 = create(match2[1]);
              if (!source2)
                return;
              return source2 + DOT_LITERAL + match2[2];
            }
          }
        };
        const output = utils.removePrefix(input, state);
        let source = create(output);
        if (source && opts.strictSlashes !== true) {
          source += `${SLASH_LITERAL}?`;
        }
        return source;
      };
      module.exports = parse4;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/picomatch-npm-2.2.3-3797e21cf0-45e2b882b5.zip/node_modules/picomatch/lib/picomatch.js
  var require_picomatch = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/picomatch-npm-2.2.3-3797e21cf0-45e2b882b5.zip/node_modules/picomatch/lib/picomatch.js"(exports, module) {
      "use strict";
      var path3 = require("path");
      var scan = require_scan();
      var parse4 = require_parse3();
      var utils = require_utils2();
      var constants3 = require_constants2();
      var isObject2 = (val) => val && typeof val === "object" && !Array.isArray(val);
      var picomatch = (glob, options, returnState = false) => {
        if (Array.isArray(glob)) {
          const fns = glob.map((input) => picomatch(input, options, returnState));
          const arrayMatcher = (str) => {
            for (const isMatch2 of fns) {
              const state2 = isMatch2(str);
              if (state2)
                return state2;
            }
            return false;
          };
          return arrayMatcher;
        }
        const isState = isObject2(glob) && glob.tokens && glob.input;
        if (glob === "" || typeof glob !== "string" && !isState) {
          throw new TypeError("Expected pattern to be a non-empty string");
        }
        const opts = options || {};
        const posix = utils.isWindows(options);
        const regex = isState ? picomatch.compileRe(glob, options) : picomatch.makeRe(glob, options, false, true);
        const state = regex.state;
        delete regex.state;
        let isIgnored2 = () => false;
        if (opts.ignore) {
          const ignoreOpts = __spreadProps(__spreadValues({}, options), {ignore: null, onMatch: null, onResult: null});
          isIgnored2 = picomatch(opts.ignore, ignoreOpts, returnState);
        }
        const matcher = (input, returnObject = false) => {
          const {isMatch: isMatch2, match: match2, output} = picomatch.test(input, regex, options, {glob, posix});
          const result = {glob, state, regex, posix, input, output, match: match2, isMatch: isMatch2};
          if (typeof opts.onResult === "function") {
            opts.onResult(result);
          }
          if (isMatch2 === false) {
            result.isMatch = false;
            return returnObject ? result : false;
          }
          if (isIgnored2(input)) {
            if (typeof opts.onIgnore === "function") {
              opts.onIgnore(result);
            }
            result.isMatch = false;
            return returnObject ? result : false;
          }
          if (typeof opts.onMatch === "function") {
            opts.onMatch(result);
          }
          return returnObject ? result : true;
        };
        if (returnState) {
          matcher.state = state;
        }
        return matcher;
      };
      picomatch.test = (input, regex, options, {glob, posix} = {}) => {
        if (typeof input !== "string") {
          throw new TypeError("Expected input to be a string");
        }
        if (input === "") {
          return {isMatch: false, output: ""};
        }
        const opts = options || {};
        const format = opts.format || (posix ? utils.toPosixSlashes : null);
        let match2 = input === glob;
        let output = match2 && format ? format(input) : input;
        if (match2 === false) {
          output = format ? format(input) : input;
          match2 = output === glob;
        }
        if (match2 === false || opts.capture === true) {
          if (opts.matchBase === true || opts.basename === true) {
            match2 = picomatch.matchBase(input, regex, options, posix);
          } else {
            match2 = regex.exec(output);
          }
        }
        return {isMatch: Boolean(match2), match: match2, output};
      };
      picomatch.matchBase = (input, glob, options, posix = utils.isWindows(options)) => {
        const regex = glob instanceof RegExp ? glob : picomatch.makeRe(glob, options);
        return regex.test(path3.basename(input));
      };
      picomatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);
      picomatch.parse = (pattern, options) => {
        if (Array.isArray(pattern))
          return pattern.map((p) => picomatch.parse(p, options));
        return parse4(pattern, __spreadProps(__spreadValues({}, options), {fastpaths: false}));
      };
      picomatch.scan = (input, options) => scan(input, options);
      picomatch.compileRe = (parsed, options, returnOutput = false, returnState = false) => {
        if (returnOutput === true) {
          return parsed.output;
        }
        const opts = options || {};
        const prepend = opts.contains ? "" : "^";
        const append = opts.contains ? "" : "$";
        let source = `${prepend}(?:${parsed.output})${append}`;
        if (parsed && parsed.negated === true) {
          source = `^(?!${source}).*$`;
        }
        const regex = picomatch.toRegex(source, options);
        if (returnState === true) {
          regex.state = parsed;
        }
        return regex;
      };
      picomatch.makeRe = (input, options, returnOutput = false, returnState = false) => {
        if (!input || typeof input !== "string") {
          throw new TypeError("Expected a non-empty string");
        }
        const opts = options || {};
        let parsed = {negated: false, fastpaths: true};
        let prefix = "";
        let output;
        if (input.startsWith("./")) {
          input = input.slice(2);
          prefix = parsed.prefix = "./";
        }
        if (opts.fastpaths !== false && (input[0] === "." || input[0] === "*")) {
          output = parse4.fastpaths(input, options);
        }
        if (output === void 0) {
          parsed = parse4(input, options);
          parsed.prefix = prefix + (parsed.prefix || "");
        } else {
          parsed.output = output;
        }
        return picomatch.compileRe(parsed, options, returnOutput, returnState);
      };
      picomatch.toRegex = (source, options) => {
        try {
          const opts = options || {};
          return new RegExp(source, opts.flags || (opts.nocase ? "i" : ""));
        } catch (err) {
          if (options && options.debug === true)
            throw err;
          return /$^/;
        }
      };
      picomatch.constants = constants3;
      module.exports = picomatch;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/picomatch-npm-2.2.3-3797e21cf0-45e2b882b5.zip/node_modules/picomatch/index.js
  var require_picomatch2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/picomatch-npm-2.2.3-3797e21cf0-45e2b882b5.zip/node_modules/picomatch/index.js"(exports, module) {
      "use strict";
      module.exports = require_picomatch();
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/micromatch-npm-4.0.2-f059c00e51-39590a96d9.zip/node_modules/micromatch/index.js
  var require_micromatch = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/micromatch-npm-4.0.2-f059c00e51-39590a96d9.zip/node_modules/micromatch/index.js"(exports, module) {
      "use strict";
      var util = require("util");
      var braces = require_braces();
      var picomatch = require_picomatch2();
      var utils = require_utils2();
      var isEmptyString = (val) => typeof val === "string" && (val === "" || val === "./");
      var micromatch9 = (list, patterns, options) => {
        patterns = [].concat(patterns);
        list = [].concat(list);
        let omit = new Set();
        let keep = new Set();
        let items = new Set();
        let negatives = 0;
        let onResult = (state) => {
          items.add(state.output);
          if (options && options.onResult) {
            options.onResult(state);
          }
        };
        for (let i = 0; i < patterns.length; i++) {
          let isMatch2 = picomatch(String(patterns[i]), __spreadProps(__spreadValues({}, options), {onResult}), true);
          let negated = isMatch2.state.negated || isMatch2.state.negatedExtglob;
          if (negated)
            negatives++;
          for (let item of list) {
            let matched = isMatch2(item, true);
            let match2 = negated ? !matched.isMatch : matched.isMatch;
            if (!match2)
              continue;
            if (negated) {
              omit.add(matched.output);
            } else {
              omit.delete(matched.output);
              keep.add(matched.output);
            }
          }
        }
        let result = negatives === patterns.length ? [...items] : [...keep];
        let matches = result.filter((item) => !omit.has(item));
        if (options && matches.length === 0) {
          if (options.failglob === true) {
            throw new Error(`No matches found for "${patterns.join(", ")}"`);
          }
          if (options.nonull === true || options.nullglob === true) {
            return options.unescape ? patterns.map((p) => p.replace(/\\/g, "")) : patterns;
          }
        }
        return matches;
      };
      micromatch9.match = micromatch9;
      micromatch9.matcher = (pattern, options) => picomatch(pattern, options);
      micromatch9.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);
      micromatch9.any = micromatch9.isMatch;
      micromatch9.not = (list, patterns, options = {}) => {
        patterns = [].concat(patterns).map(String);
        let result = new Set();
        let items = [];
        let onResult = (state) => {
          if (options.onResult)
            options.onResult(state);
          items.push(state.output);
        };
        let matches = micromatch9(list, patterns, __spreadProps(__spreadValues({}, options), {onResult}));
        for (let item of items) {
          if (!matches.includes(item)) {
            result.add(item);
          }
        }
        return [...result];
      };
      micromatch9.contains = (str, pattern, options) => {
        if (typeof str !== "string") {
          throw new TypeError(`Expected a string: "${util.inspect(str)}"`);
        }
        if (Array.isArray(pattern)) {
          return pattern.some((p) => micromatch9.contains(str, p, options));
        }
        if (typeof pattern === "string") {
          if (isEmptyString(str) || isEmptyString(pattern)) {
            return false;
          }
          if (str.includes(pattern) || str.startsWith("./") && str.slice(2).includes(pattern)) {
            return true;
          }
        }
        return micromatch9.isMatch(str, pattern, __spreadProps(__spreadValues({}, options), {contains: true}));
      };
      micromatch9.matchKeys = (obj, patterns, options) => {
        if (!utils.isObject(obj)) {
          throw new TypeError("Expected the first argument to be an object");
        }
        let keys = micromatch9(Object.keys(obj), patterns, options);
        let res = {};
        for (let key of keys)
          res[key] = obj[key];
        return res;
      };
      micromatch9.some = (list, patterns, options) => {
        let items = [].concat(list);
        for (let pattern of [].concat(patterns)) {
          let isMatch2 = picomatch(String(pattern), options);
          if (items.some((item) => isMatch2(item))) {
            return true;
          }
        }
        return false;
      };
      micromatch9.every = (list, patterns, options) => {
        let items = [].concat(list);
        for (let pattern of [].concat(patterns)) {
          let isMatch2 = picomatch(String(pattern), options);
          if (!items.every((item) => isMatch2(item))) {
            return false;
          }
        }
        return true;
      };
      micromatch9.all = (str, patterns, options) => {
        if (typeof str !== "string") {
          throw new TypeError(`Expected a string: "${util.inspect(str)}"`);
        }
        return [].concat(patterns).every((p) => picomatch(p, options)(str));
      };
      micromatch9.capture = (glob, input, options) => {
        let posix = utils.isWindows(options);
        let regex = picomatch.makeRe(String(glob), __spreadProps(__spreadValues({}, options), {capture: true}));
        let match2 = regex.exec(posix ? utils.toPosixSlashes(input) : input);
        if (match2) {
          return match2.slice(1).map((v) => v === void 0 ? "" : v);
        }
      };
      micromatch9.makeRe = (...args) => picomatch.makeRe(...args);
      micromatch9.scan = (...args) => picomatch.scan(...args);
      micromatch9.parse = (patterns, options) => {
        let res = [];
        for (let pattern of [].concat(patterns || [])) {
          for (let str of braces(String(pattern), options)) {
            res.push(picomatch.parse(str, options));
          }
        }
        return res;
      };
      micromatch9.braces = (pattern, options) => {
        if (typeof pattern !== "string")
          throw new TypeError("Expected a string");
        if (options && options.nobrace === true || !/\{.*\}/.test(pattern)) {
          return [pattern];
        }
        return braces(pattern, options);
      };
      micromatch9.braceExpand = (pattern, options) => {
        if (typeof pattern !== "string")
          throw new TypeError("Expected a string");
        return micromatch9.braces(pattern, __spreadProps(__spreadValues({}, options), {expand: true}));
      };
      module.exports = micromatch9;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/internal/constants.js
  var require_constants3 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/internal/constants.js"(exports, module) {
      var SEMVER_SPEC_VERSION = "2.0.0";
      var MAX_LENGTH = 256;
      var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
      var MAX_SAFE_COMPONENT_LENGTH = 16;
      module.exports = {
        SEMVER_SPEC_VERSION,
        MAX_LENGTH,
        MAX_SAFE_INTEGER,
        MAX_SAFE_COMPONENT_LENGTH
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/internal/debug.js
  var require_debug = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/internal/debug.js"(exports, module) {
      var debug2 = typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
      };
      module.exports = debug2;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/internal/re.js
  var require_re = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/internal/re.js"(exports, module) {
      var {MAX_SAFE_COMPONENT_LENGTH} = require_constants3();
      var debug2 = require_debug();
      exports = module.exports = {};
      var re = exports.re = [];
      var src = exports.src = [];
      var t5 = exports.t = {};
      var R = 0;
      var createToken = (name, value, isGlobal) => {
        const index = R++;
        debug2(index, value);
        t5[name] = index;
        src[index] = value;
        re[index] = new RegExp(value, isGlobal ? "g" : void 0);
      };
      createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
      createToken("NUMERICIDENTIFIERLOOSE", "[0-9]+");
      createToken("NONNUMERICIDENTIFIER", "\\d*[a-zA-Z-][a-zA-Z0-9-]*");
      createToken("MAINVERSION", `(${src[t5.NUMERICIDENTIFIER]})\\.(${src[t5.NUMERICIDENTIFIER]})\\.(${src[t5.NUMERICIDENTIFIER]})`);
      createToken("MAINVERSIONLOOSE", `(${src[t5.NUMERICIDENTIFIERLOOSE]})\\.(${src[t5.NUMERICIDENTIFIERLOOSE]})\\.(${src[t5.NUMERICIDENTIFIERLOOSE]})`);
      createToken("PRERELEASEIDENTIFIER", `(?:${src[t5.NUMERICIDENTIFIER]}|${src[t5.NONNUMERICIDENTIFIER]})`);
      createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t5.NUMERICIDENTIFIERLOOSE]}|${src[t5.NONNUMERICIDENTIFIER]})`);
      createToken("PRERELEASE", `(?:-(${src[t5.PRERELEASEIDENTIFIER]}(?:\\.${src[t5.PRERELEASEIDENTIFIER]})*))`);
      createToken("PRERELEASELOOSE", `(?:-?(${src[t5.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t5.PRERELEASEIDENTIFIERLOOSE]})*))`);
      createToken("BUILDIDENTIFIER", "[0-9A-Za-z-]+");
      createToken("BUILD", `(?:\\+(${src[t5.BUILDIDENTIFIER]}(?:\\.${src[t5.BUILDIDENTIFIER]})*))`);
      createToken("FULLPLAIN", `v?${src[t5.MAINVERSION]}${src[t5.PRERELEASE]}?${src[t5.BUILD]}?`);
      createToken("FULL", `^${src[t5.FULLPLAIN]}$`);
      createToken("LOOSEPLAIN", `[v=\\s]*${src[t5.MAINVERSIONLOOSE]}${src[t5.PRERELEASELOOSE]}?${src[t5.BUILD]}?`);
      createToken("LOOSE", `^${src[t5.LOOSEPLAIN]}$`);
      createToken("GTLT", "((?:<|>)?=?)");
      createToken("XRANGEIDENTIFIERLOOSE", `${src[t5.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
      createToken("XRANGEIDENTIFIER", `${src[t5.NUMERICIDENTIFIER]}|x|X|\\*`);
      createToken("XRANGEPLAIN", `[v=\\s]*(${src[t5.XRANGEIDENTIFIER]})(?:\\.(${src[t5.XRANGEIDENTIFIER]})(?:\\.(${src[t5.XRANGEIDENTIFIER]})(?:${src[t5.PRERELEASE]})?${src[t5.BUILD]}?)?)?`);
      createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t5.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t5.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t5.XRANGEIDENTIFIERLOOSE]})(?:${src[t5.PRERELEASELOOSE]})?${src[t5.BUILD]}?)?)?`);
      createToken("XRANGE", `^${src[t5.GTLT]}\\s*${src[t5.XRANGEPLAIN]}$`);
      createToken("XRANGELOOSE", `^${src[t5.GTLT]}\\s*${src[t5.XRANGEPLAINLOOSE]}$`);
      createToken("COERCE", `${"(^|[^\\d])(\\d{1,"}${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:$|[^\\d])`);
      createToken("COERCERTL", src[t5.COERCE], true);
      createToken("LONETILDE", "(?:~>?)");
      createToken("TILDETRIM", `(\\s*)${src[t5.LONETILDE]}\\s+`, true);
      exports.tildeTrimReplace = "$1~";
      createToken("TILDE", `^${src[t5.LONETILDE]}${src[t5.XRANGEPLAIN]}$`);
      createToken("TILDELOOSE", `^${src[t5.LONETILDE]}${src[t5.XRANGEPLAINLOOSE]}$`);
      createToken("LONECARET", "(?:\\^)");
      createToken("CARETTRIM", `(\\s*)${src[t5.LONECARET]}\\s+`, true);
      exports.caretTrimReplace = "$1^";
      createToken("CARET", `^${src[t5.LONECARET]}${src[t5.XRANGEPLAIN]}$`);
      createToken("CARETLOOSE", `^${src[t5.LONECARET]}${src[t5.XRANGEPLAINLOOSE]}$`);
      createToken("COMPARATORLOOSE", `^${src[t5.GTLT]}\\s*(${src[t5.LOOSEPLAIN]})$|^$`);
      createToken("COMPARATOR", `^${src[t5.GTLT]}\\s*(${src[t5.FULLPLAIN]})$|^$`);
      createToken("COMPARATORTRIM", `(\\s*)${src[t5.GTLT]}\\s*(${src[t5.LOOSEPLAIN]}|${src[t5.XRANGEPLAIN]})`, true);
      exports.comparatorTrimReplace = "$1$2$3";
      createToken("HYPHENRANGE", `^\\s*(${src[t5.XRANGEPLAIN]})\\s+-\\s+(${src[t5.XRANGEPLAIN]})\\s*$`);
      createToken("HYPHENRANGELOOSE", `^\\s*(${src[t5.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t5.XRANGEPLAINLOOSE]})\\s*$`);
      createToken("STAR", "(<|>)?=?\\s*\\*");
      createToken("GTE0", "^\\s*>=\\s*0.0.0\\s*$");
      createToken("GTE0PRE", "^\\s*>=\\s*0.0.0-0\\s*$");
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/internal/parse-options.js
  var require_parse_options = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/internal/parse-options.js"(exports, module) {
      var opts = ["includePrerelease", "loose", "rtl"];
      var parseOptions = (options) => !options ? {} : typeof options !== "object" ? {loose: true} : opts.filter((k) => options[k]).reduce((options2, k) => {
        options2[k] = true;
        return options2;
      }, {});
      module.exports = parseOptions;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/internal/identifiers.js
  var require_identifiers = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/internal/identifiers.js"(exports, module) {
      var numeric = /^[0-9]+$/;
      var compareIdentifiers = (a, b) => {
        const anum = numeric.test(a);
        const bnum = numeric.test(b);
        if (anum && bnum) {
          a = +a;
          b = +b;
        }
        return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
      };
      var rcompareIdentifiers = (a, b) => compareIdentifiers(b, a);
      module.exports = {
        compareIdentifiers,
        rcompareIdentifiers
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/classes/semver.js
  var require_semver = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/classes/semver.js"(exports, module) {
      var debug2 = require_debug();
      var {MAX_LENGTH, MAX_SAFE_INTEGER} = require_constants3();
      var {re, t: t5} = require_re();
      var parseOptions = require_parse_options();
      var {compareIdentifiers} = require_identifiers();
      var SemVer2 = class {
        constructor(version, options) {
          options = parseOptions(options);
          if (version instanceof SemVer2) {
            if (version.loose === !!options.loose && version.includePrerelease === !!options.includePrerelease) {
              return version;
            } else {
              version = version.version;
            }
          } else if (typeof version !== "string") {
            throw new TypeError(`Invalid Version: ${version}`);
          }
          if (version.length > MAX_LENGTH) {
            throw new TypeError(`version is longer than ${MAX_LENGTH} characters`);
          }
          debug2("SemVer", version, options);
          this.options = options;
          this.loose = !!options.loose;
          this.includePrerelease = !!options.includePrerelease;
          const m = version.trim().match(options.loose ? re[t5.LOOSE] : re[t5.FULL]);
          if (!m) {
            throw new TypeError(`Invalid Version: ${version}`);
          }
          this.raw = version;
          this.major = +m[1];
          this.minor = +m[2];
          this.patch = +m[3];
          if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
            throw new TypeError("Invalid major version");
          }
          if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
            throw new TypeError("Invalid minor version");
          }
          if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
            throw new TypeError("Invalid patch version");
          }
          if (!m[4]) {
            this.prerelease = [];
          } else {
            this.prerelease = m[4].split(".").map((id) => {
              if (/^[0-9]+$/.test(id)) {
                const num = +id;
                if (num >= 0 && num < MAX_SAFE_INTEGER) {
                  return num;
                }
              }
              return id;
            });
          }
          this.build = m[5] ? m[5].split(".") : [];
          this.format();
        }
        format() {
          this.version = `${this.major}.${this.minor}.${this.patch}`;
          if (this.prerelease.length) {
            this.version += `-${this.prerelease.join(".")}`;
          }
          return this.version;
        }
        toString() {
          return this.version;
        }
        compare(other) {
          debug2("SemVer.compare", this.version, this.options, other);
          if (!(other instanceof SemVer2)) {
            if (typeof other === "string" && other === this.version) {
              return 0;
            }
            other = new SemVer2(other, this.options);
          }
          if (other.version === this.version) {
            return 0;
          }
          return this.compareMain(other) || this.comparePre(other);
        }
        compareMain(other) {
          if (!(other instanceof SemVer2)) {
            other = new SemVer2(other, this.options);
          }
          return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
        }
        comparePre(other) {
          if (!(other instanceof SemVer2)) {
            other = new SemVer2(other, this.options);
          }
          if (this.prerelease.length && !other.prerelease.length) {
            return -1;
          } else if (!this.prerelease.length && other.prerelease.length) {
            return 1;
          } else if (!this.prerelease.length && !other.prerelease.length) {
            return 0;
          }
          let i = 0;
          do {
            const a = this.prerelease[i];
            const b = other.prerelease[i];
            debug2("prerelease compare", i, a, b);
            if (a === void 0 && b === void 0) {
              return 0;
            } else if (b === void 0) {
              return 1;
            } else if (a === void 0) {
              return -1;
            } else if (a === b) {
              continue;
            } else {
              return compareIdentifiers(a, b);
            }
          } while (++i);
        }
        compareBuild(other) {
          if (!(other instanceof SemVer2)) {
            other = new SemVer2(other, this.options);
          }
          let i = 0;
          do {
            const a = this.build[i];
            const b = other.build[i];
            debug2("prerelease compare", i, a, b);
            if (a === void 0 && b === void 0) {
              return 0;
            } else if (b === void 0) {
              return 1;
            } else if (a === void 0) {
              return -1;
            } else if (a === b) {
              continue;
            } else {
              return compareIdentifiers(a, b);
            }
          } while (++i);
        }
        inc(release, identifier) {
          switch (release) {
            case "premajor":
              this.prerelease.length = 0;
              this.patch = 0;
              this.minor = 0;
              this.major++;
              this.inc("pre", identifier);
              break;
            case "preminor":
              this.prerelease.length = 0;
              this.patch = 0;
              this.minor++;
              this.inc("pre", identifier);
              break;
            case "prepatch":
              this.prerelease.length = 0;
              this.inc("patch", identifier);
              this.inc("pre", identifier);
              break;
            case "prerelease":
              if (this.prerelease.length === 0) {
                this.inc("patch", identifier);
              }
              this.inc("pre", identifier);
              break;
            case "major":
              if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
                this.major++;
              }
              this.minor = 0;
              this.patch = 0;
              this.prerelease = [];
              break;
            case "minor":
              if (this.patch !== 0 || this.prerelease.length === 0) {
                this.minor++;
              }
              this.patch = 0;
              this.prerelease = [];
              break;
            case "patch":
              if (this.prerelease.length === 0) {
                this.patch++;
              }
              this.prerelease = [];
              break;
            case "pre":
              if (this.prerelease.length === 0) {
                this.prerelease = [0];
              } else {
                let i = this.prerelease.length;
                while (--i >= 0) {
                  if (typeof this.prerelease[i] === "number") {
                    this.prerelease[i]++;
                    i = -2;
                  }
                }
                if (i === -1) {
                  this.prerelease.push(0);
                }
              }
              if (identifier) {
                if (this.prerelease[0] === identifier) {
                  if (isNaN(this.prerelease[1])) {
                    this.prerelease = [identifier, 0];
                  }
                } else {
                  this.prerelease = [identifier, 0];
                }
              }
              break;
            default:
              throw new Error(`invalid increment argument: ${release}`);
          }
          this.format();
          this.raw = this.version;
          return this;
        }
      };
      module.exports = SemVer2;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/parse.js
  var require_parse4 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/parse.js"(exports, module) {
      var {MAX_LENGTH} = require_constants3();
      var {re, t: t5} = require_re();
      var SemVer2 = require_semver();
      var parseOptions = require_parse_options();
      var parse4 = (version, options) => {
        options = parseOptions(options);
        if (version instanceof SemVer2) {
          return version;
        }
        if (typeof version !== "string") {
          return null;
        }
        if (version.length > MAX_LENGTH) {
          return null;
        }
        const r = options.loose ? re[t5.LOOSE] : re[t5.FULL];
        if (!r.test(version)) {
          return null;
        }
        try {
          return new SemVer2(version, options);
        } catch (er) {
          return null;
        }
      };
      module.exports = parse4;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/valid.js
  var require_valid = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/valid.js"(exports, module) {
      var parse4 = require_parse4();
      var valid = (version, options) => {
        const v = parse4(version, options);
        return v ? v.version : null;
      };
      module.exports = valid;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/clean.js
  var require_clean = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/clean.js"(exports, module) {
      var parse4 = require_parse4();
      var clean2 = (version, options) => {
        const s = parse4(version.trim().replace(/^[=v]+/, ""), options);
        return s ? s.version : null;
      };
      module.exports = clean2;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/inc.js
  var require_inc = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/inc.js"(exports, module) {
      var SemVer2 = require_semver();
      var inc = (version, release, options, identifier) => {
        if (typeof options === "string") {
          identifier = options;
          options = void 0;
        }
        try {
          return new SemVer2(version, options).inc(release, identifier).version;
        } catch (er) {
          return null;
        }
      };
      module.exports = inc;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/compare.js
  var require_compare = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/compare.js"(exports, module) {
      var SemVer2 = require_semver();
      var compare = (a, b, loose) => new SemVer2(a, loose).compare(new SemVer2(b, loose));
      module.exports = compare;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/eq.js
  var require_eq = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/eq.js"(exports, module) {
      var compare = require_compare();
      var eq = (a, b, loose) => compare(a, b, loose) === 0;
      module.exports = eq;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/diff.js
  var require_diff = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/diff.js"(exports, module) {
      var parse4 = require_parse4();
      var eq = require_eq();
      var diff = (version1, version2) => {
        if (eq(version1, version2)) {
          return null;
        } else {
          const v1 = parse4(version1);
          const v2 = parse4(version2);
          const hasPre = v1.prerelease.length || v2.prerelease.length;
          const prefix = hasPre ? "pre" : "";
          const defaultResult = hasPre ? "prerelease" : "";
          for (const key in v1) {
            if (key === "major" || key === "minor" || key === "patch") {
              if (v1[key] !== v2[key]) {
                return prefix + key;
              }
            }
          }
          return defaultResult;
        }
      };
      module.exports = diff;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/major.js
  var require_major = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/major.js"(exports, module) {
      var SemVer2 = require_semver();
      var major = (a, loose) => new SemVer2(a, loose).major;
      module.exports = major;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/minor.js
  var require_minor = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/minor.js"(exports, module) {
      var SemVer2 = require_semver();
      var minor = (a, loose) => new SemVer2(a, loose).minor;
      module.exports = minor;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/patch.js
  var require_patch = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/patch.js"(exports, module) {
      var SemVer2 = require_semver();
      var patch4 = (a, loose) => new SemVer2(a, loose).patch;
      module.exports = patch4;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/prerelease.js
  var require_prerelease = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/prerelease.js"(exports, module) {
      var parse4 = require_parse4();
      var prerelease = (version, options) => {
        const parsed = parse4(version, options);
        return parsed && parsed.prerelease.length ? parsed.prerelease : null;
      };
      module.exports = prerelease;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/rcompare.js
  var require_rcompare = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/rcompare.js"(exports, module) {
      var compare = require_compare();
      var rcompare = (a, b, loose) => compare(b, a, loose);
      module.exports = rcompare;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/compare-loose.js
  var require_compare_loose = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/compare-loose.js"(exports, module) {
      var compare = require_compare();
      var compareLoose = (a, b) => compare(a, b, true);
      module.exports = compareLoose;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/compare-build.js
  var require_compare_build = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/compare-build.js"(exports, module) {
      var SemVer2 = require_semver();
      var compareBuild = (a, b, loose) => {
        const versionA = new SemVer2(a, loose);
        const versionB = new SemVer2(b, loose);
        return versionA.compare(versionB) || versionA.compareBuild(versionB);
      };
      module.exports = compareBuild;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/sort.js
  var require_sort = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/sort.js"(exports, module) {
      var compareBuild = require_compare_build();
      var sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose));
      module.exports = sort;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/rsort.js
  var require_rsort = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/rsort.js"(exports, module) {
      var compareBuild = require_compare_build();
      var rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose));
      module.exports = rsort;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/gt.js
  var require_gt = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/gt.js"(exports, module) {
      var compare = require_compare();
      var gt = (a, b, loose) => compare(a, b, loose) > 0;
      module.exports = gt;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/lt.js
  var require_lt = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/lt.js"(exports, module) {
      var compare = require_compare();
      var lt = (a, b, loose) => compare(a, b, loose) < 0;
      module.exports = lt;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/neq.js
  var require_neq = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/neq.js"(exports, module) {
      var compare = require_compare();
      var neq = (a, b, loose) => compare(a, b, loose) !== 0;
      module.exports = neq;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/gte.js
  var require_gte = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/gte.js"(exports, module) {
      var compare = require_compare();
      var gte = (a, b, loose) => compare(a, b, loose) >= 0;
      module.exports = gte;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/lte.js
  var require_lte = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/lte.js"(exports, module) {
      var compare = require_compare();
      var lte = (a, b, loose) => compare(a, b, loose) <= 0;
      module.exports = lte;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/cmp.js
  var require_cmp = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/cmp.js"(exports, module) {
      var eq = require_eq();
      var neq = require_neq();
      var gt = require_gt();
      var gte = require_gte();
      var lt = require_lt();
      var lte = require_lte();
      var cmp = (a, op, b, loose) => {
        switch (op) {
          case "===":
            if (typeof a === "object")
              a = a.version;
            if (typeof b === "object")
              b = b.version;
            return a === b;
          case "!==":
            if (typeof a === "object")
              a = a.version;
            if (typeof b === "object")
              b = b.version;
            return a !== b;
          case "":
          case "=":
          case "==":
            return eq(a, b, loose);
          case "!=":
            return neq(a, b, loose);
          case ">":
            return gt(a, b, loose);
          case ">=":
            return gte(a, b, loose);
          case "<":
            return lt(a, b, loose);
          case "<=":
            return lte(a, b, loose);
          default:
            throw new TypeError(`Invalid operator: ${op}`);
        }
      };
      module.exports = cmp;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/coerce.js
  var require_coerce = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/coerce.js"(exports, module) {
      var SemVer2 = require_semver();
      var parse4 = require_parse4();
      var {re, t: t5} = require_re();
      var coerce = (version, options) => {
        if (version instanceof SemVer2) {
          return version;
        }
        if (typeof version === "number") {
          version = String(version);
        }
        if (typeof version !== "string") {
          return null;
        }
        options = options || {};
        let match2 = null;
        if (!options.rtl) {
          match2 = version.match(re[t5.COERCE]);
        } else {
          let next;
          while ((next = re[t5.COERCERTL].exec(version)) && (!match2 || match2.index + match2[0].length !== version.length)) {
            if (!match2 || next.index + next[0].length !== match2.index + match2[0].length) {
              match2 = next;
            }
            re[t5.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
          }
          re[t5.COERCERTL].lastIndex = -1;
        }
        if (match2 === null)
          return null;
        return parse4(`${match2[2]}.${match2[3] || "0"}.${match2[4] || "0"}`, options);
      };
      module.exports = coerce;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yallist-npm-4.0.0-b493d9e907-343617202a.zip/node_modules/yallist/iterator.js
  var require_iterator = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yallist-npm-4.0.0-b493d9e907-343617202a.zip/node_modules/yallist/iterator.js"(exports, module) {
      "use strict";
      module.exports = function(Yallist) {
        Yallist.prototype[Symbol.iterator] = function* () {
          for (let walker = this.head; walker; walker = walker.next) {
            yield walker.value;
          }
        };
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yallist-npm-4.0.0-b493d9e907-343617202a.zip/node_modules/yallist/yallist.js
  var require_yallist = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yallist-npm-4.0.0-b493d9e907-343617202a.zip/node_modules/yallist/yallist.js"(exports, module) {
      "use strict";
      module.exports = Yallist;
      Yallist.Node = Node;
      Yallist.create = Yallist;
      function Yallist(list) {
        var self2 = this;
        if (!(self2 instanceof Yallist)) {
          self2 = new Yallist();
        }
        self2.tail = null;
        self2.head = null;
        self2.length = 0;
        if (list && typeof list.forEach === "function") {
          list.forEach(function(item) {
            self2.push(item);
          });
        } else if (arguments.length > 0) {
          for (var i = 0, l = arguments.length; i < l; i++) {
            self2.push(arguments[i]);
          }
        }
        return self2;
      }
      Yallist.prototype.removeNode = function(node) {
        if (node.list !== this) {
          throw new Error("removing node which does not belong to this list");
        }
        var next = node.next;
        var prev = node.prev;
        if (next) {
          next.prev = prev;
        }
        if (prev) {
          prev.next = next;
        }
        if (node === this.head) {
          this.head = next;
        }
        if (node === this.tail) {
          this.tail = prev;
        }
        node.list.length--;
        node.next = null;
        node.prev = null;
        node.list = null;
        return next;
      };
      Yallist.prototype.unshiftNode = function(node) {
        if (node === this.head) {
          return;
        }
        if (node.list) {
          node.list.removeNode(node);
        }
        var head = this.head;
        node.list = this;
        node.next = head;
        if (head) {
          head.prev = node;
        }
        this.head = node;
        if (!this.tail) {
          this.tail = node;
        }
        this.length++;
      };
      Yallist.prototype.pushNode = function(node) {
        if (node === this.tail) {
          return;
        }
        if (node.list) {
          node.list.removeNode(node);
        }
        var tail = this.tail;
        node.list = this;
        node.prev = tail;
        if (tail) {
          tail.next = node;
        }
        this.tail = node;
        if (!this.head) {
          this.head = node;
        }
        this.length++;
      };
      Yallist.prototype.push = function() {
        for (var i = 0, l = arguments.length; i < l; i++) {
          push(this, arguments[i]);
        }
        return this.length;
      };
      Yallist.prototype.unshift = function() {
        for (var i = 0, l = arguments.length; i < l; i++) {
          unshift(this, arguments[i]);
        }
        return this.length;
      };
      Yallist.prototype.pop = function() {
        if (!this.tail) {
          return void 0;
        }
        var res = this.tail.value;
        this.tail = this.tail.prev;
        if (this.tail) {
          this.tail.next = null;
        } else {
          this.head = null;
        }
        this.length--;
        return res;
      };
      Yallist.prototype.shift = function() {
        if (!this.head) {
          return void 0;
        }
        var res = this.head.value;
        this.head = this.head.next;
        if (this.head) {
          this.head.prev = null;
        } else {
          this.tail = null;
        }
        this.length--;
        return res;
      };
      Yallist.prototype.forEach = function(fn, thisp) {
        thisp = thisp || this;
        for (var walker = this.head, i = 0; walker !== null; i++) {
          fn.call(thisp, walker.value, i, this);
          walker = walker.next;
        }
      };
      Yallist.prototype.forEachReverse = function(fn, thisp) {
        thisp = thisp || this;
        for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
          fn.call(thisp, walker.value, i, this);
          walker = walker.prev;
        }
      };
      Yallist.prototype.get = function(n) {
        for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
          walker = walker.next;
        }
        if (i === n && walker !== null) {
          return walker.value;
        }
      };
      Yallist.prototype.getReverse = function(n) {
        for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
          walker = walker.prev;
        }
        if (i === n && walker !== null) {
          return walker.value;
        }
      };
      Yallist.prototype.map = function(fn, thisp) {
        thisp = thisp || this;
        var res = new Yallist();
        for (var walker = this.head; walker !== null; ) {
          res.push(fn.call(thisp, walker.value, this));
          walker = walker.next;
        }
        return res;
      };
      Yallist.prototype.mapReverse = function(fn, thisp) {
        thisp = thisp || this;
        var res = new Yallist();
        for (var walker = this.tail; walker !== null; ) {
          res.push(fn.call(thisp, walker.value, this));
          walker = walker.prev;
        }
        return res;
      };
      Yallist.prototype.reduce = function(fn, initial) {
        var acc;
        var walker = this.head;
        if (arguments.length > 1) {
          acc = initial;
        } else if (this.head) {
          walker = this.head.next;
          acc = this.head.value;
        } else {
          throw new TypeError("Reduce of empty list with no initial value");
        }
        for (var i = 0; walker !== null; i++) {
          acc = fn(acc, walker.value, i);
          walker = walker.next;
        }
        return acc;
      };
      Yallist.prototype.reduceReverse = function(fn, initial) {
        var acc;
        var walker = this.tail;
        if (arguments.length > 1) {
          acc = initial;
        } else if (this.tail) {
          walker = this.tail.prev;
          acc = this.tail.value;
        } else {
          throw new TypeError("Reduce of empty list with no initial value");
        }
        for (var i = this.length - 1; walker !== null; i--) {
          acc = fn(acc, walker.value, i);
          walker = walker.prev;
        }
        return acc;
      };
      Yallist.prototype.toArray = function() {
        var arr = new Array(this.length);
        for (var i = 0, walker = this.head; walker !== null; i++) {
          arr[i] = walker.value;
          walker = walker.next;
        }
        return arr;
      };
      Yallist.prototype.toArrayReverse = function() {
        var arr = new Array(this.length);
        for (var i = 0, walker = this.tail; walker !== null; i++) {
          arr[i] = walker.value;
          walker = walker.prev;
        }
        return arr;
      };
      Yallist.prototype.slice = function(from, to) {
        to = to || this.length;
        if (to < 0) {
          to += this.length;
        }
        from = from || 0;
        if (from < 0) {
          from += this.length;
        }
        var ret = new Yallist();
        if (to < from || to < 0) {
          return ret;
        }
        if (from < 0) {
          from = 0;
        }
        if (to > this.length) {
          to = this.length;
        }
        for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
          walker = walker.next;
        }
        for (; walker !== null && i < to; i++, walker = walker.next) {
          ret.push(walker.value);
        }
        return ret;
      };
      Yallist.prototype.sliceReverse = function(from, to) {
        to = to || this.length;
        if (to < 0) {
          to += this.length;
        }
        from = from || 0;
        if (from < 0) {
          from += this.length;
        }
        var ret = new Yallist();
        if (to < from || to < 0) {
          return ret;
        }
        if (from < 0) {
          from = 0;
        }
        if (to > this.length) {
          to = this.length;
        }
        for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
          walker = walker.prev;
        }
        for (; walker !== null && i > from; i--, walker = walker.prev) {
          ret.push(walker.value);
        }
        return ret;
      };
      Yallist.prototype.splice = function(start2, deleteCount, ...nodes) {
        if (start2 > this.length) {
          start2 = this.length - 1;
        }
        if (start2 < 0) {
          start2 = this.length + start2;
        }
        for (var i = 0, walker = this.head; walker !== null && i < start2; i++) {
          walker = walker.next;
        }
        var ret = [];
        for (var i = 0; walker && i < deleteCount; i++) {
          ret.push(walker.value);
          walker = this.removeNode(walker);
        }
        if (walker === null) {
          walker = this.tail;
        }
        if (walker !== this.head && walker !== this.tail) {
          walker = walker.prev;
        }
        for (var i = 0; i < nodes.length; i++) {
          walker = insert(this, walker, nodes[i]);
        }
        return ret;
      };
      Yallist.prototype.reverse = function() {
        var head = this.head;
        var tail = this.tail;
        for (var walker = head; walker !== null; walker = walker.prev) {
          var p = walker.prev;
          walker.prev = walker.next;
          walker.next = p;
        }
        this.head = tail;
        this.tail = head;
        return this;
      };
      function insert(self2, node, value) {
        var inserted = node === self2.head ? new Node(value, null, node, self2) : new Node(value, node, node.next, self2);
        if (inserted.next === null) {
          self2.tail = inserted;
        }
        if (inserted.prev === null) {
          self2.head = inserted;
        }
        self2.length++;
        return inserted;
      }
      function push(self2, item) {
        self2.tail = new Node(item, self2.tail, null, self2);
        if (!self2.head) {
          self2.head = self2.tail;
        }
        self2.length++;
      }
      function unshift(self2, item) {
        self2.head = new Node(item, null, self2.head, self2);
        if (!self2.tail) {
          self2.tail = self2.head;
        }
        self2.length++;
      }
      function Node(value, prev, next, list) {
        if (!(this instanceof Node)) {
          return new Node(value, prev, next, list);
        }
        this.list = list;
        this.value = value;
        if (prev) {
          prev.next = this;
          this.prev = prev;
        } else {
          this.prev = null;
        }
        if (next) {
          next.prev = this;
          this.next = next;
        } else {
          this.next = null;
        }
      }
      try {
        require_iterator()(Yallist);
      } catch (er) {
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lru-cache-npm-6.0.0-b4c8668fe1-f97f499f89.zip/node_modules/lru-cache/index.js
  var require_lru_cache = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lru-cache-npm-6.0.0-b4c8668fe1-f97f499f89.zip/node_modules/lru-cache/index.js"(exports, module) {
      "use strict";
      var Yallist = require_yallist();
      var MAX = Symbol("max");
      var LENGTH = Symbol("length");
      var LENGTH_CALCULATOR = Symbol("lengthCalculator");
      var ALLOW_STALE = Symbol("allowStale");
      var MAX_AGE = Symbol("maxAge");
      var DISPOSE = Symbol("dispose");
      var NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet");
      var LRU_LIST = Symbol("lruList");
      var CACHE = Symbol("cache");
      var UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet");
      var naiveLength = () => 1;
      var LRUCache = class {
        constructor(options) {
          if (typeof options === "number")
            options = {max: options};
          if (!options)
            options = {};
          if (options.max && (typeof options.max !== "number" || options.max < 0))
            throw new TypeError("max must be a non-negative number");
          const max = this[MAX] = options.max || Infinity;
          const lc = options.length || naiveLength;
          this[LENGTH_CALCULATOR] = typeof lc !== "function" ? naiveLength : lc;
          this[ALLOW_STALE] = options.stale || false;
          if (options.maxAge && typeof options.maxAge !== "number")
            throw new TypeError("maxAge must be a number");
          this[MAX_AGE] = options.maxAge || 0;
          this[DISPOSE] = options.dispose;
          this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
          this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
          this.reset();
        }
        set max(mL) {
          if (typeof mL !== "number" || mL < 0)
            throw new TypeError("max must be a non-negative number");
          this[MAX] = mL || Infinity;
          trim(this);
        }
        get max() {
          return this[MAX];
        }
        set allowStale(allowStale) {
          this[ALLOW_STALE] = !!allowStale;
        }
        get allowStale() {
          return this[ALLOW_STALE];
        }
        set maxAge(mA) {
          if (typeof mA !== "number")
            throw new TypeError("maxAge must be a non-negative number");
          this[MAX_AGE] = mA;
          trim(this);
        }
        get maxAge() {
          return this[MAX_AGE];
        }
        set lengthCalculator(lC) {
          if (typeof lC !== "function")
            lC = naiveLength;
          if (lC !== this[LENGTH_CALCULATOR]) {
            this[LENGTH_CALCULATOR] = lC;
            this[LENGTH] = 0;
            this[LRU_LIST].forEach((hit) => {
              hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
              this[LENGTH] += hit.length;
            });
          }
          trim(this);
        }
        get lengthCalculator() {
          return this[LENGTH_CALCULATOR];
        }
        get length() {
          return this[LENGTH];
        }
        get itemCount() {
          return this[LRU_LIST].length;
        }
        rforEach(fn, thisp) {
          thisp = thisp || this;
          for (let walker = this[LRU_LIST].tail; walker !== null; ) {
            const prev = walker.prev;
            forEachStep(this, fn, walker, thisp);
            walker = prev;
          }
        }
        forEach(fn, thisp) {
          thisp = thisp || this;
          for (let walker = this[LRU_LIST].head; walker !== null; ) {
            const next = walker.next;
            forEachStep(this, fn, walker, thisp);
            walker = next;
          }
        }
        keys() {
          return this[LRU_LIST].toArray().map((k) => k.key);
        }
        values() {
          return this[LRU_LIST].toArray().map((k) => k.value);
        }
        reset() {
          if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
            this[LRU_LIST].forEach((hit) => this[DISPOSE](hit.key, hit.value));
          }
          this[CACHE] = new Map();
          this[LRU_LIST] = new Yallist();
          this[LENGTH] = 0;
        }
        dump() {
          return this[LRU_LIST].map((hit) => isStale(this, hit) ? false : {
            k: hit.key,
            v: hit.value,
            e: hit.now + (hit.maxAge || 0)
          }).toArray().filter((h) => h);
        }
        dumpLru() {
          return this[LRU_LIST];
        }
        set(key, value, maxAge) {
          maxAge = maxAge || this[MAX_AGE];
          if (maxAge && typeof maxAge !== "number")
            throw new TypeError("maxAge must be a number");
          const now2 = maxAge ? Date.now() : 0;
          const len = this[LENGTH_CALCULATOR](value, key);
          if (this[CACHE].has(key)) {
            if (len > this[MAX]) {
              del3(this, this[CACHE].get(key));
              return false;
            }
            const node = this[CACHE].get(key);
            const item = node.value;
            if (this[DISPOSE]) {
              if (!this[NO_DISPOSE_ON_SET])
                this[DISPOSE](key, item.value);
            }
            item.now = now2;
            item.maxAge = maxAge;
            item.value = value;
            this[LENGTH] += len - item.length;
            item.length = len;
            this.get(key);
            trim(this);
            return true;
          }
          const hit = new Entry(key, value, len, now2, maxAge);
          if (hit.length > this[MAX]) {
            if (this[DISPOSE])
              this[DISPOSE](key, value);
            return false;
          }
          this[LENGTH] += hit.length;
          this[LRU_LIST].unshift(hit);
          this[CACHE].set(key, this[LRU_LIST].head);
          trim(this);
          return true;
        }
        has(key) {
          if (!this[CACHE].has(key))
            return false;
          const hit = this[CACHE].get(key).value;
          return !isStale(this, hit);
        }
        get(key) {
          return get3(this, key, true);
        }
        peek(key) {
          return get3(this, key, false);
        }
        pop() {
          const node = this[LRU_LIST].tail;
          if (!node)
            return null;
          del3(this, node);
          return node.value;
        }
        del(key) {
          del3(this, this[CACHE].get(key));
        }
        load(arr) {
          this.reset();
          const now2 = Date.now();
          for (let l = arr.length - 1; l >= 0; l--) {
            const hit = arr[l];
            const expiresAt = hit.e || 0;
            if (expiresAt === 0)
              this.set(hit.k, hit.v);
            else {
              const maxAge = expiresAt - now2;
              if (maxAge > 0) {
                this.set(hit.k, hit.v, maxAge);
              }
            }
          }
        }
        prune() {
          this[CACHE].forEach((value, key) => get3(this, key, false));
        }
      };
      var get3 = (self2, key, doUse) => {
        const node = self2[CACHE].get(key);
        if (node) {
          const hit = node.value;
          if (isStale(self2, hit)) {
            del3(self2, node);
            if (!self2[ALLOW_STALE])
              return void 0;
          } else {
            if (doUse) {
              if (self2[UPDATE_AGE_ON_GET])
                node.value.now = Date.now();
              self2[LRU_LIST].unshiftNode(node);
            }
          }
          return hit.value;
        }
      };
      var isStale = (self2, hit) => {
        if (!hit || !hit.maxAge && !self2[MAX_AGE])
          return false;
        const diff = Date.now() - hit.now;
        return hit.maxAge ? diff > hit.maxAge : self2[MAX_AGE] && diff > self2[MAX_AGE];
      };
      var trim = (self2) => {
        if (self2[LENGTH] > self2[MAX]) {
          for (let walker = self2[LRU_LIST].tail; self2[LENGTH] > self2[MAX] && walker !== null; ) {
            const prev = walker.prev;
            del3(self2, walker);
            walker = prev;
          }
        }
      };
      var del3 = (self2, node) => {
        if (node) {
          const hit = node.value;
          if (self2[DISPOSE])
            self2[DISPOSE](hit.key, hit.value);
          self2[LENGTH] -= hit.length;
          self2[CACHE].delete(hit.key);
          self2[LRU_LIST].removeNode(node);
        }
      };
      var Entry = class {
        constructor(key, value, length, now2, maxAge) {
          this.key = key;
          this.value = value;
          this.length = length;
          this.now = now2;
          this.maxAge = maxAge || 0;
        }
      };
      var forEachStep = (self2, fn, node, thisp) => {
        let hit = node.value;
        if (isStale(self2, hit)) {
          del3(self2, node);
          if (!self2[ALLOW_STALE])
            hit = void 0;
        }
        if (hit)
          fn.call(thisp, hit.value, hit.key, self2);
      };
      module.exports = LRUCache;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/classes/range.js
  var require_range = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/classes/range.js"(exports, module) {
      var Range = class {
        constructor(range, options) {
          options = parseOptions(options);
          if (range instanceof Range) {
            if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
              return range;
            } else {
              return new Range(range.raw, options);
            }
          }
          if (range instanceof Comparator) {
            this.raw = range.value;
            this.set = [[range]];
            this.format();
            return this;
          }
          this.options = options;
          this.loose = !!options.loose;
          this.includePrerelease = !!options.includePrerelease;
          this.raw = range;
          this.set = range.split(/\s*\|\|\s*/).map((range2) => this.parseRange(range2.trim())).filter((c) => c.length);
          if (!this.set.length) {
            throw new TypeError(`Invalid SemVer Range: ${range}`);
          }
          if (this.set.length > 1) {
            const first = this.set[0];
            this.set = this.set.filter((c) => !isNullSet(c[0]));
            if (this.set.length === 0)
              this.set = [first];
            else if (this.set.length > 1) {
              for (const c of this.set) {
                if (c.length === 1 && isAny(c[0])) {
                  this.set = [c];
                  break;
                }
              }
            }
          }
          this.format();
        }
        format() {
          this.range = this.set.map((comps) => {
            return comps.join(" ").trim();
          }).join("||").trim();
          return this.range;
        }
        toString() {
          return this.range;
        }
        parseRange(range) {
          range = range.trim();
          const memoOpts = Object.keys(this.options).join(",");
          const memoKey = `parseRange:${memoOpts}:${range}`;
          const cached = cache2.get(memoKey);
          if (cached)
            return cached;
          const loose = this.options.loose;
          const hr = loose ? re[t5.HYPHENRANGELOOSE] : re[t5.HYPHENRANGE];
          range = range.replace(hr, hyphenReplace(this.options.includePrerelease));
          debug2("hyphen replace", range);
          range = range.replace(re[t5.COMPARATORTRIM], comparatorTrimReplace);
          debug2("comparator trim", range, re[t5.COMPARATORTRIM]);
          range = range.replace(re[t5.TILDETRIM], tildeTrimReplace);
          range = range.replace(re[t5.CARETTRIM], caretTrimReplace);
          range = range.split(/\s+/).join(" ");
          const compRe = loose ? re[t5.COMPARATORLOOSE] : re[t5.COMPARATOR];
          const rangeList = range.split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options)).filter(this.options.loose ? (comp) => !!comp.match(compRe) : () => true).map((comp) => new Comparator(comp, this.options));
          const l = rangeList.length;
          const rangeMap = new Map();
          for (const comp of rangeList) {
            if (isNullSet(comp))
              return [comp];
            rangeMap.set(comp.value, comp);
          }
          if (rangeMap.size > 1 && rangeMap.has(""))
            rangeMap.delete("");
          const result = [...rangeMap.values()];
          cache2.set(memoKey, result);
          return result;
        }
        intersects(range, options) {
          if (!(range instanceof Range)) {
            throw new TypeError("a Range is required");
          }
          return this.set.some((thisComparators) => {
            return isSatisfiable(thisComparators, options) && range.set.some((rangeComparators) => {
              return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => {
                return rangeComparators.every((rangeComparator) => {
                  return thisComparator.intersects(rangeComparator, options);
                });
              });
            });
          });
        }
        test(version) {
          if (!version) {
            return false;
          }
          if (typeof version === "string") {
            try {
              version = new SemVer2(version, this.options);
            } catch (er) {
              return false;
            }
          }
          for (let i = 0; i < this.set.length; i++) {
            if (testSet(this.set[i], version, this.options)) {
              return true;
            }
          }
          return false;
        }
      };
      module.exports = Range;
      var LRU = require_lru_cache();
      var cache2 = new LRU({max: 1e3});
      var parseOptions = require_parse_options();
      var Comparator = require_comparator();
      var debug2 = require_debug();
      var SemVer2 = require_semver();
      var {
        re,
        t: t5,
        comparatorTrimReplace,
        tildeTrimReplace,
        caretTrimReplace
      } = require_re();
      var isNullSet = (c) => c.value === "<0.0.0-0";
      var isAny = (c) => c.value === "";
      var isSatisfiable = (comparators, options) => {
        let result = true;
        const remainingComparators = comparators.slice();
        let testComparator = remainingComparators.pop();
        while (result && remainingComparators.length) {
          result = remainingComparators.every((otherComparator) => {
            return testComparator.intersects(otherComparator, options);
          });
          testComparator = remainingComparators.pop();
        }
        return result;
      };
      var parseComparator = (comp, options) => {
        debug2("comp", comp, options);
        comp = replaceCarets(comp, options);
        debug2("caret", comp);
        comp = replaceTildes(comp, options);
        debug2("tildes", comp);
        comp = replaceXRanges(comp, options);
        debug2("xrange", comp);
        comp = replaceStars(comp, options);
        debug2("stars", comp);
        return comp;
      };
      var isX = (id) => !id || id.toLowerCase() === "x" || id === "*";
      var replaceTildes = (comp, options) => comp.trim().split(/\s+/).map((comp2) => {
        return replaceTilde(comp2, options);
      }).join(" ");
      var replaceTilde = (comp, options) => {
        const r = options.loose ? re[t5.TILDELOOSE] : re[t5.TILDE];
        return comp.replace(r, (_, M, m, p, pr) => {
          debug2("tilde", comp, _, M, m, p, pr);
          let ret;
          if (isX(M)) {
            ret = "";
          } else if (isX(m)) {
            ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
          } else if (isX(p)) {
            ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
          } else if (pr) {
            debug2("replaceTilde pr", pr);
            ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
          } else {
            ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;
          }
          debug2("tilde return", ret);
          return ret;
        });
      };
      var replaceCarets = (comp, options) => comp.trim().split(/\s+/).map((comp2) => {
        return replaceCaret(comp2, options);
      }).join(" ");
      var replaceCaret = (comp, options) => {
        debug2("caret", comp, options);
        const r = options.loose ? re[t5.CARETLOOSE] : re[t5.CARET];
        const z = options.includePrerelease ? "-0" : "";
        return comp.replace(r, (_, M, m, p, pr) => {
          debug2("caret", comp, _, M, m, p, pr);
          let ret;
          if (isX(M)) {
            ret = "";
          } else if (isX(m)) {
            ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
          } else if (isX(p)) {
            if (M === "0") {
              ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
            } else {
              ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
            }
          } else if (pr) {
            debug2("replaceCaret pr", pr);
            if (M === "0") {
              if (m === "0") {
                ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`;
              } else {
                ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
              }
            } else {
              ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`;
            }
          } else {
            debug2("no pr");
            if (M === "0") {
              if (m === "0") {
                ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`;
              } else {
                ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`;
              }
            } else {
              ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;
            }
          }
          debug2("caret return", ret);
          return ret;
        });
      };
      var replaceXRanges = (comp, options) => {
        debug2("replaceXRanges", comp, options);
        return comp.split(/\s+/).map((comp2) => {
          return replaceXRange(comp2, options);
        }).join(" ");
      };
      var replaceXRange = (comp, options) => {
        comp = comp.trim();
        const r = options.loose ? re[t5.XRANGELOOSE] : re[t5.XRANGE];
        return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
          debug2("xRange", comp, ret, gtlt, M, m, p, pr);
          const xM = isX(M);
          const xm = xM || isX(m);
          const xp = xm || isX(p);
          const anyX = xp;
          if (gtlt === "=" && anyX) {
            gtlt = "";
          }
          pr = options.includePrerelease ? "-0" : "";
          if (xM) {
            if (gtlt === ">" || gtlt === "<") {
              ret = "<0.0.0-0";
            } else {
              ret = "*";
            }
          } else if (gtlt && anyX) {
            if (xm) {
              m = 0;
            }
            p = 0;
            if (gtlt === ">") {
              gtlt = ">=";
              if (xm) {
                M = +M + 1;
                m = 0;
                p = 0;
              } else {
                m = +m + 1;
                p = 0;
              }
            } else if (gtlt === "<=") {
              gtlt = "<";
              if (xm) {
                M = +M + 1;
              } else {
                m = +m + 1;
              }
            }
            if (gtlt === "<")
              pr = "-0";
            ret = `${gtlt + M}.${m}.${p}${pr}`;
          } else if (xm) {
            ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
          } else if (xp) {
            ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`;
          }
          debug2("xRange return", ret);
          return ret;
        });
      };
      var replaceStars = (comp, options) => {
        debug2("replaceStars", comp, options);
        return comp.trim().replace(re[t5.STAR], "");
      };
      var replaceGTE0 = (comp, options) => {
        debug2("replaceGTE0", comp, options);
        return comp.trim().replace(re[options.includePrerelease ? t5.GTE0PRE : t5.GTE0], "");
      };
      var hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) => {
        if (isX(fM)) {
          from = "";
        } else if (isX(fm)) {
          from = `>=${fM}.0.0${incPr ? "-0" : ""}`;
        } else if (isX(fp)) {
          from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
        } else if (fpr) {
          from = `>=${from}`;
        } else {
          from = `>=${from}${incPr ? "-0" : ""}`;
        }
        if (isX(tM)) {
          to = "";
        } else if (isX(tm)) {
          to = `<${+tM + 1}.0.0-0`;
        } else if (isX(tp)) {
          to = `<${tM}.${+tm + 1}.0-0`;
        } else if (tpr) {
          to = `<=${tM}.${tm}.${tp}-${tpr}`;
        } else if (incPr) {
          to = `<${tM}.${tm}.${+tp + 1}-0`;
        } else {
          to = `<=${to}`;
        }
        return `${from} ${to}`.trim();
      };
      var testSet = (set, version, options) => {
        for (let i = 0; i < set.length; i++) {
          if (!set[i].test(version)) {
            return false;
          }
        }
        if (version.prerelease.length && !options.includePrerelease) {
          for (let i = 0; i < set.length; i++) {
            debug2(set[i].semver);
            if (set[i].semver === Comparator.ANY) {
              continue;
            }
            if (set[i].semver.prerelease.length > 0) {
              const allowed = set[i].semver;
              if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {
                return true;
              }
            }
          }
          return false;
        }
        return true;
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/classes/comparator.js
  var require_comparator = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/classes/comparator.js"(exports, module) {
      var ANY = Symbol("SemVer ANY");
      var Comparator = class {
        static get ANY() {
          return ANY;
        }
        constructor(comp, options) {
          options = parseOptions(options);
          if (comp instanceof Comparator) {
            if (comp.loose === !!options.loose) {
              return comp;
            } else {
              comp = comp.value;
            }
          }
          debug2("comparator", comp, options);
          this.options = options;
          this.loose = !!options.loose;
          this.parse(comp);
          if (this.semver === ANY) {
            this.value = "";
          } else {
            this.value = this.operator + this.semver.version;
          }
          debug2("comp", this);
        }
        parse(comp) {
          const r = this.options.loose ? re[t5.COMPARATORLOOSE] : re[t5.COMPARATOR];
          const m = comp.match(r);
          if (!m) {
            throw new TypeError(`Invalid comparator: ${comp}`);
          }
          this.operator = m[1] !== void 0 ? m[1] : "";
          if (this.operator === "=") {
            this.operator = "";
          }
          if (!m[2]) {
            this.semver = ANY;
          } else {
            this.semver = new SemVer2(m[2], this.options.loose);
          }
        }
        toString() {
          return this.value;
        }
        test(version) {
          debug2("Comparator.test", version, this.options.loose);
          if (this.semver === ANY || version === ANY) {
            return true;
          }
          if (typeof version === "string") {
            try {
              version = new SemVer2(version, this.options);
            } catch (er) {
              return false;
            }
          }
          return cmp(version, this.operator, this.semver, this.options);
        }
        intersects(comp, options) {
          if (!(comp instanceof Comparator)) {
            throw new TypeError("a Comparator is required");
          }
          if (!options || typeof options !== "object") {
            options = {
              loose: !!options,
              includePrerelease: false
            };
          }
          if (this.operator === "") {
            if (this.value === "") {
              return true;
            }
            return new Range(comp.value, options).test(this.value);
          } else if (comp.operator === "") {
            if (comp.value === "") {
              return true;
            }
            return new Range(this.value, options).test(comp.semver);
          }
          const sameDirectionIncreasing = (this.operator === ">=" || this.operator === ">") && (comp.operator === ">=" || comp.operator === ">");
          const sameDirectionDecreasing = (this.operator === "<=" || this.operator === "<") && (comp.operator === "<=" || comp.operator === "<");
          const sameSemVer = this.semver.version === comp.semver.version;
          const differentDirectionsInclusive = (this.operator === ">=" || this.operator === "<=") && (comp.operator === ">=" || comp.operator === "<=");
          const oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && (this.operator === ">=" || this.operator === ">") && (comp.operator === "<=" || comp.operator === "<");
          const oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && (this.operator === "<=" || this.operator === "<") && (comp.operator === ">=" || comp.operator === ">");
          return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
        }
      };
      module.exports = Comparator;
      var parseOptions = require_parse_options();
      var {re, t: t5} = require_re();
      var cmp = require_cmp();
      var debug2 = require_debug();
      var SemVer2 = require_semver();
      var Range = require_range();
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/satisfies.js
  var require_satisfies = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/functions/satisfies.js"(exports, module) {
      var Range = require_range();
      var satisfies = (version, range, options) => {
        try {
          range = new Range(range, options);
        } catch (er) {
          return false;
        }
        return range.test(version);
      };
      module.exports = satisfies;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/ranges/to-comparators.js
  var require_to_comparators = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/ranges/to-comparators.js"(exports, module) {
      var Range = require_range();
      var toComparators = (range, options) => new Range(range, options).set.map((comp) => comp.map((c) => c.value).join(" ").trim().split(" "));
      module.exports = toComparators;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/ranges/max-satisfying.js
  var require_max_satisfying = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/ranges/max-satisfying.js"(exports, module) {
      var SemVer2 = require_semver();
      var Range = require_range();
      var maxSatisfying = (versions, range, options) => {
        let max = null;
        let maxSV = null;
        let rangeObj = null;
        try {
          rangeObj = new Range(range, options);
        } catch (er) {
          return null;
        }
        versions.forEach((v) => {
          if (rangeObj.test(v)) {
            if (!max || maxSV.compare(v) === -1) {
              max = v;
              maxSV = new SemVer2(max, options);
            }
          }
        });
        return max;
      };
      module.exports = maxSatisfying;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/ranges/min-satisfying.js
  var require_min_satisfying = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/ranges/min-satisfying.js"(exports, module) {
      var SemVer2 = require_semver();
      var Range = require_range();
      var minSatisfying = (versions, range, options) => {
        let min = null;
        let minSV = null;
        let rangeObj = null;
        try {
          rangeObj = new Range(range, options);
        } catch (er) {
          return null;
        }
        versions.forEach((v) => {
          if (rangeObj.test(v)) {
            if (!min || minSV.compare(v) === 1) {
              min = v;
              minSV = new SemVer2(min, options);
            }
          }
        });
        return min;
      };
      module.exports = minSatisfying;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/ranges/min-version.js
  var require_min_version = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/ranges/min-version.js"(exports, module) {
      var SemVer2 = require_semver();
      var Range = require_range();
      var gt = require_gt();
      var minVersion = (range, loose) => {
        range = new Range(range, loose);
        let minver = new SemVer2("0.0.0");
        if (range.test(minver)) {
          return minver;
        }
        minver = new SemVer2("0.0.0-0");
        if (range.test(minver)) {
          return minver;
        }
        minver = null;
        for (let i = 0; i < range.set.length; ++i) {
          const comparators = range.set[i];
          let setMin = null;
          comparators.forEach((comparator) => {
            const compver = new SemVer2(comparator.semver.version);
            switch (comparator.operator) {
              case ">":
                if (compver.prerelease.length === 0) {
                  compver.patch++;
                } else {
                  compver.prerelease.push(0);
                }
                compver.raw = compver.format();
              case "":
              case ">=":
                if (!setMin || gt(compver, setMin)) {
                  setMin = compver;
                }
                break;
              case "<":
              case "<=":
                break;
              default:
                throw new Error(`Unexpected operation: ${comparator.operator}`);
            }
          });
          if (setMin && (!minver || gt(minver, setMin)))
            minver = setMin;
        }
        if (minver && range.test(minver)) {
          return minver;
        }
        return null;
      };
      module.exports = minVersion;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/ranges/valid.js
  var require_valid2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/ranges/valid.js"(exports, module) {
      var Range = require_range();
      var validRange2 = (range, options) => {
        try {
          return new Range(range, options).range || "*";
        } catch (er) {
          return null;
        }
      };
      module.exports = validRange2;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/ranges/outside.js
  var require_outside = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/ranges/outside.js"(exports, module) {
      var SemVer2 = require_semver();
      var Comparator = require_comparator();
      var {ANY} = Comparator;
      var Range = require_range();
      var satisfies = require_satisfies();
      var gt = require_gt();
      var lt = require_lt();
      var lte = require_lte();
      var gte = require_gte();
      var outside = (version, range, hilo, options) => {
        version = new SemVer2(version, options);
        range = new Range(range, options);
        let gtfn, ltefn, ltfn, comp, ecomp;
        switch (hilo) {
          case ">":
            gtfn = gt;
            ltefn = lte;
            ltfn = lt;
            comp = ">";
            ecomp = ">=";
            break;
          case "<":
            gtfn = lt;
            ltefn = gte;
            ltfn = gt;
            comp = "<";
            ecomp = "<=";
            break;
          default:
            throw new TypeError('Must provide a hilo val of "<" or ">"');
        }
        if (satisfies(version, range, options)) {
          return false;
        }
        for (let i = 0; i < range.set.length; ++i) {
          const comparators = range.set[i];
          let high = null;
          let low = null;
          comparators.forEach((comparator) => {
            if (comparator.semver === ANY) {
              comparator = new Comparator(">=0.0.0");
            }
            high = high || comparator;
            low = low || comparator;
            if (gtfn(comparator.semver, high.semver, options)) {
              high = comparator;
            } else if (ltfn(comparator.semver, low.semver, options)) {
              low = comparator;
            }
          });
          if (high.operator === comp || high.operator === ecomp) {
            return false;
          }
          if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
            return false;
          } else if (low.operator === ecomp && ltfn(version, low.semver)) {
            return false;
          }
        }
        return true;
      };
      module.exports = outside;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/ranges/gtr.js
  var require_gtr = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/ranges/gtr.js"(exports, module) {
      var outside = require_outside();
      var gtr = (version, range, options) => outside(version, range, ">", options);
      module.exports = gtr;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/ranges/ltr.js
  var require_ltr = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/ranges/ltr.js"(exports, module) {
      var outside = require_outside();
      var ltr = (version, range, options) => outside(version, range, "<", options);
      module.exports = ltr;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/ranges/intersects.js
  var require_intersects = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/ranges/intersects.js"(exports, module) {
      var Range = require_range();
      var intersects = (r1, r2, options) => {
        r1 = new Range(r1, options);
        r2 = new Range(r2, options);
        return r1.intersects(r2);
      };
      module.exports = intersects;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/ranges/simplify.js
  var require_simplify = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/ranges/simplify.js"(exports, module) {
      var satisfies = require_satisfies();
      var compare = require_compare();
      module.exports = (versions, range, options) => {
        const set = [];
        let min = null;
        let prev = null;
        const v = versions.sort((a, b) => compare(a, b, options));
        for (const version of v) {
          const included = satisfies(version, range, options);
          if (included) {
            prev = version;
            if (!min)
              min = version;
          } else {
            if (prev) {
              set.push([min, prev]);
            }
            prev = null;
            min = null;
          }
        }
        if (min)
          set.push([min, null]);
        const ranges = [];
        for (const [min2, max] of set) {
          if (min2 === max)
            ranges.push(min2);
          else if (!max && min2 === v[0])
            ranges.push("*");
          else if (!max)
            ranges.push(`>=${min2}`);
          else if (min2 === v[0])
            ranges.push(`<=${max}`);
          else
            ranges.push(`${min2} - ${max}`);
        }
        const simplified = ranges.join(" || ");
        const original = typeof range.raw === "string" ? range.raw : String(range);
        return simplified.length < original.length ? simplified : range;
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/ranges/subset.js
  var require_subset = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/ranges/subset.js"(exports, module) {
      var Range = require_range();
      var Comparator = require_comparator();
      var {ANY} = Comparator;
      var satisfies = require_satisfies();
      var compare = require_compare();
      var subset = (sub, dom, options = {}) => {
        if (sub === dom)
          return true;
        sub = new Range(sub, options);
        dom = new Range(dom, options);
        let sawNonNull = false;
        OUTER:
          for (const simpleSub of sub.set) {
            for (const simpleDom of dom.set) {
              const isSub = simpleSubset(simpleSub, simpleDom, options);
              sawNonNull = sawNonNull || isSub !== null;
              if (isSub)
                continue OUTER;
            }
            if (sawNonNull)
              return false;
          }
        return true;
      };
      var simpleSubset = (sub, dom, options) => {
        if (sub === dom)
          return true;
        if (sub.length === 1 && sub[0].semver === ANY) {
          if (dom.length === 1 && dom[0].semver === ANY)
            return true;
          else if (options.includePrerelease)
            sub = [new Comparator(">=0.0.0-0")];
          else
            sub = [new Comparator(">=0.0.0")];
        }
        if (dom.length === 1 && dom[0].semver === ANY) {
          if (options.includePrerelease)
            return true;
          else
            dom = [new Comparator(">=0.0.0")];
        }
        const eqSet = new Set();
        let gt, lt;
        for (const c of sub) {
          if (c.operator === ">" || c.operator === ">=")
            gt = higherGT(gt, c, options);
          else if (c.operator === "<" || c.operator === "<=")
            lt = lowerLT(lt, c, options);
          else
            eqSet.add(c.semver);
        }
        if (eqSet.size > 1)
          return null;
        let gtltComp;
        if (gt && lt) {
          gtltComp = compare(gt.semver, lt.semver, options);
          if (gtltComp > 0)
            return null;
          else if (gtltComp === 0 && (gt.operator !== ">=" || lt.operator !== "<="))
            return null;
        }
        for (const eq of eqSet) {
          if (gt && !satisfies(eq, String(gt), options))
            return null;
          if (lt && !satisfies(eq, String(lt), options))
            return null;
          for (const c of dom) {
            if (!satisfies(eq, String(c), options))
              return false;
          }
          return true;
        }
        let higher, lower;
        let hasDomLT, hasDomGT;
        let needDomLTPre = lt && !options.includePrerelease && lt.semver.prerelease.length ? lt.semver : false;
        let needDomGTPre = gt && !options.includePrerelease && gt.semver.prerelease.length ? gt.semver : false;
        if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt.operator === "<" && needDomLTPre.prerelease[0] === 0) {
          needDomLTPre = false;
        }
        for (const c of dom) {
          hasDomGT = hasDomGT || c.operator === ">" || c.operator === ">=";
          hasDomLT = hasDomLT || c.operator === "<" || c.operator === "<=";
          if (gt) {
            if (needDomGTPre) {
              if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch) {
                needDomGTPre = false;
              }
            }
            if (c.operator === ">" || c.operator === ">=") {
              higher = higherGT(gt, c, options);
              if (higher === c && higher !== gt)
                return false;
            } else if (gt.operator === ">=" && !satisfies(gt.semver, String(c), options))
              return false;
          }
          if (lt) {
            if (needDomLTPre) {
              if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch) {
                needDomLTPre = false;
              }
            }
            if (c.operator === "<" || c.operator === "<=") {
              lower = lowerLT(lt, c, options);
              if (lower === c && lower !== lt)
                return false;
            } else if (lt.operator === "<=" && !satisfies(lt.semver, String(c), options))
              return false;
          }
          if (!c.operator && (lt || gt) && gtltComp !== 0)
            return false;
        }
        if (gt && hasDomLT && !lt && gtltComp !== 0)
          return false;
        if (lt && hasDomGT && !gt && gtltComp !== 0)
          return false;
        if (needDomGTPre || needDomLTPre)
          return false;
        return true;
      };
      var higherGT = (a, b, options) => {
        if (!a)
          return b;
        const comp = compare(a.semver, b.semver, options);
        return comp > 0 ? a : comp < 0 ? b : b.operator === ">" && a.operator === ">=" ? b : a;
      };
      var lowerLT = (a, b, options) => {
        if (!a)
          return b;
        const comp = compare(a.semver, b.semver, options);
        return comp < 0 ? a : comp > 0 ? b : b.operator === "<" && a.operator === "<=" ? b : a;
      };
      module.exports = subset;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/index.js
  var require_semver2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/semver-npm-7.3.5-618cf5db6a-5eafe6102b.zip/node_modules/semver/index.js"(exports, module) {
      var internalRe = require_re();
      module.exports = {
        re: internalRe.re,
        src: internalRe.src,
        tokens: internalRe.t,
        SEMVER_SPEC_VERSION: require_constants3().SEMVER_SPEC_VERSION,
        SemVer: require_semver(),
        compareIdentifiers: require_identifiers().compareIdentifiers,
        rcompareIdentifiers: require_identifiers().rcompareIdentifiers,
        parse: require_parse4(),
        valid: require_valid(),
        clean: require_clean(),
        inc: require_inc(),
        diff: require_diff(),
        major: require_major(),
        minor: require_minor(),
        patch: require_patch(),
        prerelease: require_prerelease(),
        compare: require_compare(),
        rcompare: require_rcompare(),
        compareLoose: require_compare_loose(),
        compareBuild: require_compare_build(),
        sort: require_sort(),
        rsort: require_rsort(),
        gt: require_gt(),
        lt: require_lt(),
        eq: require_eq(),
        neq: require_neq(),
        gte: require_gte(),
        lte: require_lte(),
        cmp: require_cmp(),
        coerce: require_coerce(),
        Comparator: require_comparator(),
        Range: require_range(),
        satisfies: require_satisfies(),
        toComparators: require_to_comparators(),
        maxSatisfying: require_max_satisfying(),
        minSatisfying: require_min_satisfying(),
        minVersion: require_min_version(),
        validRange: require_valid2(),
        outside: require_outside(),
        gtr: require_gtr(),
        ltr: require_ltr(),
        intersects: require_intersects(),
        simplifyRange: require_simplify(),
        subset: require_subset()
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/array-union-npm-2.1.0-4e4852b221-5bee12395c.zip/node_modules/array-union/index.js
  var require_array_union = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/array-union-npm-2.1.0-4e4852b221-5bee12395c.zip/node_modules/array-union/index.js"(exports, module) {
      "use strict";
      module.exports = (...arguments_) => {
        return [...new Set([].concat(...arguments_))];
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/merge2-npm-1.3.0-a272445bb5-bff71d47cd.zip/node_modules/merge2/index.js
  var require_merge2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/merge2-npm-1.3.0-a272445bb5-bff71d47cd.zip/node_modules/merge2/index.js"(exports, module) {
      "use strict";
      var Stream = require("stream");
      var PassThrough8 = Stream.PassThrough;
      var slice = Array.prototype.slice;
      module.exports = merge2;
      function merge2() {
        const streamsQueue = [];
        let merging = false;
        const args = slice.call(arguments);
        let options = args[args.length - 1];
        if (options && !Array.isArray(options) && options.pipe == null)
          args.pop();
        else
          options = {};
        const doEnd = options.end !== false;
        if (options.objectMode == null)
          options.objectMode = true;
        if (options.highWaterMark == null)
          options.highWaterMark = 64 * 1024;
        const mergedStream = PassThrough8(options);
        function addStream() {
          for (let i = 0, len = arguments.length; i < len; i++) {
            streamsQueue.push(pauseStreams(arguments[i], options));
          }
          mergeStream();
          return this;
        }
        function mergeStream() {
          if (merging)
            return;
          merging = true;
          let streams = streamsQueue.shift();
          if (!streams) {
            process.nextTick(endStream);
            return;
          }
          if (!Array.isArray(streams))
            streams = [streams];
          let pipesCount = streams.length + 1;
          function next() {
            if (--pipesCount > 0)
              return;
            merging = false;
            mergeStream();
          }
          function pipe(stream) {
            function onend() {
              stream.removeListener("merge2UnpipeEnd", onend);
              stream.removeListener("end", onend);
              next();
            }
            if (stream._readableState.endEmitted)
              return next();
            stream.on("merge2UnpipeEnd", onend);
            stream.on("end", onend);
            stream.pipe(mergedStream, {end: false});
            stream.resume();
          }
          for (let i = 0; i < streams.length; i++)
            pipe(streams[i]);
          next();
        }
        function endStream() {
          merging = false;
          mergedStream.emit("queueDrain");
          return doEnd && mergedStream.end();
        }
        mergedStream.setMaxListeners(0);
        mergedStream.add = addStream;
        mergedStream.on("unpipe", function(stream) {
          stream.emit("merge2UnpipeEnd");
        });
        if (args.length)
          addStream.apply(null, args);
        return mergedStream;
      }
      function pauseStreams(streams, options) {
        if (!Array.isArray(streams)) {
          if (!streams._readableState && streams.pipe)
            streams = streams.pipe(PassThrough8(options));
          if (!streams._readableState || !streams.pause || !streams.pipe) {
            throw new Error("Only readable stream can be merged.");
          }
          streams.pause();
        } else {
          for (let i = 0, len = streams.length; i < len; i++)
            streams[i] = pauseStreams(streams[i], options);
        }
        return streams;
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/utils/array.js
  var require_array = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/utils/array.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      function flatten(items) {
        return items.reduce((collection, item) => [].concat(collection, item), []);
      }
      exports.flatten = flatten;
      function splitWhen(items, predicate) {
        const result = [[]];
        let groupIndex = 0;
        for (const item of items) {
          if (predicate(item)) {
            groupIndex++;
            result[groupIndex] = [];
          } else {
            result[groupIndex].push(item);
          }
        }
        return result;
      }
      exports.splitWhen = splitWhen;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/utils/errno.js
  var require_errno = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/utils/errno.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      function isEnoentCodeError(error) {
        return error.code === "ENOENT";
      }
      exports.isEnoentCodeError = isEnoentCodeError;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/utils/fs.js
  var require_fs = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/utils/fs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var DirentFromStats = class {
        constructor(name, stats) {
          this.name = name;
          this.isBlockDevice = stats.isBlockDevice.bind(stats);
          this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
          this.isDirectory = stats.isDirectory.bind(stats);
          this.isFIFO = stats.isFIFO.bind(stats);
          this.isFile = stats.isFile.bind(stats);
          this.isSocket = stats.isSocket.bind(stats);
          this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
        }
      };
      function createDirentFromStats(name, stats) {
        return new DirentFromStats(name, stats);
      }
      exports.createDirentFromStats = createDirentFromStats;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/utils/path.js
  var require_path = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/utils/path.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var path3 = require("path");
      var LEADING_DOT_SEGMENT_CHARACTERS_COUNT = 2;
      var UNESCAPED_GLOB_SYMBOLS_RE = /(\\?)([()*?[\]{|}]|^!|[!+@](?=\())/g;
      function unixify(filepath) {
        return filepath.replace(/\\/g, "/");
      }
      exports.unixify = unixify;
      function makeAbsolute(cwd, filepath) {
        return path3.resolve(cwd, filepath);
      }
      exports.makeAbsolute = makeAbsolute;
      function escape(pattern) {
        return pattern.replace(UNESCAPED_GLOB_SYMBOLS_RE, "\\$2");
      }
      exports.escape = escape;
      function removeLeadingDotSegment(entry) {
        if (entry.charAt(0) === ".") {
          const secondCharactery = entry.charAt(1);
          if (secondCharactery === "/" || secondCharactery === "\\") {
            return entry.slice(LEADING_DOT_SEGMENT_CHARACTERS_COUNT);
          }
        }
        return entry;
      }
      exports.removeLeadingDotSegment = removeLeadingDotSegment;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/is-extglob-npm-2.1.1-0870ea68b5-df033653d0.zip/node_modules/is-extglob/index.js
  var require_is_extglob = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/is-extglob-npm-2.1.1-0870ea68b5-df033653d0.zip/node_modules/is-extglob/index.js"(exports, module) {
      module.exports = function isExtglob(str) {
        if (typeof str !== "string" || str === "") {
          return false;
        }
        var match2;
        while (match2 = /(\\).|([@?!+*]\(.*\))/g.exec(str)) {
          if (match2[2])
            return true;
          str = str.slice(match2.index + match2[0].length);
        }
        return false;
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/is-glob-npm-4.0.1-341760116f-84627cad11.zip/node_modules/is-glob/index.js
  var require_is_glob = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/is-glob-npm-4.0.1-341760116f-84627cad11.zip/node_modules/is-glob/index.js"(exports, module) {
      var isExtglob = require_is_extglob();
      var chars = {"{": "}", "(": ")", "[": "]"};
      var strictRegex = /\\(.)|(^!|\*|[\].+)]\?|\[[^\\\]]+\]|\{[^\\}]+\}|\(\?[:!=][^\\)]+\)|\([^|]+\|[^\\)]+\))/;
      var relaxedRegex = /\\(.)|(^!|[*?{}()[\]]|\(\?)/;
      module.exports = function isGlob(str, options) {
        if (typeof str !== "string" || str === "") {
          return false;
        }
        if (isExtglob(str)) {
          return true;
        }
        var regex = strictRegex;
        var match2;
        if (options && options.strict === false) {
          regex = relaxedRegex;
        }
        while (match2 = regex.exec(str)) {
          if (match2[2])
            return true;
          var idx = match2.index + match2[0].length;
          var open = match2[1];
          var close = open ? chars[open] : null;
          if (open && close) {
            var n = str.indexOf(close, idx);
            if (n !== -1) {
              idx = n + 1;
            }
          }
          str = str.slice(idx);
        }
        return false;
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/glob-parent-npm-5.1.0-8e781a1aff-6d20a09867.zip/node_modules/glob-parent/index.js
  var require_glob_parent = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/glob-parent-npm-5.1.0-8e781a1aff-6d20a09867.zip/node_modules/glob-parent/index.js"(exports, module) {
      "use strict";
      var isGlob = require_is_glob();
      var pathPosixDirname = require("path").posix.dirname;
      var isWin32 = require("os").platform() === "win32";
      var slash = "/";
      var backslash = /\\/g;
      var enclosure = /[\{\[].*[\/]*.*[\}\]]$/;
      var globby3 = /(^|[^\\])([\{\[]|\([^\)]+$)/;
      var escaped = /\\([\*\?\|\[\]\(\)\{\}])/g;
      module.exports = function globParent(str, opts) {
        var options = Object.assign({flipBackslashes: true}, opts);
        if (options.flipBackslashes && isWin32 && str.indexOf(slash) < 0) {
          str = str.replace(backslash, slash);
        }
        if (enclosure.test(str)) {
          str += slash;
        }
        str += "a";
        do {
          str = pathPosixDirname(str);
        } while (isGlob(str) || globby3.test(str));
        return str.replace(escaped, "$1");
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/utils/pattern.js
  var require_pattern = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/utils/pattern.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var path3 = require("path");
      var globParent = require_glob_parent();
      var micromatch9 = require_micromatch();
      var picomatch = require_picomatch2();
      var GLOBSTAR = "**";
      var ESCAPE_SYMBOL = "\\";
      var COMMON_GLOB_SYMBOLS_RE = /[*?]|^!/;
      var REGEX_CHARACTER_CLASS_SYMBOLS_RE = /\[.*]/;
      var REGEX_GROUP_SYMBOLS_RE = /(?:^|[^!*+?@])\(.*\|.*\)/;
      var GLOB_EXTENSION_SYMBOLS_RE = /[!*+?@]\(.*\)/;
      var BRACE_EXPANSIONS_SYMBOLS_RE = /{.*(?:,|\.\.).*}/;
      function isStaticPattern(pattern, options = {}) {
        return !isDynamicPattern(pattern, options);
      }
      exports.isStaticPattern = isStaticPattern;
      function isDynamicPattern(pattern, options = {}) {
        if (options.caseSensitiveMatch === false || pattern.includes(ESCAPE_SYMBOL)) {
          return true;
        }
        if (COMMON_GLOB_SYMBOLS_RE.test(pattern) || REGEX_CHARACTER_CLASS_SYMBOLS_RE.test(pattern) || REGEX_GROUP_SYMBOLS_RE.test(pattern)) {
          return true;
        }
        if (options.extglob !== false && GLOB_EXTENSION_SYMBOLS_RE.test(pattern)) {
          return true;
        }
        if (options.braceExpansion !== false && BRACE_EXPANSIONS_SYMBOLS_RE.test(pattern)) {
          return true;
        }
        return false;
      }
      exports.isDynamicPattern = isDynamicPattern;
      function convertToPositivePattern(pattern) {
        return isNegativePattern(pattern) ? pattern.slice(1) : pattern;
      }
      exports.convertToPositivePattern = convertToPositivePattern;
      function convertToNegativePattern(pattern) {
        return "!" + pattern;
      }
      exports.convertToNegativePattern = convertToNegativePattern;
      function isNegativePattern(pattern) {
        return pattern.startsWith("!") && pattern[1] !== "(";
      }
      exports.isNegativePattern = isNegativePattern;
      function isPositivePattern(pattern) {
        return !isNegativePattern(pattern);
      }
      exports.isPositivePattern = isPositivePattern;
      function getNegativePatterns(patterns) {
        return patterns.filter(isNegativePattern);
      }
      exports.getNegativePatterns = getNegativePatterns;
      function getPositivePatterns(patterns) {
        return patterns.filter(isPositivePattern);
      }
      exports.getPositivePatterns = getPositivePatterns;
      function getBaseDirectory(pattern) {
        return globParent(pattern, {flipBackslashes: false});
      }
      exports.getBaseDirectory = getBaseDirectory;
      function hasGlobStar(pattern) {
        return pattern.includes(GLOBSTAR);
      }
      exports.hasGlobStar = hasGlobStar;
      function endsWithSlashGlobStar(pattern) {
        return pattern.endsWith("/" + GLOBSTAR);
      }
      exports.endsWithSlashGlobStar = endsWithSlashGlobStar;
      function isAffectDepthOfReadingPattern(pattern) {
        const basename = path3.basename(pattern);
        return endsWithSlashGlobStar(pattern) || isStaticPattern(basename);
      }
      exports.isAffectDepthOfReadingPattern = isAffectDepthOfReadingPattern;
      function expandPatternsWithBraceExpansion(patterns) {
        return patterns.reduce((collection, pattern) => {
          return collection.concat(expandBraceExpansion(pattern));
        }, []);
      }
      exports.expandPatternsWithBraceExpansion = expandPatternsWithBraceExpansion;
      function expandBraceExpansion(pattern) {
        return micromatch9.braces(pattern, {
          expand: true,
          nodupes: true
        });
      }
      exports.expandBraceExpansion = expandBraceExpansion;
      function getPatternParts(pattern, options) {
        const info = picomatch.scan(pattern, Object.assign(Object.assign({}, options), {parts: true}));
        if (info.parts.length === 0) {
          return [pattern];
        }
        return info.parts;
      }
      exports.getPatternParts = getPatternParts;
      function makeRe(pattern, options) {
        return micromatch9.makeRe(pattern, options);
      }
      exports.makeRe = makeRe;
      function convertPatternsToRe(patterns, options) {
        return patterns.map((pattern) => makeRe(pattern, options));
      }
      exports.convertPatternsToRe = convertPatternsToRe;
      function matchAny(entry, patternsRe) {
        return patternsRe.some((patternRe) => patternRe.test(entry));
      }
      exports.matchAny = matchAny;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/utils/stream.js
  var require_stream = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/utils/stream.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var merge2 = require_merge2();
      function merge3(streams) {
        const mergedStream = merge2(streams);
        streams.forEach((stream) => {
          stream.once("error", (error) => mergedStream.emit("error", error));
        });
        mergedStream.once("close", () => propagateCloseEventToSources(streams));
        mergedStream.once("end", () => propagateCloseEventToSources(streams));
        return mergedStream;
      }
      exports.merge = merge3;
      function propagateCloseEventToSources(streams) {
        streams.forEach((stream) => stream.emit("close"));
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/utils/string.js
  var require_string = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/utils/string.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      function isString2(input) {
        return typeof input === "string";
      }
      exports.isString = isString2;
      function isEmpty(input) {
        return input === "";
      }
      exports.isEmpty = isEmpty;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/utils/index.js
  var require_utils3 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/utils/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var array = require_array();
      exports.array = array;
      var errno = require_errno();
      exports.errno = errno;
      var fs8 = require_fs();
      exports.fs = fs8;
      var path3 = require_path();
      exports.path = path3;
      var pattern = require_pattern();
      exports.pattern = pattern;
      var stream = require_stream();
      exports.stream = stream;
      var string = require_string();
      exports.string = string;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/managers/tasks.js
  var require_tasks = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/managers/tasks.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var utils = require_utils3();
      function generate2(patterns, settings) {
        const positivePatterns = getPositivePatterns(patterns);
        const negativePatterns = getNegativePatternsAsPositive(patterns, settings.ignore);
        const staticPatterns = positivePatterns.filter((pattern) => utils.pattern.isStaticPattern(pattern, settings));
        const dynamicPatterns = positivePatterns.filter((pattern) => utils.pattern.isDynamicPattern(pattern, settings));
        const staticTasks = convertPatternsToTasks(staticPatterns, negativePatterns, false);
        const dynamicTasks = convertPatternsToTasks(dynamicPatterns, negativePatterns, true);
        return staticTasks.concat(dynamicTasks);
      }
      exports.generate = generate2;
      function convertPatternsToTasks(positive, negative, dynamic) {
        const positivePatternsGroup = groupPatternsByBaseDirectory(positive);
        if ("." in positivePatternsGroup) {
          const task = convertPatternGroupToTask(".", positive, negative, dynamic);
          return [task];
        }
        return convertPatternGroupsToTasks(positivePatternsGroup, negative, dynamic);
      }
      exports.convertPatternsToTasks = convertPatternsToTasks;
      function getPositivePatterns(patterns) {
        return utils.pattern.getPositivePatterns(patterns);
      }
      exports.getPositivePatterns = getPositivePatterns;
      function getNegativePatternsAsPositive(patterns, ignore) {
        const negative = utils.pattern.getNegativePatterns(patterns).concat(ignore);
        const positive = negative.map(utils.pattern.convertToPositivePattern);
        return positive;
      }
      exports.getNegativePatternsAsPositive = getNegativePatternsAsPositive;
      function groupPatternsByBaseDirectory(patterns) {
        const group = {};
        return patterns.reduce((collection, pattern) => {
          const base = utils.pattern.getBaseDirectory(pattern);
          if (base in collection) {
            collection[base].push(pattern);
          } else {
            collection[base] = [pattern];
          }
          return collection;
        }, group);
      }
      exports.groupPatternsByBaseDirectory = groupPatternsByBaseDirectory;
      function convertPatternGroupsToTasks(positive, negative, dynamic) {
        return Object.keys(positive).map((base) => {
          return convertPatternGroupToTask(base, positive[base], negative, dynamic);
        });
      }
      exports.convertPatternGroupsToTasks = convertPatternGroupsToTasks;
      function convertPatternGroupToTask(base, positive, negative, dynamic) {
        return {
          dynamic,
          positive,
          negative,
          base,
          patterns: [].concat(positive, negative.map(utils.pattern.convertToNegativePattern))
        };
      }
      exports.convertPatternGroupToTask = convertPatternGroupToTask;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.stat-npm-2.0.3-be9eaa5ef7-d3612efcee.zip/node_modules/@nodelib/fs.stat/out/providers/async.js
  var require_async = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.stat-npm-2.0.3-be9eaa5ef7-d3612efcee.zip/node_modules/@nodelib/fs.stat/out/providers/async.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      function read(path3, settings, callback) {
        settings.fs.lstat(path3, (lstatError, lstat) => {
          if (lstatError !== null) {
            return callFailureCallback(callback, lstatError);
          }
          if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {
            return callSuccessCallback(callback, lstat);
          }
          settings.fs.stat(path3, (statError, stat) => {
            if (statError !== null) {
              if (settings.throwErrorOnBrokenSymbolicLink) {
                return callFailureCallback(callback, statError);
              }
              return callSuccessCallback(callback, lstat);
            }
            if (settings.markSymbolicLink) {
              stat.isSymbolicLink = () => true;
            }
            callSuccessCallback(callback, stat);
          });
        });
      }
      exports.read = read;
      function callFailureCallback(callback, error) {
        callback(error);
      }
      function callSuccessCallback(callback, result) {
        callback(null, result);
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.stat-npm-2.0.3-be9eaa5ef7-d3612efcee.zip/node_modules/@nodelib/fs.stat/out/providers/sync.js
  var require_sync = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.stat-npm-2.0.3-be9eaa5ef7-d3612efcee.zip/node_modules/@nodelib/fs.stat/out/providers/sync.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      function read(path3, settings) {
        const lstat = settings.fs.lstatSync(path3);
        if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {
          return lstat;
        }
        try {
          const stat = settings.fs.statSync(path3);
          if (settings.markSymbolicLink) {
            stat.isSymbolicLink = () => true;
          }
          return stat;
        } catch (error) {
          if (!settings.throwErrorOnBrokenSymbolicLink) {
            return lstat;
          }
          throw error;
        }
      }
      exports.read = read;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.stat-npm-2.0.3-be9eaa5ef7-d3612efcee.zip/node_modules/@nodelib/fs.stat/out/adapters/fs.js
  var require_fs2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.stat-npm-2.0.3-be9eaa5ef7-d3612efcee.zip/node_modules/@nodelib/fs.stat/out/adapters/fs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var fs8 = require("fs");
      exports.FILE_SYSTEM_ADAPTER = {
        lstat: fs8.lstat,
        stat: fs8.stat,
        lstatSync: fs8.lstatSync,
        statSync: fs8.statSync
      };
      function createFileSystemAdapter(fsMethods) {
        if (fsMethods === void 0) {
          return exports.FILE_SYSTEM_ADAPTER;
        }
        return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);
      }
      exports.createFileSystemAdapter = createFileSystemAdapter;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.stat-npm-2.0.3-be9eaa5ef7-d3612efcee.zip/node_modules/@nodelib/fs.stat/out/settings.js
  var require_settings = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.stat-npm-2.0.3-be9eaa5ef7-d3612efcee.zip/node_modules/@nodelib/fs.stat/out/settings.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var fs8 = require_fs2();
      var Settings = class {
        constructor(_options = {}) {
          this._options = _options;
          this.followSymbolicLink = this._getValue(this._options.followSymbolicLink, true);
          this.fs = fs8.createFileSystemAdapter(this._options.fs);
          this.markSymbolicLink = this._getValue(this._options.markSymbolicLink, false);
          this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
        }
        _getValue(option, value) {
          return option === void 0 ? value : option;
        }
      };
      exports.default = Settings;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.stat-npm-2.0.3-be9eaa5ef7-d3612efcee.zip/node_modules/@nodelib/fs.stat/out/index.js
  var require_out = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.stat-npm-2.0.3-be9eaa5ef7-d3612efcee.zip/node_modules/@nodelib/fs.stat/out/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var async = require_async();
      var sync = require_sync();
      var settings_1 = require_settings();
      exports.Settings = settings_1.default;
      function stat(path3, optionsOrSettingsOrCallback, callback) {
        if (typeof optionsOrSettingsOrCallback === "function") {
          return async.read(path3, getSettings(), optionsOrSettingsOrCallback);
        }
        async.read(path3, getSettings(optionsOrSettingsOrCallback), callback);
      }
      exports.stat = stat;
      function statSync(path3, optionsOrSettings) {
        const settings = getSettings(optionsOrSettings);
        return sync.read(path3, settings);
      }
      exports.statSync = statSync;
      function getSettings(settingsOrOptions = {}) {
        if (settingsOrOptions instanceof settings_1.default) {
          return settingsOrOptions;
        }
        return new settings_1.default(settingsOrOptions);
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/run-parallel-npm-1.1.9-83c6b2d620-8bbeda89c2.zip/node_modules/run-parallel/index.js
  var require_run_parallel = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/run-parallel-npm-1.1.9-83c6b2d620-8bbeda89c2.zip/node_modules/run-parallel/index.js"(exports, module) {
      module.exports = runParallel;
      function runParallel(tasks, cb) {
        var results, pending, keys;
        var isSync = true;
        if (Array.isArray(tasks)) {
          results = [];
          pending = tasks.length;
        } else {
          keys = Object.keys(tasks);
          results = {};
          pending = keys.length;
        }
        function done(err) {
          function end() {
            if (cb)
              cb(err, results);
            cb = null;
          }
          if (isSync)
            process.nextTick(end);
          else
            end();
        }
        function each(i, err, result) {
          results[i] = result;
          if (--pending === 0 || err) {
            done(err);
          }
        }
        if (!pending) {
          done(null);
        } else if (keys) {
          keys.forEach(function(key) {
            tasks[key](function(err, result) {
              each(key, err, result);
            });
          });
        } else {
          tasks.forEach(function(task, i) {
            task(function(err, result) {
              each(i, err, result);
            });
          });
        }
        isSync = false;
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.scandir-npm-2.1.3-92e0b8f0d5-0054efbba1.zip/node_modules/@nodelib/fs.scandir/out/constants.js
  var require_constants4 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.scandir-npm-2.1.3-92e0b8f0d5-0054efbba1.zip/node_modules/@nodelib/fs.scandir/out/constants.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var NODE_PROCESS_VERSION_PARTS = process.versions.node.split(".");
      var MAJOR_VERSION = parseInt(NODE_PROCESS_VERSION_PARTS[0], 10);
      var MINOR_VERSION = parseInt(NODE_PROCESS_VERSION_PARTS[1], 10);
      var SUPPORTED_MAJOR_VERSION = 10;
      var SUPPORTED_MINOR_VERSION = 10;
      var IS_MATCHED_BY_MAJOR = MAJOR_VERSION > SUPPORTED_MAJOR_VERSION;
      var IS_MATCHED_BY_MAJOR_AND_MINOR = MAJOR_VERSION === SUPPORTED_MAJOR_VERSION && MINOR_VERSION >= SUPPORTED_MINOR_VERSION;
      exports.IS_SUPPORT_READDIR_WITH_FILE_TYPES = IS_MATCHED_BY_MAJOR || IS_MATCHED_BY_MAJOR_AND_MINOR;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.scandir-npm-2.1.3-92e0b8f0d5-0054efbba1.zip/node_modules/@nodelib/fs.scandir/out/utils/fs.js
  var require_fs3 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.scandir-npm-2.1.3-92e0b8f0d5-0054efbba1.zip/node_modules/@nodelib/fs.scandir/out/utils/fs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var DirentFromStats = class {
        constructor(name, stats) {
          this.name = name;
          this.isBlockDevice = stats.isBlockDevice.bind(stats);
          this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
          this.isDirectory = stats.isDirectory.bind(stats);
          this.isFIFO = stats.isFIFO.bind(stats);
          this.isFile = stats.isFile.bind(stats);
          this.isSocket = stats.isSocket.bind(stats);
          this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
        }
      };
      function createDirentFromStats(name, stats) {
        return new DirentFromStats(name, stats);
      }
      exports.createDirentFromStats = createDirentFromStats;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.scandir-npm-2.1.3-92e0b8f0d5-0054efbba1.zip/node_modules/@nodelib/fs.scandir/out/utils/index.js
  var require_utils4 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.scandir-npm-2.1.3-92e0b8f0d5-0054efbba1.zip/node_modules/@nodelib/fs.scandir/out/utils/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var fs8 = require_fs3();
      exports.fs = fs8;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.scandir-npm-2.1.3-92e0b8f0d5-0054efbba1.zip/node_modules/@nodelib/fs.scandir/out/providers/async.js
  var require_async2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.scandir-npm-2.1.3-92e0b8f0d5-0054efbba1.zip/node_modules/@nodelib/fs.scandir/out/providers/async.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var fsStat = require_out();
      var rpl = require_run_parallel();
      var constants_1 = require_constants4();
      var utils = require_utils4();
      function read(directory, settings, callback) {
        if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
          return readdirWithFileTypes(directory, settings, callback);
        }
        return readdir(directory, settings, callback);
      }
      exports.read = read;
      function readdirWithFileTypes(directory, settings, callback) {
        settings.fs.readdir(directory, {withFileTypes: true}, (readdirError, dirents) => {
          if (readdirError !== null) {
            return callFailureCallback(callback, readdirError);
          }
          const entries = dirents.map((dirent) => ({
            dirent,
            name: dirent.name,
            path: `${directory}${settings.pathSegmentSeparator}${dirent.name}`
          }));
          if (!settings.followSymbolicLinks) {
            return callSuccessCallback(callback, entries);
          }
          const tasks = entries.map((entry) => makeRplTaskEntry(entry, settings));
          rpl(tasks, (rplError, rplEntries) => {
            if (rplError !== null) {
              return callFailureCallback(callback, rplError);
            }
            callSuccessCallback(callback, rplEntries);
          });
        });
      }
      exports.readdirWithFileTypes = readdirWithFileTypes;
      function makeRplTaskEntry(entry, settings) {
        return (done) => {
          if (!entry.dirent.isSymbolicLink()) {
            return done(null, entry);
          }
          settings.fs.stat(entry.path, (statError, stats) => {
            if (statError !== null) {
              if (settings.throwErrorOnBrokenSymbolicLink) {
                return done(statError);
              }
              return done(null, entry);
            }
            entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);
            return done(null, entry);
          });
        };
      }
      function readdir(directory, settings, callback) {
        settings.fs.readdir(directory, (readdirError, names) => {
          if (readdirError !== null) {
            return callFailureCallback(callback, readdirError);
          }
          const filepaths = names.map((name) => `${directory}${settings.pathSegmentSeparator}${name}`);
          const tasks = filepaths.map((filepath) => {
            return (done) => fsStat.stat(filepath, settings.fsStatSettings, done);
          });
          rpl(tasks, (rplError, results) => {
            if (rplError !== null) {
              return callFailureCallback(callback, rplError);
            }
            const entries = [];
            names.forEach((name, index) => {
              const stats = results[index];
              const entry = {
                name,
                path: filepaths[index],
                dirent: utils.fs.createDirentFromStats(name, stats)
              };
              if (settings.stats) {
                entry.stats = stats;
              }
              entries.push(entry);
            });
            callSuccessCallback(callback, entries);
          });
        });
      }
      exports.readdir = readdir;
      function callFailureCallback(callback, error) {
        callback(error);
      }
      function callSuccessCallback(callback, result) {
        callback(null, result);
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.scandir-npm-2.1.3-92e0b8f0d5-0054efbba1.zip/node_modules/@nodelib/fs.scandir/out/providers/sync.js
  var require_sync2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.scandir-npm-2.1.3-92e0b8f0d5-0054efbba1.zip/node_modules/@nodelib/fs.scandir/out/providers/sync.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var fsStat = require_out();
      var constants_1 = require_constants4();
      var utils = require_utils4();
      function read(directory, settings) {
        if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
          return readdirWithFileTypes(directory, settings);
        }
        return readdir(directory, settings);
      }
      exports.read = read;
      function readdirWithFileTypes(directory, settings) {
        const dirents = settings.fs.readdirSync(directory, {withFileTypes: true});
        return dirents.map((dirent) => {
          const entry = {
            dirent,
            name: dirent.name,
            path: `${directory}${settings.pathSegmentSeparator}${dirent.name}`
          };
          if (entry.dirent.isSymbolicLink() && settings.followSymbolicLinks) {
            try {
              const stats = settings.fs.statSync(entry.path);
              entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);
            } catch (error) {
              if (settings.throwErrorOnBrokenSymbolicLink) {
                throw error;
              }
            }
          }
          return entry;
        });
      }
      exports.readdirWithFileTypes = readdirWithFileTypes;
      function readdir(directory, settings) {
        const names = settings.fs.readdirSync(directory);
        return names.map((name) => {
          const entryPath = `${directory}${settings.pathSegmentSeparator}${name}`;
          const stats = fsStat.statSync(entryPath, settings.fsStatSettings);
          const entry = {
            name,
            path: entryPath,
            dirent: utils.fs.createDirentFromStats(name, stats)
          };
          if (settings.stats) {
            entry.stats = stats;
          }
          return entry;
        });
      }
      exports.readdir = readdir;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.scandir-npm-2.1.3-92e0b8f0d5-0054efbba1.zip/node_modules/@nodelib/fs.scandir/out/adapters/fs.js
  var require_fs4 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.scandir-npm-2.1.3-92e0b8f0d5-0054efbba1.zip/node_modules/@nodelib/fs.scandir/out/adapters/fs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var fs8 = require("fs");
      exports.FILE_SYSTEM_ADAPTER = {
        lstat: fs8.lstat,
        stat: fs8.stat,
        lstatSync: fs8.lstatSync,
        statSync: fs8.statSync,
        readdir: fs8.readdir,
        readdirSync: fs8.readdirSync
      };
      function createFileSystemAdapter(fsMethods) {
        if (fsMethods === void 0) {
          return exports.FILE_SYSTEM_ADAPTER;
        }
        return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);
      }
      exports.createFileSystemAdapter = createFileSystemAdapter;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.scandir-npm-2.1.3-92e0b8f0d5-0054efbba1.zip/node_modules/@nodelib/fs.scandir/out/settings.js
  var require_settings2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.scandir-npm-2.1.3-92e0b8f0d5-0054efbba1.zip/node_modules/@nodelib/fs.scandir/out/settings.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var path3 = require("path");
      var fsStat = require_out();
      var fs8 = require_fs4();
      var Settings = class {
        constructor(_options = {}) {
          this._options = _options;
          this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, false);
          this.fs = fs8.createFileSystemAdapter(this._options.fs);
          this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path3.sep);
          this.stats = this._getValue(this._options.stats, false);
          this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
          this.fsStatSettings = new fsStat.Settings({
            followSymbolicLink: this.followSymbolicLinks,
            fs: this.fs,
            throwErrorOnBrokenSymbolicLink: this.throwErrorOnBrokenSymbolicLink
          });
        }
        _getValue(option, value) {
          return option === void 0 ? value : option;
        }
      };
      exports.default = Settings;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.scandir-npm-2.1.3-92e0b8f0d5-0054efbba1.zip/node_modules/@nodelib/fs.scandir/out/index.js
  var require_out2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.scandir-npm-2.1.3-92e0b8f0d5-0054efbba1.zip/node_modules/@nodelib/fs.scandir/out/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var async = require_async2();
      var sync = require_sync2();
      var settings_1 = require_settings2();
      exports.Settings = settings_1.default;
      function scandir(path3, optionsOrSettingsOrCallback, callback) {
        if (typeof optionsOrSettingsOrCallback === "function") {
          return async.read(path3, getSettings(), optionsOrSettingsOrCallback);
        }
        async.read(path3, getSettings(optionsOrSettingsOrCallback), callback);
      }
      exports.scandir = scandir;
      function scandirSync(path3, optionsOrSettings) {
        const settings = getSettings(optionsOrSettings);
        return sync.read(path3, settings);
      }
      exports.scandirSync = scandirSync;
      function getSettings(settingsOrOptions = {}) {
        if (settingsOrOptions instanceof settings_1.default) {
          return settingsOrOptions;
        }
        return new settings_1.default(settingsOrOptions);
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/reusify-npm-1.0.4-95ac4aec11-c3076ebcc2.zip/node_modules/reusify/reusify.js
  var require_reusify = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/reusify-npm-1.0.4-95ac4aec11-c3076ebcc2.zip/node_modules/reusify/reusify.js"(exports, module) {
      "use strict";
      function reusify(Constructor) {
        var head = new Constructor();
        var tail = head;
        function get3() {
          var current = head;
          if (current.next) {
            head = current.next;
          } else {
            head = new Constructor();
            tail = head;
          }
          current.next = null;
          return current;
        }
        function release(obj) {
          tail.next = obj;
          tail = obj;
        }
        return {
          get: get3,
          release
        };
      }
      module.exports = reusify;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fastq-npm-1.6.0-b53b5275fa-e643b1c304.zip/node_modules/fastq/queue.js
  var require_queue = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fastq-npm-1.6.0-b53b5275fa-e643b1c304.zip/node_modules/fastq/queue.js"(exports, module) {
      "use strict";
      var reusify = require_reusify();
      function fastqueue(context, worker, concurrency) {
        if (typeof context === "function") {
          concurrency = worker;
          worker = context;
          context = null;
        }
        var cache2 = reusify(Task);
        var queueHead = null;
        var queueTail = null;
        var _running = 0;
        var self2 = {
          push,
          drain: noop,
          saturated: noop,
          pause,
          paused: false,
          concurrency,
          running,
          resume,
          idle,
          length,
          unshift,
          empty: noop,
          kill,
          killAndDrain
        };
        return self2;
        function running() {
          return _running;
        }
        function pause() {
          self2.paused = true;
        }
        function length() {
          var current = queueHead;
          var counter = 0;
          while (current) {
            current = current.next;
            counter++;
          }
          return counter;
        }
        function resume() {
          if (!self2.paused)
            return;
          self2.paused = false;
          for (var i = 0; i < self2.concurrency; i++) {
            _running++;
            release();
          }
        }
        function idle() {
          return _running === 0 && self2.length() === 0;
        }
        function push(value, done) {
          var current = cache2.get();
          current.context = context;
          current.release = release;
          current.value = value;
          current.callback = done || noop;
          if (_running === self2.concurrency || self2.paused) {
            if (queueTail) {
              queueTail.next = current;
              queueTail = current;
            } else {
              queueHead = current;
              queueTail = current;
              self2.saturated();
            }
          } else {
            _running++;
            worker.call(context, current.value, current.worked);
          }
        }
        function unshift(value, done) {
          var current = cache2.get();
          current.context = context;
          current.release = release;
          current.value = value;
          current.callback = done || noop;
          if (_running === self2.concurrency || self2.paused) {
            if (queueHead) {
              current.next = queueHead;
              queueHead = current;
            } else {
              queueHead = current;
              queueTail = current;
              self2.saturated();
            }
          } else {
            _running++;
            worker.call(context, current.value, current.worked);
          }
        }
        function release(holder) {
          if (holder) {
            cache2.release(holder);
          }
          var next = queueHead;
          if (next) {
            if (!self2.paused) {
              if (queueTail === queueHead) {
                queueTail = null;
              }
              queueHead = next.next;
              next.next = null;
              worker.call(context, next.value, next.worked);
              if (queueTail === null) {
                self2.empty();
              }
            } else {
              _running--;
            }
          } else if (--_running === 0) {
            self2.drain();
          }
        }
        function kill() {
          queueHead = null;
          queueTail = null;
          self2.drain = noop;
        }
        function killAndDrain() {
          queueHead = null;
          queueTail = null;
          self2.drain();
          self2.drain = noop;
        }
      }
      function noop() {
      }
      function Task() {
        this.value = null;
        this.callback = noop;
        this.next = null;
        this.release = noop;
        this.context = null;
        var self2 = this;
        this.worked = function worked(err, result) {
          var callback = self2.callback;
          self2.value = null;
          self2.callback = noop;
          callback.call(self2.context, err, result);
          self2.release(self2);
        };
      }
      module.exports = fastqueue;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.walk-npm-1.2.4-1ae6c97d00-a971d1dcc1.zip/node_modules/@nodelib/fs.walk/out/readers/common.js
  var require_common = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.walk-npm-1.2.4-1ae6c97d00-a971d1dcc1.zip/node_modules/@nodelib/fs.walk/out/readers/common.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      function isFatalError(settings, error) {
        if (settings.errorFilter === null) {
          return true;
        }
        return !settings.errorFilter(error);
      }
      exports.isFatalError = isFatalError;
      function isAppliedFilter(filter, value) {
        return filter === null || filter(value);
      }
      exports.isAppliedFilter = isAppliedFilter;
      function replacePathSegmentSeparator(filepath, separator) {
        return filepath.split(/[\\/]/).join(separator);
      }
      exports.replacePathSegmentSeparator = replacePathSegmentSeparator;
      function joinPathSegments(a, b, separator) {
        if (a === "") {
          return b;
        }
        return a + separator + b;
      }
      exports.joinPathSegments = joinPathSegments;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.walk-npm-1.2.4-1ae6c97d00-a971d1dcc1.zip/node_modules/@nodelib/fs.walk/out/readers/reader.js
  var require_reader = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.walk-npm-1.2.4-1ae6c97d00-a971d1dcc1.zip/node_modules/@nodelib/fs.walk/out/readers/reader.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var common = require_common();
      var Reader = class {
        constructor(_root, _settings) {
          this._root = _root;
          this._settings = _settings;
          this._root = common.replacePathSegmentSeparator(_root, _settings.pathSegmentSeparator);
        }
      };
      exports.default = Reader;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.walk-npm-1.2.4-1ae6c97d00-a971d1dcc1.zip/node_modules/@nodelib/fs.walk/out/readers/async.js
  var require_async3 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.walk-npm-1.2.4-1ae6c97d00-a971d1dcc1.zip/node_modules/@nodelib/fs.walk/out/readers/async.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var events_1 = require("events");
      var fsScandir = require_out2();
      var fastq = require_queue();
      var common = require_common();
      var reader_1 = require_reader();
      var AsyncReader = class extends reader_1.default {
        constructor(_root, _settings) {
          super(_root, _settings);
          this._settings = _settings;
          this._scandir = fsScandir.scandir;
          this._emitter = new events_1.EventEmitter();
          this._queue = fastq(this._worker.bind(this), this._settings.concurrency);
          this._isFatalError = false;
          this._isDestroyed = false;
          this._queue.drain = () => {
            if (!this._isFatalError) {
              this._emitter.emit("end");
            }
          };
        }
        read() {
          this._isFatalError = false;
          this._isDestroyed = false;
          setImmediate(() => {
            this._pushToQueue(this._root, this._settings.basePath);
          });
          return this._emitter;
        }
        destroy() {
          if (this._isDestroyed) {
            throw new Error("The reader is already destroyed");
          }
          this._isDestroyed = true;
          this._queue.killAndDrain();
        }
        onEntry(callback) {
          this._emitter.on("entry", callback);
        }
        onError(callback) {
          this._emitter.once("error", callback);
        }
        onEnd(callback) {
          this._emitter.once("end", callback);
        }
        _pushToQueue(directory, base) {
          const queueItem = {directory, base};
          this._queue.push(queueItem, (error) => {
            if (error !== null) {
              this._handleError(error);
            }
          });
        }
        _worker(item, done) {
          this._scandir(item.directory, this._settings.fsScandirSettings, (error, entries) => {
            if (error !== null) {
              return done(error, void 0);
            }
            for (const entry of entries) {
              this._handleEntry(entry, item.base);
            }
            done(null, void 0);
          });
        }
        _handleError(error) {
          if (!common.isFatalError(this._settings, error)) {
            return;
          }
          this._isFatalError = true;
          this._isDestroyed = true;
          this._emitter.emit("error", error);
        }
        _handleEntry(entry, base) {
          if (this._isDestroyed || this._isFatalError) {
            return;
          }
          const fullpath = entry.path;
          if (base !== void 0) {
            entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
          }
          if (common.isAppliedFilter(this._settings.entryFilter, entry)) {
            this._emitEntry(entry);
          }
          if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {
            this._pushToQueue(fullpath, entry.path);
          }
        }
        _emitEntry(entry) {
          this._emitter.emit("entry", entry);
        }
      };
      exports.default = AsyncReader;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.walk-npm-1.2.4-1ae6c97d00-a971d1dcc1.zip/node_modules/@nodelib/fs.walk/out/providers/async.js
  var require_async4 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.walk-npm-1.2.4-1ae6c97d00-a971d1dcc1.zip/node_modules/@nodelib/fs.walk/out/providers/async.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var async_1 = require_async3();
      var AsyncProvider = class {
        constructor(_root, _settings) {
          this._root = _root;
          this._settings = _settings;
          this._reader = new async_1.default(this._root, this._settings);
          this._storage = new Set();
        }
        read(callback) {
          this._reader.onError((error) => {
            callFailureCallback(callback, error);
          });
          this._reader.onEntry((entry) => {
            this._storage.add(entry);
          });
          this._reader.onEnd(() => {
            callSuccessCallback(callback, [...this._storage]);
          });
          this._reader.read();
        }
      };
      exports.default = AsyncProvider;
      function callFailureCallback(callback, error) {
        callback(error);
      }
      function callSuccessCallback(callback, entries) {
        callback(null, entries);
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.walk-npm-1.2.4-1ae6c97d00-a971d1dcc1.zip/node_modules/@nodelib/fs.walk/out/providers/stream.js
  var require_stream2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.walk-npm-1.2.4-1ae6c97d00-a971d1dcc1.zip/node_modules/@nodelib/fs.walk/out/providers/stream.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var stream_1 = require("stream");
      var async_1 = require_async3();
      var StreamProvider = class {
        constructor(_root, _settings) {
          this._root = _root;
          this._settings = _settings;
          this._reader = new async_1.default(this._root, this._settings);
          this._stream = new stream_1.Readable({
            objectMode: true,
            read: () => {
            },
            destroy: this._reader.destroy.bind(this._reader)
          });
        }
        read() {
          this._reader.onError((error) => {
            this._stream.emit("error", error);
          });
          this._reader.onEntry((entry) => {
            this._stream.push(entry);
          });
          this._reader.onEnd(() => {
            this._stream.push(null);
          });
          this._reader.read();
          return this._stream;
        }
      };
      exports.default = StreamProvider;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.walk-npm-1.2.4-1ae6c97d00-a971d1dcc1.zip/node_modules/@nodelib/fs.walk/out/readers/sync.js
  var require_sync3 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.walk-npm-1.2.4-1ae6c97d00-a971d1dcc1.zip/node_modules/@nodelib/fs.walk/out/readers/sync.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var fsScandir = require_out2();
      var common = require_common();
      var reader_1 = require_reader();
      var SyncReader = class extends reader_1.default {
        constructor() {
          super(...arguments);
          this._scandir = fsScandir.scandirSync;
          this._storage = new Set();
          this._queue = new Set();
        }
        read() {
          this._pushToQueue(this._root, this._settings.basePath);
          this._handleQueue();
          return [...this._storage];
        }
        _pushToQueue(directory, base) {
          this._queue.add({directory, base});
        }
        _handleQueue() {
          for (const item of this._queue.values()) {
            this._handleDirectory(item.directory, item.base);
          }
        }
        _handleDirectory(directory, base) {
          try {
            const entries = this._scandir(directory, this._settings.fsScandirSettings);
            for (const entry of entries) {
              this._handleEntry(entry, base);
            }
          } catch (error) {
            this._handleError(error);
          }
        }
        _handleError(error) {
          if (!common.isFatalError(this._settings, error)) {
            return;
          }
          throw error;
        }
        _handleEntry(entry, base) {
          const fullpath = entry.path;
          if (base !== void 0) {
            entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
          }
          if (common.isAppliedFilter(this._settings.entryFilter, entry)) {
            this._pushToStorage(entry);
          }
          if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {
            this._pushToQueue(fullpath, entry.path);
          }
        }
        _pushToStorage(entry) {
          this._storage.add(entry);
        }
      };
      exports.default = SyncReader;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.walk-npm-1.2.4-1ae6c97d00-a971d1dcc1.zip/node_modules/@nodelib/fs.walk/out/providers/sync.js
  var require_sync4 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.walk-npm-1.2.4-1ae6c97d00-a971d1dcc1.zip/node_modules/@nodelib/fs.walk/out/providers/sync.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var sync_1 = require_sync3();
      var SyncProvider = class {
        constructor(_root, _settings) {
          this._root = _root;
          this._settings = _settings;
          this._reader = new sync_1.default(this._root, this._settings);
        }
        read() {
          return this._reader.read();
        }
      };
      exports.default = SyncProvider;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.walk-npm-1.2.4-1ae6c97d00-a971d1dcc1.zip/node_modules/@nodelib/fs.walk/out/settings.js
  var require_settings3 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.walk-npm-1.2.4-1ae6c97d00-a971d1dcc1.zip/node_modules/@nodelib/fs.walk/out/settings.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var path3 = require("path");
      var fsScandir = require_out2();
      var Settings = class {
        constructor(_options = {}) {
          this._options = _options;
          this.basePath = this._getValue(this._options.basePath, void 0);
          this.concurrency = this._getValue(this._options.concurrency, Infinity);
          this.deepFilter = this._getValue(this._options.deepFilter, null);
          this.entryFilter = this._getValue(this._options.entryFilter, null);
          this.errorFilter = this._getValue(this._options.errorFilter, null);
          this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path3.sep);
          this.fsScandirSettings = new fsScandir.Settings({
            followSymbolicLinks: this._options.followSymbolicLinks,
            fs: this._options.fs,
            pathSegmentSeparator: this._options.pathSegmentSeparator,
            stats: this._options.stats,
            throwErrorOnBrokenSymbolicLink: this._options.throwErrorOnBrokenSymbolicLink
          });
        }
        _getValue(option, value) {
          return option === void 0 ? value : option;
        }
      };
      exports.default = Settings;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.walk-npm-1.2.4-1ae6c97d00-a971d1dcc1.zip/node_modules/@nodelib/fs.walk/out/index.js
  var require_out3 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@nodelib-fs.walk-npm-1.2.4-1ae6c97d00-a971d1dcc1.zip/node_modules/@nodelib/fs.walk/out/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var async_1 = require_async4();
      var stream_1 = require_stream2();
      var sync_1 = require_sync4();
      var settings_1 = require_settings3();
      exports.Settings = settings_1.default;
      function walk2(directory, optionsOrSettingsOrCallback, callback) {
        if (typeof optionsOrSettingsOrCallback === "function") {
          return new async_1.default(directory, getSettings()).read(optionsOrSettingsOrCallback);
        }
        new async_1.default(directory, getSettings(optionsOrSettingsOrCallback)).read(callback);
      }
      exports.walk = walk2;
      function walkSync(directory, optionsOrSettings) {
        const settings = getSettings(optionsOrSettings);
        const provider = new sync_1.default(directory, settings);
        return provider.read();
      }
      exports.walkSync = walkSync;
      function walkStream(directory, optionsOrSettings) {
        const settings = getSettings(optionsOrSettings);
        const provider = new stream_1.default(directory, settings);
        return provider.read();
      }
      exports.walkStream = walkStream;
      function getSettings(settingsOrOptions = {}) {
        if (settingsOrOptions instanceof settings_1.default) {
          return settingsOrOptions;
        }
        return new settings_1.default(settingsOrOptions);
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/readers/reader.js
  var require_reader2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/readers/reader.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var path3 = require("path");
      var fsStat = require_out();
      var utils = require_utils3();
      var Reader = class {
        constructor(_settings) {
          this._settings = _settings;
          this._fsStatSettings = new fsStat.Settings({
            followSymbolicLink: this._settings.followSymbolicLinks,
            fs: this._settings.fs,
            throwErrorOnBrokenSymbolicLink: this._settings.followSymbolicLinks
          });
        }
        _getFullEntryPath(filepath) {
          return path3.resolve(this._settings.cwd, filepath);
        }
        _makeEntry(stats, pattern) {
          const entry = {
            name: pattern,
            path: pattern,
            dirent: utils.fs.createDirentFromStats(pattern, stats)
          };
          if (this._settings.stats) {
            entry.stats = stats;
          }
          return entry;
        }
        _isFatalError(error) {
          return !utils.errno.isEnoentCodeError(error) && !this._settings.suppressErrors;
        }
      };
      exports.default = Reader;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/readers/stream.js
  var require_stream3 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/readers/stream.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var stream_1 = require("stream");
      var fsStat = require_out();
      var fsWalk = require_out3();
      var reader_1 = require_reader2();
      var ReaderStream = class extends reader_1.default {
        constructor() {
          super(...arguments);
          this._walkStream = fsWalk.walkStream;
          this._stat = fsStat.stat;
        }
        dynamic(root, options) {
          return this._walkStream(root, options);
        }
        static(patterns, options) {
          const filepaths = patterns.map(this._getFullEntryPath, this);
          const stream = new stream_1.PassThrough({objectMode: true});
          stream._write = (index, _enc, done) => {
            return this._getEntry(filepaths[index], patterns[index], options).then((entry) => {
              if (entry !== null && options.entryFilter(entry)) {
                stream.push(entry);
              }
              if (index === filepaths.length - 1) {
                stream.end();
              }
              done();
            }).catch(done);
          };
          for (let i = 0; i < filepaths.length; i++) {
            stream.write(i);
          }
          return stream;
        }
        _getEntry(filepath, pattern, options) {
          return this._getStat(filepath).then((stats) => this._makeEntry(stats, pattern)).catch((error) => {
            if (options.errorFilter(error)) {
              return null;
            }
            throw error;
          });
        }
        _getStat(filepath) {
          return new Promise((resolve, reject) => {
            this._stat(filepath, this._fsStatSettings, (error, stats) => {
              return error === null ? resolve(stats) : reject(error);
            });
          });
        }
      };
      exports.default = ReaderStream;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/providers/matchers/matcher.js
  var require_matcher = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/providers/matchers/matcher.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var utils = require_utils3();
      var Matcher = class {
        constructor(_patterns, _settings, _micromatchOptions) {
          this._patterns = _patterns;
          this._settings = _settings;
          this._micromatchOptions = _micromatchOptions;
          this._storage = [];
          this._fillStorage();
        }
        _fillStorage() {
          const patterns = utils.pattern.expandPatternsWithBraceExpansion(this._patterns);
          for (const pattern of patterns) {
            const segments = this._getPatternSegments(pattern);
            const sections = this._splitSegmentsIntoSections(segments);
            this._storage.push({
              complete: sections.length <= 1,
              pattern,
              segments,
              sections
            });
          }
        }
        _getPatternSegments(pattern) {
          const parts = utils.pattern.getPatternParts(pattern, this._micromatchOptions);
          return parts.map((part) => {
            const dynamic = utils.pattern.isDynamicPattern(part, this._settings);
            if (!dynamic) {
              return {
                dynamic: false,
                pattern: part
              };
            }
            return {
              dynamic: true,
              pattern: part,
              patternRe: utils.pattern.makeRe(part, this._micromatchOptions)
            };
          });
        }
        _splitSegmentsIntoSections(segments) {
          return utils.array.splitWhen(segments, (segment) => segment.dynamic && utils.pattern.hasGlobStar(segment.pattern));
        }
      };
      exports.default = Matcher;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/providers/matchers/partial.js
  var require_partial = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/providers/matchers/partial.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var matcher_1 = require_matcher();
      var PartialMatcher = class extends matcher_1.default {
        match(filepath) {
          const parts = filepath.split("/");
          const levels = parts.length;
          const patterns = this._storage.filter((info) => !info.complete || info.segments.length > levels);
          for (const pattern of patterns) {
            const section = pattern.sections[0];
            if (!pattern.complete && levels > section.length) {
              return true;
            }
            const match2 = parts.every((part, index) => {
              const segment = pattern.segments[index];
              if (segment.dynamic && segment.patternRe.test(part)) {
                return true;
              }
              if (!segment.dynamic && segment.pattern === part) {
                return true;
              }
              return false;
            });
            if (match2) {
              return true;
            }
          }
          return false;
        }
      };
      exports.default = PartialMatcher;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/providers/filters/deep.js
  var require_deep = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/providers/filters/deep.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var utils = require_utils3();
      var partial_1 = require_partial();
      var DeepFilter = class {
        constructor(_settings, _micromatchOptions) {
          this._settings = _settings;
          this._micromatchOptions = _micromatchOptions;
        }
        getFilter(basePath, positive, negative) {
          const matcher = this._getMatcher(positive);
          const negativeRe = this._getNegativePatternsRe(negative);
          return (entry) => this._filter(basePath, entry, matcher, negativeRe);
        }
        _getMatcher(patterns) {
          return new partial_1.default(patterns, this._settings, this._micromatchOptions);
        }
        _getNegativePatternsRe(patterns) {
          const affectDepthOfReadingPatterns = patterns.filter(utils.pattern.isAffectDepthOfReadingPattern);
          return utils.pattern.convertPatternsToRe(affectDepthOfReadingPatterns, this._micromatchOptions);
        }
        _filter(basePath, entry, matcher, negativeRe) {
          const depth = this._getEntryLevel(basePath, entry.path);
          if (this._isSkippedByDeep(depth)) {
            return false;
          }
          if (this._isSkippedSymbolicLink(entry)) {
            return false;
          }
          const filepath = utils.path.removeLeadingDotSegment(entry.path);
          if (this._isSkippedByPositivePatterns(filepath, matcher)) {
            return false;
          }
          return this._isSkippedByNegativePatterns(filepath, negativeRe);
        }
        _isSkippedByDeep(entryDepth) {
          return entryDepth >= this._settings.deep;
        }
        _isSkippedSymbolicLink(entry) {
          return !this._settings.followSymbolicLinks && entry.dirent.isSymbolicLink();
        }
        _getEntryLevel(basePath, entryPath) {
          const basePathDepth = basePath.split("/").length;
          const entryPathDepth = entryPath.split("/").length;
          return entryPathDepth - (basePath === "" ? 0 : basePathDepth);
        }
        _isSkippedByPositivePatterns(entryPath, matcher) {
          return !this._settings.baseNameMatch && !matcher.match(entryPath);
        }
        _isSkippedByNegativePatterns(entryPath, negativeRe) {
          return !utils.pattern.matchAny(entryPath, negativeRe);
        }
      };
      exports.default = DeepFilter;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/providers/filters/entry.js
  var require_entry = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/providers/filters/entry.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var utils = require_utils3();
      var EntryFilter = class {
        constructor(_settings, _micromatchOptions) {
          this._settings = _settings;
          this._micromatchOptions = _micromatchOptions;
          this.index = new Map();
        }
        getFilter(positive, negative) {
          const positiveRe = utils.pattern.convertPatternsToRe(positive, this._micromatchOptions);
          const negativeRe = utils.pattern.convertPatternsToRe(negative, this._micromatchOptions);
          return (entry) => this._filter(entry, positiveRe, negativeRe);
        }
        _filter(entry, positiveRe, negativeRe) {
          if (this._settings.unique) {
            if (this._isDuplicateEntry(entry)) {
              return false;
            }
            this._createIndexRecord(entry);
          }
          if (this._onlyFileFilter(entry) || this._onlyDirectoryFilter(entry)) {
            return false;
          }
          if (this._isSkippedByAbsoluteNegativePatterns(entry, negativeRe)) {
            return false;
          }
          const filepath = this._settings.baseNameMatch ? entry.name : entry.path;
          return this._isMatchToPatterns(filepath, positiveRe) && !this._isMatchToPatterns(entry.path, negativeRe);
        }
        _isDuplicateEntry(entry) {
          return this.index.has(entry.path);
        }
        _createIndexRecord(entry) {
          this.index.set(entry.path, void 0);
        }
        _onlyFileFilter(entry) {
          return this._settings.onlyFiles && !entry.dirent.isFile();
        }
        _onlyDirectoryFilter(entry) {
          return this._settings.onlyDirectories && !entry.dirent.isDirectory();
        }
        _isSkippedByAbsoluteNegativePatterns(entry, negativeRe) {
          if (!this._settings.absolute) {
            return false;
          }
          const fullpath = utils.path.makeAbsolute(this._settings.cwd, entry.path);
          return this._isMatchToPatterns(fullpath, negativeRe);
        }
        _isMatchToPatterns(entryPath, patternsRe) {
          const filepath = utils.path.removeLeadingDotSegment(entryPath);
          return utils.pattern.matchAny(filepath, patternsRe);
        }
      };
      exports.default = EntryFilter;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/providers/filters/error.js
  var require_error = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/providers/filters/error.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var utils = require_utils3();
      var ErrorFilter = class {
        constructor(_settings) {
          this._settings = _settings;
        }
        getFilter() {
          return (error) => this._isNonFatalError(error);
        }
        _isNonFatalError(error) {
          return utils.errno.isEnoentCodeError(error) || this._settings.suppressErrors;
        }
      };
      exports.default = ErrorFilter;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/providers/transformers/entry.js
  var require_entry2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/providers/transformers/entry.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var utils = require_utils3();
      var EntryTransformer = class {
        constructor(_settings) {
          this._settings = _settings;
        }
        getTransformer() {
          return (entry) => this._transform(entry);
        }
        _transform(entry) {
          let filepath = entry.path;
          if (this._settings.absolute) {
            filepath = utils.path.makeAbsolute(this._settings.cwd, filepath);
            filepath = utils.path.unixify(filepath);
          }
          if (this._settings.markDirectories && entry.dirent.isDirectory()) {
            filepath += "/";
          }
          if (!this._settings.objectMode) {
            return filepath;
          }
          return Object.assign(Object.assign({}, entry), {path: filepath});
        }
      };
      exports.default = EntryTransformer;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/providers/provider.js
  var require_provider = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/providers/provider.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var path3 = require("path");
      var deep_1 = require_deep();
      var entry_1 = require_entry();
      var error_1 = require_error();
      var entry_2 = require_entry2();
      var Provider = class {
        constructor(_settings) {
          this._settings = _settings;
          this.errorFilter = new error_1.default(this._settings);
          this.entryFilter = new entry_1.default(this._settings, this._getMicromatchOptions());
          this.deepFilter = new deep_1.default(this._settings, this._getMicromatchOptions());
          this.entryTransformer = new entry_2.default(this._settings);
        }
        _getRootDirectory(task) {
          return path3.resolve(this._settings.cwd, task.base);
        }
        _getReaderOptions(task) {
          const basePath = task.base === "." ? "" : task.base;
          return {
            basePath,
            pathSegmentSeparator: "/",
            concurrency: this._settings.concurrency,
            deepFilter: this.deepFilter.getFilter(basePath, task.positive, task.negative),
            entryFilter: this.entryFilter.getFilter(task.positive, task.negative),
            errorFilter: this.errorFilter.getFilter(),
            followSymbolicLinks: this._settings.followSymbolicLinks,
            fs: this._settings.fs,
            stats: this._settings.stats,
            throwErrorOnBrokenSymbolicLink: this._settings.throwErrorOnBrokenSymbolicLink,
            transform: this.entryTransformer.getTransformer()
          };
        }
        _getMicromatchOptions() {
          return {
            dot: this._settings.dot,
            matchBase: this._settings.baseNameMatch,
            nobrace: !this._settings.braceExpansion,
            nocase: !this._settings.caseSensitiveMatch,
            noext: !this._settings.extglob,
            noglobstar: !this._settings.globstar,
            posix: true,
            strictSlashes: false
          };
        }
      };
      exports.default = Provider;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/providers/async.js
  var require_async5 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/providers/async.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var stream_1 = require_stream3();
      var provider_1 = require_provider();
      var ProviderAsync = class extends provider_1.default {
        constructor() {
          super(...arguments);
          this._reader = new stream_1.default(this._settings);
        }
        read(task) {
          const root = this._getRootDirectory(task);
          const options = this._getReaderOptions(task);
          const entries = [];
          return new Promise((resolve, reject) => {
            const stream = this.api(root, task, options);
            stream.once("error", reject);
            stream.on("data", (entry) => entries.push(options.transform(entry)));
            stream.once("end", () => resolve(entries));
          });
        }
        api(root, task, options) {
          if (task.dynamic) {
            return this._reader.dynamic(root, options);
          }
          return this._reader.static(task.patterns, options);
        }
      };
      exports.default = ProviderAsync;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/providers/stream.js
  var require_stream4 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/providers/stream.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var stream_1 = require("stream");
      var stream_2 = require_stream3();
      var provider_1 = require_provider();
      var ProviderStream = class extends provider_1.default {
        constructor() {
          super(...arguments);
          this._reader = new stream_2.default(this._settings);
        }
        read(task) {
          const root = this._getRootDirectory(task);
          const options = this._getReaderOptions(task);
          const source = this.api(root, task, options);
          const destination = new stream_1.Readable({objectMode: true, read: () => {
          }});
          source.once("error", (error) => destination.emit("error", error)).on("data", (entry) => destination.emit("data", options.transform(entry))).once("end", () => destination.emit("end"));
          destination.once("close", () => source.destroy());
          return destination;
        }
        api(root, task, options) {
          if (task.dynamic) {
            return this._reader.dynamic(root, options);
          }
          return this._reader.static(task.patterns, options);
        }
      };
      exports.default = ProviderStream;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/readers/sync.js
  var require_sync5 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/readers/sync.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var fsStat = require_out();
      var fsWalk = require_out3();
      var reader_1 = require_reader2();
      var ReaderSync = class extends reader_1.default {
        constructor() {
          super(...arguments);
          this._walkSync = fsWalk.walkSync;
          this._statSync = fsStat.statSync;
        }
        dynamic(root, options) {
          return this._walkSync(root, options);
        }
        static(patterns, options) {
          const entries = [];
          for (const pattern of patterns) {
            const filepath = this._getFullEntryPath(pattern);
            const entry = this._getEntry(filepath, pattern, options);
            if (entry === null || !options.entryFilter(entry)) {
              continue;
            }
            entries.push(entry);
          }
          return entries;
        }
        _getEntry(filepath, pattern, options) {
          try {
            const stats = this._getStat(filepath);
            return this._makeEntry(stats, pattern);
          } catch (error) {
            if (options.errorFilter(error)) {
              return null;
            }
            throw error;
          }
        }
        _getStat(filepath) {
          return this._statSync(filepath, this._fsStatSettings);
        }
      };
      exports.default = ReaderSync;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/providers/sync.js
  var require_sync6 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/providers/sync.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var sync_1 = require_sync5();
      var provider_1 = require_provider();
      var ProviderSync = class extends provider_1.default {
        constructor() {
          super(...arguments);
          this._reader = new sync_1.default(this._settings);
        }
        read(task) {
          const root = this._getRootDirectory(task);
          const options = this._getReaderOptions(task);
          const entries = this.api(root, task, options);
          return entries.map(options.transform);
        }
        api(root, task, options) {
          if (task.dynamic) {
            return this._reader.dynamic(root, options);
          }
          return this._reader.static(task.patterns, options);
        }
      };
      exports.default = ProviderSync;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/settings.js
  var require_settings4 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/settings.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var fs8 = require("fs");
      var os2 = require("os");
      var CPU_COUNT = os2.cpus().length;
      exports.DEFAULT_FILE_SYSTEM_ADAPTER = {
        lstat: fs8.lstat,
        lstatSync: fs8.lstatSync,
        stat: fs8.stat,
        statSync: fs8.statSync,
        readdir: fs8.readdir,
        readdirSync: fs8.readdirSync
      };
      var Settings = class {
        constructor(_options = {}) {
          this._options = _options;
          this.absolute = this._getValue(this._options.absolute, false);
          this.baseNameMatch = this._getValue(this._options.baseNameMatch, false);
          this.braceExpansion = this._getValue(this._options.braceExpansion, true);
          this.caseSensitiveMatch = this._getValue(this._options.caseSensitiveMatch, true);
          this.concurrency = this._getValue(this._options.concurrency, CPU_COUNT);
          this.cwd = this._getValue(this._options.cwd, process.cwd());
          this.deep = this._getValue(this._options.deep, Infinity);
          this.dot = this._getValue(this._options.dot, false);
          this.extglob = this._getValue(this._options.extglob, true);
          this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, true);
          this.fs = this._getFileSystemMethods(this._options.fs);
          this.globstar = this._getValue(this._options.globstar, true);
          this.ignore = this._getValue(this._options.ignore, []);
          this.markDirectories = this._getValue(this._options.markDirectories, false);
          this.objectMode = this._getValue(this._options.objectMode, false);
          this.onlyDirectories = this._getValue(this._options.onlyDirectories, false);
          this.onlyFiles = this._getValue(this._options.onlyFiles, true);
          this.stats = this._getValue(this._options.stats, false);
          this.suppressErrors = this._getValue(this._options.suppressErrors, false);
          this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, false);
          this.unique = this._getValue(this._options.unique, true);
          if (this.onlyDirectories) {
            this.onlyFiles = false;
          }
          if (this.stats) {
            this.objectMode = true;
          }
        }
        _getValue(option, value) {
          return option === void 0 ? value : option;
        }
        _getFileSystemMethods(methods = {}) {
          return Object.assign(Object.assign({}, exports.DEFAULT_FILE_SYSTEM_ADAPTER), methods);
        }
      };
      exports.default = Settings;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/index.js
  var require_out4 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fast-glob-npm-3.2.2-5f42de738e-06256aa327.zip/node_modules/fast-glob/out/index.js"(exports, module) {
      "use strict";
      var taskManager = require_tasks();
      var async_1 = require_async5();
      var stream_1 = require_stream4();
      var sync_1 = require_sync6();
      var settings_1 = require_settings4();
      var utils = require_utils3();
      async function FastGlob(source, options) {
        assertPatternsInput(source);
        const works = getWorks(source, async_1.default, options);
        const result = await Promise.all(works);
        return utils.array.flatten(result);
      }
      (function(FastGlob2) {
        function sync(source, options) {
          assertPatternsInput(source);
          const works = getWorks(source, sync_1.default, options);
          return utils.array.flatten(works);
        }
        FastGlob2.sync = sync;
        function stream(source, options) {
          assertPatternsInput(source);
          const works = getWorks(source, stream_1.default, options);
          return utils.stream.merge(works);
        }
        FastGlob2.stream = stream;
        function generateTasks(source, options) {
          assertPatternsInput(source);
          const patterns = [].concat(source);
          const settings = new settings_1.default(options);
          return taskManager.generate(patterns, settings);
        }
        FastGlob2.generateTasks = generateTasks;
        function isDynamicPattern(source, options) {
          assertPatternsInput(source);
          const settings = new settings_1.default(options);
          return utils.pattern.isDynamicPattern(source, settings);
        }
        FastGlob2.isDynamicPattern = isDynamicPattern;
        function escapePath(source) {
          assertPatternsInput(source);
          return utils.path.escape(source);
        }
        FastGlob2.escapePath = escapePath;
      })(FastGlob || (FastGlob = {}));
      function getWorks(source, _Provider, options) {
        const patterns = [].concat(source);
        const settings = new settings_1.default(options);
        const tasks = taskManager.generate(patterns, settings);
        const provider = new _Provider(settings);
        return tasks.map(provider.read, provider);
      }
      function assertPatternsInput(input) {
        const source = [].concat(input);
        const isValidSource = source.every((item) => utils.string.isString(item) && !utils.string.isEmpty(item));
        if (!isValidSource) {
          throw new TypeError("Patterns must be a string (non empty) or an array of strings");
        }
      }
      module.exports = FastGlob;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/path-type-npm-4.0.0-10d47fc86a-5b1e2daa24.zip/node_modules/path-type/index.js
  var require_path_type = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/path-type-npm-4.0.0-10d47fc86a-5b1e2daa24.zip/node_modules/path-type/index.js"(exports) {
      "use strict";
      var {promisify: promisify5} = require("util");
      var fs8 = require("fs");
      async function isType(fsStatType, statsMethodName, filePath) {
        if (typeof filePath !== "string") {
          throw new TypeError(`Expected a string, got ${typeof filePath}`);
        }
        try {
          const stats = await promisify5(fs8[fsStatType])(filePath);
          return stats[statsMethodName]();
        } catch (error) {
          if (error.code === "ENOENT") {
            return false;
          }
          throw error;
        }
      }
      function isTypeSync(fsStatType, statsMethodName, filePath) {
        if (typeof filePath !== "string") {
          throw new TypeError(`Expected a string, got ${typeof filePath}`);
        }
        try {
          return fs8[fsStatType](filePath)[statsMethodName]();
        } catch (error) {
          if (error.code === "ENOENT") {
            return false;
          }
          throw error;
        }
      }
      exports.isFile = isType.bind(null, "stat", "isFile");
      exports.isDirectory = isType.bind(null, "stat", "isDirectory");
      exports.isSymlink = isType.bind(null, "lstat", "isSymbolicLink");
      exports.isFileSync = isTypeSync.bind(null, "statSync", "isFile");
      exports.isDirectorySync = isTypeSync.bind(null, "statSync", "isDirectory");
      exports.isSymlinkSync = isTypeSync.bind(null, "lstatSync", "isSymbolicLink");
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/dir-glob-npm-3.0.1-1aea628b1b-fa05e18324.zip/node_modules/dir-glob/index.js
  var require_dir_glob = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/dir-glob-npm-3.0.1-1aea628b1b-fa05e18324.zip/node_modules/dir-glob/index.js"(exports, module) {
      "use strict";
      var path3 = require("path");
      var pathType = require_path_type();
      var getExtensions = (extensions) => extensions.length > 1 ? `{${extensions.join(",")}}` : extensions[0];
      var getPath4 = (filepath, cwd) => {
        const pth = filepath[0] === "!" ? filepath.slice(1) : filepath;
        return path3.isAbsolute(pth) ? pth : path3.join(cwd, pth);
      };
      var addExtensions = (file, extensions) => {
        if (path3.extname(file)) {
          return `**/${file}`;
        }
        return `**/${file}.${getExtensions(extensions)}`;
      };
      var getGlob = (directory, options) => {
        if (options.files && !Array.isArray(options.files)) {
          throw new TypeError(`Expected \`files\` to be of type \`Array\` but received type \`${typeof options.files}\``);
        }
        if (options.extensions && !Array.isArray(options.extensions)) {
          throw new TypeError(`Expected \`extensions\` to be of type \`Array\` but received type \`${typeof options.extensions}\``);
        }
        if (options.files && options.extensions) {
          return options.files.map((x) => path3.posix.join(directory, addExtensions(x, options.extensions)));
        }
        if (options.files) {
          return options.files.map((x) => path3.posix.join(directory, `**/${x}`));
        }
        if (options.extensions) {
          return [path3.posix.join(directory, `**/*.${getExtensions(options.extensions)}`)];
        }
        return [path3.posix.join(directory, "**")];
      };
      module.exports = async (input, options) => {
        options = __spreadValues({
          cwd: process.cwd()
        }, options);
        if (typeof options.cwd !== "string") {
          throw new TypeError(`Expected \`cwd\` to be of type \`string\` but received type \`${typeof options.cwd}\``);
        }
        const globs = await Promise.all([].concat(input).map(async (x) => {
          const isDirectory = await pathType.isDirectory(getPath4(x, options.cwd));
          return isDirectory ? getGlob(x, options) : x;
        }));
        return [].concat.apply([], globs);
      };
      module.exports.sync = (input, options) => {
        options = __spreadValues({
          cwd: process.cwd()
        }, options);
        if (typeof options.cwd !== "string") {
          throw new TypeError(`Expected \`cwd\` to be of type \`string\` but received type \`${typeof options.cwd}\``);
        }
        const globs = [].concat(input).map((x) => pathType.isDirectorySync(getPath4(x, options.cwd)) ? getGlob(x, options) : x);
        return [].concat.apply([], globs);
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/ignore-npm-5.1.4-fd6cc2dff0-d7f763f4ac.zip/node_modules/ignore/index.js
  var require_ignore = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/ignore-npm-5.1.4-fd6cc2dff0-d7f763f4ac.zip/node_modules/ignore/index.js"(exports, module) {
      function makeArray(subject) {
        return Array.isArray(subject) ? subject : [subject];
      }
      var REGEX_TEST_BLANK_LINE = /^\s+$/;
      var REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION = /^\\!/;
      var REGEX_REPLACE_LEADING_EXCAPED_HASH = /^\\#/;
      var REGEX_SPLITALL_CRLF = /\r?\n/g;
      var REGEX_TEST_INVALID_PATH = /^\.*\/|^\.+$/;
      var SLASH = "/";
      var KEY_IGNORE = typeof Symbol !== "undefined" ? Symbol.for("node-ignore") : "node-ignore";
      var define2 = (object, key, value) => Object.defineProperty(object, key, {value});
      var REGEX_REGEXP_RANGE = /([0-z])-([0-z])/g;
      var sanitizeRange = (range) => range.replace(REGEX_REGEXP_RANGE, (match2, from, to) => from.charCodeAt(0) <= to.charCodeAt(0) ? match2 : "");
      var REPLACERS = [
        [
          /\\?\s+$/,
          (match2) => match2.indexOf("\\") === 0 ? " " : ""
        ],
        [
          /\\\s/g,
          () => " "
        ],
        [
          /[\\^$.|*+(){]/g,
          (match2) => `\\${match2}`
        ],
        [
          /\[([^\]/]*)($|\])/g,
          (match2, p1, p2) => p2 === "]" ? `[${sanitizeRange(p1)}]` : `\\${match2}`
        ],
        [
          /(?!\\)\?/g,
          () => "[^/]"
        ],
        [
          /^\//,
          () => "^"
        ],
        [
          /\//g,
          () => "\\/"
        ],
        [
          /^\^*\\\*\\\*\\\//,
          () => "^(?:.*\\/)?"
        ],
        [
          /(?:[^*])$/,
          (match2) => /\/$/.test(match2) ? `${match2}$` : `${match2}(?=$|\\/$)`
        ],
        [
          /^(?=[^^])/,
          function startingReplacer() {
            return !/\/(?!$)/.test(this) ? "(?:^|\\/)" : "^";
          }
        ],
        [
          /\\\/\\\*\\\*(?=\\\/|$)/g,
          (_, index, str) => index + 6 < str.length ? "(?:\\/[^\\/]+)*" : "\\/.+"
        ],
        [
          /(^|[^\\]+)\\\*(?=.+)/g,
          (_, p1) => `${p1}[^\\/]*`
        ],
        [
          /(\^|\\\/)?\\\*$/,
          (_, p1) => {
            const prefix = p1 ? `${p1}[^/]+` : "[^/]*";
            return `${prefix}(?=$|\\/$)`;
          }
        ],
        [
          /\\\\\\/g,
          () => "\\"
        ]
      ];
      var regexCache = Object.create(null);
      var makeRegex = (pattern, negative, ignorecase) => {
        const r = regexCache[pattern];
        if (r) {
          return r;
        }
        const source = REPLACERS.reduce((prev, current) => prev.replace(current[0], current[1].bind(pattern)), pattern);
        return regexCache[pattern] = ignorecase ? new RegExp(source, "i") : new RegExp(source);
      };
      var isString2 = (subject) => typeof subject === "string";
      var checkPattern = (pattern) => pattern && isString2(pattern) && !REGEX_TEST_BLANK_LINE.test(pattern) && pattern.indexOf("#") !== 0;
      var splitPattern = (pattern) => pattern.split(REGEX_SPLITALL_CRLF);
      var IgnoreRule = class {
        constructor(origin, pattern, negative, regex) {
          this.origin = origin;
          this.pattern = pattern;
          this.negative = negative;
          this.regex = regex;
        }
      };
      var createRule = (pattern, ignorecase) => {
        const origin = pattern;
        let negative = false;
        if (pattern.indexOf("!") === 0) {
          negative = true;
          pattern = pattern.substr(1);
        }
        pattern = pattern.replace(REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION, "!").replace(REGEX_REPLACE_LEADING_EXCAPED_HASH, "#");
        const regex = makeRegex(pattern, negative, ignorecase);
        return new IgnoreRule(origin, pattern, negative, regex);
      };
      var throwError = (message, Ctor) => {
        throw new Ctor(message);
      };
      var checkPath = (path3, originalPath, doThrow) => {
        if (!isString2(path3)) {
          return doThrow(`path must be a string, but got \`${originalPath}\``, TypeError);
        }
        if (!path3) {
          return doThrow(`path must not be empty`, TypeError);
        }
        if (checkPath.isNotRelative(path3)) {
          const r = "`path.relative()`d";
          return doThrow(`path should be a ${r} string, but got "${originalPath}"`, RangeError);
        }
        return true;
      };
      var isNotRelative = (path3) => REGEX_TEST_INVALID_PATH.test(path3);
      checkPath.isNotRelative = isNotRelative;
      checkPath.convert = (p) => p;
      var Ignore = class {
        constructor({
          ignorecase = true
        } = {}) {
          this._rules = [];
          this._ignorecase = ignorecase;
          define2(this, KEY_IGNORE, true);
          this._initCache();
        }
        _initCache() {
          this._ignoreCache = Object.create(null);
          this._testCache = Object.create(null);
        }
        _addPattern(pattern) {
          if (pattern && pattern[KEY_IGNORE]) {
            this._rules = this._rules.concat(pattern._rules);
            this._added = true;
            return;
          }
          if (checkPattern(pattern)) {
            const rule = createRule(pattern, this._ignorecase);
            this._added = true;
            this._rules.push(rule);
          }
        }
        add(pattern) {
          this._added = false;
          makeArray(isString2(pattern) ? splitPattern(pattern) : pattern).forEach(this._addPattern, this);
          if (this._added) {
            this._initCache();
          }
          return this;
        }
        addPattern(pattern) {
          return this.add(pattern);
        }
        _testOne(path3, checkUnignored) {
          let ignored = false;
          let unignored = false;
          this._rules.forEach((rule) => {
            const {negative} = rule;
            if (unignored === negative && ignored !== unignored || negative && !ignored && !unignored && !checkUnignored) {
              return;
            }
            const matched = rule.regex.test(path3);
            if (matched) {
              ignored = !negative;
              unignored = negative;
            }
          });
          return {
            ignored,
            unignored
          };
        }
        _test(originalPath, cache2, checkUnignored, slices) {
          const path3 = originalPath && checkPath.convert(originalPath);
          checkPath(path3, originalPath, throwError);
          return this._t(path3, cache2, checkUnignored, slices);
        }
        _t(path3, cache2, checkUnignored, slices) {
          if (path3 in cache2) {
            return cache2[path3];
          }
          if (!slices) {
            slices = path3.split(SLASH);
          }
          slices.pop();
          if (!slices.length) {
            return cache2[path3] = this._testOne(path3, checkUnignored);
          }
          const parent = this._t(slices.join(SLASH) + SLASH, cache2, checkUnignored, slices);
          return cache2[path3] = parent.ignored ? parent : this._testOne(path3, checkUnignored);
        }
        ignores(path3) {
          return this._test(path3, this._ignoreCache, false).ignored;
        }
        createFilter() {
          return (path3) => !this.ignores(path3);
        }
        filter(paths) {
          return makeArray(paths).filter(this.createFilter());
        }
        test(path3) {
          return this._test(path3, this._testCache, true);
        }
      };
      var factory = (options) => new Ignore(options);
      var returnFalse = () => false;
      var isPathValid = (path3) => checkPath(path3 && checkPath.convert(path3), path3, returnFalse);
      factory.isPathValid = isPathValid;
      factory.default = factory;
      module.exports = factory;
      if (typeof process !== "undefined" && (process.env && process.env.IGNORE_TEST_WIN32 || process.platform === "win32")) {
        const makePosix = (str) => /^\\\\\?\\/.test(str) || /["<>|\u0000-\u001F]+/u.test(str) ? str : str.replace(/\\/g, "/");
        checkPath.convert = makePosix;
        const REGIX_IS_WINDOWS_PATH_ABSOLUTE = /^[a-z]:\//i;
        checkPath.isNotRelative = (path3) => REGIX_IS_WINDOWS_PATH_ABSOLUTE.test(path3) || isNotRelative(path3);
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/slash-npm-3.0.0-b87de2279a-94a93fff61.zip/node_modules/slash/index.js
  var require_slash = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/slash-npm-3.0.0-b87de2279a-94a93fff61.zip/node_modules/slash/index.js"(exports, module) {
      "use strict";
      module.exports = (path3) => {
        const isExtendedLengthPath = /^\\\\\?\\/.test(path3);
        const hasNonAscii = /[^\u0000-\u0080]+/.test(path3);
        if (isExtendedLengthPath || hasNonAscii) {
          return path3;
        }
        return path3.replace(/\\/g, "/");
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/globby-npm-11.0.1-b32c0f1cff-b0b26e5806.zip/node_modules/globby/gitignore.js
  var require_gitignore = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/globby-npm-11.0.1-b32c0f1cff-b0b26e5806.zip/node_modules/globby/gitignore.js"(exports, module) {
      "use strict";
      var {promisify: promisify5} = require("util");
      var fs8 = require("fs");
      var path3 = require("path");
      var fastGlob2 = require_out4();
      var gitIgnore = require_ignore();
      var slash = require_slash();
      var DEFAULT_IGNORE = [
        "**/node_modules/**",
        "**/flow-typed/**",
        "**/coverage/**",
        "**/.git"
      ];
      var readFileP2 = promisify5(fs8.readFile);
      var mapGitIgnorePatternTo = (base) => (ignore) => {
        if (ignore.startsWith("!")) {
          return "!" + path3.posix.join(base, ignore.slice(1));
        }
        return path3.posix.join(base, ignore);
      };
      var parseGitIgnore = (content, options) => {
        const base = slash(path3.relative(options.cwd, path3.dirname(options.fileName)));
        return content.split(/\r?\n/).filter(Boolean).filter((line) => !line.startsWith("#")).map(mapGitIgnorePatternTo(base));
      };
      var reduceIgnore = (files) => {
        return files.reduce((ignores, file) => {
          ignores.add(parseGitIgnore(file.content, {
            cwd: file.cwd,
            fileName: file.filePath
          }));
          return ignores;
        }, gitIgnore());
      };
      var ensureAbsolutePathForCwd = (cwd, p) => {
        cwd = slash(cwd);
        if (path3.isAbsolute(p)) {
          if (p.startsWith(cwd)) {
            return p;
          }
          throw new Error(`Path ${p} is not in cwd ${cwd}`);
        }
        return path3.join(cwd, p);
      };
      var getIsIgnoredPredecate = (ignores, cwd) => {
        return (p) => ignores.ignores(slash(path3.relative(cwd, ensureAbsolutePathForCwd(cwd, p))));
      };
      var getFile = async (file, cwd) => {
        const filePath = path3.join(cwd, file);
        const content = await readFileP2(filePath, "utf8");
        return {
          cwd,
          filePath,
          content
        };
      };
      var getFileSync = (file, cwd) => {
        const filePath = path3.join(cwd, file);
        const content = fs8.readFileSync(filePath, "utf8");
        return {
          cwd,
          filePath,
          content
        };
      };
      var normalizeOptions = ({
        ignore = [],
        cwd = slash(process.cwd())
      } = {}) => {
        return {ignore, cwd};
      };
      module.exports = async (options) => {
        options = normalizeOptions(options);
        const paths = await fastGlob2("**/.gitignore", {
          ignore: DEFAULT_IGNORE.concat(options.ignore),
          cwd: options.cwd
        });
        const files = await Promise.all(paths.map((file) => getFile(file, options.cwd)));
        const ignores = reduceIgnore(files);
        return getIsIgnoredPredecate(ignores, options.cwd);
      };
      module.exports.sync = (options) => {
        options = normalizeOptions(options);
        const paths = fastGlob2.sync("**/.gitignore", {
          ignore: DEFAULT_IGNORE.concat(options.ignore),
          cwd: options.cwd
        });
        const files = paths.map((file) => getFileSync(file, options.cwd));
        const ignores = reduceIgnore(files);
        return getIsIgnoredPredecate(ignores, options.cwd);
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/globby-npm-11.0.1-b32c0f1cff-b0b26e5806.zip/node_modules/globby/stream-utils.js
  var require_stream_utils = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/globby-npm-11.0.1-b32c0f1cff-b0b26e5806.zip/node_modules/globby/stream-utils.js"(exports, module) {
      "use strict";
      var {Transform: Transform3} = require("stream");
      var ObjectTransform = class extends Transform3 {
        constructor() {
          super({
            objectMode: true
          });
        }
      };
      var FilterStream = class extends ObjectTransform {
        constructor(filter) {
          super();
          this._filter = filter;
        }
        _transform(data, encoding, callback) {
          if (this._filter(data)) {
            this.push(data);
          }
          callback();
        }
      };
      var UniqueStream = class extends ObjectTransform {
        constructor() {
          super();
          this._pushed = new Set();
        }
        _transform(data, encoding, callback) {
          if (!this._pushed.has(data)) {
            this.push(data);
            this._pushed.add(data);
          }
          callback();
        }
      };
      module.exports = {
        FilterStream,
        UniqueStream
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/globby-npm-11.0.1-b32c0f1cff-b0b26e5806.zip/node_modules/globby/index.js
  var require_globby = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/globby-npm-11.0.1-b32c0f1cff-b0b26e5806.zip/node_modules/globby/index.js"(exports, module) {
      "use strict";
      var fs8 = require("fs");
      var arrayUnion = require_array_union();
      var merge2 = require_merge2();
      var fastGlob2 = require_out4();
      var dirGlob = require_dir_glob();
      var gitignore = require_gitignore();
      var {FilterStream, UniqueStream} = require_stream_utils();
      var DEFAULT_FILTER = () => false;
      var isNegative2 = (pattern) => pattern[0] === "!";
      var assertPatternsInput = (patterns) => {
        if (!patterns.every((pattern) => typeof pattern === "string")) {
          throw new TypeError("Patterns must be a string or an array of strings");
        }
      };
      var checkCwdOption = (options = {}) => {
        if (!options.cwd) {
          return;
        }
        let stat;
        try {
          stat = fs8.statSync(options.cwd);
        } catch (_) {
          return;
        }
        if (!stat.isDirectory()) {
          throw new Error("The `cwd` option must be a path to a directory");
        }
      };
      var getPathString = (p) => p.stats instanceof fs8.Stats ? p.path : p;
      var generateGlobTasks = (patterns, taskOptions) => {
        patterns = arrayUnion([].concat(patterns));
        assertPatternsInput(patterns);
        checkCwdOption(taskOptions);
        const globTasks = [];
        taskOptions = __spreadValues({
          ignore: [],
          expandDirectories: true
        }, taskOptions);
        for (const [index, pattern] of patterns.entries()) {
          if (isNegative2(pattern)) {
            continue;
          }
          const ignore = patterns.slice(index).filter(isNegative2).map((pattern2) => pattern2.slice(1));
          const options = __spreadProps(__spreadValues({}, taskOptions), {
            ignore: taskOptions.ignore.concat(ignore)
          });
          globTasks.push({pattern, options});
        }
        return globTasks;
      };
      var globDirs = (task, fn) => {
        let options = {};
        if (task.options.cwd) {
          options.cwd = task.options.cwd;
        }
        if (Array.isArray(task.options.expandDirectories)) {
          options = __spreadProps(__spreadValues({}, options), {
            files: task.options.expandDirectories
          });
        } else if (typeof task.options.expandDirectories === "object") {
          options = __spreadValues(__spreadValues({}, options), task.options.expandDirectories);
        }
        return fn(task.pattern, options);
      };
      var getPattern = (task, fn) => task.options.expandDirectories ? globDirs(task, fn) : [task.pattern];
      var getFilterSync = (options) => {
        return options && options.gitignore ? gitignore.sync({cwd: options.cwd, ignore: options.ignore}) : DEFAULT_FILTER;
      };
      var globToTask = (task) => (glob) => {
        const {options} = task;
        if (options.ignore && Array.isArray(options.ignore) && options.expandDirectories) {
          options.ignore = dirGlob.sync(options.ignore);
        }
        return {
          pattern: glob,
          options
        };
      };
      module.exports = async (patterns, options) => {
        const globTasks = generateGlobTasks(patterns, options);
        const getFilter = async () => {
          return options && options.gitignore ? gitignore({cwd: options.cwd, ignore: options.ignore}) : DEFAULT_FILTER;
        };
        const getTasks = async () => {
          const tasks2 = await Promise.all(globTasks.map(async (task) => {
            const globs = await getPattern(task, dirGlob);
            return Promise.all(globs.map(globToTask(task)));
          }));
          return arrayUnion(...tasks2);
        };
        const [filter, tasks] = await Promise.all([getFilter(), getTasks()]);
        const paths = await Promise.all(tasks.map((task) => fastGlob2(task.pattern, task.options)));
        return arrayUnion(...paths).filter((path_) => !filter(getPathString(path_)));
      };
      module.exports.sync = (patterns, options) => {
        const globTasks = generateGlobTasks(patterns, options);
        const tasks = globTasks.reduce((tasks2, task) => {
          const newTask = getPattern(task, dirGlob.sync).map(globToTask(task));
          return tasks2.concat(newTask);
        }, []);
        const filter = getFilterSync(options);
        return tasks.reduce((matches, task) => arrayUnion(matches, fastGlob2.sync(task.pattern, task.options)), []).filter((path_) => !filter(path_));
      };
      module.exports.stream = (patterns, options) => {
        const globTasks = generateGlobTasks(patterns, options);
        const tasks = globTasks.reduce((tasks2, task) => {
          const newTask = getPattern(task, dirGlob.sync).map(globToTask(task));
          return tasks2.concat(newTask);
        }, []);
        const filter = getFilterSync(options);
        const filterStream = new FilterStream((p) => !filter(p));
        const uniqueStream = new UniqueStream();
        return merge2(tasks.map((task) => fastGlob2.stream(task.pattern, task.options))).pipe(filterStream).pipe(uniqueStream);
      };
      module.exports.generateGlobTasks = generateGlobTasks;
      module.exports.hasMagic = (patterns, options) => [].concat(patterns).some((pattern) => fastGlob2.isDynamicPattern(pattern, options));
      module.exports.gitignore = gitignore;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@sindresorhus-is-npm-3.1.2-bcdc8ac1e4-6b68b2c0bc.zip/node_modules/@sindresorhus/is/dist/index.js
  var require_dist = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@sindresorhus-is-npm-3.1.2-bcdc8ac1e4-6b68b2c0bc.zip/node_modules/@sindresorhus/is/dist/index.js"(exports, module) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var typedArrayTypeNames = [
        "Int8Array",
        "Uint8Array",
        "Uint8ClampedArray",
        "Int16Array",
        "Uint16Array",
        "Int32Array",
        "Uint32Array",
        "Float32Array",
        "Float64Array",
        "BigInt64Array",
        "BigUint64Array"
      ];
      function isTypedArrayName(name) {
        return typedArrayTypeNames.includes(name);
      }
      var objectTypeNames = [
        "Function",
        "Generator",
        "AsyncGenerator",
        "GeneratorFunction",
        "AsyncGeneratorFunction",
        "AsyncFunction",
        "Observable",
        "Array",
        "Buffer",
        "Object",
        "RegExp",
        "Date",
        "Error",
        "Map",
        "Set",
        "WeakMap",
        "WeakSet",
        "ArrayBuffer",
        "SharedArrayBuffer",
        "DataView",
        "Promise",
        "URL",
        "HTMLElement",
        ...typedArrayTypeNames
      ];
      function isObjectTypeName(name) {
        return objectTypeNames.includes(name);
      }
      var primitiveTypeNames = [
        "null",
        "undefined",
        "string",
        "number",
        "bigint",
        "boolean",
        "symbol"
      ];
      function isPrimitiveTypeName(name) {
        return primitiveTypeNames.includes(name);
      }
      function isOfType(type) {
        return (value) => typeof value === type;
      }
      var {toString} = Object.prototype;
      var getObjectType = (value) => {
        const objectTypeName = toString.call(value).slice(8, -1);
        if (/HTML\w+Element/.test(objectTypeName) && is.domElement(value)) {
          return "HTMLElement";
        }
        if (isObjectTypeName(objectTypeName)) {
          return objectTypeName;
        }
        return void 0;
      };
      var isObjectOfType = (type) => (value) => getObjectType(value) === type;
      function is(value) {
        if (value === null) {
          return "null";
        }
        switch (typeof value) {
          case "undefined":
            return "undefined";
          case "string":
            return "string";
          case "number":
            return "number";
          case "boolean":
            return "boolean";
          case "function":
            return "Function";
          case "bigint":
            return "bigint";
          case "symbol":
            return "symbol";
          default:
        }
        if (is.observable(value)) {
          return "Observable";
        }
        if (is.array(value)) {
          return "Array";
        }
        if (is.buffer(value)) {
          return "Buffer";
        }
        const tagType = getObjectType(value);
        if (tagType) {
          return tagType;
        }
        if (value instanceof String || value instanceof Boolean || value instanceof Number) {
          throw new TypeError("Please don't use object wrappers for primitive types");
        }
        return "Object";
      }
      is.undefined = isOfType("undefined");
      is.string = isOfType("string");
      var isNumberType = isOfType("number");
      is.number = (value) => isNumberType(value) && !is.nan(value);
      is.bigint = isOfType("bigint");
      is.function_ = isOfType("function");
      is.null_ = (value) => value === null;
      is.class_ = (value) => is.function_(value) && value.toString().startsWith("class ");
      is.boolean = (value) => value === true || value === false;
      is.symbol = isOfType("symbol");
      is.numericString = (value) => is.string(value) && !is.emptyStringOrWhitespace(value) && !Number.isNaN(Number(value));
      is.array = (value, assertion) => {
        if (!Array.isArray(value)) {
          return false;
        }
        if (!is.function_(assertion)) {
          return true;
        }
        return value.every(assertion);
      };
      is.buffer = (value) => {
        var _a2, _b, _c, _d;
        return (_d = (_c = (_b = (_a2 = value) === null || _a2 === void 0 ? void 0 : _a2.constructor) === null || _b === void 0 ? void 0 : _b.isBuffer) === null || _c === void 0 ? void 0 : _c.call(_b, value)) !== null && _d !== void 0 ? _d : false;
      };
      is.nullOrUndefined = (value) => is.null_(value) || is.undefined(value);
      is.object = (value) => !is.null_(value) && (typeof value === "object" || is.function_(value));
      is.iterable = (value) => {
        var _a2;
        return is.function_((_a2 = value) === null || _a2 === void 0 ? void 0 : _a2[Symbol.iterator]);
      };
      is.asyncIterable = (value) => {
        var _a2;
        return is.function_((_a2 = value) === null || _a2 === void 0 ? void 0 : _a2[Symbol.asyncIterator]);
      };
      is.generator = (value) => is.iterable(value) && is.function_(value.next) && is.function_(value.throw);
      is.asyncGenerator = (value) => is.asyncIterable(value) && is.function_(value.next) && is.function_(value.throw);
      is.nativePromise = (value) => isObjectOfType("Promise")(value);
      var hasPromiseAPI = (value) => {
        var _a2, _b;
        return is.function_((_a2 = value) === null || _a2 === void 0 ? void 0 : _a2.then) && is.function_((_b = value) === null || _b === void 0 ? void 0 : _b.catch);
      };
      is.promise = (value) => is.nativePromise(value) || hasPromiseAPI(value);
      is.generatorFunction = isObjectOfType("GeneratorFunction");
      is.asyncGeneratorFunction = (value) => getObjectType(value) === "AsyncGeneratorFunction";
      is.asyncFunction = (value) => getObjectType(value) === "AsyncFunction";
      is.boundFunction = (value) => is.function_(value) && !value.hasOwnProperty("prototype");
      is.regExp = isObjectOfType("RegExp");
      is.date = isObjectOfType("Date");
      is.error = isObjectOfType("Error");
      is.map = (value) => isObjectOfType("Map")(value);
      is.set = (value) => isObjectOfType("Set")(value);
      is.weakMap = (value) => isObjectOfType("WeakMap")(value);
      is.weakSet = (value) => isObjectOfType("WeakSet")(value);
      is.int8Array = isObjectOfType("Int8Array");
      is.uint8Array = isObjectOfType("Uint8Array");
      is.uint8ClampedArray = isObjectOfType("Uint8ClampedArray");
      is.int16Array = isObjectOfType("Int16Array");
      is.uint16Array = isObjectOfType("Uint16Array");
      is.int32Array = isObjectOfType("Int32Array");
      is.uint32Array = isObjectOfType("Uint32Array");
      is.float32Array = isObjectOfType("Float32Array");
      is.float64Array = isObjectOfType("Float64Array");
      is.bigInt64Array = isObjectOfType("BigInt64Array");
      is.bigUint64Array = isObjectOfType("BigUint64Array");
      is.arrayBuffer = isObjectOfType("ArrayBuffer");
      is.sharedArrayBuffer = isObjectOfType("SharedArrayBuffer");
      is.dataView = isObjectOfType("DataView");
      is.directInstanceOf = (instance, class_) => Object.getPrototypeOf(instance) === class_.prototype;
      is.urlInstance = (value) => isObjectOfType("URL")(value);
      is.urlString = (value) => {
        if (!is.string(value)) {
          return false;
        }
        try {
          new URL(value);
          return true;
        } catch (_a2) {
          return false;
        }
      };
      is.truthy = (value) => Boolean(value);
      is.falsy = (value) => !value;
      is.nan = (value) => Number.isNaN(value);
      is.primitive = (value) => is.null_(value) || isPrimitiveTypeName(typeof value);
      is.integer = (value) => Number.isInteger(value);
      is.safeInteger = (value) => Number.isSafeInteger(value);
      is.plainObject = (value) => {
        if (toString.call(value) !== "[object Object]") {
          return false;
        }
        const prototype = Object.getPrototypeOf(value);
        return prototype === null || prototype === Object.getPrototypeOf({});
      };
      is.typedArray = (value) => isTypedArrayName(getObjectType(value));
      var isValidLength = (value) => is.safeInteger(value) && value >= 0;
      is.arrayLike = (value) => !is.nullOrUndefined(value) && !is.function_(value) && isValidLength(value.length);
      is.inRange = (value, range) => {
        if (is.number(range)) {
          return value >= Math.min(0, range) && value <= Math.max(range, 0);
        }
        if (is.array(range) && range.length === 2) {
          return value >= Math.min(...range) && value <= Math.max(...range);
        }
        throw new TypeError(`Invalid range: ${JSON.stringify(range)}`);
      };
      var NODE_TYPE_ELEMENT = 1;
      var DOM_PROPERTIES_TO_CHECK = [
        "innerHTML",
        "ownerDocument",
        "style",
        "attributes",
        "nodeValue"
      ];
      is.domElement = (value) => {
        return is.object(value) && value.nodeType === NODE_TYPE_ELEMENT && is.string(value.nodeName) && !is.plainObject(value) && DOM_PROPERTIES_TO_CHECK.every((property) => property in value);
      };
      is.observable = (value) => {
        var _a2, _b, _c, _d;
        if (!value) {
          return false;
        }
        if (value === ((_b = (_a2 = value)[Symbol.observable]) === null || _b === void 0 ? void 0 : _b.call(_a2))) {
          return true;
        }
        if (value === ((_d = (_c = value)["@@observable"]) === null || _d === void 0 ? void 0 : _d.call(_c))) {
          return true;
        }
        return false;
      };
      is.nodeStream = (value) => is.object(value) && is.function_(value.pipe) && !is.observable(value);
      is.infinite = (value) => value === Infinity || value === -Infinity;
      var isAbsoluteMod2 = (remainder) => (value) => is.integer(value) && Math.abs(value % 2) === remainder;
      is.evenInteger = isAbsoluteMod2(0);
      is.oddInteger = isAbsoluteMod2(1);
      is.emptyArray = (value) => is.array(value) && value.length === 0;
      is.nonEmptyArray = (value) => is.array(value) && value.length > 0;
      is.emptyString = (value) => is.string(value) && value.length === 0;
      is.nonEmptyString = (value) => is.string(value) && value.length > 0;
      var isWhiteSpaceString = (value) => is.string(value) && !/\S/.test(value);
      is.emptyStringOrWhitespace = (value) => is.emptyString(value) || isWhiteSpaceString(value);
      is.emptyObject = (value) => is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length === 0;
      is.nonEmptyObject = (value) => is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length > 0;
      is.emptySet = (value) => is.set(value) && value.size === 0;
      is.nonEmptySet = (value) => is.set(value) && value.size > 0;
      is.emptyMap = (value) => is.map(value) && value.size === 0;
      is.nonEmptyMap = (value) => is.map(value) && value.size > 0;
      var predicateOnArray = (method, predicate, values) => {
        if (!is.function_(predicate)) {
          throw new TypeError(`Invalid predicate: ${JSON.stringify(predicate)}`);
        }
        if (values.length === 0) {
          throw new TypeError("Invalid number of values");
        }
        return method.call(values, predicate);
      };
      is.any = (predicate, ...values) => {
        const predicates = is.array(predicate) ? predicate : [predicate];
        return predicates.some((singlePredicate) => predicateOnArray(Array.prototype.some, singlePredicate, values));
      };
      is.all = (predicate, ...values) => predicateOnArray(Array.prototype.every, predicate, values);
      var assertType = (condition, description, value) => {
        if (!condition) {
          throw new TypeError(`Expected value which is \`${description}\`, received value of type \`${is(value)}\`.`);
        }
      };
      exports.assert = {
        undefined: (value) => assertType(is.undefined(value), "undefined", value),
        string: (value) => assertType(is.string(value), "string", value),
        number: (value) => assertType(is.number(value), "number", value),
        bigint: (value) => assertType(is.bigint(value), "bigint", value),
        function_: (value) => assertType(is.function_(value), "Function", value),
        null_: (value) => assertType(is.null_(value), "null", value),
        class_: (value) => assertType(is.class_(value), "Class", value),
        boolean: (value) => assertType(is.boolean(value), "boolean", value),
        symbol: (value) => assertType(is.symbol(value), "symbol", value),
        numericString: (value) => assertType(is.numericString(value), "string with a number", value),
        array: (value, assertion) => {
          const assert = assertType;
          assert(is.array(value), "Array", value);
          if (assertion) {
            value.forEach(assertion);
          }
        },
        buffer: (value) => assertType(is.buffer(value), "Buffer", value),
        nullOrUndefined: (value) => assertType(is.nullOrUndefined(value), "null or undefined", value),
        object: (value) => assertType(is.object(value), "Object", value),
        iterable: (value) => assertType(is.iterable(value), "Iterable", value),
        asyncIterable: (value) => assertType(is.asyncIterable(value), "AsyncIterable", value),
        generator: (value) => assertType(is.generator(value), "Generator", value),
        asyncGenerator: (value) => assertType(is.asyncGenerator(value), "AsyncGenerator", value),
        nativePromise: (value) => assertType(is.nativePromise(value), "native Promise", value),
        promise: (value) => assertType(is.promise(value), "Promise", value),
        generatorFunction: (value) => assertType(is.generatorFunction(value), "GeneratorFunction", value),
        asyncGeneratorFunction: (value) => assertType(is.asyncGeneratorFunction(value), "AsyncGeneratorFunction", value),
        asyncFunction: (value) => assertType(is.asyncFunction(value), "AsyncFunction", value),
        boundFunction: (value) => assertType(is.boundFunction(value), "Function", value),
        regExp: (value) => assertType(is.regExp(value), "RegExp", value),
        date: (value) => assertType(is.date(value), "Date", value),
        error: (value) => assertType(is.error(value), "Error", value),
        map: (value) => assertType(is.map(value), "Map", value),
        set: (value) => assertType(is.set(value), "Set", value),
        weakMap: (value) => assertType(is.weakMap(value), "WeakMap", value),
        weakSet: (value) => assertType(is.weakSet(value), "WeakSet", value),
        int8Array: (value) => assertType(is.int8Array(value), "Int8Array", value),
        uint8Array: (value) => assertType(is.uint8Array(value), "Uint8Array", value),
        uint8ClampedArray: (value) => assertType(is.uint8ClampedArray(value), "Uint8ClampedArray", value),
        int16Array: (value) => assertType(is.int16Array(value), "Int16Array", value),
        uint16Array: (value) => assertType(is.uint16Array(value), "Uint16Array", value),
        int32Array: (value) => assertType(is.int32Array(value), "Int32Array", value),
        uint32Array: (value) => assertType(is.uint32Array(value), "Uint32Array", value),
        float32Array: (value) => assertType(is.float32Array(value), "Float32Array", value),
        float64Array: (value) => assertType(is.float64Array(value), "Float64Array", value),
        bigInt64Array: (value) => assertType(is.bigInt64Array(value), "BigInt64Array", value),
        bigUint64Array: (value) => assertType(is.bigUint64Array(value), "BigUint64Array", value),
        arrayBuffer: (value) => assertType(is.arrayBuffer(value), "ArrayBuffer", value),
        sharedArrayBuffer: (value) => assertType(is.sharedArrayBuffer(value), "SharedArrayBuffer", value),
        dataView: (value) => assertType(is.dataView(value), "DataView", value),
        urlInstance: (value) => assertType(is.urlInstance(value), "URL", value),
        urlString: (value) => assertType(is.urlString(value), "string with a URL", value),
        truthy: (value) => assertType(is.truthy(value), "truthy", value),
        falsy: (value) => assertType(is.falsy(value), "falsy", value),
        nan: (value) => assertType(is.nan(value), "NaN", value),
        primitive: (value) => assertType(is.primitive(value), "primitive", value),
        integer: (value) => assertType(is.integer(value), "integer", value),
        safeInteger: (value) => assertType(is.safeInteger(value), "integer", value),
        plainObject: (value) => assertType(is.plainObject(value), "plain object", value),
        typedArray: (value) => assertType(is.typedArray(value), "TypedArray", value),
        arrayLike: (value) => assertType(is.arrayLike(value), "array-like", value),
        domElement: (value) => assertType(is.domElement(value), "HTMLElement", value),
        observable: (value) => assertType(is.observable(value), "Observable", value),
        nodeStream: (value) => assertType(is.nodeStream(value), "Node.js Stream", value),
        infinite: (value) => assertType(is.infinite(value), "infinite number", value),
        emptyArray: (value) => assertType(is.emptyArray(value), "empty array", value),
        nonEmptyArray: (value) => assertType(is.nonEmptyArray(value), "non-empty array", value),
        emptyString: (value) => assertType(is.emptyString(value), "empty string", value),
        nonEmptyString: (value) => assertType(is.nonEmptyString(value), "non-empty string", value),
        emptyStringOrWhitespace: (value) => assertType(is.emptyStringOrWhitespace(value), "empty string or whitespace", value),
        emptyObject: (value) => assertType(is.emptyObject(value), "empty object", value),
        nonEmptyObject: (value) => assertType(is.nonEmptyObject(value), "non-empty object", value),
        emptySet: (value) => assertType(is.emptySet(value), "empty set", value),
        nonEmptySet: (value) => assertType(is.nonEmptySet(value), "non-empty set", value),
        emptyMap: (value) => assertType(is.emptyMap(value), "empty map", value),
        nonEmptyMap: (value) => assertType(is.nonEmptyMap(value), "non-empty map", value),
        evenInteger: (value) => assertType(is.evenInteger(value), "even integer", value),
        oddInteger: (value) => assertType(is.oddInteger(value), "odd integer", value),
        directInstanceOf: (instance, class_) => assertType(is.directInstanceOf(instance, class_), "T", instance),
        inRange: (value, range) => assertType(is.inRange(value, range), "in range", value),
        any: (predicate, ...values) => assertType(is.any(predicate, ...values), "predicate returns truthy for any value", values),
        all: (predicate, ...values) => assertType(is.all(predicate, ...values), "predicate returns truthy for all values", values)
      };
      Object.defineProperties(is, {
        class: {
          value: is.class_
        },
        function: {
          value: is.function_
        },
        null: {
          value: is.null_
        }
      });
      Object.defineProperties(exports.assert, {
        class: {
          value: exports.assert.class_
        },
        function: {
          value: exports.assert.function_
        },
        null: {
          value: exports.assert.null_
        }
      });
      exports.default = is;
      module.exports = is;
      module.exports.default = is;
      module.exports.assert = exports.assert;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/p-cancelable-npm-2.0.0-5f988ffca4-dbe887e06e.zip/node_modules/p-cancelable/index.js
  var require_p_cancelable = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/p-cancelable-npm-2.0.0-5f988ffca4-dbe887e06e.zip/node_modules/p-cancelable/index.js"(exports, module) {
      "use strict";
      var CancelError = class extends Error {
        constructor(reason) {
          super(reason || "Promise was canceled");
          this.name = "CancelError";
        }
        get isCanceled() {
          return true;
        }
      };
      var PCancelable = class {
        static fn(userFn) {
          return (...arguments_) => {
            return new PCancelable((resolve, reject, onCancel) => {
              arguments_.push(onCancel);
              userFn(...arguments_).then(resolve, reject);
            });
          };
        }
        constructor(executor) {
          this._cancelHandlers = [];
          this._isPending = true;
          this._isCanceled = false;
          this._rejectOnCancel = true;
          this._promise = new Promise((resolve, reject) => {
            this._reject = reject;
            const onResolve = (value) => {
              this._isPending = false;
              resolve(value);
            };
            const onReject = (error) => {
              this._isPending = false;
              reject(error);
            };
            const onCancel = (handler) => {
              if (!this._isPending) {
                throw new Error("The `onCancel` handler was attached after the promise settled.");
              }
              this._cancelHandlers.push(handler);
            };
            Object.defineProperties(onCancel, {
              shouldReject: {
                get: () => this._rejectOnCancel,
                set: (boolean) => {
                  this._rejectOnCancel = boolean;
                }
              }
            });
            return executor(onResolve, onReject, onCancel);
          });
        }
        then(onFulfilled, onRejected) {
          return this._promise.then(onFulfilled, onRejected);
        }
        catch(onRejected) {
          return this._promise.catch(onRejected);
        }
        finally(onFinally) {
          return this._promise.finally(onFinally);
        }
        cancel(reason) {
          if (!this._isPending || this._isCanceled) {
            return;
          }
          if (this._cancelHandlers.length > 0) {
            try {
              for (const handler of this._cancelHandlers) {
                handler();
              }
            } catch (error) {
              this._reject(error);
            }
          }
          this._isCanceled = true;
          if (this._rejectOnCancel) {
            this._reject(new CancelError(reason));
          }
        }
        get isCanceled() {
          return this._isCanceled;
        }
      };
      Object.setPrototypeOf(PCancelable.prototype, Promise.prototype);
      module.exports = PCancelable;
      module.exports.CancelError = CancelError;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/defer-to-connect-npm-2.0.0-ef0ce813c8-635a01644e.zip/node_modules/defer-to-connect/dist/source/index.js
  var require_source2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/defer-to-connect-npm-2.0.0-ef0ce813c8-635a01644e.zip/node_modules/defer-to-connect/dist/source/index.js"(exports, module) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var tls_1 = require("tls");
      var deferToConnect = (socket, fn) => {
        let listeners;
        if (typeof fn === "function") {
          const connect = fn;
          listeners = {connect};
        } else {
          listeners = fn;
        }
        const hasConnectListener = typeof listeners.connect === "function";
        const hasSecureConnectListener = typeof listeners.secureConnect === "function";
        const hasCloseListener = typeof listeners.close === "function";
        const onConnect = () => {
          if (hasConnectListener) {
            listeners.connect();
          }
          if (socket instanceof tls_1.TLSSocket && hasSecureConnectListener) {
            if (socket.authorized) {
              listeners.secureConnect();
            } else if (!socket.authorizationError) {
              socket.once("secureConnect", listeners.secureConnect);
            }
          }
          if (hasCloseListener) {
            socket.once("close", listeners.close);
          }
        };
        if (socket.writable && !socket.connecting) {
          onConnect();
        } else if (socket.connecting) {
          socket.once("connect", onConnect);
        } else if (socket.destroyed && hasCloseListener) {
          listeners.close(socket._hadError);
        }
      };
      exports.default = deferToConnect;
      module.exports = deferToConnect;
      module.exports.default = deferToConnect;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@szmarczak-http-timer-npm-4.0.5-03463d10ab-27b713859b.zip/node_modules/@szmarczak/http-timer/dist/source/index.js
  var require_source3 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@szmarczak-http-timer-npm-4.0.5-03463d10ab-27b713859b.zip/node_modules/@szmarczak/http-timer/dist/source/index.js"(exports, module) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var defer_to_connect_1 = require_source2();
      var nodejsMajorVersion = Number(process.versions.node.split(".")[0]);
      var timer = (request2) => {
        const timings = {
          start: Date.now(),
          socket: void 0,
          lookup: void 0,
          connect: void 0,
          secureConnect: void 0,
          upload: void 0,
          response: void 0,
          end: void 0,
          error: void 0,
          abort: void 0,
          phases: {
            wait: void 0,
            dns: void 0,
            tcp: void 0,
            tls: void 0,
            request: void 0,
            firstByte: void 0,
            download: void 0,
            total: void 0
          }
        };
        request2.timings = timings;
        const handleError = (origin) => {
          const emit = origin.emit.bind(origin);
          origin.emit = (event, ...args) => {
            if (event === "error") {
              timings.error = Date.now();
              timings.phases.total = timings.error - timings.start;
              origin.emit = emit;
            }
            return emit(event, ...args);
          };
        };
        handleError(request2);
        request2.prependOnceListener("abort", () => {
          timings.abort = Date.now();
          if (!timings.response || nodejsMajorVersion >= 13) {
            timings.phases.total = Date.now() - timings.start;
          }
        });
        const onSocket = (socket) => {
          timings.socket = Date.now();
          timings.phases.wait = timings.socket - timings.start;
          const lookupListener = () => {
            timings.lookup = Date.now();
            timings.phases.dns = timings.lookup - timings.socket;
          };
          socket.prependOnceListener("lookup", lookupListener);
          defer_to_connect_1.default(socket, {
            connect: () => {
              timings.connect = Date.now();
              if (timings.lookup === void 0) {
                socket.removeListener("lookup", lookupListener);
                timings.lookup = timings.connect;
                timings.phases.dns = timings.lookup - timings.socket;
              }
              timings.phases.tcp = timings.connect - timings.lookup;
            },
            secureConnect: () => {
              timings.secureConnect = Date.now();
              timings.phases.tls = timings.secureConnect - timings.connect;
            }
          });
        };
        if (request2.socket) {
          onSocket(request2.socket);
        } else {
          request2.prependOnceListener("socket", onSocket);
        }
        const onUpload = () => {
          var _a2;
          timings.upload = Date.now();
          timings.phases.request = timings.upload - (_a2 = timings.secureConnect, _a2 !== null && _a2 !== void 0 ? _a2 : timings.connect);
        };
        const writableFinished = () => {
          if (typeof request2.writableFinished === "boolean") {
            return request2.writableFinished;
          }
          return request2.finished && request2.outputSize === 0 && (!request2.socket || request2.socket.writableLength === 0);
        };
        if (writableFinished()) {
          onUpload();
        } else {
          request2.prependOnceListener("finish", onUpload);
        }
        request2.prependOnceListener("response", (response) => {
          timings.response = Date.now();
          timings.phases.firstByte = timings.response - timings.upload;
          response.timings = timings;
          handleError(response);
          response.prependOnceListener("end", () => {
            timings.end = Date.now();
            timings.phases.download = timings.end - timings.response;
            timings.phases.total = timings.end - timings.start;
          });
        });
        return timings;
      };
      exports.default = timer;
      module.exports = timer;
      module.exports.default = timer;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/cacheable-lookup-npm-5.0.3-8cec59984a-ad5a6d5cd1.zip/node_modules/cacheable-lookup/source/index.js
  var require_source4 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/cacheable-lookup-npm-5.0.3-8cec59984a-ad5a6d5cd1.zip/node_modules/cacheable-lookup/source/index.js"(exports, module) {
      "use strict";
      var {
        V4MAPPED,
        ADDRCONFIG,
        ALL,
        promises: {
          Resolver: AsyncResolver
        },
        lookup: dnsLookup
      } = require("dns");
      var {promisify: promisify5} = require("util");
      var os2 = require("os");
      var kCacheableLookupCreateConnection = Symbol("cacheableLookupCreateConnection");
      var kCacheableLookupInstance = Symbol("cacheableLookupInstance");
      var kExpires = Symbol("expires");
      var supportsALL = typeof ALL === "number";
      var verifyAgent = (agent) => {
        if (!(agent && typeof agent.createConnection === "function")) {
          throw new Error("Expected an Agent instance as the first argument");
        }
      };
      var map4to6 = (entries) => {
        for (const entry of entries) {
          if (entry.family === 6) {
            continue;
          }
          entry.address = `::ffff:${entry.address}`;
          entry.family = 6;
        }
      };
      var getIfaceInfo = () => {
        let has4 = false;
        let has6 = false;
        for (const device of Object.values(os2.networkInterfaces())) {
          for (const iface of device) {
            if (iface.internal) {
              continue;
            }
            if (iface.family === "IPv6") {
              has6 = true;
            } else {
              has4 = true;
            }
            if (has4 && has6) {
              return {has4, has6};
            }
          }
        }
        return {has4, has6};
      };
      var isIterable = (map) => {
        return Symbol.iterator in map;
      };
      var ttl = {ttl: true};
      var all = {all: true};
      var CacheableLookup = class {
        constructor({
          cache: cache2 = new Map(),
          maxTtl = Infinity,
          fallbackDuration = 3600,
          errorTtl = 0.15,
          resolver = new AsyncResolver(),
          lookup = dnsLookup
        } = {}) {
          this.maxTtl = maxTtl;
          this.errorTtl = errorTtl;
          this._cache = cache2;
          this._resolver = resolver;
          this._dnsLookup = promisify5(lookup);
          if (this._resolver instanceof AsyncResolver) {
            this._resolve4 = this._resolver.resolve4.bind(this._resolver);
            this._resolve6 = this._resolver.resolve6.bind(this._resolver);
          } else {
            this._resolve4 = promisify5(this._resolver.resolve4.bind(this._resolver));
            this._resolve6 = promisify5(this._resolver.resolve6.bind(this._resolver));
          }
          this._iface = getIfaceInfo();
          this._pending = {};
          this._nextRemovalTime = false;
          this._hostnamesToFallback = new Set();
          if (fallbackDuration < 1) {
            this._fallback = false;
          } else {
            this._fallback = true;
            const interval = setInterval(() => {
              this._hostnamesToFallback.clear();
            }, fallbackDuration * 1e3);
            if (interval.unref) {
              interval.unref();
            }
          }
          this.lookup = this.lookup.bind(this);
          this.lookupAsync = this.lookupAsync.bind(this);
        }
        set servers(servers) {
          this.clear();
          this._resolver.setServers(servers);
        }
        get servers() {
          return this._resolver.getServers();
        }
        lookup(hostname, options, callback) {
          if (typeof options === "function") {
            callback = options;
            options = {};
          } else if (typeof options === "number") {
            options = {
              family: options
            };
          }
          if (!callback) {
            throw new Error("Callback must be a function.");
          }
          this.lookupAsync(hostname, options).then((result) => {
            if (options.all) {
              callback(null, result);
            } else {
              callback(null, result.address, result.family, result.expires, result.ttl);
            }
          }, callback);
        }
        async lookupAsync(hostname, options = {}) {
          if (typeof options === "number") {
            options = {
              family: options
            };
          }
          let cached = await this.query(hostname);
          if (options.family === 6) {
            const filtered = cached.filter((entry) => entry.family === 6);
            if (options.hints & V4MAPPED) {
              if (supportsALL && options.hints & ALL || filtered.length === 0) {
                map4to6(cached);
              } else {
                cached = filtered;
              }
            } else {
              cached = filtered;
            }
          } else if (options.family === 4) {
            cached = cached.filter((entry) => entry.family === 4);
          }
          if (options.hints & ADDRCONFIG) {
            const {_iface} = this;
            cached = cached.filter((entry) => entry.family === 6 ? _iface.has6 : _iface.has4);
          }
          if (cached.length === 0) {
            const error = new Error(`cacheableLookup ENOTFOUND ${hostname}`);
            error.code = "ENOTFOUND";
            error.hostname = hostname;
            throw error;
          }
          if (options.all) {
            return cached;
          }
          return cached[0];
        }
        async query(hostname) {
          let cached = await this._cache.get(hostname);
          if (!cached) {
            const pending = this._pending[hostname];
            if (pending) {
              cached = await pending;
            } else {
              const newPromise = this.queryAndCache(hostname);
              this._pending[hostname] = newPromise;
              cached = await newPromise;
            }
          }
          cached = cached.map((entry) => {
            return __spreadValues({}, entry);
          });
          return cached;
        }
        async _resolve(hostname) {
          const wrap = async (promise) => {
            try {
              return await promise;
            } catch (error) {
              if (error.code === "ENODATA" || error.code === "ENOTFOUND") {
                return [];
              }
              throw error;
            }
          };
          const [A, AAAA] = await Promise.all([
            this._resolve4(hostname, ttl),
            this._resolve6(hostname, ttl)
          ].map((promise) => wrap(promise)));
          let aTtl = 0;
          let aaaaTtl = 0;
          let cacheTtl = 0;
          const now2 = Date.now();
          for (const entry of A) {
            entry.family = 4;
            entry.expires = now2 + entry.ttl * 1e3;
            aTtl = Math.max(aTtl, entry.ttl);
          }
          for (const entry of AAAA) {
            entry.family = 6;
            entry.expires = now2 + entry.ttl * 1e3;
            aaaaTtl = Math.max(aaaaTtl, entry.ttl);
          }
          if (A.length > 0) {
            if (AAAA.length > 0) {
              cacheTtl = Math.min(aTtl, aaaaTtl);
            } else {
              cacheTtl = aTtl;
            }
          } else {
            cacheTtl = aaaaTtl;
          }
          return {
            entries: [
              ...A,
              ...AAAA
            ],
            cacheTtl
          };
        }
        async _lookup(hostname) {
          try {
            const entries = await this._dnsLookup(hostname, {
              all: true
            });
            return {
              entries,
              cacheTtl: 0
            };
          } catch (_) {
            return {
              entries: [],
              cacheTtl: 0
            };
          }
        }
        async _set(hostname, data, cacheTtl) {
          if (this.maxTtl > 0 && cacheTtl > 0) {
            cacheTtl = Math.min(cacheTtl, this.maxTtl) * 1e3;
            data[kExpires] = Date.now() + cacheTtl;
            try {
              await this._cache.set(hostname, data, cacheTtl);
            } catch (error) {
              this.lookupAsync = async () => {
                const cacheError = new Error("Cache Error. Please recreate the CacheableLookup instance.");
                cacheError.cause = error;
                throw cacheError;
              };
            }
            if (isIterable(this._cache)) {
              this._tick(cacheTtl);
            }
          }
        }
        async queryAndCache(hostname) {
          if (this._hostnamesToFallback.has(hostname)) {
            return this._dnsLookup(hostname, all);
          }
          try {
            let query = await this._resolve(hostname);
            if (query.entries.length === 0 && this._fallback) {
              query = await this._lookup(hostname);
              if (query.entries.length !== 0) {
                this._hostnamesToFallback.add(hostname);
              }
            }
            const cacheTtl = query.entries.length === 0 ? this.errorTtl : query.cacheTtl;
            await this._set(hostname, query.entries, cacheTtl);
            delete this._pending[hostname];
            return query.entries;
          } catch (error) {
            delete this._pending[hostname];
            throw error;
          }
        }
        _tick(ms) {
          const nextRemovalTime = this._nextRemovalTime;
          if (!nextRemovalTime || ms < nextRemovalTime) {
            clearTimeout(this._removalTimeout);
            this._nextRemovalTime = ms;
            this._removalTimeout = setTimeout(() => {
              this._nextRemovalTime = false;
              let nextExpiry = Infinity;
              const now2 = Date.now();
              for (const [hostname, entries] of this._cache) {
                const expires = entries[kExpires];
                if (now2 >= expires) {
                  this._cache.delete(hostname);
                } else if (expires < nextExpiry) {
                  nextExpiry = expires;
                }
              }
              if (nextExpiry !== Infinity) {
                this._tick(nextExpiry - now2);
              }
            }, ms);
            if (this._removalTimeout.unref) {
              this._removalTimeout.unref();
            }
          }
        }
        install(agent) {
          verifyAgent(agent);
          if (kCacheableLookupCreateConnection in agent) {
            throw new Error("CacheableLookup has been already installed");
          }
          agent[kCacheableLookupCreateConnection] = agent.createConnection;
          agent[kCacheableLookupInstance] = this;
          agent.createConnection = (options, callback) => {
            if (!("lookup" in options)) {
              options.lookup = this.lookup;
            }
            return agent[kCacheableLookupCreateConnection](options, callback);
          };
        }
        uninstall(agent) {
          verifyAgent(agent);
          if (agent[kCacheableLookupCreateConnection]) {
            if (agent[kCacheableLookupInstance] !== this) {
              throw new Error("The agent is not owned by this CacheableLookup instance");
            }
            agent.createConnection = agent[kCacheableLookupCreateConnection];
            delete agent[kCacheableLookupCreateConnection];
            delete agent[kCacheableLookupInstance];
          }
        }
        updateInterfaceInfo() {
          const {_iface} = this;
          this._iface = getIfaceInfo();
          if (_iface.has4 && !this._iface.has4 || _iface.has6 && !this._iface.has6) {
            this._cache.clear();
          }
        }
        clear(hostname) {
          if (hostname) {
            this._cache.delete(hostname);
            return;
          }
          this._cache.clear();
        }
      };
      module.exports = CacheableLookup;
      module.exports.default = CacheableLookup;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/normalize-url-npm-4.5.0-14a0c5430f-34e9d01095.zip/node_modules/normalize-url/index.js
  var require_normalize_url = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/normalize-url-npm-4.5.0-14a0c5430f-34e9d01095.zip/node_modules/normalize-url/index.js"(exports, module) {
      "use strict";
      var URLParser = typeof URL === "undefined" ? require("url").URL : URL;
      var DATA_URL_DEFAULT_MIME_TYPE = "text/plain";
      var DATA_URL_DEFAULT_CHARSET = "us-ascii";
      var testParameter = (name, filters) => {
        return filters.some((filter) => filter instanceof RegExp ? filter.test(name) : filter === name);
      };
      var normalizeDataURL = (urlString, {stripHash}) => {
        const parts = urlString.match(/^data:(.*?),(.*?)(?:#(.*))?$/);
        if (!parts) {
          throw new Error(`Invalid URL: ${urlString}`);
        }
        const mediaType = parts[1].split(";");
        const body = parts[2];
        const hash = stripHash ? "" : parts[3];
        let base64 = false;
        if (mediaType[mediaType.length - 1] === "base64") {
          mediaType.pop();
          base64 = true;
        }
        const mimeType = (mediaType.shift() || "").toLowerCase();
        const attributes = mediaType.map((attribute) => {
          let [key, value = ""] = attribute.split("=").map((string) => string.trim());
          if (key === "charset") {
            value = value.toLowerCase();
            if (value === DATA_URL_DEFAULT_CHARSET) {
              return "";
            }
          }
          return `${key}${value ? `=${value}` : ""}`;
        }).filter(Boolean);
        const normalizedMediaType = [
          ...attributes
        ];
        if (base64) {
          normalizedMediaType.push("base64");
        }
        if (normalizedMediaType.length !== 0 || mimeType && mimeType !== DATA_URL_DEFAULT_MIME_TYPE) {
          normalizedMediaType.unshift(mimeType);
        }
        return `data:${normalizedMediaType.join(";")},${base64 ? body.trim() : body}${hash ? `#${hash}` : ""}`;
      };
      var normalizeUrl = (urlString, options) => {
        options = __spreadValues({
          defaultProtocol: "http:",
          normalizeProtocol: true,
          forceHttp: false,
          forceHttps: false,
          stripAuthentication: true,
          stripHash: false,
          stripWWW: true,
          removeQueryParameters: [/^utm_\w+/i],
          removeTrailingSlash: true,
          removeDirectoryIndex: false,
          sortQueryParameters: true
        }, options);
        if (Reflect.has(options, "normalizeHttps")) {
          throw new Error("options.normalizeHttps is renamed to options.forceHttp");
        }
        if (Reflect.has(options, "normalizeHttp")) {
          throw new Error("options.normalizeHttp is renamed to options.forceHttps");
        }
        if (Reflect.has(options, "stripFragment")) {
          throw new Error("options.stripFragment is renamed to options.stripHash");
        }
        urlString = urlString.trim();
        if (/^data:/i.test(urlString)) {
          return normalizeDataURL(urlString, options);
        }
        const hasRelativeProtocol = urlString.startsWith("//");
        const isRelativeUrl = !hasRelativeProtocol && /^\.*\//.test(urlString);
        if (!isRelativeUrl) {
          urlString = urlString.replace(/^(?!(?:\w+:)?\/\/)|^\/\//, options.defaultProtocol);
        }
        const urlObj = new URLParser(urlString);
        if (options.forceHttp && options.forceHttps) {
          throw new Error("The `forceHttp` and `forceHttps` options cannot be used together");
        }
        if (options.forceHttp && urlObj.protocol === "https:") {
          urlObj.protocol = "http:";
        }
        if (options.forceHttps && urlObj.protocol === "http:") {
          urlObj.protocol = "https:";
        }
        if (options.stripAuthentication) {
          urlObj.username = "";
          urlObj.password = "";
        }
        if (options.stripHash) {
          urlObj.hash = "";
        }
        if (urlObj.pathname) {
          urlObj.pathname = urlObj.pathname.replace(/((?!:).|^)\/{2,}/g, (_, p1) => {
            if (/^(?!\/)/g.test(p1)) {
              return `${p1}/`;
            }
            return "/";
          });
        }
        if (urlObj.pathname) {
          urlObj.pathname = decodeURI(urlObj.pathname);
        }
        if (options.removeDirectoryIndex === true) {
          options.removeDirectoryIndex = [/^index\.[a-z]+$/];
        }
        if (Array.isArray(options.removeDirectoryIndex) && options.removeDirectoryIndex.length > 0) {
          let pathComponents = urlObj.pathname.split("/");
          const lastComponent = pathComponents[pathComponents.length - 1];
          if (testParameter(lastComponent, options.removeDirectoryIndex)) {
            pathComponents = pathComponents.slice(0, pathComponents.length - 1);
            urlObj.pathname = pathComponents.slice(1).join("/") + "/";
          }
        }
        if (urlObj.hostname) {
          urlObj.hostname = urlObj.hostname.replace(/\.$/, "");
          if (options.stripWWW && /^www\.([a-z\-\d]{2,63})\.([a-z.]{2,5})$/.test(urlObj.hostname)) {
            urlObj.hostname = urlObj.hostname.replace(/^www\./, "");
          }
        }
        if (Array.isArray(options.removeQueryParameters)) {
          for (const key of [...urlObj.searchParams.keys()]) {
            if (testParameter(key, options.removeQueryParameters)) {
              urlObj.searchParams.delete(key);
            }
          }
        }
        if (options.sortQueryParameters) {
          urlObj.searchParams.sort();
        }
        if (options.removeTrailingSlash) {
          urlObj.pathname = urlObj.pathname.replace(/\/$/, "");
        }
        urlString = urlObj.toString();
        if ((options.removeTrailingSlash || urlObj.pathname === "/") && urlObj.hash === "") {
          urlString = urlString.replace(/\/$/, "");
        }
        if (hasRelativeProtocol && !options.normalizeProtocol) {
          urlString = urlString.replace(/^http:\/\//, "//");
        }
        if (options.stripProtocol) {
          urlString = urlString.replace(/^(?:https?:)?\/\//, "");
        }
        return urlString;
      };
      module.exports = normalizeUrl;
      module.exports.default = normalizeUrl;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/wrappy-npm-1.0.2-916de4d4b3-159da4805f.zip/node_modules/wrappy/wrappy.js
  var require_wrappy = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/wrappy-npm-1.0.2-916de4d4b3-159da4805f.zip/node_modules/wrappy/wrappy.js"(exports, module) {
      module.exports = wrappy;
      function wrappy(fn, cb) {
        if (fn && cb)
          return wrappy(fn)(cb);
        if (typeof fn !== "function")
          throw new TypeError("need wrapper function");
        Object.keys(fn).forEach(function(k) {
          wrapper[k] = fn[k];
        });
        return wrapper;
        function wrapper() {
          var args = new Array(arguments.length);
          for (var i = 0; i < args.length; i++) {
            args[i] = arguments[i];
          }
          var ret = fn.apply(this, args);
          var cb2 = args[args.length - 1];
          if (typeof ret === "function" && ret !== cb2) {
            Object.keys(cb2).forEach(function(k) {
              ret[k] = cb2[k];
            });
          }
          return ret;
        }
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/once-npm-1.4.0-ccf03ef07a-cd0a885013.zip/node_modules/once/once.js
  var require_once = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/once-npm-1.4.0-ccf03ef07a-cd0a885013.zip/node_modules/once/once.js"(exports, module) {
      var wrappy = require_wrappy();
      module.exports = wrappy(once);
      module.exports.strict = wrappy(onceStrict);
      once.proto = once(function() {
        Object.defineProperty(Function.prototype, "once", {
          value: function() {
            return once(this);
          },
          configurable: true
        });
        Object.defineProperty(Function.prototype, "onceStrict", {
          value: function() {
            return onceStrict(this);
          },
          configurable: true
        });
      });
      function once(fn) {
        var f = function() {
          if (f.called)
            return f.value;
          f.called = true;
          return f.value = fn.apply(this, arguments);
        };
        f.called = false;
        return f;
      }
      function onceStrict(fn) {
        var f = function() {
          if (f.called)
            throw new Error(f.onceError);
          f.called = true;
          return f.value = fn.apply(this, arguments);
        };
        var name = fn.name || "Function wrapped with `once`";
        f.onceError = name + " shouldn't be called more than once";
        f.called = false;
        return f;
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/end-of-stream-npm-1.4.1-ccccf6139c-ac0f75d57c.zip/node_modules/end-of-stream/index.js
  var require_end_of_stream = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/end-of-stream-npm-1.4.1-ccccf6139c-ac0f75d57c.zip/node_modules/end-of-stream/index.js"(exports, module) {
      var once = require_once();
      var noop = function() {
      };
      var isRequest = function(stream) {
        return stream.setHeader && typeof stream.abort === "function";
      };
      var isChildProcess = function(stream) {
        return stream.stdio && Array.isArray(stream.stdio) && stream.stdio.length === 3;
      };
      var eos = function(stream, opts, callback) {
        if (typeof opts === "function")
          return eos(stream, null, opts);
        if (!opts)
          opts = {};
        callback = once(callback || noop);
        var ws = stream._writableState;
        var rs = stream._readableState;
        var readable = opts.readable || opts.readable !== false && stream.readable;
        var writable = opts.writable || opts.writable !== false && stream.writable;
        var onlegacyfinish = function() {
          if (!stream.writable)
            onfinish();
        };
        var onfinish = function() {
          writable = false;
          if (!readable)
            callback.call(stream);
        };
        var onend = function() {
          readable = false;
          if (!writable)
            callback.call(stream);
        };
        var onexit = function(exitCode) {
          callback.call(stream, exitCode ? new Error("exited with error code: " + exitCode) : null);
        };
        var onerror = function(err) {
          callback.call(stream, err);
        };
        var onclose = function() {
          if (readable && !(rs && rs.ended))
            return callback.call(stream, new Error("premature close"));
          if (writable && !(ws && ws.ended))
            return callback.call(stream, new Error("premature close"));
        };
        var onrequest = function() {
          stream.req.on("finish", onfinish);
        };
        if (isRequest(stream)) {
          stream.on("complete", onfinish);
          stream.on("abort", onclose);
          if (stream.req)
            onrequest();
          else
            stream.on("request", onrequest);
        } else if (writable && !ws) {
          stream.on("end", onlegacyfinish);
          stream.on("close", onlegacyfinish);
        }
        if (isChildProcess(stream))
          stream.on("exit", onexit);
        stream.on("end", onend);
        stream.on("finish", onfinish);
        if (opts.error !== false)
          stream.on("error", onerror);
        stream.on("close", onclose);
        return function() {
          stream.removeListener("complete", onfinish);
          stream.removeListener("abort", onclose);
          stream.removeListener("request", onrequest);
          if (stream.req)
            stream.req.removeListener("finish", onfinish);
          stream.removeListener("end", onlegacyfinish);
          stream.removeListener("close", onlegacyfinish);
          stream.removeListener("finish", onfinish);
          stream.removeListener("exit", onexit);
          stream.removeListener("end", onend);
          stream.removeListener("error", onerror);
          stream.removeListener("close", onclose);
        };
      };
      module.exports = eos;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/pump-npm-3.0.0-0080bf6a7a-e42e9229fb.zip/node_modules/pump/index.js
  var require_pump = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/pump-npm-3.0.0-0080bf6a7a-e42e9229fb.zip/node_modules/pump/index.js"(exports, module) {
      var once = require_once();
      var eos = require_end_of_stream();
      var fs8 = require("fs");
      var noop = function() {
      };
      var ancient = /^v?\.0/.test(process.version);
      var isFn = function(fn) {
        return typeof fn === "function";
      };
      var isFS = function(stream) {
        if (!ancient)
          return false;
        if (!fs8)
          return false;
        return (stream instanceof (fs8.ReadStream || noop) || stream instanceof (fs8.WriteStream || noop)) && isFn(stream.close);
      };
      var isRequest = function(stream) {
        return stream.setHeader && isFn(stream.abort);
      };
      var destroyer = function(stream, reading, writing, callback) {
        callback = once(callback);
        var closed = false;
        stream.on("close", function() {
          closed = true;
        });
        eos(stream, {readable: reading, writable: writing}, function(err) {
          if (err)
            return callback(err);
          closed = true;
          callback();
        });
        var destroyed = false;
        return function(err) {
          if (closed)
            return;
          if (destroyed)
            return;
          destroyed = true;
          if (isFS(stream))
            return stream.close(noop);
          if (isRequest(stream))
            return stream.abort();
          if (isFn(stream.destroy))
            return stream.destroy();
          callback(err || new Error("stream was destroyed"));
        };
      };
      var call = function(fn) {
        fn();
      };
      var pipe = function(from, to) {
        return from.pipe(to);
      };
      var pump = function() {
        var streams = Array.prototype.slice.call(arguments);
        var callback = isFn(streams[streams.length - 1] || noop) && streams.pop() || noop;
        if (Array.isArray(streams[0]))
          streams = streams[0];
        if (streams.length < 2)
          throw new Error("pump requires two streams per minimum");
        var error;
        var destroys = streams.map(function(stream, i) {
          var reading = i < streams.length - 1;
          var writing = i > 0;
          return destroyer(stream, reading, writing, function(err) {
            if (!error)
              error = err;
            if (err)
              destroys.forEach(call);
            if (reading)
              return;
            destroys.forEach(call);
            callback(error);
          });
        });
        return streams.reduce(pipe);
      };
      module.exports = pump;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/get-stream-npm-5.1.0-29a3aa3558-371e1fb3f3.zip/node_modules/get-stream/buffer-stream.js
  var require_buffer_stream = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/get-stream-npm-5.1.0-29a3aa3558-371e1fb3f3.zip/node_modules/get-stream/buffer-stream.js"(exports, module) {
      "use strict";
      var {PassThrough: PassThroughStream} = require("stream");
      module.exports = (options) => {
        options = __spreadValues({}, options);
        const {array} = options;
        let {encoding} = options;
        const isBuffer = encoding === "buffer";
        let objectMode = false;
        if (array) {
          objectMode = !(encoding || isBuffer);
        } else {
          encoding = encoding || "utf8";
        }
        if (isBuffer) {
          encoding = null;
        }
        const stream = new PassThroughStream({objectMode});
        if (encoding) {
          stream.setEncoding(encoding);
        }
        let length = 0;
        const chunks = [];
        stream.on("data", (chunk) => {
          chunks.push(chunk);
          if (objectMode) {
            length = chunks.length;
          } else {
            length += chunk.length;
          }
        });
        stream.getBufferedValue = () => {
          if (array) {
            return chunks;
          }
          return isBuffer ? Buffer.concat(chunks, length) : chunks.join("");
        };
        stream.getBufferedLength = () => length;
        return stream;
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/get-stream-npm-5.1.0-29a3aa3558-371e1fb3f3.zip/node_modules/get-stream/index.js
  var require_get_stream = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/get-stream-npm-5.1.0-29a3aa3558-371e1fb3f3.zip/node_modules/get-stream/index.js"(exports, module) {
      "use strict";
      var pump = require_pump();
      var bufferStream2 = require_buffer_stream();
      var MaxBufferError = class extends Error {
        constructor() {
          super("maxBuffer exceeded");
          this.name = "MaxBufferError";
        }
      };
      async function getStream(inputStream, options) {
        if (!inputStream) {
          return Promise.reject(new Error("Expected a stream"));
        }
        options = __spreadValues({
          maxBuffer: Infinity
        }, options);
        const {maxBuffer} = options;
        let stream;
        await new Promise((resolve, reject) => {
          const rejectPromise = (error) => {
            if (error) {
              error.bufferedData = stream.getBufferedValue();
            }
            reject(error);
          };
          stream = pump(inputStream, bufferStream2(options), (error) => {
            if (error) {
              rejectPromise(error);
              return;
            }
            resolve();
          });
          stream.on("data", () => {
            if (stream.getBufferedLength() > maxBuffer) {
              rejectPromise(new MaxBufferError());
            }
          });
        });
        return stream.getBufferedValue();
      }
      module.exports = getStream;
      module.exports.default = getStream;
      module.exports.buffer = (stream, options) => getStream(stream, __spreadProps(__spreadValues({}, options), {encoding: "buffer"}));
      module.exports.array = (stream, options) => getStream(stream, __spreadProps(__spreadValues({}, options), {array: true}));
      module.exports.MaxBufferError = MaxBufferError;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/http-cache-semantics-npm-4.0.2-9d4864c5e1-675b4f88b3.zip/node_modules/http-cache-semantics/index.js
  var require_http_cache_semantics = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/http-cache-semantics-npm-4.0.2-9d4864c5e1-675b4f88b3.zip/node_modules/http-cache-semantics/index.js"(exports, module) {
      "use strict";
      var statusCodeCacheableByDefault = [200, 203, 204, 206, 300, 301, 404, 405, 410, 414, 501];
      var understoodStatuses = [200, 203, 204, 300, 301, 302, 303, 307, 308, 404, 405, 410, 414, 501];
      var hopByHopHeaders = {
        "date": true,
        "connection": true,
        "keep-alive": true,
        "proxy-authenticate": true,
        "proxy-authorization": true,
        "te": true,
        "trailer": true,
        "transfer-encoding": true,
        "upgrade": true
      };
      var excludedFromRevalidationUpdate = {
        "content-length": true,
        "content-encoding": true,
        "transfer-encoding": true,
        "content-range": true
      };
      function parseCacheControl(header) {
        const cc = {};
        if (!header)
          return cc;
        const parts = header.trim().split(/\s*,\s*/);
        for (const part of parts) {
          const [k, v] = part.split(/\s*=\s*/, 2);
          cc[k] = v === void 0 ? true : v.replace(/^"|"$/g, "");
        }
        return cc;
      }
      function formatCacheControl(cc) {
        let parts = [];
        for (const k in cc) {
          const v = cc[k];
          parts.push(v === true ? k : k + "=" + v);
        }
        if (!parts.length) {
          return void 0;
        }
        return parts.join(", ");
      }
      module.exports = class CachePolicy {
        constructor(req, res, {shared, cacheHeuristic, immutableMinTimeToLive, ignoreCargoCult, trustServerDate, _fromObject} = {}) {
          if (_fromObject) {
            this._fromObject(_fromObject);
            return;
          }
          if (!res || !res.headers) {
            throw Error("Response headers missing");
          }
          this._assertRequestHasHeaders(req);
          this._responseTime = this.now();
          this._isShared = shared !== false;
          this._trustServerDate = trustServerDate !== void 0 ? trustServerDate : true;
          this._cacheHeuristic = cacheHeuristic !== void 0 ? cacheHeuristic : 0.1;
          this._immutableMinTtl = immutableMinTimeToLive !== void 0 ? immutableMinTimeToLive : 24 * 3600 * 1e3;
          this._status = "status" in res ? res.status : 200;
          this._resHeaders = res.headers;
          this._rescc = parseCacheControl(res.headers["cache-control"]);
          this._method = "method" in req ? req.method : "GET";
          this._url = req.url;
          this._host = req.headers.host;
          this._noAuthorization = !req.headers.authorization;
          this._reqHeaders = res.headers.vary ? req.headers : null;
          this._reqcc = parseCacheControl(req.headers["cache-control"]);
          if (ignoreCargoCult && "pre-check" in this._rescc && "post-check" in this._rescc) {
            delete this._rescc["pre-check"];
            delete this._rescc["post-check"];
            delete this._rescc["no-cache"];
            delete this._rescc["no-store"];
            delete this._rescc["must-revalidate"];
            this._resHeaders = Object.assign({}, this._resHeaders, {"cache-control": formatCacheControl(this._rescc)});
            delete this._resHeaders.expires;
            delete this._resHeaders.pragma;
          }
          if (!res.headers["cache-control"] && /no-cache/.test(res.headers.pragma)) {
            this._rescc["no-cache"] = true;
          }
        }
        now() {
          return Date.now();
        }
        storable() {
          return !!(!this._reqcc["no-store"] && (this._method === "GET" || this._method === "HEAD" || this._method === "POST" && this._hasExplicitExpiration()) && understoodStatuses.indexOf(this._status) !== -1 && !this._rescc["no-store"] && (!this._isShared || !this._rescc.private) && (!this._isShared || this._noAuthorization || this._allowsStoringAuthenticated()) && (this._resHeaders.expires || this._rescc.public || this._rescc["max-age"] || this._rescc["s-maxage"] || statusCodeCacheableByDefault.indexOf(this._status) !== -1));
        }
        _hasExplicitExpiration() {
          return this._isShared && this._rescc["s-maxage"] || this._rescc["max-age"] || this._resHeaders.expires;
        }
        _assertRequestHasHeaders(req) {
          if (!req || !req.headers) {
            throw Error("Request headers missing");
          }
        }
        satisfiesWithoutRevalidation(req) {
          this._assertRequestHasHeaders(req);
          const requestCC = parseCacheControl(req.headers["cache-control"]);
          if (requestCC["no-cache"] || /no-cache/.test(req.headers.pragma)) {
            return false;
          }
          if (requestCC["max-age"] && this.age() > requestCC["max-age"]) {
            return false;
          }
          if (requestCC["min-fresh"] && this.timeToLive() < 1e3 * requestCC["min-fresh"]) {
            return false;
          }
          if (this.stale()) {
            const allowsStale = requestCC["max-stale"] && !this._rescc["must-revalidate"] && (requestCC["max-stale"] === true || requestCC["max-stale"] > this.age() - this.maxAge());
            if (!allowsStale) {
              return false;
            }
          }
          return this._requestMatches(req, false);
        }
        _requestMatches(req, allowHeadMethod) {
          return (!this._url || this._url === req.url) && this._host === req.headers.host && (!req.method || this._method === req.method || allowHeadMethod && req.method === "HEAD") && this._varyMatches(req);
        }
        _allowsStoringAuthenticated() {
          return this._rescc["must-revalidate"] || this._rescc.public || this._rescc["s-maxage"];
        }
        _varyMatches(req) {
          if (!this._resHeaders.vary) {
            return true;
          }
          if (this._resHeaders.vary === "*") {
            return false;
          }
          const fields = this._resHeaders.vary.trim().toLowerCase().split(/\s*,\s*/);
          for (const name of fields) {
            if (req.headers[name] !== this._reqHeaders[name])
              return false;
          }
          return true;
        }
        _copyWithoutHopByHopHeaders(inHeaders) {
          const headers = {};
          for (const name in inHeaders) {
            if (hopByHopHeaders[name])
              continue;
            headers[name] = inHeaders[name];
          }
          if (inHeaders.connection) {
            const tokens = inHeaders.connection.trim().split(/\s*,\s*/);
            for (const name of tokens) {
              delete headers[name];
            }
          }
          if (headers.warning) {
            const warnings = headers.warning.split(/,/).filter((warning) => {
              return !/^\s*1[0-9][0-9]/.test(warning);
            });
            if (!warnings.length) {
              delete headers.warning;
            } else {
              headers.warning = warnings.join(",").trim();
            }
          }
          return headers;
        }
        responseHeaders() {
          const headers = this._copyWithoutHopByHopHeaders(this._resHeaders);
          const age = this.age();
          if (age > 3600 * 24 && !this._hasExplicitExpiration() && this.maxAge() > 3600 * 24) {
            headers.warning = (headers.warning ? `${headers.warning}, ` : "") + '113 - "rfc7234 5.5.4"';
          }
          headers.age = `${Math.round(age)}`;
          headers.date = new Date(this.now()).toUTCString();
          return headers;
        }
        date() {
          if (this._trustServerDate) {
            return this._serverDate();
          }
          return this._responseTime;
        }
        _serverDate() {
          const dateValue = Date.parse(this._resHeaders.date);
          if (isFinite(dateValue)) {
            const maxClockDrift = 8 * 3600 * 1e3;
            const clockDrift = Math.abs(this._responseTime - dateValue);
            if (clockDrift < maxClockDrift) {
              return dateValue;
            }
          }
          return this._responseTime;
        }
        age() {
          let age = Math.max(0, (this._responseTime - this.date()) / 1e3);
          if (this._resHeaders.age) {
            let ageValue = this._ageValue();
            if (ageValue > age)
              age = ageValue;
          }
          const residentTime = (this.now() - this._responseTime) / 1e3;
          return age + residentTime;
        }
        _ageValue() {
          const ageValue = parseInt(this._resHeaders.age);
          return isFinite(ageValue) ? ageValue : 0;
        }
        maxAge() {
          if (!this.storable() || this._rescc["no-cache"]) {
            return 0;
          }
          if (this._isShared && (this._resHeaders["set-cookie"] && !this._rescc.public && !this._rescc.immutable)) {
            return 0;
          }
          if (this._resHeaders.vary === "*") {
            return 0;
          }
          if (this._isShared) {
            if (this._rescc["proxy-revalidate"]) {
              return 0;
            }
            if (this._rescc["s-maxage"]) {
              return parseInt(this._rescc["s-maxage"], 10);
            }
          }
          if (this._rescc["max-age"]) {
            return parseInt(this._rescc["max-age"], 10);
          }
          const defaultMinTtl = this._rescc.immutable ? this._immutableMinTtl : 0;
          const dateValue = this._serverDate();
          if (this._resHeaders.expires) {
            const expires = Date.parse(this._resHeaders.expires);
            if (Number.isNaN(expires) || expires < dateValue) {
              return 0;
            }
            return Math.max(defaultMinTtl, (expires - dateValue) / 1e3);
          }
          if (this._resHeaders["last-modified"]) {
            const lastModified = Date.parse(this._resHeaders["last-modified"]);
            if (isFinite(lastModified) && dateValue > lastModified) {
              return Math.max(defaultMinTtl, (dateValue - lastModified) / 1e3 * this._cacheHeuristic);
            }
          }
          return defaultMinTtl;
        }
        timeToLive() {
          return Math.max(0, this.maxAge() - this.age()) * 1e3;
        }
        stale() {
          return this.maxAge() <= this.age();
        }
        static fromObject(obj) {
          return new this(void 0, void 0, {_fromObject: obj});
        }
        _fromObject(obj) {
          if (this._responseTime)
            throw Error("Reinitialized");
          if (!obj || obj.v !== 1)
            throw Error("Invalid serialization");
          this._responseTime = obj.t;
          this._isShared = obj.sh;
          this._cacheHeuristic = obj.ch;
          this._immutableMinTtl = obj.imm !== void 0 ? obj.imm : 24 * 3600 * 1e3;
          this._status = obj.st;
          this._resHeaders = obj.resh;
          this._rescc = obj.rescc;
          this._method = obj.m;
          this._url = obj.u;
          this._host = obj.h;
          this._noAuthorization = obj.a;
          this._reqHeaders = obj.reqh;
          this._reqcc = obj.reqcc;
        }
        toObject() {
          return {
            v: 1,
            t: this._responseTime,
            sh: this._isShared,
            ch: this._cacheHeuristic,
            imm: this._immutableMinTtl,
            st: this._status,
            resh: this._resHeaders,
            rescc: this._rescc,
            m: this._method,
            u: this._url,
            h: this._host,
            a: this._noAuthorization,
            reqh: this._reqHeaders,
            reqcc: this._reqcc
          };
        }
        revalidationHeaders(incomingReq) {
          this._assertRequestHasHeaders(incomingReq);
          const headers = this._copyWithoutHopByHopHeaders(incomingReq.headers);
          delete headers["if-range"];
          if (!this._requestMatches(incomingReq, true) || !this.storable()) {
            delete headers["if-none-match"];
            delete headers["if-modified-since"];
            return headers;
          }
          if (this._resHeaders.etag) {
            headers["if-none-match"] = headers["if-none-match"] ? `${headers["if-none-match"]}, ${this._resHeaders.etag}` : this._resHeaders.etag;
          }
          const forbidsWeakValidators = headers["accept-ranges"] || headers["if-match"] || headers["if-unmodified-since"] || this._method && this._method != "GET";
          if (forbidsWeakValidators) {
            delete headers["if-modified-since"];
            if (headers["if-none-match"]) {
              const etags = headers["if-none-match"].split(/,/).filter((etag) => {
                return !/^\s*W\//.test(etag);
              });
              if (!etags.length) {
                delete headers["if-none-match"];
              } else {
                headers["if-none-match"] = etags.join(",").trim();
              }
            }
          } else if (this._resHeaders["last-modified"] && !headers["if-modified-since"]) {
            headers["if-modified-since"] = this._resHeaders["last-modified"];
          }
          return headers;
        }
        revalidatedPolicy(request2, response) {
          this._assertRequestHasHeaders(request2);
          if (!response || !response.headers) {
            throw Error("Response headers missing");
          }
          let matches = false;
          if (response.status !== void 0 && response.status != 304) {
            matches = false;
          } else if (response.headers.etag && !/^\s*W\//.test(response.headers.etag)) {
            matches = this._resHeaders.etag && this._resHeaders.etag.replace(/^\s*W\//, "") === response.headers.etag;
          } else if (this._resHeaders.etag && response.headers.etag) {
            matches = this._resHeaders.etag.replace(/^\s*W\//, "") === response.headers.etag.replace(/^\s*W\//, "");
          } else if (this._resHeaders["last-modified"]) {
            matches = this._resHeaders["last-modified"] === response.headers["last-modified"];
          } else {
            if (!this._resHeaders.etag && !this._resHeaders["last-modified"] && !response.headers.etag && !response.headers["last-modified"]) {
              matches = true;
            }
          }
          if (!matches) {
            return {
              policy: new this.constructor(request2, response),
              modified: response.status != 304,
              matches: false
            };
          }
          const headers = {};
          for (const k in this._resHeaders) {
            headers[k] = k in response.headers && !excludedFromRevalidationUpdate[k] ? response.headers[k] : this._resHeaders[k];
          }
          const newResponse = Object.assign({}, response, {
            status: this._status,
            method: this._method,
            headers
          });
          return {
            policy: new this.constructor(request2, newResponse, {shared: this._isShared, cacheHeuristic: this._cacheHeuristic, immutableMinTimeToLive: this._immutableMinTtl, trustServerDate: this._trustServerDate}),
            modified: false,
            matches: true
          };
        }
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lowercase-keys-npm-2.0.0-1876065a32-24d7ebd56c.zip/node_modules/lowercase-keys/index.js
  var require_lowercase_keys = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lowercase-keys-npm-2.0.0-1876065a32-24d7ebd56c.zip/node_modules/lowercase-keys/index.js"(exports, module) {
      "use strict";
      module.exports = (object) => {
        const result = {};
        for (const [key, value] of Object.entries(object)) {
          result[key.toLowerCase()] = value;
        }
        return result;
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/responselike-npm-2.0.0-7813864e97-6a4d32c37d.zip/node_modules/responselike/src/index.js
  var require_src = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/responselike-npm-2.0.0-7813864e97-6a4d32c37d.zip/node_modules/responselike/src/index.js"(exports, module) {
      "use strict";
      var Readable6 = require("stream").Readable;
      var lowercaseKeys = require_lowercase_keys();
      var Response2 = class extends Readable6 {
        constructor(statusCode, headers, body, url) {
          if (typeof statusCode !== "number") {
            throw new TypeError("Argument `statusCode` should be a number");
          }
          if (typeof headers !== "object") {
            throw new TypeError("Argument `headers` should be an object");
          }
          if (!(body instanceof Buffer)) {
            throw new TypeError("Argument `body` should be a buffer");
          }
          if (typeof url !== "string") {
            throw new TypeError("Argument `url` should be a string");
          }
          super();
          this.statusCode = statusCode;
          this.headers = lowercaseKeys(headers);
          this.body = body;
          this.url = url;
        }
        _read() {
          this.push(this.body);
          this.push(null);
        }
      };
      module.exports = Response2;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/mimic-response-npm-1.0.1-f6f85dde84-034c78753b.zip/node_modules/mimic-response/index.js
  var require_mimic_response = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/mimic-response-npm-1.0.1-f6f85dde84-034c78753b.zip/node_modules/mimic-response/index.js"(exports, module) {
      "use strict";
      var knownProps = [
        "destroy",
        "setTimeout",
        "socket",
        "headers",
        "trailers",
        "rawHeaders",
        "statusCode",
        "httpVersion",
        "httpVersionMinor",
        "httpVersionMajor",
        "rawTrailers",
        "statusMessage"
      ];
      module.exports = (fromStream, toStream) => {
        const fromProps = new Set(Object.keys(fromStream).concat(knownProps));
        for (const prop of fromProps) {
          if (prop in toStream) {
            continue;
          }
          toStream[prop] = typeof fromStream[prop] === "function" ? fromStream[prop].bind(fromStream) : fromStream[prop];
        }
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/clone-response-npm-1.0.2-135ae8239d-2d0e61547f.zip/node_modules/clone-response/src/index.js
  var require_src2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/clone-response-npm-1.0.2-135ae8239d-2d0e61547f.zip/node_modules/clone-response/src/index.js"(exports, module) {
      "use strict";
      var PassThrough8 = require("stream").PassThrough;
      var mimicResponse = require_mimic_response();
      var cloneResponse = (response) => {
        if (!(response && response.pipe)) {
          throw new TypeError("Parameter `response` must be a response stream.");
        }
        const clone2 = new PassThrough8();
        mimicResponse(response, clone2);
        return response.pipe(clone2);
      };
      module.exports = cloneResponse;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/json-buffer-npm-3.0.1-f8f6d20603-9026b03edc.zip/node_modules/json-buffer/index.js
  var require_json_buffer = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/json-buffer-npm-3.0.1-f8f6d20603-9026b03edc.zip/node_modules/json-buffer/index.js"(exports) {
      exports.stringify = function stringify(o) {
        if (typeof o == "undefined")
          return o;
        if (o && Buffer.isBuffer(o))
          return JSON.stringify(":base64:" + o.toString("base64"));
        if (o && o.toJSON)
          o = o.toJSON();
        if (o && typeof o === "object") {
          var s = "";
          var array = Array.isArray(o);
          s = array ? "[" : "{";
          var first = true;
          for (var k in o) {
            var ignore = typeof o[k] == "function" || !array && typeof o[k] === "undefined";
            if (Object.hasOwnProperty.call(o, k) && !ignore) {
              if (!first)
                s += ",";
              first = false;
              if (array) {
                if (o[k] == void 0)
                  s += "null";
                else
                  s += stringify(o[k]);
              } else if (o[k] !== void 0) {
                s += stringify(k) + ":" + stringify(o[k]);
              }
            }
          }
          s += array ? "]" : "}";
          return s;
        } else if (typeof o === "string") {
          return JSON.stringify(/^:/.test(o) ? ":" + o : o);
        } else if (typeof o === "undefined") {
          return "null";
        } else
          return JSON.stringify(o);
      };
      exports.parse = function(s) {
        return JSON.parse(s, function(key, value) {
          if (typeof value === "string") {
            if (/^:base64:/.test(value))
              return Buffer.from(value.substring(8), "base64");
            else
              return /^:/.test(value) ? value.substring(1) : value;
          }
          return value;
        });
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/keyv-npm-4.0.0-941f620aa2-ff4fc75679.zip/node_modules/keyv/src/index.js
  var require_src3 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/keyv-npm-4.0.0-941f620aa2-ff4fc75679.zip/node_modules/keyv/src/index.js"(exports, module) {
      "use strict";
      var EventEmitter3 = require("events");
      var JSONB = require_json_buffer();
      var loadStore = (opts) => {
        const adapters = {
          redis: "@keyv/redis",
          mongodb: "@keyv/mongo",
          mongo: "@keyv/mongo",
          sqlite: "@keyv/sqlite",
          postgresql: "@keyv/postgres",
          postgres: "@keyv/postgres",
          mysql: "@keyv/mysql"
        };
        if (opts.adapter || opts.uri) {
          const adapter = opts.adapter || /^[^:]*/.exec(opts.uri)[0];
          return new (require(adapters[adapter]))(opts);
        }
        return new Map();
      };
      var Keyv = class extends EventEmitter3 {
        constructor(uri, opts) {
          super();
          this.opts = Object.assign({
            namespace: "keyv",
            serialize: JSONB.stringify,
            deserialize: JSONB.parse
          }, typeof uri === "string" ? {uri} : uri, opts);
          if (!this.opts.store) {
            const adapterOpts = Object.assign({}, this.opts);
            this.opts.store = loadStore(adapterOpts);
          }
          if (typeof this.opts.store.on === "function") {
            this.opts.store.on("error", (err) => this.emit("error", err));
          }
          this.opts.store.namespace = this.opts.namespace;
        }
        _getKeyPrefix(key) {
          return `${this.opts.namespace}:${key}`;
        }
        get(key, opts) {
          key = this._getKeyPrefix(key);
          const {store} = this.opts;
          return Promise.resolve().then(() => store.get(key)).then((data) => {
            return typeof data === "string" ? this.opts.deserialize(data) : data;
          }).then((data) => {
            if (data === void 0) {
              return void 0;
            }
            if (typeof data.expires === "number" && Date.now() > data.expires) {
              this.delete(key);
              return void 0;
            }
            return opts && opts.raw ? data : data.value;
          });
        }
        set(key, value, ttl) {
          key = this._getKeyPrefix(key);
          if (typeof ttl === "undefined") {
            ttl = this.opts.ttl;
          }
          if (ttl === 0) {
            ttl = void 0;
          }
          const {store} = this.opts;
          return Promise.resolve().then(() => {
            const expires = typeof ttl === "number" ? Date.now() + ttl : null;
            value = {value, expires};
            return this.opts.serialize(value);
          }).then((value2) => store.set(key, value2, ttl)).then(() => true);
        }
        delete(key) {
          key = this._getKeyPrefix(key);
          const {store} = this.opts;
          return Promise.resolve().then(() => store.delete(key));
        }
        clear() {
          const {store} = this.opts;
          return Promise.resolve().then(() => store.clear());
        }
      };
      module.exports = Keyv;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/cacheable-request-npm-7.0.1-d870be2496-558cbc4785.zip/node_modules/cacheable-request/src/index.js
  var require_src4 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/cacheable-request-npm-7.0.1-d870be2496-558cbc4785.zip/node_modules/cacheable-request/src/index.js"(exports, module) {
      "use strict";
      var EventEmitter3 = require("events");
      var urlLib2 = require("url");
      var normalizeUrl = require_normalize_url();
      var getStream = require_get_stream();
      var CachePolicy = require_http_cache_semantics();
      var Response2 = require_src();
      var lowercaseKeys = require_lowercase_keys();
      var cloneResponse = require_src2();
      var Keyv = require_src3();
      var CacheableRequest = class {
        constructor(request2, cacheAdapter) {
          if (typeof request2 !== "function") {
            throw new TypeError("Parameter `request` must be a function");
          }
          this.cache = new Keyv({
            uri: typeof cacheAdapter === "string" && cacheAdapter,
            store: typeof cacheAdapter !== "string" && cacheAdapter,
            namespace: "cacheable-request"
          });
          return this.createCacheableRequest(request2);
        }
        createCacheableRequest(request2) {
          return (opts, cb) => {
            let url;
            if (typeof opts === "string") {
              url = normalizeUrlObject(urlLib2.parse(opts));
              opts = {};
            } else if (opts instanceof urlLib2.URL) {
              url = normalizeUrlObject(urlLib2.parse(opts.toString()));
              opts = {};
            } else {
              const [pathname, ...searchParts] = (opts.path || "").split("?");
              const search = searchParts.length > 0 ? `?${searchParts.join("?")}` : "";
              url = normalizeUrlObject(__spreadProps(__spreadValues({}, opts), {pathname, search}));
            }
            opts = __spreadValues(__spreadValues({
              headers: {},
              method: "GET",
              cache: true,
              strictTtl: false,
              automaticFailover: false
            }, opts), urlObjectToRequestOptions(url));
            opts.headers = lowercaseKeys(opts.headers);
            const ee = new EventEmitter3();
            const normalizedUrlString = normalizeUrl(urlLib2.format(url), {
              stripWWW: false,
              removeTrailingSlash: false,
              stripAuthentication: false
            });
            const key = `${opts.method}:${normalizedUrlString}`;
            let revalidate = false;
            let madeRequest = false;
            const makeRequest = (opts2) => {
              madeRequest = true;
              let requestErrored = false;
              let requestErrorCallback;
              const requestErrorPromise = new Promise((resolve) => {
                requestErrorCallback = () => {
                  if (!requestErrored) {
                    requestErrored = true;
                    resolve();
                  }
                };
              });
              const handler = (response) => {
                if (revalidate && !opts2.forceRefresh) {
                  response.status = response.statusCode;
                  const revalidatedPolicy = CachePolicy.fromObject(revalidate.cachePolicy).revalidatedPolicy(opts2, response);
                  if (!revalidatedPolicy.modified) {
                    const headers = revalidatedPolicy.policy.responseHeaders();
                    response = new Response2(revalidate.statusCode, headers, revalidate.body, revalidate.url);
                    response.cachePolicy = revalidatedPolicy.policy;
                    response.fromCache = true;
                  }
                }
                if (!response.fromCache) {
                  response.cachePolicy = new CachePolicy(opts2, response, opts2);
                  response.fromCache = false;
                }
                let clonedResponse;
                if (opts2.cache && response.cachePolicy.storable()) {
                  clonedResponse = cloneResponse(response);
                  (async () => {
                    try {
                      const bodyPromise = getStream.buffer(response);
                      await Promise.race([
                        requestErrorPromise,
                        new Promise((resolve) => response.once("end", resolve))
                      ]);
                      if (requestErrored) {
                        return;
                      }
                      const body = await bodyPromise;
                      const value = {
                        cachePolicy: response.cachePolicy.toObject(),
                        url: response.url,
                        statusCode: response.fromCache ? revalidate.statusCode : response.statusCode,
                        body
                      };
                      let ttl = opts2.strictTtl ? response.cachePolicy.timeToLive() : void 0;
                      if (opts2.maxTtl) {
                        ttl = ttl ? Math.min(ttl, opts2.maxTtl) : opts2.maxTtl;
                      }
                      await this.cache.set(key, value, ttl);
                    } catch (error) {
                      ee.emit("error", new CacheableRequest.CacheError(error));
                    }
                  })();
                } else if (opts2.cache && revalidate) {
                  (async () => {
                    try {
                      await this.cache.delete(key);
                    } catch (error) {
                      ee.emit("error", new CacheableRequest.CacheError(error));
                    }
                  })();
                }
                ee.emit("response", clonedResponse || response);
                if (typeof cb === "function") {
                  cb(clonedResponse || response);
                }
              };
              try {
                const req = request2(opts2, handler);
                req.once("error", requestErrorCallback);
                req.once("abort", requestErrorCallback);
                ee.emit("request", req);
              } catch (error) {
                ee.emit("error", new CacheableRequest.RequestError(error));
              }
            };
            (async () => {
              const get3 = async (opts2) => {
                await Promise.resolve();
                const cacheEntry = opts2.cache ? await this.cache.get(key) : void 0;
                if (typeof cacheEntry === "undefined") {
                  return makeRequest(opts2);
                }
                const policy = CachePolicy.fromObject(cacheEntry.cachePolicy);
                if (policy.satisfiesWithoutRevalidation(opts2) && !opts2.forceRefresh) {
                  const headers = policy.responseHeaders();
                  const response = new Response2(cacheEntry.statusCode, headers, cacheEntry.body, cacheEntry.url);
                  response.cachePolicy = policy;
                  response.fromCache = true;
                  ee.emit("response", response);
                  if (typeof cb === "function") {
                    cb(response);
                  }
                } else {
                  revalidate = cacheEntry;
                  opts2.headers = policy.revalidationHeaders(opts2);
                  makeRequest(opts2);
                }
              };
              const errorHandler = (error) => ee.emit("error", new CacheableRequest.CacheError(error));
              this.cache.once("error", errorHandler);
              ee.on("response", () => this.cache.removeListener("error", errorHandler));
              try {
                await get3(opts);
              } catch (error) {
                if (opts.automaticFailover && !madeRequest) {
                  makeRequest(opts);
                }
                ee.emit("error", new CacheableRequest.CacheError(error));
              }
            })();
            return ee;
          };
        }
      };
      function urlObjectToRequestOptions(url) {
        const options = __spreadValues({}, url);
        options.path = `${url.pathname || "/"}${url.search || ""}`;
        delete options.pathname;
        delete options.search;
        return options;
      }
      function normalizeUrlObject(url) {
        return {
          protocol: url.protocol,
          auth: url.auth,
          hostname: url.hostname || url.host || "localhost",
          port: url.port,
          pathname: url.pathname,
          search: url.search
        };
      }
      CacheableRequest.RequestError = class extends Error {
        constructor(error) {
          super(error.message);
          this.name = "RequestError";
          Object.assign(this, error);
        }
      };
      CacheableRequest.CacheError = class extends Error {
        constructor(error) {
          super(error.message);
          this.name = "CacheError";
          Object.assign(this, error);
        }
      };
      module.exports = CacheableRequest;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/mimic-response-npm-3.1.0-a4a24b4e96-25739fee32.zip/node_modules/mimic-response/index.js
  var require_mimic_response2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/mimic-response-npm-3.1.0-a4a24b4e96-25739fee32.zip/node_modules/mimic-response/index.js"(exports, module) {
      "use strict";
      var knownProperties = [
        "aborted",
        "complete",
        "headers",
        "httpVersion",
        "httpVersionMinor",
        "httpVersionMajor",
        "method",
        "rawHeaders",
        "rawTrailers",
        "setTimeout",
        "socket",
        "statusCode",
        "statusMessage",
        "trailers",
        "url"
      ];
      module.exports = (fromStream, toStream) => {
        if (toStream._readableState.autoDestroy) {
          throw new Error("The second stream must have the `autoDestroy` option set to `false`");
        }
        const fromProperties = new Set(Object.keys(fromStream).concat(knownProperties));
        const properties = {};
        for (const property of fromProperties) {
          if (property in toStream) {
            continue;
          }
          properties[property] = {
            get() {
              const value = fromStream[property];
              const isFunction = typeof value === "function";
              return isFunction ? value.bind(fromStream) : value;
            },
            set(value) {
              fromStream[property] = value;
            },
            enumerable: true,
            configurable: false
          };
        }
        Object.defineProperties(toStream, properties);
        fromStream.once("aborted", () => {
          toStream.destroy();
          toStream.emit("aborted");
        });
        fromStream.once("close", () => {
          if (fromStream.complete) {
            if (toStream.readable) {
              toStream.once("end", () => {
                toStream.emit("close");
              });
            } else {
              toStream.emit("close");
            }
          } else {
            toStream.emit("close");
          }
        });
        return toStream;
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/decompress-response-npm-6.0.0-359de2878c-d377cf47e0.zip/node_modules/decompress-response/index.js
  var require_decompress_response = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/decompress-response-npm-6.0.0-359de2878c-d377cf47e0.zip/node_modules/decompress-response/index.js"(exports, module) {
      "use strict";
      var {Transform: Transform3, PassThrough: PassThrough8} = require("stream");
      var zlib3 = require("zlib");
      var mimicResponse = require_mimic_response2();
      module.exports = (response) => {
        const contentEncoding = (response.headers["content-encoding"] || "").toLowerCase();
        if (!["gzip", "deflate", "br"].includes(contentEncoding)) {
          return response;
        }
        const isBrotli = contentEncoding === "br";
        if (isBrotli && typeof zlib3.createBrotliDecompress !== "function") {
          response.destroy(new Error("Brotli is not supported on Node.js < 12"));
          return response;
        }
        let isEmpty = true;
        const checker = new Transform3({
          transform(data, _encoding, callback) {
            isEmpty = false;
            callback(null, data);
          },
          flush(callback) {
            callback();
          }
        });
        const finalStream = new PassThrough8({
          autoDestroy: false,
          destroy(error, callback) {
            response.destroy();
            callback(error);
          }
        });
        const decompressStream = isBrotli ? zlib3.createBrotliDecompress() : zlib3.createUnzip();
        decompressStream.once("error", (error) => {
          if (isEmpty && !response.readable) {
            finalStream.end();
            return;
          }
          finalStream.destroy(error);
        });
        mimicResponse(response, finalStream);
        response.pipe(checker).pipe(decompressStream).pipe(finalStream);
        return finalStream;
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/quick-lru-npm-5.1.1-e38e0edce3-a516faa255.zip/node_modules/quick-lru/index.js
  var require_quick_lru = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/quick-lru-npm-5.1.1-e38e0edce3-a516faa255.zip/node_modules/quick-lru/index.js"(exports, module) {
      "use strict";
      var QuickLRU = class {
        constructor(options = {}) {
          if (!(options.maxSize && options.maxSize > 0)) {
            throw new TypeError("`maxSize` must be a number greater than 0");
          }
          this.maxSize = options.maxSize;
          this.onEviction = options.onEviction;
          this.cache = new Map();
          this.oldCache = new Map();
          this._size = 0;
        }
        _set(key, value) {
          this.cache.set(key, value);
          this._size++;
          if (this._size >= this.maxSize) {
            this._size = 0;
            if (typeof this.onEviction === "function") {
              for (const [key2, value2] of this.oldCache.entries()) {
                this.onEviction(key2, value2);
              }
            }
            this.oldCache = this.cache;
            this.cache = new Map();
          }
        }
        get(key) {
          if (this.cache.has(key)) {
            return this.cache.get(key);
          }
          if (this.oldCache.has(key)) {
            const value = this.oldCache.get(key);
            this.oldCache.delete(key);
            this._set(key, value);
            return value;
          }
        }
        set(key, value) {
          if (this.cache.has(key)) {
            this.cache.set(key, value);
          } else {
            this._set(key, value);
          }
          return this;
        }
        has(key) {
          return this.cache.has(key) || this.oldCache.has(key);
        }
        peek(key) {
          if (this.cache.has(key)) {
            return this.cache.get(key);
          }
          if (this.oldCache.has(key)) {
            return this.oldCache.get(key);
          }
        }
        delete(key) {
          const deleted = this.cache.delete(key);
          if (deleted) {
            this._size--;
          }
          return this.oldCache.delete(key) || deleted;
        }
        clear() {
          this.cache.clear();
          this.oldCache.clear();
          this._size = 0;
        }
        *keys() {
          for (const [key] of this) {
            yield key;
          }
        }
        *values() {
          for (const [, value] of this) {
            yield value;
          }
        }
        *[Symbol.iterator]() {
          for (const item of this.cache) {
            yield item;
          }
          for (const item of this.oldCache) {
            const [key] = item;
            if (!this.cache.has(key)) {
              yield item;
            }
          }
        }
        get size() {
          let oldCacheSize = 0;
          for (const key of this.oldCache.keys()) {
            if (!this.cache.has(key)) {
              oldCacheSize++;
            }
          }
          return Math.min(this._size + oldCacheSize, this.maxSize);
        }
      };
      module.exports = QuickLRU;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/http2-wrapper-npm-1.0.0-beta.5.2-3ea360ab61-c2b572ded5.zip/node_modules/http2-wrapper/source/agent.js
  var require_agent = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/http2-wrapper-npm-1.0.0-beta.5.2-3ea360ab61-c2b572ded5.zip/node_modules/http2-wrapper/source/agent.js"(exports, module) {
      "use strict";
      var EventEmitter3 = require("events");
      var tls = require("tls");
      var http2 = require("http2");
      var QuickLRU = require_quick_lru();
      var kCurrentStreamsCount = Symbol("currentStreamsCount");
      var kRequest = Symbol("request");
      var kOriginSet = Symbol("cachedOriginSet");
      var kGracefullyClosing = Symbol("gracefullyClosing");
      var nameKeys = [
        "maxDeflateDynamicTableSize",
        "maxSessionMemory",
        "maxHeaderListPairs",
        "maxOutstandingPings",
        "maxReservedRemoteStreams",
        "maxSendHeaderBlockLength",
        "paddingStrategy",
        "localAddress",
        "path",
        "rejectUnauthorized",
        "minDHSize",
        "ca",
        "cert",
        "clientCertEngine",
        "ciphers",
        "key",
        "pfx",
        "servername",
        "minVersion",
        "maxVersion",
        "secureProtocol",
        "crl",
        "honorCipherOrder",
        "ecdhCurve",
        "dhparam",
        "secureOptions",
        "sessionIdContext"
      ];
      var getSortedIndex = (array, value, compare) => {
        let low = 0;
        let high = array.length;
        while (low < high) {
          const mid = low + high >>> 1;
          if (compare(array[mid], value)) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return low;
      };
      var compareSessions = (a, b) => {
        return a.remoteSettings.maxConcurrentStreams > b.remoteSettings.maxConcurrentStreams;
      };
      var closeCoveredSessions = (where, session) => {
        for (const coveredSession of where) {
          if (coveredSession[kOriginSet].length < session[kOriginSet].length && coveredSession[kOriginSet].every((origin) => session[kOriginSet].includes(origin)) && coveredSession[kCurrentStreamsCount] + session[kCurrentStreamsCount] <= session.remoteSettings.maxConcurrentStreams) {
            gracefullyClose(coveredSession);
          }
        }
      };
      var closeSessionIfCovered = (where, coveredSession) => {
        for (const session of where) {
          if (coveredSession[kOriginSet].length < session[kOriginSet].length && coveredSession[kOriginSet].every((origin) => session[kOriginSet].includes(origin)) && coveredSession[kCurrentStreamsCount] + session[kCurrentStreamsCount] <= session.remoteSettings.maxConcurrentStreams) {
            gracefullyClose(coveredSession);
          }
        }
      };
      var getSessions = ({agent, isFree}) => {
        const result = {};
        for (const normalizedOptions in agent.sessions) {
          const sessions = agent.sessions[normalizedOptions];
          const filtered = sessions.filter((session) => {
            const result2 = session[Agent.kCurrentStreamsCount] < session.remoteSettings.maxConcurrentStreams;
            return isFree ? result2 : !result2;
          });
          if (filtered.length !== 0) {
            result[normalizedOptions] = filtered;
          }
        }
        return result;
      };
      var gracefullyClose = (session) => {
        session[kGracefullyClosing] = true;
        if (session[kCurrentStreamsCount] === 0) {
          session.close();
        }
      };
      var Agent = class extends EventEmitter3 {
        constructor({timeout = 6e4, maxSessions = Infinity, maxFreeSessions = 10, maxCachedTlsSessions = 100} = {}) {
          super();
          this.sessions = {};
          this.queue = {};
          this.timeout = timeout;
          this.maxSessions = maxSessions;
          this.maxFreeSessions = maxFreeSessions;
          this._freeSessionsCount = 0;
          this._sessionsCount = 0;
          this.settings = {
            enablePush: false
          };
          this.tlsSessionCache = new QuickLRU({maxSize: maxCachedTlsSessions});
        }
        static normalizeOrigin(url, servername) {
          if (typeof url === "string") {
            url = new URL(url);
          }
          if (servername && url.hostname !== servername) {
            url.hostname = servername;
          }
          return url.origin;
        }
        normalizeOptions(options) {
          let normalized = "";
          if (options) {
            for (const key of nameKeys) {
              if (options[key]) {
                normalized += `:${options[key]}`;
              }
            }
          }
          return normalized;
        }
        _tryToCreateNewSession(normalizedOptions, normalizedOrigin) {
          if (!(normalizedOptions in this.queue) || !(normalizedOrigin in this.queue[normalizedOptions])) {
            return;
          }
          const item = this.queue[normalizedOptions][normalizedOrigin];
          if (this._sessionsCount < this.maxSessions && !item.completed) {
            item.completed = true;
            item();
          }
        }
        getSession(origin, options, listeners) {
          return new Promise((resolve, reject) => {
            if (Array.isArray(listeners)) {
              listeners = [...listeners];
              resolve();
            } else {
              listeners = [{resolve, reject}];
            }
            const normalizedOptions = this.normalizeOptions(options);
            const normalizedOrigin = Agent.normalizeOrigin(origin, options && options.servername);
            if (normalizedOrigin === void 0) {
              for (const {reject: reject2} of listeners) {
                reject2(new TypeError("The `origin` argument needs to be a string or an URL object"));
              }
              return;
            }
            if (normalizedOptions in this.sessions) {
              const sessions = this.sessions[normalizedOptions];
              let maxConcurrentStreams = -1;
              let currentStreamsCount = -1;
              let optimalSession;
              for (const session of sessions) {
                const sessionMaxConcurrentStreams = session.remoteSettings.maxConcurrentStreams;
                if (sessionMaxConcurrentStreams < maxConcurrentStreams) {
                  break;
                }
                if (session[kOriginSet].includes(normalizedOrigin)) {
                  const sessionCurrentStreamsCount = session[kCurrentStreamsCount];
                  if (sessionCurrentStreamsCount >= sessionMaxConcurrentStreams || session[kGracefullyClosing] || session.destroyed) {
                    continue;
                  }
                  if (!optimalSession) {
                    maxConcurrentStreams = sessionMaxConcurrentStreams;
                  }
                  if (sessionCurrentStreamsCount > currentStreamsCount) {
                    optimalSession = session;
                    currentStreamsCount = sessionCurrentStreamsCount;
                  }
                }
              }
              if (optimalSession) {
                if (listeners.length !== 1) {
                  for (const {reject: reject2} of listeners) {
                    const error = new Error(`Expected the length of listeners to be 1, got ${listeners.length}.
Please report this to https://github.com/szmarczak/http2-wrapper/`);
                    reject2(error);
                  }
                  return;
                }
                listeners[0].resolve(optimalSession);
                return;
              }
            }
            if (normalizedOptions in this.queue) {
              if (normalizedOrigin in this.queue[normalizedOptions]) {
                this.queue[normalizedOptions][normalizedOrigin].listeners.push(...listeners);
                this._tryToCreateNewSession(normalizedOptions, normalizedOrigin);
                return;
              }
            } else {
              this.queue[normalizedOptions] = {};
            }
            const removeFromQueue = () => {
              if (normalizedOptions in this.queue && this.queue[normalizedOptions][normalizedOrigin] === entry) {
                delete this.queue[normalizedOptions][normalizedOrigin];
                if (Object.keys(this.queue[normalizedOptions]).length === 0) {
                  delete this.queue[normalizedOptions];
                }
              }
            };
            const entry = () => {
              const name = `${normalizedOrigin}:${normalizedOptions}`;
              let receivedSettings = false;
              try {
                const session = http2.connect(origin, __spreadValues({
                  createConnection: this.createConnection,
                  settings: this.settings,
                  session: this.tlsSessionCache.get(name)
                }, options));
                session[kCurrentStreamsCount] = 0;
                session[kGracefullyClosing] = false;
                const isFree = () => session[kCurrentStreamsCount] < session.remoteSettings.maxConcurrentStreams;
                let wasFree = true;
                session.socket.once("session", (tlsSession) => {
                  this.tlsSessionCache.set(name, tlsSession);
                });
                session.once("error", (error) => {
                  for (const {reject: reject2} of listeners) {
                    reject2(error);
                  }
                  this.tlsSessionCache.delete(name);
                });
                session.setTimeout(this.timeout, () => {
                  session.destroy();
                });
                session.once("close", () => {
                  if (receivedSettings) {
                    if (wasFree) {
                      this._freeSessionsCount--;
                    }
                    this._sessionsCount--;
                    const where = this.sessions[normalizedOptions];
                    where.splice(where.indexOf(session), 1);
                    if (where.length === 0) {
                      delete this.sessions[normalizedOptions];
                    }
                  } else {
                    const error = new Error("Session closed without receiving a SETTINGS frame");
                    error.code = "HTTP2WRAPPER_NOSETTINGS";
                    for (const {reject: reject2} of listeners) {
                      reject2(error);
                    }
                    removeFromQueue();
                  }
                  this._tryToCreateNewSession(normalizedOptions, normalizedOrigin);
                });
                const processListeners = () => {
                  if (!(normalizedOptions in this.queue) || !isFree()) {
                    return;
                  }
                  for (const origin2 of session[kOriginSet]) {
                    if (origin2 in this.queue[normalizedOptions]) {
                      const {listeners: listeners2} = this.queue[normalizedOptions][origin2];
                      while (listeners2.length !== 0 && isFree()) {
                        listeners2.shift().resolve(session);
                      }
                      const where = this.queue[normalizedOptions];
                      if (where[origin2].listeners.length === 0) {
                        delete where[origin2];
                        if (Object.keys(where).length === 0) {
                          delete this.queue[normalizedOptions];
                          break;
                        }
                      }
                      if (!isFree()) {
                        break;
                      }
                    }
                  }
                };
                session.on("origin", () => {
                  session[kOriginSet] = session.originSet;
                  if (!isFree()) {
                    return;
                  }
                  processListeners();
                  closeCoveredSessions(this.sessions[normalizedOptions], session);
                });
                session.once("remoteSettings", () => {
                  session.ref();
                  session.unref();
                  this._sessionsCount++;
                  if (entry.destroyed) {
                    const error = new Error("Agent has been destroyed");
                    for (const listener of listeners) {
                      listener.reject(error);
                    }
                    session.destroy();
                    return;
                  }
                  session[kOriginSet] = session.originSet;
                  {
                    const where = this.sessions;
                    if (normalizedOptions in where) {
                      const sessions = where[normalizedOptions];
                      sessions.splice(getSortedIndex(sessions, session, compareSessions), 0, session);
                    } else {
                      where[normalizedOptions] = [session];
                    }
                  }
                  this._freeSessionsCount += 1;
                  receivedSettings = true;
                  this.emit("session", session);
                  processListeners();
                  removeFromQueue();
                  if (session[kCurrentStreamsCount] === 0 && this._freeSessionsCount > this.maxFreeSessions) {
                    session.close();
                  }
                  if (listeners.length !== 0) {
                    this.getSession(normalizedOrigin, options, listeners);
                    listeners.length = 0;
                  }
                  session.on("remoteSettings", () => {
                    processListeners();
                    closeCoveredSessions(this.sessions[normalizedOptions], session);
                  });
                });
                session[kRequest] = session.request;
                session.request = (headers, streamOptions) => {
                  if (session[kGracefullyClosing]) {
                    throw new Error("The session is gracefully closing. No new streams are allowed.");
                  }
                  const stream = session[kRequest](headers, streamOptions);
                  session.ref();
                  ++session[kCurrentStreamsCount];
                  if (session[kCurrentStreamsCount] === session.remoteSettings.maxConcurrentStreams) {
                    this._freeSessionsCount--;
                  }
                  stream.once("close", () => {
                    wasFree = isFree();
                    --session[kCurrentStreamsCount];
                    if (!session.destroyed && !session.closed) {
                      closeSessionIfCovered(this.sessions[normalizedOptions], session);
                      if (isFree() && !session.closed) {
                        if (!wasFree) {
                          this._freeSessionsCount++;
                          wasFree = true;
                        }
                        const isEmpty = session[kCurrentStreamsCount] === 0;
                        if (isEmpty) {
                          session.unref();
                        }
                        if (isEmpty && (this._freeSessionsCount > this.maxFreeSessions || session[kGracefullyClosing])) {
                          session.close();
                        } else {
                          closeCoveredSessions(this.sessions[normalizedOptions], session);
                          processListeners();
                        }
                      }
                    }
                  });
                  return stream;
                };
              } catch (error) {
                for (const listener of listeners) {
                  listener.reject(error);
                }
                removeFromQueue();
              }
            };
            entry.listeners = listeners;
            entry.completed = false;
            entry.destroyed = false;
            this.queue[normalizedOptions][normalizedOrigin] = entry;
            this._tryToCreateNewSession(normalizedOptions, normalizedOrigin);
          });
        }
        request(origin, options, headers, streamOptions) {
          return new Promise((resolve, reject) => {
            this.getSession(origin, options, [{
              reject,
              resolve: (session) => {
                try {
                  resolve(session.request(headers, streamOptions));
                } catch (error) {
                  reject(error);
                }
              }
            }]);
          });
        }
        createConnection(origin, options) {
          return Agent.connect(origin, options);
        }
        static connect(origin, options) {
          options.ALPNProtocols = ["h2"];
          const port = origin.port || 443;
          const host = origin.hostname || origin.host;
          if (typeof options.servername === "undefined") {
            options.servername = host;
          }
          return tls.connect(port, host, options);
        }
        closeFreeSessions() {
          for (const sessions of Object.values(this.sessions)) {
            for (const session of sessions) {
              if (session[kCurrentStreamsCount] === 0) {
                session.close();
              }
            }
          }
        }
        destroy(reason) {
          for (const sessions of Object.values(this.sessions)) {
            for (const session of sessions) {
              session.destroy(reason);
            }
          }
          for (const entriesOfAuthority of Object.values(this.queue)) {
            for (const entry of Object.values(entriesOfAuthority)) {
              entry.destroyed = true;
            }
          }
          this.queue = {};
        }
        get freeSessions() {
          return getSessions({agent: this, isFree: true});
        }
        get busySessions() {
          return getSessions({agent: this, isFree: false});
        }
      };
      Agent.kCurrentStreamsCount = kCurrentStreamsCount;
      Agent.kGracefullyClosing = kGracefullyClosing;
      module.exports = {
        Agent,
        globalAgent: new Agent()
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/http2-wrapper-npm-1.0.0-beta.5.2-3ea360ab61-c2b572ded5.zip/node_modules/http2-wrapper/source/incoming-message.js
  var require_incoming_message = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/http2-wrapper-npm-1.0.0-beta.5.2-3ea360ab61-c2b572ded5.zip/node_modules/http2-wrapper/source/incoming-message.js"(exports, module) {
      "use strict";
      var {Readable: Readable6} = require("stream");
      var IncomingMessage = class extends Readable6 {
        constructor(socket, highWaterMark) {
          super({
            highWaterMark,
            autoDestroy: false
          });
          this.statusCode = null;
          this.statusMessage = "";
          this.httpVersion = "2.0";
          this.httpVersionMajor = 2;
          this.httpVersionMinor = 0;
          this.headers = {};
          this.trailers = {};
          this.req = null;
          this.aborted = false;
          this.complete = false;
          this.upgrade = null;
          this.rawHeaders = [];
          this.rawTrailers = [];
          this.socket = socket;
          this.connection = socket;
          this._dumped = false;
        }
        _destroy(error) {
          this.req._request.destroy(error);
        }
        setTimeout(ms, callback) {
          this.req.setTimeout(ms, callback);
          return this;
        }
        _dump() {
          if (!this._dumped) {
            this._dumped = true;
            this.removeAllListeners("data");
            this.resume();
          }
        }
        _read() {
          if (this.req) {
            this.req._request.resume();
          }
        }
      };
      module.exports = IncomingMessage;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/http2-wrapper-npm-1.0.0-beta.5.2-3ea360ab61-c2b572ded5.zip/node_modules/http2-wrapper/source/utils/url-to-options.js
  var require_url_to_options = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/http2-wrapper-npm-1.0.0-beta.5.2-3ea360ab61-c2b572ded5.zip/node_modules/http2-wrapper/source/utils/url-to-options.js"(exports, module) {
      "use strict";
      module.exports = (url) => {
        const options = {
          protocol: url.protocol,
          hostname: typeof url.hostname === "string" && url.hostname.startsWith("[") ? url.hostname.slice(1, -1) : url.hostname,
          host: url.host,
          hash: url.hash,
          search: url.search,
          pathname: url.pathname,
          href: url.href,
          path: `${url.pathname || ""}${url.search || ""}`
        };
        if (typeof url.port === "string" && url.port.length !== 0) {
          options.port = Number(url.port);
        }
        if (url.username || url.password) {
          options.auth = `${url.username || ""}:${url.password || ""}`;
        }
        return options;
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/http2-wrapper-npm-1.0.0-beta.5.2-3ea360ab61-c2b572ded5.zip/node_modules/http2-wrapper/source/utils/proxy-events.js
  var require_proxy_events = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/http2-wrapper-npm-1.0.0-beta.5.2-3ea360ab61-c2b572ded5.zip/node_modules/http2-wrapper/source/utils/proxy-events.js"(exports, module) {
      "use strict";
      module.exports = (from, to, events) => {
        for (const event of events) {
          from.on(event, (...args) => to.emit(event, ...args));
        }
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/http2-wrapper-npm-1.0.0-beta.5.2-3ea360ab61-c2b572ded5.zip/node_modules/http2-wrapper/source/utils/is-request-pseudo-header.js
  var require_is_request_pseudo_header = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/http2-wrapper-npm-1.0.0-beta.5.2-3ea360ab61-c2b572ded5.zip/node_modules/http2-wrapper/source/utils/is-request-pseudo-header.js"(exports, module) {
      "use strict";
      module.exports = (header) => {
        switch (header) {
          case ":method":
          case ":scheme":
          case ":authority":
          case ":path":
            return true;
          default:
            return false;
        }
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/http2-wrapper-npm-1.0.0-beta.5.2-3ea360ab61-c2b572ded5.zip/node_modules/http2-wrapper/source/utils/errors.js
  var require_errors = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/http2-wrapper-npm-1.0.0-beta.5.2-3ea360ab61-c2b572ded5.zip/node_modules/http2-wrapper/source/utils/errors.js"(exports, module) {
      "use strict";
      var makeError4 = (Base, key, getMessage) => {
        module.exports[key] = class NodeError extends Base {
          constructor(...args) {
            super(typeof getMessage === "string" ? getMessage : getMessage(args));
            this.name = `${super.name} [${key}]`;
            this.code = key;
          }
        };
      };
      makeError4(TypeError, "ERR_INVALID_ARG_TYPE", (args) => {
        const type = args[0].includes(".") ? "property" : "argument";
        let valid = args[1];
        const isManyTypes = Array.isArray(valid);
        if (isManyTypes) {
          valid = `${valid.slice(0, -1).join(", ")} or ${valid.slice(-1)}`;
        }
        return `The "${args[0]}" ${type} must be ${isManyTypes ? "one of" : "of"} type ${valid}. Received ${typeof args[2]}`;
      });
      makeError4(TypeError, "ERR_INVALID_PROTOCOL", (args) => {
        return `Protocol "${args[0]}" not supported. Expected "${args[1]}"`;
      });
      makeError4(Error, "ERR_HTTP_HEADERS_SENT", (args) => {
        return `Cannot ${args[0]} headers after they are sent to the client`;
      });
      makeError4(TypeError, "ERR_INVALID_HTTP_TOKEN", (args) => {
        return `${args[0]} must be a valid HTTP token [${args[1]}]`;
      });
      makeError4(TypeError, "ERR_HTTP_INVALID_HEADER_VALUE", (args) => {
        return `Invalid value "${args[0]} for header "${args[1]}"`;
      });
      makeError4(TypeError, "ERR_INVALID_CHAR", (args) => {
        return `Invalid character in ${args[0]} [${args[1]}]`;
      });
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/http2-wrapper-npm-1.0.0-beta.5.2-3ea360ab61-c2b572ded5.zip/node_modules/http2-wrapper/source/client-request.js
  var require_client_request = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/http2-wrapper-npm-1.0.0-beta.5.2-3ea360ab61-c2b572ded5.zip/node_modules/http2-wrapper/source/client-request.js"(exports, module) {
      "use strict";
      var http2 = require("http2");
      var {Writable: Writable5} = require("stream");
      var {Agent, globalAgent} = require_agent();
      var IncomingMessage = require_incoming_message();
      var urlToOptions = require_url_to_options();
      var proxyEvents = require_proxy_events();
      var isRequestPseudoHeader = require_is_request_pseudo_header();
      var {
        ERR_INVALID_ARG_TYPE,
        ERR_INVALID_PROTOCOL,
        ERR_HTTP_HEADERS_SENT,
        ERR_INVALID_HTTP_TOKEN,
        ERR_HTTP_INVALID_HEADER_VALUE,
        ERR_INVALID_CHAR
      } = require_errors();
      var {
        HTTP2_HEADER_STATUS,
        HTTP2_HEADER_METHOD,
        HTTP2_HEADER_PATH,
        HTTP2_METHOD_CONNECT
      } = http2.constants;
      var kHeaders = Symbol("headers");
      var kOrigin = Symbol("origin");
      var kSession = Symbol("session");
      var kOptions = Symbol("options");
      var kFlushedHeaders = Symbol("flushedHeaders");
      var kJobs = Symbol("jobs");
      var isValidHttpToken = /^[\^`\-\w!#$%&*+.|~]+$/;
      var isInvalidHeaderValue = /[^\t\u0020-\u007E\u0080-\u00FF]/;
      var ClientRequest = class extends Writable5 {
        constructor(input, options, callback) {
          super({
            autoDestroy: false
          });
          const hasInput = typeof input === "string" || input instanceof URL;
          if (hasInput) {
            input = urlToOptions(input instanceof URL ? input : new URL(input));
          }
          if (typeof options === "function" || options === void 0) {
            callback = options;
            options = hasInput ? input : __spreadValues({}, input);
          } else {
            options = __spreadValues(__spreadValues({}, input), options);
          }
          if (options.h2session) {
            this[kSession] = options.h2session;
          } else if (options.agent === false) {
            this.agent = new Agent({maxFreeSessions: 0});
          } else if (typeof options.agent === "undefined" || options.agent === null) {
            if (typeof options.createConnection === "function") {
              this.agent = new Agent({maxFreeSessions: 0});
              this.agent.createConnection = options.createConnection;
            } else {
              this.agent = globalAgent;
            }
          } else if (typeof options.agent.request === "function") {
            this.agent = options.agent;
          } else {
            throw new ERR_INVALID_ARG_TYPE("options.agent", ["Agent-like Object", "undefined", "false"], options.agent);
          }
          if (options.protocol && options.protocol !== "https:") {
            throw new ERR_INVALID_PROTOCOL(options.protocol, "https:");
          }
          const port = options.port || options.defaultPort || this.agent && this.agent.defaultPort || 443;
          const host = options.hostname || options.host || "localhost";
          delete options.hostname;
          delete options.host;
          delete options.port;
          const {timeout} = options;
          options.timeout = void 0;
          this[kHeaders] = Object.create(null);
          this[kJobs] = [];
          this.socket = null;
          this.connection = null;
          this.method = options.method || "GET";
          this.path = options.path;
          this.res = null;
          this.aborted = false;
          this.reusedSocket = false;
          if (options.headers) {
            for (const [header, value] of Object.entries(options.headers)) {
              this.setHeader(header, value);
            }
          }
          if (options.auth && !("authorization" in this[kHeaders])) {
            this[kHeaders].authorization = "Basic " + Buffer.from(options.auth).toString("base64");
          }
          options.session = options.tlsSession;
          options.path = options.socketPath;
          this[kOptions] = options;
          if (port === 443) {
            this[kOrigin] = `https://${host}`;
            if (!(":authority" in this[kHeaders])) {
              this[kHeaders][":authority"] = host;
            }
          } else {
            this[kOrigin] = `https://${host}:${port}`;
            if (!(":authority" in this[kHeaders])) {
              this[kHeaders][":authority"] = `${host}:${port}`;
            }
          }
          if (timeout) {
            this.setTimeout(timeout);
          }
          if (callback) {
            this.once("response", callback);
          }
          this[kFlushedHeaders] = false;
        }
        get method() {
          return this[kHeaders][HTTP2_HEADER_METHOD];
        }
        set method(value) {
          if (value) {
            this[kHeaders][HTTP2_HEADER_METHOD] = value.toUpperCase();
          }
        }
        get path() {
          return this[kHeaders][HTTP2_HEADER_PATH];
        }
        set path(value) {
          if (value) {
            this[kHeaders][HTTP2_HEADER_PATH] = value;
          }
        }
        get _mustNotHaveABody() {
          return this.method === "GET" || this.method === "HEAD" || this.method === "DELETE";
        }
        _write(chunk, encoding, callback) {
          if (this._mustNotHaveABody) {
            callback(new Error("The GET, HEAD and DELETE methods must NOT have a body"));
            return;
          }
          this.flushHeaders();
          const callWrite = () => this._request.write(chunk, encoding, callback);
          if (this._request) {
            callWrite();
          } else {
            this[kJobs].push(callWrite);
          }
        }
        _final(callback) {
          if (this.destroyed) {
            return;
          }
          this.flushHeaders();
          const callEnd = () => {
            if (this._mustNotHaveABody) {
              callback();
              return;
            }
            this._request.end(callback);
          };
          if (this._request) {
            callEnd();
          } else {
            this[kJobs].push(callEnd);
          }
        }
        abort() {
          if (this.res && this.res.complete) {
            return;
          }
          if (!this.aborted) {
            process.nextTick(() => this.emit("abort"));
          }
          this.aborted = true;
          this.destroy();
        }
        _destroy(error, callback) {
          if (this.res) {
            this.res._dump();
          }
          if (this._request) {
            this._request.destroy();
          }
          callback(error);
        }
        async flushHeaders() {
          if (this[kFlushedHeaders] || this.destroyed) {
            return;
          }
          this[kFlushedHeaders] = true;
          const isConnectMethod = this.method === HTTP2_METHOD_CONNECT;
          const onStream = (stream) => {
            this._request = stream;
            if (this.destroyed) {
              stream.destroy();
              return;
            }
            if (!isConnectMethod) {
              proxyEvents(stream, this, ["timeout", "continue", "close", "error"]);
            }
            const waitForEnd = (fn) => {
              return (...args) => {
                if (!this.writable && !this.destroyed) {
                  fn(...args);
                } else {
                  this.once("finish", () => {
                    fn(...args);
                  });
                }
              };
            };
            stream.once("response", waitForEnd((headers, flags, rawHeaders) => {
              const response = new IncomingMessage(this.socket, stream.readableHighWaterMark);
              this.res = response;
              response.req = this;
              response.statusCode = headers[HTTP2_HEADER_STATUS];
              response.headers = headers;
              response.rawHeaders = rawHeaders;
              response.once("end", () => {
                if (this.aborted) {
                  response.aborted = true;
                  response.emit("aborted");
                } else {
                  response.complete = true;
                  response.socket = null;
                  response.connection = null;
                }
              });
              if (isConnectMethod) {
                response.upgrade = true;
                if (this.emit("connect", response, stream, Buffer.alloc(0))) {
                  this.emit("close");
                } else {
                  stream.destroy();
                }
              } else {
                stream.on("data", (chunk) => {
                  if (!response._dumped && !response.push(chunk)) {
                    stream.pause();
                  }
                });
                stream.once("end", () => {
                  response.push(null);
                });
                if (!this.emit("response", response)) {
                  response._dump();
                }
              }
            }));
            stream.once("headers", waitForEnd((headers) => this.emit("information", {statusCode: headers[HTTP2_HEADER_STATUS]})));
            stream.once("trailers", waitForEnd((trailers, flags, rawTrailers) => {
              const {res} = this;
              res.trailers = trailers;
              res.rawTrailers = rawTrailers;
            }));
            const {socket} = stream.session;
            this.socket = socket;
            this.connection = socket;
            for (const job of this[kJobs]) {
              job();
            }
            this.emit("socket", this.socket);
          };
          if (this[kSession]) {
            try {
              onStream(this[kSession].request(this[kHeaders]));
            } catch (error) {
              this.emit("error", error);
            }
          } else {
            this.reusedSocket = true;
            try {
              onStream(await this.agent.request(this[kOrigin], this[kOptions], this[kHeaders]));
            } catch (error) {
              this.emit("error", error);
            }
          }
        }
        getHeader(name) {
          if (typeof name !== "string") {
            throw new ERR_INVALID_ARG_TYPE("name", "string", name);
          }
          return this[kHeaders][name.toLowerCase()];
        }
        get headersSent() {
          return this[kFlushedHeaders];
        }
        removeHeader(name) {
          if (typeof name !== "string") {
            throw new ERR_INVALID_ARG_TYPE("name", "string", name);
          }
          if (this.headersSent) {
            throw new ERR_HTTP_HEADERS_SENT("remove");
          }
          delete this[kHeaders][name.toLowerCase()];
        }
        setHeader(name, value) {
          if (this.headersSent) {
            throw new ERR_HTTP_HEADERS_SENT("set");
          }
          if (typeof name !== "string" || !isValidHttpToken.test(name) && !isRequestPseudoHeader(name)) {
            throw new ERR_INVALID_HTTP_TOKEN("Header name", name);
          }
          if (typeof value === "undefined") {
            throw new ERR_HTTP_INVALID_HEADER_VALUE(value, name);
          }
          if (isInvalidHeaderValue.test(value)) {
            throw new ERR_INVALID_CHAR("header content", name);
          }
          this[kHeaders][name.toLowerCase()] = value;
        }
        setNoDelay() {
        }
        setSocketKeepAlive() {
        }
        setTimeout(ms, callback) {
          const applyTimeout = () => this._request.setTimeout(ms, callback);
          if (this._request) {
            applyTimeout();
          } else {
            this[kJobs].push(applyTimeout);
          }
          return this;
        }
        get maxHeadersCount() {
          if (!this.destroyed && this._request) {
            return this._request.session.localSettings.maxHeaderListSize;
          }
          return void 0;
        }
        set maxHeadersCount(_value) {
        }
      };
      module.exports = ClientRequest;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/resolve-alpn-npm-1.0.0-f655c150b7-146b739f14.zip/node_modules/resolve-alpn/index.js
  var require_resolve_alpn = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/resolve-alpn-npm-1.0.0-f655c150b7-146b739f14.zip/node_modules/resolve-alpn/index.js"(exports, module) {
      "use strict";
      var tls = require("tls");
      module.exports = (options = {}) => new Promise((resolve, reject) => {
        const socket = tls.connect(options, () => {
          if (options.resolveSocket) {
            socket.off("error", reject);
            resolve({alpnProtocol: socket.alpnProtocol, socket});
          } else {
            socket.destroy();
            resolve({alpnProtocol: socket.alpnProtocol});
          }
        });
        socket.on("error", reject);
      });
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/http2-wrapper-npm-1.0.0-beta.5.2-3ea360ab61-c2b572ded5.zip/node_modules/http2-wrapper/source/utils/calculate-server-name.js
  var require_calculate_server_name = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/http2-wrapper-npm-1.0.0-beta.5.2-3ea360ab61-c2b572ded5.zip/node_modules/http2-wrapper/source/utils/calculate-server-name.js"(exports, module) {
      "use strict";
      var net = require("net");
      module.exports = (options) => {
        let servername = options.host;
        const hostHeader = options.headers && options.headers.host;
        if (hostHeader) {
          if (hostHeader.startsWith("[")) {
            const index = hostHeader.indexOf("]");
            if (index === -1) {
              servername = hostHeader;
            } else {
              servername = hostHeader.slice(1, -1);
            }
          } else {
            servername = hostHeader.split(":", 1)[0];
          }
        }
        if (net.isIP(servername)) {
          return "";
        }
        return servername;
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/http2-wrapper-npm-1.0.0-beta.5.2-3ea360ab61-c2b572ded5.zip/node_modules/http2-wrapper/source/auto.js
  var require_auto = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/http2-wrapper-npm-1.0.0-beta.5.2-3ea360ab61-c2b572ded5.zip/node_modules/http2-wrapper/source/auto.js"(exports, module) {
      "use strict";
      var http = require("http");
      var https = require("https");
      var resolveALPN = require_resolve_alpn();
      var QuickLRU = require_quick_lru();
      var Http2ClientRequest = require_client_request();
      var calculateServerName = require_calculate_server_name();
      var urlToOptions = require_url_to_options();
      var cache2 = new QuickLRU({maxSize: 100});
      var queue = new Map();
      var installSocket = (agent, socket, options) => {
        socket._httpMessage = {shouldKeepAlive: true};
        const onFree = () => {
          agent.emit("free", socket, options);
        };
        socket.on("free", onFree);
        const onClose = () => {
          agent.removeSocket(socket, options);
        };
        socket.on("close", onClose);
        const onRemove = () => {
          agent.removeSocket(socket, options);
          socket.off("close", onClose);
          socket.off("free", onFree);
          socket.off("agentRemove", onRemove);
        };
        socket.on("agentRemove", onRemove);
        agent.emit("free", socket, options);
      };
      var resolveProtocol = async (options) => {
        const name = `${options.host}:${options.port}:${options.ALPNProtocols.sort()}`;
        if (!cache2.has(name)) {
          if (queue.has(name)) {
            const result = await queue.get(name);
            return result.alpnProtocol;
          }
          const {path: path3, agent} = options;
          options.path = options.socketPath;
          const resultPromise = resolveALPN(options);
          queue.set(name, resultPromise);
          try {
            const {socket, alpnProtocol} = await resultPromise;
            cache2.set(name, alpnProtocol);
            options.path = path3;
            if (alpnProtocol === "h2") {
              socket.destroy();
            } else {
              const {globalAgent} = https;
              const defaultCreateConnection = https.Agent.prototype.createConnection;
              if (agent) {
                if (agent.createConnection === defaultCreateConnection) {
                  installSocket(agent, socket, options);
                } else {
                  socket.destroy();
                }
              } else if (globalAgent.createConnection === defaultCreateConnection) {
                installSocket(globalAgent, socket, options);
              } else {
                socket.destroy();
              }
            }
            queue.delete(name);
            return alpnProtocol;
          } catch (error) {
            queue.delete(name);
            throw error;
          }
        }
        return cache2.get(name);
      };
      module.exports = async (input, options, callback) => {
        if (typeof input === "string" || input instanceof URL) {
          input = urlToOptions(new URL(input));
        }
        if (typeof options === "function") {
          callback = options;
          options = void 0;
        }
        options = __spreadProps(__spreadValues(__spreadValues({
          ALPNProtocols: ["h2", "http/1.1"]
        }, input), options), {
          resolveSocket: true
        });
        if (!Array.isArray(options.ALPNProtocols) || options.ALPNProtocols.length === 0) {
          throw new Error("The `ALPNProtocols` option must be an Array with at least one entry");
        }
        options.protocol = options.protocol || "https:";
        const isHttps = options.protocol === "https:";
        options.host = options.hostname || options.host || "localhost";
        options.session = options.tlsSession;
        options.servername = options.servername || calculateServerName(options);
        options.port = options.port || (isHttps ? 443 : 80);
        options._defaultAgent = isHttps ? https.globalAgent : http.globalAgent;
        const agents = options.agent;
        if (agents) {
          if (agents.addRequest) {
            throw new Error("The `options.agent` object can contain only `http`, `https` or `http2` properties");
          }
          options.agent = agents[isHttps ? "https" : "http"];
        }
        if (isHttps) {
          const protocol = await resolveProtocol(options);
          if (protocol === "h2") {
            if (agents) {
              options.agent = agents.http2;
            }
            return new Http2ClientRequest(options, callback);
          }
        }
        return http.request(options, callback);
      };
      module.exports.protocolCache = cache2;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/http2-wrapper-npm-1.0.0-beta.5.2-3ea360ab61-c2b572ded5.zip/node_modules/http2-wrapper/source/index.js
  var require_source5 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/http2-wrapper-npm-1.0.0-beta.5.2-3ea360ab61-c2b572ded5.zip/node_modules/http2-wrapper/source/index.js"(exports, module) {
      "use strict";
      var http2 = require("http2");
      var agent = require_agent();
      var ClientRequest = require_client_request();
      var IncomingMessage = require_incoming_message();
      var auto = require_auto();
      var request2 = (url, options, callback) => {
        return new ClientRequest(url, options, callback);
      };
      var get3 = (url, options, callback) => {
        const req = new ClientRequest(url, options, callback);
        req.end();
        return req;
      };
      module.exports = __spreadProps(__spreadValues(__spreadProps(__spreadValues({}, http2), {
        ClientRequest,
        IncomingMessage
      }), agent), {
        request: request2,
        get: get3,
        auto
      });
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/core/utils/is-form-data.js
  var require_is_form_data = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/core/utils/is-form-data.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var is_1 = require_dist();
      exports.default = (body) => is_1.default.nodeStream(body) && is_1.default.function_(body.getBoundary);
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/core/utils/get-body-size.js
  var require_get_body_size = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/core/utils/get-body-size.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var fs_1 = require("fs");
      var util_1 = require("util");
      var is_1 = require_dist();
      var is_form_data_1 = require_is_form_data();
      var statAsync = util_1.promisify(fs_1.stat);
      exports.default = async (body, headers) => {
        if (headers && "content-length" in headers) {
          return Number(headers["content-length"]);
        }
        if (!body) {
          return 0;
        }
        if (is_1.default.string(body)) {
          return Buffer.byteLength(body);
        }
        if (is_1.default.buffer(body)) {
          return body.length;
        }
        if (is_form_data_1.default(body)) {
          return util_1.promisify(body.getLength.bind(body))();
        }
        if (body instanceof fs_1.ReadStream) {
          const {size} = await statAsync(body.path);
          return size;
        }
        return void 0;
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/core/utils/proxy-events.js
  var require_proxy_events2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/core/utils/proxy-events.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      function default_1(from, to, events) {
        const fns = {};
        for (const event of events) {
          fns[event] = (...args) => {
            to.emit(event, ...args);
          };
          from.on(event, fns[event]);
        }
        return () => {
          for (const event of events) {
            from.off(event, fns[event]);
          }
        };
      }
      exports.default = default_1;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/core/utils/unhandle.js
  var require_unhandle = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/core/utils/unhandle.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      exports.default = () => {
        const handlers = [];
        return {
          once(origin, event, fn) {
            origin.once(event, fn);
            handlers.push({origin, event, fn});
          },
          unhandleAll() {
            for (const handler of handlers) {
              const {origin, event, fn} = handler;
              origin.removeListener(event, fn);
            }
            handlers.length = 0;
          }
        };
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/core/utils/timed-out.js
  var require_timed_out = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/core/utils/timed-out.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      exports.TimeoutError = void 0;
      var net = require("net");
      var unhandle_1 = require_unhandle();
      var reentry = Symbol("reentry");
      var noop = () => {
      };
      var TimeoutError2 = class extends Error {
        constructor(threshold, event) {
          super(`Timeout awaiting '${event}' for ${threshold}ms`);
          this.event = event;
          this.name = "TimeoutError";
          this.code = "ETIMEDOUT";
        }
      };
      exports.TimeoutError = TimeoutError2;
      exports.default = (request2, delays, options) => {
        if (reentry in request2) {
          return noop;
        }
        request2[reentry] = true;
        const cancelers = [];
        const {once, unhandleAll} = unhandle_1.default();
        const addTimeout = (delay, callback, event) => {
          var _a2;
          const timeout = setTimeout(callback, delay, delay, event);
          (_a2 = timeout.unref) === null || _a2 === void 0 ? void 0 : _a2.call(timeout);
          const cancel = () => {
            clearTimeout(timeout);
          };
          cancelers.push(cancel);
          return cancel;
        };
        const {host, hostname} = options;
        const timeoutHandler = (delay, event) => {
          request2.destroy(new TimeoutError2(delay, event));
        };
        const cancelTimeouts = () => {
          for (const cancel of cancelers) {
            cancel();
          }
          unhandleAll();
        };
        request2.once("error", (error) => {
          cancelTimeouts();
          if (request2.listenerCount("error") === 0) {
            throw error;
          }
        });
        request2.once("close", cancelTimeouts);
        once(request2, "response", (response) => {
          once(response, "end", cancelTimeouts);
        });
        if (typeof delays.request !== "undefined") {
          addTimeout(delays.request, timeoutHandler, "request");
        }
        if (typeof delays.socket !== "undefined") {
          const socketTimeoutHandler = () => {
            timeoutHandler(delays.socket, "socket");
          };
          request2.setTimeout(delays.socket, socketTimeoutHandler);
          cancelers.push(() => {
            request2.removeListener("timeout", socketTimeoutHandler);
          });
        }
        once(request2, "socket", (socket) => {
          var _a2;
          const {socketPath} = request2;
          if (socket.connecting) {
            const hasPath = Boolean(socketPath !== null && socketPath !== void 0 ? socketPath : net.isIP((_a2 = hostname !== null && hostname !== void 0 ? hostname : host) !== null && _a2 !== void 0 ? _a2 : "") !== 0);
            if (typeof delays.lookup !== "undefined" && !hasPath && typeof socket.address().address === "undefined") {
              const cancelTimeout = addTimeout(delays.lookup, timeoutHandler, "lookup");
              once(socket, "lookup", cancelTimeout);
            }
            if (typeof delays.connect !== "undefined") {
              const timeConnect = () => addTimeout(delays.connect, timeoutHandler, "connect");
              if (hasPath) {
                once(socket, "connect", timeConnect());
              } else {
                once(socket, "lookup", (error) => {
                  if (error === null) {
                    once(socket, "connect", timeConnect());
                  }
                });
              }
            }
            if (typeof delays.secureConnect !== "undefined" && options.protocol === "https:") {
              once(socket, "connect", () => {
                const cancelTimeout = addTimeout(delays.secureConnect, timeoutHandler, "secureConnect");
                once(socket, "secureConnect", cancelTimeout);
              });
            }
          }
          if (typeof delays.send !== "undefined") {
            const timeRequest = () => addTimeout(delays.send, timeoutHandler, "send");
            if (socket.connecting) {
              once(socket, "connect", () => {
                once(request2, "upload-complete", timeRequest());
              });
            } else {
              once(request2, "upload-complete", timeRequest());
            }
          }
        });
        if (typeof delays.response !== "undefined") {
          once(request2, "upload-complete", () => {
            const cancelTimeout = addTimeout(delays.response, timeoutHandler, "response");
            once(request2, "response", cancelTimeout);
          });
        }
        return cancelTimeouts;
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/core/utils/url-to-options.js
  var require_url_to_options2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/core/utils/url-to-options.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var is_1 = require_dist();
      exports.default = (url) => {
        url = url;
        const options = {
          protocol: url.protocol,
          hostname: is_1.default.string(url.hostname) && url.hostname.startsWith("[") ? url.hostname.slice(1, -1) : url.hostname,
          host: url.host,
          hash: url.hash,
          search: url.search,
          pathname: url.pathname,
          href: url.href,
          path: `${url.pathname || ""}${url.search || ""}`
        };
        if (is_1.default.string(url.port) && url.port.length !== 0) {
          options.port = Number(url.port);
        }
        if (url.username || url.password) {
          options.auth = `${url.username || ""}:${url.password || ""}`;
        }
        return options;
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/core/utils/options-to-url.js
  var require_options_to_url = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/core/utils/options-to-url.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var url_1 = require("url");
      var keys = [
        "protocol",
        "host",
        "hostname",
        "port",
        "pathname",
        "search"
      ];
      exports.default = (origin, options) => {
        var _a2, _b;
        if (options.path) {
          if (options.pathname) {
            throw new TypeError("Parameters `path` and `pathname` are mutually exclusive.");
          }
          if (options.search) {
            throw new TypeError("Parameters `path` and `search` are mutually exclusive.");
          }
          if (options.searchParams) {
            throw new TypeError("Parameters `path` and `searchParams` are mutually exclusive.");
          }
        }
        if (options.search && options.searchParams) {
          throw new TypeError("Parameters `search` and `searchParams` are mutually exclusive.");
        }
        if (!origin) {
          if (!options.protocol) {
            throw new TypeError("No URL protocol specified");
          }
          origin = `${options.protocol}//${(_b = (_a2 = options.hostname) !== null && _a2 !== void 0 ? _a2 : options.host) !== null && _b !== void 0 ? _b : ""}`;
        }
        const url = new url_1.URL(origin);
        if (options.path) {
          const searchIndex = options.path.indexOf("?");
          if (searchIndex === -1) {
            options.pathname = options.path;
          } else {
            options.pathname = options.path.slice(0, searchIndex);
            options.search = options.path.slice(searchIndex + 1);
          }
          delete options.path;
        }
        for (const key of keys) {
          if (options[key]) {
            url[key] = options[key].toString();
          }
        }
        return url;
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/core/utils/weakable-map.js
  var require_weakable_map = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/core/utils/weakable-map.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var WeakableMap = class {
        constructor() {
          this.weakMap = new WeakMap();
          this.map = new Map();
        }
        set(key, value) {
          if (typeof key === "object") {
            this.weakMap.set(key, value);
          } else {
            this.map.set(key, value);
          }
        }
        get(key) {
          if (typeof key === "object") {
            return this.weakMap.get(key);
          }
          return this.map.get(key);
        }
        has(key) {
          if (typeof key === "object") {
            return this.weakMap.has(key);
          }
          return this.map.has(key);
        }
      };
      exports.default = WeakableMap;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/core/utils/get-buffer.js
  var require_get_buffer = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/core/utils/get-buffer.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var getBuffer = async (stream) => {
        const chunks = [];
        let length = 0;
        for await (const chunk of stream) {
          chunks.push(chunk);
          length += Buffer.byteLength(chunk);
        }
        if (Buffer.isBuffer(chunks[0])) {
          return Buffer.concat(chunks, length);
        }
        return Buffer.from(chunks.join(""));
      };
      exports.default = getBuffer;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/core/utils/dns-ip-version.js
  var require_dns_ip_version = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/core/utils/dns-ip-version.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      exports.dnsLookupIpVersionToFamily = exports.isDnsLookupIpVersion = void 0;
      var conversionTable = {
        auto: 0,
        ipv4: 4,
        ipv6: 6
      };
      exports.isDnsLookupIpVersion = (value) => {
        return value in conversionTable;
      };
      exports.dnsLookupIpVersionToFamily = (dnsLookupIpVersion) => {
        if (exports.isDnsLookupIpVersion(dnsLookupIpVersion)) {
          return conversionTable[dnsLookupIpVersion];
        }
        throw new Error("Invalid DNS lookup IP version");
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/core/utils/is-response-ok.js
  var require_is_response_ok = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/core/utils/is-response-ok.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      exports.isResponseOk = void 0;
      exports.isResponseOk = (response) => {
        const {statusCode} = response;
        const limitStatusCode = response.request.options.followRedirect ? 299 : 399;
        return statusCode >= 200 && statusCode <= limitStatusCode || statusCode === 304;
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/utils/deprecation-warning.js
  var require_deprecation_warning = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/utils/deprecation-warning.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var alreadyWarned = new Set();
      exports.default = (message) => {
        if (alreadyWarned.has(message)) {
          return;
        }
        alreadyWarned.add(message);
        process.emitWarning(`Got: ${message}`, {
          type: "DeprecationWarning"
        });
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/as-promise/normalize-arguments.js
  var require_normalize_arguments = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/as-promise/normalize-arguments.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var is_1 = require_dist();
      var normalizeArguments = (options, defaults) => {
        if (is_1.default.null_(options.encoding)) {
          throw new TypeError("To get a Buffer, set `options.responseType` to `buffer` instead");
        }
        is_1.assert.any([is_1.default.string, is_1.default.undefined], options.encoding);
        is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.resolveBodyOnly);
        is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.methodRewriting);
        is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.isStream);
        is_1.assert.any([is_1.default.string, is_1.default.undefined], options.responseType);
        if (options.responseType === void 0) {
          options.responseType = "text";
        }
        const {retry} = options;
        if (defaults) {
          options.retry = __spreadValues({}, defaults.retry);
        } else {
          options.retry = {
            calculateDelay: (retryObject) => retryObject.computedValue,
            limit: 0,
            methods: [],
            statusCodes: [],
            errorCodes: [],
            maxRetryAfter: void 0
          };
        }
        if (is_1.default.object(retry)) {
          options.retry = __spreadValues(__spreadValues({}, options.retry), retry);
          options.retry.methods = [...new Set(options.retry.methods.map((method) => method.toUpperCase()))];
          options.retry.statusCodes = [...new Set(options.retry.statusCodes)];
          options.retry.errorCodes = [...new Set(options.retry.errorCodes)];
        } else if (is_1.default.number(retry)) {
          options.retry.limit = retry;
        }
        if (is_1.default.undefined(options.retry.maxRetryAfter)) {
          options.retry.maxRetryAfter = Math.min(...[options.timeout.request, options.timeout.connect].filter(is_1.default.number));
        }
        if (is_1.default.object(options.pagination)) {
          if (defaults) {
            options.pagination = __spreadValues(__spreadValues({}, defaults.pagination), options.pagination);
          }
          const {pagination} = options;
          if (!is_1.default.function_(pagination.transform)) {
            throw new Error("`options.pagination.transform` must be implemented");
          }
          if (!is_1.default.function_(pagination.shouldContinue)) {
            throw new Error("`options.pagination.shouldContinue` must be implemented");
          }
          if (!is_1.default.function_(pagination.filter)) {
            throw new TypeError("`options.pagination.filter` must be implemented");
          }
          if (!is_1.default.function_(pagination.paginate)) {
            throw new Error("`options.pagination.paginate` must be implemented");
          }
        }
        if (options.responseType === "json" && options.headers.accept === void 0) {
          options.headers.accept = "application/json";
        }
        return options;
      };
      exports.default = normalizeArguments;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/core/calculate-retry-delay.js
  var require_calculate_retry_delay = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/core/calculate-retry-delay.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      exports.retryAfterStatusCodes = void 0;
      exports.retryAfterStatusCodes = new Set([413, 429, 503]);
      var calculateRetryDelay = ({attemptCount, retryOptions, error, retryAfter}) => {
        if (attemptCount > retryOptions.limit) {
          return 0;
        }
        const hasMethod = retryOptions.methods.includes(error.options.method);
        const hasErrorCode = retryOptions.errorCodes.includes(error.code);
        const hasStatusCode = error.response && retryOptions.statusCodes.includes(error.response.statusCode);
        if (!hasMethod || !hasErrorCode && !hasStatusCode) {
          return 0;
        }
        if (error.response) {
          if (retryAfter) {
            if (retryOptions.maxRetryAfter === void 0 || retryAfter > retryOptions.maxRetryAfter) {
              return 0;
            }
            return retryAfter;
          }
          if (error.response.statusCode === 413) {
            return 0;
          }
        }
        const noise = Math.random() * 100;
        return 2 ** (attemptCount - 1) * 1e3 + noise;
      };
      exports.default = calculateRetryDelay;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/core/index.js
  var require_core = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/core/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      exports.UnsupportedProtocolError = exports.ReadError = exports.TimeoutError = exports.UploadError = exports.CacheError = exports.HTTPError = exports.MaxRedirectsError = exports.RequestError = exports.setNonEnumerableProperties = exports.knownHookEvents = exports.withoutBody = exports.kIsNormalizedAlready = void 0;
      var util_1 = require("util");
      var stream_1 = require("stream");
      var fs_1 = require("fs");
      var url_1 = require("url");
      var http = require("http");
      var http_1 = require("http");
      var https = require("https");
      var http_timer_1 = require_source3();
      var cacheable_lookup_1 = require_source4();
      var CacheableRequest = require_src4();
      var decompressResponse = require_decompress_response();
      var http2wrapper = require_source5();
      var lowercaseKeys = require_lowercase_keys();
      var is_1 = require_dist();
      var get_body_size_1 = require_get_body_size();
      var is_form_data_1 = require_is_form_data();
      var proxy_events_1 = require_proxy_events2();
      var timed_out_1 = require_timed_out();
      var url_to_options_1 = require_url_to_options2();
      var options_to_url_1 = require_options_to_url();
      var weakable_map_1 = require_weakable_map();
      var get_buffer_1 = require_get_buffer();
      var dns_ip_version_1 = require_dns_ip_version();
      var is_response_ok_1 = require_is_response_ok();
      var deprecation_warning_1 = require_deprecation_warning();
      var normalize_arguments_1 = require_normalize_arguments();
      var calculate_retry_delay_1 = require_calculate_retry_delay();
      var globalDnsCache = new cacheable_lookup_1.default();
      var kRequest = Symbol("request");
      var kResponse = Symbol("response");
      var kResponseSize = Symbol("responseSize");
      var kDownloadedSize = Symbol("downloadedSize");
      var kBodySize = Symbol("bodySize");
      var kUploadedSize = Symbol("uploadedSize");
      var kServerResponsesPiped = Symbol("serverResponsesPiped");
      var kUnproxyEvents = Symbol("unproxyEvents");
      var kIsFromCache = Symbol("isFromCache");
      var kCancelTimeouts = Symbol("cancelTimeouts");
      var kStartedReading = Symbol("startedReading");
      var kStopReading = Symbol("stopReading");
      var kTriggerRead = Symbol("triggerRead");
      var kBody = Symbol("body");
      var kJobs = Symbol("jobs");
      var kOriginalResponse = Symbol("originalResponse");
      var kRetryTimeout = Symbol("retryTimeout");
      exports.kIsNormalizedAlready = Symbol("isNormalizedAlready");
      var supportsBrotli = is_1.default.string(process.versions.brotli);
      exports.withoutBody = new Set(["GET", "HEAD"]);
      exports.knownHookEvents = [
        "init",
        "beforeRequest",
        "beforeRedirect",
        "beforeError",
        "beforeRetry",
        "afterResponse"
      ];
      function validateSearchParameters(searchParameters) {
        for (const key in searchParameters) {
          const value = searchParameters[key];
          if (!is_1.default.string(value) && !is_1.default.number(value) && !is_1.default.boolean(value) && !is_1.default.null_(value) && !is_1.default.undefined(value)) {
            throw new TypeError(`The \`searchParams\` value '${String(value)}' must be a string, number, boolean or null`);
          }
        }
      }
      function isClientRequest(clientRequest) {
        return is_1.default.object(clientRequest) && !("statusCode" in clientRequest);
      }
      var cacheableStore = new weakable_map_1.default();
      var waitForOpenFile = async (file) => new Promise((resolve, reject) => {
        const onError = (error) => {
          reject(error);
        };
        if (!file.pending) {
          resolve();
        }
        file.once("error", onError);
        file.once("ready", () => {
          file.off("error", onError);
          resolve();
        });
      });
      var redirectCodes = new Set([300, 301, 302, 303, 304, 307, 308]);
      var nonEnumerableProperties = [
        "context",
        "body",
        "json",
        "form"
      ];
      exports.setNonEnumerableProperties = (sources, to) => {
        const properties = {};
        for (const source of sources) {
          if (!source) {
            continue;
          }
          for (const name of nonEnumerableProperties) {
            if (!(name in source)) {
              continue;
            }
            properties[name] = {
              writable: true,
              configurable: true,
              enumerable: false,
              value: source[name]
            };
          }
        }
        Object.defineProperties(to, properties);
      };
      var RequestError3 = class extends Error {
        constructor(message, error, self2) {
          var _a2;
          super(message);
          Error.captureStackTrace(this, this.constructor);
          this.name = "RequestError";
          this.code = error.code;
          if (self2 instanceof Request) {
            Object.defineProperty(this, "request", {
              enumerable: false,
              value: self2
            });
            Object.defineProperty(this, "response", {
              enumerable: false,
              value: self2[kResponse]
            });
            Object.defineProperty(this, "options", {
              enumerable: false,
              value: self2.options
            });
          } else {
            Object.defineProperty(this, "options", {
              enumerable: false,
              value: self2
            });
          }
          this.timings = (_a2 = this.request) === null || _a2 === void 0 ? void 0 : _a2.timings;
          if (!is_1.default.undefined(error.stack)) {
            const indexOfMessage = this.stack.indexOf(this.message) + this.message.length;
            const thisStackTrace = this.stack.slice(indexOfMessage).split("\n").reverse();
            const errorStackTrace = error.stack.slice(error.stack.indexOf(error.message) + error.message.length).split("\n").reverse();
            while (errorStackTrace.length !== 0 && errorStackTrace[0] === thisStackTrace[0]) {
              thisStackTrace.shift();
            }
            this.stack = `${this.stack.slice(0, indexOfMessage)}${thisStackTrace.reverse().join("\n")}${errorStackTrace.reverse().join("\n")}`;
          }
        }
      };
      exports.RequestError = RequestError3;
      var MaxRedirectsError = class extends RequestError3 {
        constructor(request2) {
          super(`Redirected ${request2.options.maxRedirects} times. Aborting.`, {}, request2);
          this.name = "MaxRedirectsError";
        }
      };
      exports.MaxRedirectsError = MaxRedirectsError;
      var HTTPError = class extends RequestError3 {
        constructor(response) {
          super(`Response code ${response.statusCode} (${response.statusMessage})`, {}, response.request);
          this.name = "HTTPError";
        }
      };
      exports.HTTPError = HTTPError;
      var CacheError = class extends RequestError3 {
        constructor(error, request2) {
          super(error.message, error, request2);
          this.name = "CacheError";
        }
      };
      exports.CacheError = CacheError;
      var UploadError = class extends RequestError3 {
        constructor(error, request2) {
          super(error.message, error, request2);
          this.name = "UploadError";
        }
      };
      exports.UploadError = UploadError;
      var TimeoutError2 = class extends RequestError3 {
        constructor(error, timings, request2) {
          super(error.message, error, request2);
          this.name = "TimeoutError";
          this.event = error.event;
          this.timings = timings;
        }
      };
      exports.TimeoutError = TimeoutError2;
      var ReadError = class extends RequestError3 {
        constructor(error, request2) {
          super(error.message, error, request2);
          this.name = "ReadError";
        }
      };
      exports.ReadError = ReadError;
      var UnsupportedProtocolError = class extends RequestError3 {
        constructor(options) {
          super(`Unsupported protocol "${options.url.protocol}"`, {}, options);
          this.name = "UnsupportedProtocolError";
        }
      };
      exports.UnsupportedProtocolError = UnsupportedProtocolError;
      var proxiedRequestEvents = [
        "socket",
        "connect",
        "continue",
        "information",
        "upgrade",
        "timeout"
      ];
      var Request = class extends stream_1.Duplex {
        constructor(url, options = {}, defaults) {
          super({
            autoDestroy: false,
            highWaterMark: 0
          });
          this[kDownloadedSize] = 0;
          this[kUploadedSize] = 0;
          this.requestInitialized = false;
          this[kServerResponsesPiped] = new Set();
          this.redirects = [];
          this[kStopReading] = false;
          this[kTriggerRead] = false;
          this[kJobs] = [];
          this.retryCount = 0;
          this._progressCallbacks = [];
          const unlockWrite = () => this._unlockWrite();
          const lockWrite = () => this._lockWrite();
          this.on("pipe", (source) => {
            source.prependListener("data", unlockWrite);
            source.on("data", lockWrite);
            source.prependListener("end", unlockWrite);
            source.on("end", lockWrite);
          });
          this.on("unpipe", (source) => {
            source.off("data", unlockWrite);
            source.off("data", lockWrite);
            source.off("end", unlockWrite);
            source.off("end", lockWrite);
          });
          this.on("pipe", (source) => {
            if (source instanceof http_1.IncomingMessage) {
              this.options.headers = __spreadValues(__spreadValues({}, source.headers), this.options.headers);
            }
          });
          const {json: json2, body, form} = options;
          if (json2 || body || form) {
            this._lockWrite();
          }
          if (exports.kIsNormalizedAlready in options) {
            this.options = options;
          } else {
            try {
              this.options = this.constructor.normalizeArguments(url, options, defaults);
            } catch (error) {
              if (is_1.default.nodeStream(options.body)) {
                options.body.destroy();
              }
              this.destroy(error);
              return;
            }
          }
          (async () => {
            var _a2;
            try {
              if (this.options.body instanceof fs_1.ReadStream) {
                await waitForOpenFile(this.options.body);
              }
              const {url: normalizedURL} = this.options;
              if (!normalizedURL) {
                throw new TypeError("Missing `url` property");
              }
              this.requestUrl = normalizedURL.toString();
              decodeURI(this.requestUrl);
              await this._finalizeBody();
              await this._makeRequest();
              if (this.destroyed) {
                (_a2 = this[kRequest]) === null || _a2 === void 0 ? void 0 : _a2.destroy();
                return;
              }
              for (const job of this[kJobs]) {
                job();
              }
              this[kJobs].length = 0;
              this.requestInitialized = true;
            } catch (error) {
              if (error instanceof RequestError3) {
                this._beforeError(error);
                return;
              }
              if (!this.destroyed) {
                this.destroy(error);
              }
            }
          })();
        }
        static normalizeArguments(url, options, defaults) {
          var _a2, _b, _c, _d, _e;
          const rawOptions = options;
          if (is_1.default.object(url) && !is_1.default.urlInstance(url)) {
            options = __spreadValues(__spreadValues(__spreadValues({}, defaults), url), options);
          } else {
            if (url && options && options.url !== void 0) {
              throw new TypeError("The `url` option is mutually exclusive with the `input` argument");
            }
            options = __spreadValues(__spreadValues({}, defaults), options);
            if (url !== void 0) {
              options.url = url;
            }
            if (is_1.default.urlInstance(options.url)) {
              options.url = new url_1.URL(options.url.toString());
            }
          }
          if (options.cache === false) {
            options.cache = void 0;
          }
          if (options.dnsCache === false) {
            options.dnsCache = void 0;
          }
          is_1.assert.any([is_1.default.string, is_1.default.undefined], options.method);
          is_1.assert.any([is_1.default.object, is_1.default.undefined], options.headers);
          is_1.assert.any([is_1.default.string, is_1.default.urlInstance, is_1.default.undefined], options.prefixUrl);
          is_1.assert.any([is_1.default.object, is_1.default.undefined], options.cookieJar);
          is_1.assert.any([is_1.default.object, is_1.default.string, is_1.default.undefined], options.searchParams);
          is_1.assert.any([is_1.default.object, is_1.default.string, is_1.default.undefined], options.cache);
          is_1.assert.any([is_1.default.object, is_1.default.number, is_1.default.undefined], options.timeout);
          is_1.assert.any([is_1.default.object, is_1.default.undefined], options.context);
          is_1.assert.any([is_1.default.object, is_1.default.undefined], options.hooks);
          is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.decompress);
          is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.ignoreInvalidCookies);
          is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.followRedirect);
          is_1.assert.any([is_1.default.number, is_1.default.undefined], options.maxRedirects);
          is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.throwHttpErrors);
          is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.http2);
          is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.allowGetBody);
          is_1.assert.any([is_1.default.string, is_1.default.undefined], options.localAddress);
          is_1.assert.any([dns_ip_version_1.isDnsLookupIpVersion, is_1.default.undefined], options.dnsLookupIpVersion);
          is_1.assert.any([is_1.default.object, is_1.default.undefined], options.https);
          is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.rejectUnauthorized);
          if (options.https) {
            is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.https.rejectUnauthorized);
            is_1.assert.any([is_1.default.function_, is_1.default.undefined], options.https.checkServerIdentity);
            is_1.assert.any([is_1.default.string, is_1.default.object, is_1.default.array, is_1.default.undefined], options.https.certificateAuthority);
            is_1.assert.any([is_1.default.string, is_1.default.object, is_1.default.array, is_1.default.undefined], options.https.key);
            is_1.assert.any([is_1.default.string, is_1.default.object, is_1.default.array, is_1.default.undefined], options.https.certificate);
            is_1.assert.any([is_1.default.string, is_1.default.undefined], options.https.passphrase);
            is_1.assert.any([is_1.default.string, is_1.default.buffer, is_1.default.array, is_1.default.undefined], options.https.pfx);
          }
          is_1.assert.any([is_1.default.object, is_1.default.undefined], options.cacheOptions);
          if (is_1.default.string(options.method)) {
            options.method = options.method.toUpperCase();
          } else {
            options.method = "GET";
          }
          if (options.headers === (defaults === null || defaults === void 0 ? void 0 : defaults.headers)) {
            options.headers = __spreadValues({}, options.headers);
          } else {
            options.headers = lowercaseKeys(__spreadValues(__spreadValues({}, defaults === null || defaults === void 0 ? void 0 : defaults.headers), options.headers));
          }
          if ("slashes" in options) {
            throw new TypeError("The legacy `url.Url` has been deprecated. Use `URL` instead.");
          }
          if ("auth" in options) {
            throw new TypeError("Parameter `auth` is deprecated. Use `username` / `password` instead.");
          }
          if ("searchParams" in options) {
            if (options.searchParams && options.searchParams !== (defaults === null || defaults === void 0 ? void 0 : defaults.searchParams)) {
              let searchParameters;
              if (is_1.default.string(options.searchParams) || options.searchParams instanceof url_1.URLSearchParams) {
                searchParameters = new url_1.URLSearchParams(options.searchParams);
              } else {
                validateSearchParameters(options.searchParams);
                searchParameters = new url_1.URLSearchParams();
                for (const key in options.searchParams) {
                  const value = options.searchParams[key];
                  if (value === null) {
                    searchParameters.append(key, "");
                  } else if (value !== void 0) {
                    searchParameters.append(key, value);
                  }
                }
              }
              (_a2 = defaults === null || defaults === void 0 ? void 0 : defaults.searchParams) === null || _a2 === void 0 ? void 0 : _a2.forEach((value, key) => {
                if (!searchParameters.has(key)) {
                  searchParameters.append(key, value);
                }
              });
              options.searchParams = searchParameters;
            }
          }
          options.username = (_b = options.username) !== null && _b !== void 0 ? _b : "";
          options.password = (_c = options.password) !== null && _c !== void 0 ? _c : "";
          if (is_1.default.undefined(options.prefixUrl)) {
            options.prefixUrl = (_d = defaults === null || defaults === void 0 ? void 0 : defaults.prefixUrl) !== null && _d !== void 0 ? _d : "";
          } else {
            options.prefixUrl = options.prefixUrl.toString();
            if (options.prefixUrl !== "" && !options.prefixUrl.endsWith("/")) {
              options.prefixUrl += "/";
            }
          }
          if (is_1.default.string(options.url)) {
            if (options.url.startsWith("/")) {
              throw new Error("`input` must not start with a slash when using `prefixUrl`");
            }
            options.url = options_to_url_1.default(options.prefixUrl + options.url, options);
          } else if (is_1.default.undefined(options.url) && options.prefixUrl !== "" || options.protocol) {
            options.url = options_to_url_1.default(options.prefixUrl, options);
          }
          if (options.url) {
            if ("port" in options) {
              delete options.port;
            }
            let {prefixUrl} = options;
            Object.defineProperty(options, "prefixUrl", {
              set: (value) => {
                const url2 = options.url;
                if (!url2.href.startsWith(value)) {
                  throw new Error(`Cannot change \`prefixUrl\` from ${prefixUrl} to ${value}: ${url2.href}`);
                }
                options.url = new url_1.URL(value + url2.href.slice(prefixUrl.length));
                prefixUrl = value;
              },
              get: () => prefixUrl
            });
            let {protocol} = options.url;
            if (protocol === "unix:") {
              protocol = "http:";
              options.url = new url_1.URL(`http://unix${options.url.pathname}${options.url.search}`);
            }
            if (options.searchParams) {
              options.url.search = options.searchParams.toString();
            }
            if (protocol !== "http:" && protocol !== "https:") {
              throw new UnsupportedProtocolError(options);
            }
            if (options.username === "") {
              options.username = options.url.username;
            } else {
              options.url.username = options.username;
            }
            if (options.password === "") {
              options.password = options.url.password;
            } else {
              options.url.password = options.password;
            }
          }
          const {cookieJar} = options;
          if (cookieJar) {
            let {setCookie, getCookieString} = cookieJar;
            is_1.assert.function_(setCookie);
            is_1.assert.function_(getCookieString);
            if (setCookie.length === 4 && getCookieString.length === 0) {
              setCookie = util_1.promisify(setCookie.bind(options.cookieJar));
              getCookieString = util_1.promisify(getCookieString.bind(options.cookieJar));
              options.cookieJar = {
                setCookie,
                getCookieString
              };
            }
          }
          const {cache: cache2} = options;
          if (cache2) {
            if (!cacheableStore.has(cache2)) {
              cacheableStore.set(cache2, new CacheableRequest((requestOptions, handler) => {
                const result = requestOptions[kRequest](requestOptions, handler);
                if (is_1.default.promise(result)) {
                  result.once = (event, handler2) => {
                    if (event === "error") {
                      result.catch(handler2);
                    } else if (event === "abort") {
                      (async () => {
                        try {
                          const request2 = await result;
                          request2.once("abort", handler2);
                        } catch (_a3) {
                        }
                      })();
                    } else {
                      throw new Error(`Unknown HTTP2 promise event: ${event}`);
                    }
                    return result;
                  };
                }
                return result;
              }, cache2));
            }
          }
          options.cacheOptions = __spreadValues({}, options.cacheOptions);
          if (options.dnsCache === true) {
            options.dnsCache = globalDnsCache;
          } else if (!is_1.default.undefined(options.dnsCache) && !options.dnsCache.lookup) {
            throw new TypeError(`Parameter \`dnsCache\` must be a CacheableLookup instance or a boolean, got ${is_1.default(options.dnsCache)}`);
          }
          if (is_1.default.number(options.timeout)) {
            options.timeout = {request: options.timeout};
          } else if (defaults && options.timeout !== defaults.timeout) {
            options.timeout = __spreadValues(__spreadValues({}, defaults.timeout), options.timeout);
          } else {
            options.timeout = __spreadValues({}, options.timeout);
          }
          if (!options.context) {
            options.context = {};
          }
          const areHooksDefault = options.hooks === (defaults === null || defaults === void 0 ? void 0 : defaults.hooks);
          options.hooks = __spreadValues({}, options.hooks);
          for (const event of exports.knownHookEvents) {
            if (event in options.hooks) {
              if (is_1.default.array(options.hooks[event])) {
                options.hooks[event] = [...options.hooks[event]];
              } else {
                throw new TypeError(`Parameter \`${event}\` must be an Array, got ${is_1.default(options.hooks[event])}`);
              }
            } else {
              options.hooks[event] = [];
            }
          }
          if (defaults && !areHooksDefault) {
            for (const event of exports.knownHookEvents) {
              const defaultHooks = defaults.hooks[event];
              if (defaultHooks.length !== 0) {
                options.hooks[event] = [
                  ...defaults.hooks[event],
                  ...options.hooks[event]
                ];
              }
            }
          }
          if ("family" in options) {
            deprecation_warning_1.default('"options.family" was never documented, please use "options.dnsLookupIpVersion"');
          }
          if (defaults === null || defaults === void 0 ? void 0 : defaults.https) {
            options.https = __spreadValues(__spreadValues({}, defaults.https), options.https);
          }
          if ("rejectUnauthorized" in options) {
            deprecation_warning_1.default('"options.rejectUnauthorized" is now deprecated, please use "options.https.rejectUnauthorized"');
          }
          if ("checkServerIdentity" in options) {
            deprecation_warning_1.default('"options.checkServerIdentity" was never documented, please use "options.https.checkServerIdentity"');
          }
          if ("ca" in options) {
            deprecation_warning_1.default('"options.ca" was never documented, please use "options.https.certificateAuthority"');
          }
          if ("key" in options) {
            deprecation_warning_1.default('"options.key" was never documented, please use "options.https.key"');
          }
          if ("cert" in options) {
            deprecation_warning_1.default('"options.cert" was never documented, please use "options.https.certificate"');
          }
          if ("passphrase" in options) {
            deprecation_warning_1.default('"options.passphrase" was never documented, please use "options.https.passphrase"');
          }
          if ("pfx" in options) {
            deprecation_warning_1.default('"options.pfx" was never documented, please use "options.https.pfx"');
          }
          if ("followRedirects" in options) {
            throw new TypeError("The `followRedirects` option does not exist. Use `followRedirect` instead.");
          }
          if (options.agent) {
            for (const key in options.agent) {
              if (key !== "http" && key !== "https" && key !== "http2") {
                throw new TypeError(`Expected the \`options.agent\` properties to be \`http\`, \`https\` or \`http2\`, got \`${key}\``);
              }
            }
          }
          options.maxRedirects = (_e = options.maxRedirects) !== null && _e !== void 0 ? _e : 0;
          exports.setNonEnumerableProperties([defaults, rawOptions], options);
          return normalize_arguments_1.default(options, defaults);
        }
        _lockWrite() {
          const onLockedWrite = () => {
            throw new TypeError("The payload has been already provided");
          };
          this.write = onLockedWrite;
          this.end = onLockedWrite;
        }
        _unlockWrite() {
          this.write = super.write;
          this.end = super.end;
        }
        async _finalizeBody() {
          const {options} = this;
          const {headers} = options;
          const isForm = !is_1.default.undefined(options.form);
          const isJSON2 = !is_1.default.undefined(options.json);
          const isBody = !is_1.default.undefined(options.body);
          const hasPayload = isForm || isJSON2 || isBody;
          const cannotHaveBody = exports.withoutBody.has(options.method) && !(options.method === "GET" && options.allowGetBody);
          this._cannotHaveBody = cannotHaveBody;
          if (hasPayload) {
            if (cannotHaveBody) {
              throw new TypeError(`The \`${options.method}\` method cannot be used with a body`);
            }
            if ([isBody, isForm, isJSON2].filter((isTrue) => isTrue).length > 1) {
              throw new TypeError("The `body`, `json` and `form` options are mutually exclusive");
            }
            if (isBody && !(options.body instanceof stream_1.Readable) && !is_1.default.string(options.body) && !is_1.default.buffer(options.body) && !is_form_data_1.default(options.body)) {
              throw new TypeError("The `body` option must be a stream.Readable, string or Buffer");
            }
            if (isForm && !is_1.default.object(options.form)) {
              throw new TypeError("The `form` option must be an Object");
            }
            {
              const noContentType = !is_1.default.string(headers["content-type"]);
              if (isBody) {
                if (is_form_data_1.default(options.body) && noContentType) {
                  headers["content-type"] = `multipart/form-data; boundary=${options.body.getBoundary()}`;
                }
                this[kBody] = options.body;
              } else if (isForm) {
                if (noContentType) {
                  headers["content-type"] = "application/x-www-form-urlencoded";
                }
                this[kBody] = new url_1.URLSearchParams(options.form).toString();
              } else {
                if (noContentType) {
                  headers["content-type"] = "application/json";
                }
                this[kBody] = options.stringifyJson(options.json);
              }
              const uploadBodySize = await get_body_size_1.default(this[kBody], options.headers);
              if (is_1.default.undefined(headers["content-length"]) && is_1.default.undefined(headers["transfer-encoding"])) {
                if (!cannotHaveBody && !is_1.default.undefined(uploadBodySize)) {
                  headers["content-length"] = String(uploadBodySize);
                }
              }
            }
          } else if (cannotHaveBody) {
            this._lockWrite();
          } else {
            this._unlockWrite();
          }
          this[kBodySize] = Number(headers["content-length"]) || void 0;
        }
        async _onResponseBase(response) {
          const {options} = this;
          const {url} = options;
          this[kOriginalResponse] = response;
          if (options.decompress) {
            response = decompressResponse(response);
          }
          const statusCode = response.statusCode;
          const typedResponse = response;
          typedResponse.statusMessage = typedResponse.statusMessage ? typedResponse.statusMessage : http.STATUS_CODES[statusCode];
          typedResponse.url = options.url.toString();
          typedResponse.requestUrl = this.requestUrl;
          typedResponse.redirectUrls = this.redirects;
          typedResponse.request = this;
          typedResponse.isFromCache = response.fromCache || false;
          typedResponse.ip = this.ip;
          typedResponse.retryCount = this.retryCount;
          this[kIsFromCache] = typedResponse.isFromCache;
          this[kResponseSize] = Number(response.headers["content-length"]) || void 0;
          this[kResponse] = response;
          response.once("end", () => {
            this[kResponseSize] = this[kDownloadedSize];
            this.emit("downloadProgress", this.downloadProgress);
          });
          response.once("error", (error) => {
            response.destroy();
            this._beforeError(new ReadError(error, this));
          });
          response.once("aborted", () => {
            this._beforeError(new ReadError({
              name: "Error",
              message: "The server aborted pending request",
              code: "ECONNRESET"
            }, this));
          });
          this.emit("downloadProgress", this.downloadProgress);
          const rawCookies = response.headers["set-cookie"];
          if (is_1.default.object(options.cookieJar) && rawCookies) {
            let promises = rawCookies.map(async (rawCookie) => options.cookieJar.setCookie(rawCookie, url.toString()));
            if (options.ignoreInvalidCookies) {
              promises = promises.map(async (p) => p.catch(() => {
              }));
            }
            try {
              await Promise.all(promises);
            } catch (error) {
              this._beforeError(error);
              return;
            }
          }
          if (options.followRedirect && response.headers.location && redirectCodes.has(statusCode)) {
            response.resume();
            if (this[kRequest]) {
              this[kCancelTimeouts]();
              delete this[kRequest];
              this[kUnproxyEvents]();
            }
            const shouldBeGet = statusCode === 303 && options.method !== "GET" && options.method !== "HEAD";
            if (shouldBeGet || !options.methodRewriting) {
              options.method = "GET";
              if ("body" in options) {
                delete options.body;
              }
              if ("json" in options) {
                delete options.json;
              }
              if ("form" in options) {
                delete options.form;
              }
              this[kBody] = void 0;
              delete options.headers["content-length"];
            }
            if (this.redirects.length >= options.maxRedirects) {
              this._beforeError(new MaxRedirectsError(this));
              return;
            }
            try {
              const redirectBuffer = Buffer.from(response.headers.location, "binary").toString();
              const redirectUrl = new url_1.URL(redirectBuffer, url);
              const redirectString = redirectUrl.toString();
              decodeURI(redirectString);
              if (redirectUrl.hostname !== url.hostname || redirectUrl.port !== url.port) {
                if ("host" in options.headers) {
                  delete options.headers.host;
                }
                if ("cookie" in options.headers) {
                  delete options.headers.cookie;
                }
                if ("authorization" in options.headers) {
                  delete options.headers.authorization;
                }
                if (options.username || options.password) {
                  options.username = "";
                  options.password = "";
                }
              } else {
                redirectUrl.username = options.username;
                redirectUrl.password = options.password;
              }
              this.redirects.push(redirectString);
              options.url = redirectUrl;
              for (const hook of options.hooks.beforeRedirect) {
                await hook(options, typedResponse);
              }
              this.emit("redirect", typedResponse, options);
              await this._makeRequest();
            } catch (error) {
              this._beforeError(error);
              return;
            }
            return;
          }
          if (options.isStream && options.throwHttpErrors && !is_response_ok_1.isResponseOk(typedResponse)) {
            this._beforeError(new HTTPError(typedResponse));
            return;
          }
          response.on("readable", () => {
            if (this[kTriggerRead]) {
              this._read();
            }
          });
          this.on("resume", () => {
            response.resume();
          });
          this.on("pause", () => {
            response.pause();
          });
          response.once("end", () => {
            this.push(null);
          });
          this.emit("response", response);
          for (const destination of this[kServerResponsesPiped]) {
            if (destination.headersSent) {
              continue;
            }
            for (const key in response.headers) {
              const isAllowed = options.decompress ? key !== "content-encoding" : true;
              const value = response.headers[key];
              if (isAllowed) {
                destination.setHeader(key, value);
              }
            }
            destination.statusCode = statusCode;
          }
        }
        async _onResponse(response) {
          try {
            await this._onResponseBase(response);
          } catch (error) {
            this._beforeError(error);
          }
        }
        _onRequest(request2) {
          const {options} = this;
          const {timeout, url} = options;
          http_timer_1.default(request2);
          this[kCancelTimeouts] = timed_out_1.default(request2, timeout, url);
          const responseEventName = options.cache ? "cacheableResponse" : "response";
          request2.once(responseEventName, (response) => {
            void this._onResponse(response);
          });
          request2.once("error", (error) => {
            var _a2;
            request2.destroy();
            (_a2 = request2.res) === null || _a2 === void 0 ? void 0 : _a2.removeAllListeners("end");
            if (error instanceof timed_out_1.TimeoutError) {
              error = new TimeoutError2(error, this.timings, this);
            } else {
              error = new RequestError3(error.message, error, this);
            }
            this._beforeError(error);
          });
          this[kUnproxyEvents] = proxy_events_1.default(request2, this, proxiedRequestEvents);
          this[kRequest] = request2;
          this.emit("uploadProgress", this.uploadProgress);
          const body = this[kBody];
          const currentRequest = this.redirects.length === 0 ? this : request2;
          if (is_1.default.nodeStream(body)) {
            body.pipe(currentRequest);
            body.once("error", (error) => {
              this._beforeError(new UploadError(error, this));
            });
          } else {
            this._unlockWrite();
            if (!is_1.default.undefined(body)) {
              this._writeRequest(body, void 0, () => {
              });
              currentRequest.end();
              this._lockWrite();
            } else if (this._cannotHaveBody || this._noPipe) {
              currentRequest.end();
              this._lockWrite();
            }
          }
          this.emit("request", request2);
        }
        async _createCacheableRequest(url, options) {
          return new Promise((resolve, reject) => {
            Object.assign(options, url_to_options_1.default(url));
            delete options.url;
            let request2;
            const cacheRequest = cacheableStore.get(options.cache)(options, async (response) => {
              response._readableState.autoDestroy = false;
              if (request2) {
                (await request2).emit("cacheableResponse", response);
              }
              resolve(response);
            });
            options.url = url;
            cacheRequest.once("error", reject);
            cacheRequest.once("request", async (requestOrPromise) => {
              request2 = requestOrPromise;
              resolve(request2);
            });
          });
        }
        async _makeRequest() {
          var _a2, _b, _c, _d, _e;
          const {options} = this;
          const {headers} = options;
          for (const key in headers) {
            if (is_1.default.undefined(headers[key])) {
              delete headers[key];
            } else if (is_1.default.null_(headers[key])) {
              throw new TypeError(`Use \`undefined\` instead of \`null\` to delete the \`${key}\` header`);
            }
          }
          if (options.decompress && is_1.default.undefined(headers["accept-encoding"])) {
            headers["accept-encoding"] = supportsBrotli ? "gzip, deflate, br" : "gzip, deflate";
          }
          if (options.cookieJar) {
            const cookieString = await options.cookieJar.getCookieString(options.url.toString());
            if (is_1.default.nonEmptyString(cookieString)) {
              options.headers.cookie = cookieString;
            }
          }
          for (const hook of options.hooks.beforeRequest) {
            const result = await hook(options);
            if (!is_1.default.undefined(result)) {
              options.request = () => result;
              break;
            }
          }
          if (options.body && this[kBody] !== options.body) {
            this[kBody] = options.body;
          }
          const {agent, request: request2, timeout, url} = options;
          if (options.dnsCache && !("lookup" in options)) {
            options.lookup = options.dnsCache.lookup;
          }
          if (url.hostname === "unix") {
            const matches = /(?<socketPath>.+?):(?<path>.+)/.exec(`${url.pathname}${url.search}`);
            if (matches === null || matches === void 0 ? void 0 : matches.groups) {
              const {socketPath, path: path3} = matches.groups;
              Object.assign(options, {
                socketPath,
                path: path3,
                host: ""
              });
            }
          }
          const isHttps = url.protocol === "https:";
          let fallbackFn;
          if (options.http2) {
            fallbackFn = http2wrapper.auto;
          } else {
            fallbackFn = isHttps ? https.request : http.request;
          }
          const realFn = (_a2 = options.request) !== null && _a2 !== void 0 ? _a2 : fallbackFn;
          const fn = options.cache ? this._createCacheableRequest : realFn;
          if (agent && !options.http2) {
            options.agent = agent[isHttps ? "https" : "http"];
          }
          options[kRequest] = realFn;
          delete options.request;
          delete options.timeout;
          const requestOptions = options;
          requestOptions.shared = (_b = options.cacheOptions) === null || _b === void 0 ? void 0 : _b.shared;
          requestOptions.cacheHeuristic = (_c = options.cacheOptions) === null || _c === void 0 ? void 0 : _c.cacheHeuristic;
          requestOptions.immutableMinTimeToLive = (_d = options.cacheOptions) === null || _d === void 0 ? void 0 : _d.immutableMinTimeToLive;
          requestOptions.ignoreCargoCult = (_e = options.cacheOptions) === null || _e === void 0 ? void 0 : _e.ignoreCargoCult;
          if (options.dnsLookupIpVersion !== void 0) {
            try {
              requestOptions.family = dns_ip_version_1.dnsLookupIpVersionToFamily(options.dnsLookupIpVersion);
            } catch (_f) {
              throw new Error("Invalid `dnsLookupIpVersion` option value");
            }
          }
          if (options.https) {
            if ("rejectUnauthorized" in options.https) {
              requestOptions.rejectUnauthorized = options.https.rejectUnauthorized;
            }
            if (options.https.checkServerIdentity) {
              requestOptions.checkServerIdentity = options.https.checkServerIdentity;
            }
            if (options.https.certificateAuthority) {
              requestOptions.ca = options.https.certificateAuthority;
            }
            if (options.https.certificate) {
              requestOptions.cert = options.https.certificate;
            }
            if (options.https.key) {
              requestOptions.key = options.https.key;
            }
            if (options.https.passphrase) {
              requestOptions.passphrase = options.https.passphrase;
            }
            if (options.https.pfx) {
              requestOptions.pfx = options.https.pfx;
            }
          }
          try {
            let requestOrResponse = await fn(url, requestOptions);
            if (is_1.default.undefined(requestOrResponse)) {
              requestOrResponse = fallbackFn(url, requestOptions);
            }
            options.request = request2;
            options.timeout = timeout;
            options.agent = agent;
            if (options.https) {
              if ("rejectUnauthorized" in options.https) {
                delete requestOptions.rejectUnauthorized;
              }
              if (options.https.checkServerIdentity) {
                delete requestOptions.checkServerIdentity;
              }
              if (options.https.certificateAuthority) {
                delete requestOptions.ca;
              }
              if (options.https.certificate) {
                delete requestOptions.cert;
              }
              if (options.https.key) {
                delete requestOptions.key;
              }
              if (options.https.passphrase) {
                delete requestOptions.passphrase;
              }
              if (options.https.pfx) {
                delete requestOptions.pfx;
              }
            }
            if (isClientRequest(requestOrResponse)) {
              this._onRequest(requestOrResponse);
            } else if (this.writable) {
              this.once("finish", () => {
                void this._onResponse(requestOrResponse);
              });
              this._unlockWrite();
              this.end();
              this._lockWrite();
            } else {
              void this._onResponse(requestOrResponse);
            }
          } catch (error) {
            if (error instanceof CacheableRequest.CacheError) {
              throw new CacheError(error, this);
            }
            throw new RequestError3(error.message, error, this);
          }
        }
        async _error(error) {
          try {
            for (const hook of this.options.hooks.beforeError) {
              error = await hook(error);
            }
          } catch (error_) {
            error = new RequestError3(error_.message, error_, this);
          }
          this.destroy(error);
        }
        _beforeError(error) {
          if (this[kStopReading]) {
            return;
          }
          const {options} = this;
          const retryCount = this.retryCount + 1;
          this[kStopReading] = true;
          if (!(error instanceof RequestError3)) {
            error = new RequestError3(error.message, error, this);
          }
          const typedError = error;
          const {response} = typedError;
          void (async () => {
            if (response && !response.body) {
              response.setEncoding(this._readableState.encoding);
              try {
                response.rawBody = await get_buffer_1.default(response);
                response.body = response.rawBody.toString();
              } catch (_a2) {
              }
            }
            if (this.listenerCount("retry") !== 0) {
              let backoff;
              try {
                let retryAfter;
                if (response && "retry-after" in response.headers) {
                  retryAfter = Number(response.headers["retry-after"]);
                  if (Number.isNaN(retryAfter)) {
                    retryAfter = Date.parse(response.headers["retry-after"]) - Date.now();
                    if (retryAfter <= 0) {
                      retryAfter = 1;
                    }
                  } else {
                    retryAfter *= 1e3;
                  }
                }
                backoff = await options.retry.calculateDelay({
                  attemptCount: retryCount,
                  retryOptions: options.retry,
                  error: typedError,
                  retryAfter,
                  computedValue: calculate_retry_delay_1.default({
                    attemptCount: retryCount,
                    retryOptions: options.retry,
                    error: typedError,
                    retryAfter,
                    computedValue: 0
                  })
                });
              } catch (error_) {
                void this._error(new RequestError3(error_.message, error_, this));
                return;
              }
              if (backoff) {
                const retry = async () => {
                  try {
                    for (const hook of this.options.hooks.beforeRetry) {
                      await hook(this.options, typedError, retryCount);
                    }
                  } catch (error_) {
                    void this._error(new RequestError3(error_.message, error, this));
                    return;
                  }
                  if (this.destroyed) {
                    return;
                  }
                  this.destroy();
                  this.emit("retry", retryCount, error);
                };
                this[kRetryTimeout] = setTimeout(retry, backoff);
                return;
              }
            }
            void this._error(typedError);
          })();
        }
        _read() {
          this[kTriggerRead] = true;
          const response = this[kResponse];
          if (response && !this[kStopReading]) {
            if (response.readableLength) {
              this[kTriggerRead] = false;
            }
            let data;
            while ((data = response.read()) !== null) {
              this[kDownloadedSize] += data.length;
              this[kStartedReading] = true;
              const progress = this.downloadProgress;
              if (progress.percent < 1) {
                this.emit("downloadProgress", progress);
              }
              this.push(data);
            }
          }
        }
        _write(chunk, encoding, callback) {
          const write = () => {
            this._writeRequest(chunk, encoding, callback);
          };
          if (this.requestInitialized) {
            write();
          } else {
            this[kJobs].push(write);
          }
        }
        _writeRequest(chunk, encoding, callback) {
          if (this[kRequest].destroyed) {
            return;
          }
          this._progressCallbacks.push(() => {
            this[kUploadedSize] += Buffer.byteLength(chunk, encoding);
            const progress = this.uploadProgress;
            if (progress.percent < 1) {
              this.emit("uploadProgress", progress);
            }
          });
          this[kRequest].write(chunk, encoding, (error) => {
            if (!error && this._progressCallbacks.length !== 0) {
              this._progressCallbacks.shift()();
            }
            callback(error);
          });
        }
        _final(callback) {
          const endRequest = () => {
            while (this._progressCallbacks.length !== 0) {
              this._progressCallbacks.shift()();
            }
            if (!(kRequest in this)) {
              callback();
              return;
            }
            if (this[kRequest].destroyed) {
              callback();
              return;
            }
            this[kRequest].end((error) => {
              if (!error) {
                this[kBodySize] = this[kUploadedSize];
                this.emit("uploadProgress", this.uploadProgress);
                this[kRequest].emit("upload-complete");
              }
              callback(error);
            });
          };
          if (this.requestInitialized) {
            endRequest();
          } else {
            this[kJobs].push(endRequest);
          }
        }
        _destroy(error, callback) {
          var _a2;
          this[kStopReading] = true;
          clearTimeout(this[kRetryTimeout]);
          if (kRequest in this) {
            this[kCancelTimeouts]();
            if (!((_a2 = this[kResponse]) === null || _a2 === void 0 ? void 0 : _a2.complete)) {
              this[kRequest].destroy();
            }
          }
          if (error !== null && !is_1.default.undefined(error) && !(error instanceof RequestError3)) {
            error = new RequestError3(error.message, error, this);
          }
          callback(error);
        }
        get _isAboutToError() {
          return this[kStopReading];
        }
        get ip() {
          var _a2;
          return (_a2 = this[kRequest]) === null || _a2 === void 0 ? void 0 : _a2.socket.remoteAddress;
        }
        get aborted() {
          var _a2, _b, _c;
          return ((_b = (_a2 = this[kRequest]) === null || _a2 === void 0 ? void 0 : _a2.destroyed) !== null && _b !== void 0 ? _b : this.destroyed) && !((_c = this[kOriginalResponse]) === null || _c === void 0 ? void 0 : _c.complete);
        }
        get socket() {
          var _a2;
          return (_a2 = this[kRequest]) === null || _a2 === void 0 ? void 0 : _a2.socket;
        }
        get downloadProgress() {
          let percent;
          if (this[kResponseSize]) {
            percent = this[kDownloadedSize] / this[kResponseSize];
          } else if (this[kResponseSize] === this[kDownloadedSize]) {
            percent = 1;
          } else {
            percent = 0;
          }
          return {
            percent,
            transferred: this[kDownloadedSize],
            total: this[kResponseSize]
          };
        }
        get uploadProgress() {
          let percent;
          if (this[kBodySize]) {
            percent = this[kUploadedSize] / this[kBodySize];
          } else if (this[kBodySize] === this[kUploadedSize]) {
            percent = 1;
          } else {
            percent = 0;
          }
          return {
            percent,
            transferred: this[kUploadedSize],
            total: this[kBodySize]
          };
        }
        get timings() {
          var _a2;
          return (_a2 = this[kRequest]) === null || _a2 === void 0 ? void 0 : _a2.timings;
        }
        get isFromCache() {
          return this[kIsFromCache];
        }
        pipe(destination, options) {
          if (this[kStartedReading]) {
            throw new Error("Failed to pipe. The response has been emitted already.");
          }
          if (destination instanceof http_1.ServerResponse) {
            this[kServerResponsesPiped].add(destination);
          }
          return super.pipe(destination, options);
        }
        unpipe(destination) {
          if (destination instanceof http_1.ServerResponse) {
            this[kServerResponsesPiped].delete(destination);
          }
          super.unpipe(destination);
          return this;
        }
      };
      exports.default = Request;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/as-promise/types.js
  var require_types = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/as-promise/types.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, {enumerable: true, get: function() {
          return m[k];
        }});
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", {value: true});
      exports.CancelError = exports.ParseError = void 0;
      var core_1 = require_core();
      var ParseError = class extends core_1.RequestError {
        constructor(error, response) {
          const {options} = response.request;
          super(`${error.message} in "${options.url.toString()}"`, error, response.request);
          this.name = "ParseError";
        }
      };
      exports.ParseError = ParseError;
      var CancelError = class extends core_1.RequestError {
        constructor(request2) {
          super("Promise was canceled", {}, request2);
          this.name = "CancelError";
        }
        get isCanceled() {
          return true;
        }
      };
      exports.CancelError = CancelError;
      __exportStar(require_core(), exports);
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/as-promise/parse-body.js
  var require_parse_body = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/as-promise/parse-body.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var types_1 = require_types();
      var parseBody = (response, responseType, parseJson, encoding) => {
        const {rawBody} = response;
        try {
          if (responseType === "text") {
            return rawBody.toString(encoding);
          }
          if (responseType === "json") {
            return rawBody.length === 0 ? "" : parseJson(rawBody.toString());
          }
          if (responseType === "buffer") {
            return rawBody;
          }
          throw new types_1.ParseError({
            message: `Unknown body type '${responseType}'`,
            name: "Error"
          }, response);
        } catch (error) {
          throw new types_1.ParseError(error, response);
        }
      };
      exports.default = parseBody;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/as-promise/index.js
  var require_as_promise = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/as-promise/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, {enumerable: true, get: function() {
          return m[k];
        }});
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", {value: true});
      var events_1 = require("events");
      var is_1 = require_dist();
      var PCancelable = require_p_cancelable();
      var types_1 = require_types();
      var parse_body_1 = require_parse_body();
      var core_1 = require_core();
      var proxy_events_1 = require_proxy_events2();
      var get_buffer_1 = require_get_buffer();
      var is_response_ok_1 = require_is_response_ok();
      var proxiedRequestEvents = [
        "request",
        "response",
        "redirect",
        "uploadProgress",
        "downloadProgress"
      ];
      function asPromise(normalizedOptions) {
        let globalRequest;
        let globalResponse;
        const emitter = new events_1.EventEmitter();
        const promise = new PCancelable((resolve, reject, onCancel) => {
          const makeRequest = (retryCount) => {
            const request2 = new core_1.default(void 0, normalizedOptions);
            request2.retryCount = retryCount;
            request2._noPipe = true;
            onCancel(() => request2.destroy());
            onCancel.shouldReject = false;
            onCancel(() => reject(new types_1.CancelError(request2)));
            globalRequest = request2;
            request2.once("response", async (response) => {
              var _a2;
              response.retryCount = retryCount;
              if (response.request.aborted) {
                return;
              }
              let rawBody;
              try {
                rawBody = await get_buffer_1.default(request2);
                response.rawBody = rawBody;
              } catch (_b) {
                return;
              }
              if (request2._isAboutToError) {
                return;
              }
              const contentEncoding = ((_a2 = response.headers["content-encoding"]) !== null && _a2 !== void 0 ? _a2 : "").toLowerCase();
              const isCompressed = ["gzip", "deflate", "br"].includes(contentEncoding);
              const {options} = request2;
              if (isCompressed && !options.decompress) {
                response.body = rawBody;
              } else {
                try {
                  response.body = parse_body_1.default(response, options.responseType, options.parseJson, options.encoding);
                } catch (error) {
                  response.body = rawBody.toString();
                  if (is_response_ok_1.isResponseOk(response)) {
                    request2._beforeError(error);
                    return;
                  }
                }
              }
              try {
                for (const [index, hook] of options.hooks.afterResponse.entries()) {
                  response = await hook(response, async (updatedOptions) => {
                    const typedOptions = core_1.default.normalizeArguments(void 0, __spreadProps(__spreadValues({}, updatedOptions), {
                      retry: {
                        calculateDelay: () => 0
                      },
                      throwHttpErrors: false,
                      resolveBodyOnly: false
                    }), options);
                    typedOptions.hooks.afterResponse = typedOptions.hooks.afterResponse.slice(0, index);
                    for (const hook2 of typedOptions.hooks.beforeRetry) {
                      await hook2(typedOptions);
                    }
                    const promise2 = asPromise(typedOptions);
                    onCancel(() => {
                      promise2.catch(() => {
                      });
                      promise2.cancel();
                    });
                    return promise2;
                  });
                }
              } catch (error) {
                request2._beforeError(new types_1.RequestError(error.message, error, request2));
                return;
              }
              if (!is_response_ok_1.isResponseOk(response)) {
                request2._beforeError(new types_1.HTTPError(response));
                return;
              }
              globalResponse = response;
              resolve(request2.options.resolveBodyOnly ? response.body : response);
            });
            const onError = (error) => {
              if (promise.isCanceled) {
                return;
              }
              const {options} = request2;
              if (error instanceof types_1.HTTPError && !options.throwHttpErrors) {
                const {response} = error;
                resolve(request2.options.resolveBodyOnly ? response.body : response);
                return;
              }
              reject(error);
            };
            request2.once("error", onError);
            request2.once("retry", (newRetryCount, error) => {
              var _a2;
              if (is_1.default.nodeStream((_a2 = error.request) === null || _a2 === void 0 ? void 0 : _a2.options.body)) {
                onError(error);
                return;
              }
              makeRequest(newRetryCount);
            });
            proxy_events_1.default(request2, emitter, proxiedRequestEvents);
          };
          makeRequest(0);
        });
        promise.on = (event, fn) => {
          emitter.on(event, fn);
          return promise;
        };
        const shortcut = (responseType) => {
          const newPromise = (async () => {
            await promise;
            const {options} = globalResponse.request;
            return parse_body_1.default(globalResponse, responseType, options.parseJson, options.encoding);
          })();
          Object.defineProperties(newPromise, Object.getOwnPropertyDescriptors(promise));
          return newPromise;
        };
        promise.json = () => {
          const {headers} = globalRequest.options;
          if (!globalRequest.writableFinished && headers.accept === void 0) {
            headers.accept = "application/json";
          }
          return shortcut("json");
        };
        promise.buffer = () => shortcut("buffer");
        promise.text = () => shortcut("text");
        return promise;
      }
      exports.default = asPromise;
      __exportStar(require_types(), exports);
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/as-promise/create-rejection.js
  var require_create_rejection = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/as-promise/create-rejection.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var types_1 = require_types();
      function createRejection(error, ...beforeErrorGroups) {
        const promise = (async () => {
          if (error instanceof types_1.RequestError) {
            try {
              for (const hooks of beforeErrorGroups) {
                if (hooks) {
                  for (const hook of hooks) {
                    error = await hook(error);
                  }
                }
              }
            } catch (error_) {
              error = error_;
            }
          }
          throw error;
        })();
        const returnPromise = () => promise;
        promise.json = returnPromise;
        promise.text = returnPromise;
        promise.buffer = returnPromise;
        promise.on = returnPromise;
        return promise;
      }
      exports.default = createRejection;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/utils/deep-freeze.js
  var require_deep_freeze = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/utils/deep-freeze.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var is_1 = require_dist();
      function deepFreeze(object) {
        for (const value of Object.values(object)) {
          if (is_1.default.plainObject(value) || is_1.default.array(value)) {
            deepFreeze(value);
          }
        }
        return Object.freeze(object);
      }
      exports.default = deepFreeze;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/types.js
  var require_types2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/create.js
  var require_create = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/create.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, {enumerable: true, get: function() {
          return m[k];
        }});
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", {value: true});
      exports.defaultHandler = void 0;
      var is_1 = require_dist();
      var as_promise_1 = require_as_promise();
      var create_rejection_1 = require_create_rejection();
      var core_1 = require_core();
      var deep_freeze_1 = require_deep_freeze();
      var errors4 = {
        RequestError: as_promise_1.RequestError,
        CacheError: as_promise_1.CacheError,
        ReadError: as_promise_1.ReadError,
        HTTPError: as_promise_1.HTTPError,
        MaxRedirectsError: as_promise_1.MaxRedirectsError,
        TimeoutError: as_promise_1.TimeoutError,
        ParseError: as_promise_1.ParseError,
        CancelError: as_promise_1.CancelError,
        UnsupportedProtocolError: as_promise_1.UnsupportedProtocolError,
        UploadError: as_promise_1.UploadError
      };
      var delay = async (ms) => new Promise((resolve) => {
        setTimeout(resolve, ms);
      });
      var {normalizeArguments} = core_1.default;
      var mergeOptions = (...sources) => {
        let mergedOptions;
        for (const source of sources) {
          mergedOptions = normalizeArguments(void 0, source, mergedOptions);
        }
        return mergedOptions;
      };
      var getPromiseOrStream = (options) => options.isStream ? new core_1.default(void 0, options) : as_promise_1.default(options);
      var isGotInstance = (value) => "defaults" in value && "options" in value.defaults;
      var aliases = [
        "get",
        "post",
        "put",
        "patch",
        "head",
        "delete"
      ];
      exports.defaultHandler = (options, next) => next(options);
      var callInitHooks = (hooks, options) => {
        if (hooks) {
          for (const hook of hooks) {
            hook(options);
          }
        }
      };
      var create = (defaults) => {
        defaults._rawHandlers = defaults.handlers;
        defaults.handlers = defaults.handlers.map((fn) => (options, next) => {
          let root;
          const result = fn(options, (newOptions) => {
            root = next(newOptions);
            return root;
          });
          if (result !== root && !options.isStream && root) {
            const typedResult = result;
            const {then: promiseThen, catch: promiseCatch, finally: promiseFianlly} = typedResult;
            Object.setPrototypeOf(typedResult, Object.getPrototypeOf(root));
            Object.defineProperties(typedResult, Object.getOwnPropertyDescriptors(root));
            typedResult.then = promiseThen;
            typedResult.catch = promiseCatch;
            typedResult.finally = promiseFianlly;
          }
          return result;
        });
        const got = (url, options, _defaults) => {
          var _a2, _b;
          let iteration = 0;
          const iterateHandlers = (newOptions) => {
            return defaults.handlers[iteration++](newOptions, iteration === defaults.handlers.length ? getPromiseOrStream : iterateHandlers);
          };
          if (is_1.default.plainObject(url)) {
            const mergedOptions = __spreadValues(__spreadValues({}, url), options);
            core_1.setNonEnumerableProperties([url, options], mergedOptions);
            options = mergedOptions;
            url = void 0;
          }
          try {
            let initHookError;
            try {
              callInitHooks(defaults.options.hooks.init, options);
              callInitHooks((_a2 = options === null || options === void 0 ? void 0 : options.hooks) === null || _a2 === void 0 ? void 0 : _a2.init, options);
            } catch (error) {
              initHookError = error;
            }
            const normalizedOptions = normalizeArguments(url, options, _defaults !== null && _defaults !== void 0 ? _defaults : defaults.options);
            normalizedOptions[core_1.kIsNormalizedAlready] = true;
            if (initHookError) {
              throw new as_promise_1.RequestError(initHookError.message, initHookError, normalizedOptions);
            }
            return iterateHandlers(normalizedOptions);
          } catch (error) {
            if (options === null || options === void 0 ? void 0 : options.isStream) {
              throw error;
            } else {
              return create_rejection_1.default(error, defaults.options.hooks.beforeError, (_b = options === null || options === void 0 ? void 0 : options.hooks) === null || _b === void 0 ? void 0 : _b.beforeError);
            }
          }
        };
        got.extend = (...instancesOrOptions) => {
          const optionsArray = [defaults.options];
          let handlers = [...defaults._rawHandlers];
          let isMutableDefaults;
          for (const value of instancesOrOptions) {
            if (isGotInstance(value)) {
              optionsArray.push(value.defaults.options);
              handlers.push(...value.defaults._rawHandlers);
              isMutableDefaults = value.defaults.mutableDefaults;
            } else {
              optionsArray.push(value);
              if ("handlers" in value) {
                handlers.push(...value.handlers);
              }
              isMutableDefaults = value.mutableDefaults;
            }
          }
          handlers = handlers.filter((handler) => handler !== exports.defaultHandler);
          if (handlers.length === 0) {
            handlers.push(exports.defaultHandler);
          }
          return create({
            options: mergeOptions(...optionsArray),
            handlers,
            mutableDefaults: Boolean(isMutableDefaults)
          });
        };
        const paginateEach = async function* (url, options) {
          let normalizedOptions = normalizeArguments(url, options, defaults.options);
          normalizedOptions.resolveBodyOnly = false;
          const pagination = normalizedOptions.pagination;
          if (!is_1.default.object(pagination)) {
            throw new TypeError("`options.pagination` must be implemented");
          }
          const all = [];
          let {countLimit} = pagination;
          let numberOfRequests = 0;
          while (numberOfRequests < pagination.requestLimit) {
            if (numberOfRequests !== 0) {
              await delay(pagination.backoff);
            }
            const result = await got(void 0, void 0, normalizedOptions);
            const parsed = await pagination.transform(result);
            const current = [];
            for (const item of parsed) {
              if (pagination.filter(item, all, current)) {
                if (!pagination.shouldContinue(item, all, current)) {
                  return;
                }
                yield item;
                if (pagination.stackAllItems) {
                  all.push(item);
                }
                current.push(item);
                if (--countLimit <= 0) {
                  return;
                }
              }
            }
            const optionsToMerge = pagination.paginate(result, all, current);
            if (optionsToMerge === false) {
              return;
            }
            if (optionsToMerge === result.request.options) {
              normalizedOptions = result.request.options;
            } else if (optionsToMerge !== void 0) {
              normalizedOptions = normalizeArguments(void 0, optionsToMerge, normalizedOptions);
            }
            numberOfRequests++;
          }
        };
        got.paginate = paginateEach;
        got.paginate.all = async (url, options) => {
          const results = [];
          for await (const item of paginateEach(url, options)) {
            results.push(item);
          }
          return results;
        };
        got.paginate.each = paginateEach;
        got.stream = (url, options) => got(url, __spreadProps(__spreadValues({}, options), {isStream: true}));
        for (const method of aliases) {
          got[method] = (url, options) => got(url, __spreadProps(__spreadValues({}, options), {method}));
          got.stream[method] = (url, options) => {
            return got(url, __spreadProps(__spreadValues({}, options), {method, isStream: true}));
          };
        }
        Object.assign(got, errors4);
        Object.defineProperty(got, "defaults", {
          value: defaults.mutableDefaults ? defaults : deep_freeze_1.default(defaults),
          writable: defaults.mutableDefaults,
          configurable: defaults.mutableDefaults,
          enumerable: true
        });
        got.mergeOptions = mergeOptions;
        return got;
      };
      exports.default = create;
      __exportStar(require_types2(), exports);
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/index.js
  var require_source6 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/got-npm-11.7.0-cacb9b44fc-7ddec3a767.zip/node_modules/got/dist/source/index.js"(exports, module) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, {enumerable: true, get: function() {
          return m[k];
        }});
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", {value: true});
      var url_1 = require("url");
      var create_1 = require_create();
      var defaults = {
        options: {
          method: "GET",
          retry: {
            limit: 2,
            methods: [
              "GET",
              "PUT",
              "HEAD",
              "DELETE",
              "OPTIONS",
              "TRACE"
            ],
            statusCodes: [
              408,
              413,
              429,
              500,
              502,
              503,
              504,
              521,
              522,
              524
            ],
            errorCodes: [
              "ETIMEDOUT",
              "ECONNRESET",
              "EADDRINUSE",
              "ECONNREFUSED",
              "EPIPE",
              "ENOTFOUND",
              "ENETUNREACH",
              "EAI_AGAIN"
            ],
            maxRetryAfter: void 0,
            calculateDelay: ({computedValue}) => computedValue
          },
          timeout: {},
          headers: {
            "user-agent": "got (https://github.com/sindresorhus/got)"
          },
          hooks: {
            init: [],
            beforeRequest: [],
            beforeRedirect: [],
            beforeRetry: [],
            beforeError: [],
            afterResponse: []
          },
          cache: void 0,
          dnsCache: void 0,
          decompress: true,
          throwHttpErrors: true,
          followRedirect: true,
          isStream: false,
          responseType: "text",
          resolveBodyOnly: false,
          maxRedirects: 10,
          prefixUrl: "",
          methodRewriting: true,
          ignoreInvalidCookies: false,
          context: {},
          http2: false,
          allowGetBody: false,
          https: void 0,
          pagination: {
            transform: (response) => {
              if (response.request.options.responseType === "json") {
                return response.body;
              }
              return JSON.parse(response.body);
            },
            paginate: (response) => {
              if (!Reflect.has(response.headers, "link")) {
                return false;
              }
              const items = response.headers.link.split(",");
              let next;
              for (const item of items) {
                const parsed = item.split(";");
                if (parsed[1].includes("next")) {
                  next = parsed[0].trimStart().trim();
                  next = next.slice(1, -1);
                  break;
                }
              }
              if (next) {
                const options = {
                  url: new url_1.URL(next)
                };
                return options;
              }
              return false;
            },
            filter: () => true,
            shouldContinue: () => true,
            countLimit: Infinity,
            backoff: 0,
            requestLimit: 1e4,
            stackAllItems: true
          },
          parseJson: (text) => JSON.parse(text),
          stringifyJson: (object) => JSON.stringify(object),
          cacheOptions: {}
        },
        handlers: [create_1.defaultHandler],
        mutableDefaults: false
      };
      var got = create_1.default(defaults);
      exports.default = got;
      module.exports = got;
      module.exports.default = got;
      module.exports.__esModule = true;
      __exportStar(require_create(), exports);
      __exportStar(require_as_promise(), exports);
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tunnel-npm-0.0.6-b1c0830ea4-c362948df9.zip/node_modules/tunnel/lib/tunnel.js
  var require_tunnel = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tunnel-npm-0.0.6-b1c0830ea4-c362948df9.zip/node_modules/tunnel/lib/tunnel.js"(exports) {
      "use strict";
      var net = require("net");
      var tls = require("tls");
      var http = require("http");
      var https = require("https");
      var events = require("events");
      var assert = require("assert");
      var util = require("util");
      exports.httpOverHttp = httpOverHttp;
      exports.httpsOverHttp = httpsOverHttp;
      exports.httpOverHttps = httpOverHttps;
      exports.httpsOverHttps = httpsOverHttps;
      function httpOverHttp(options) {
        var agent = new TunnelingAgent(options);
        agent.request = http.request;
        return agent;
      }
      function httpsOverHttp(options) {
        var agent = new TunnelingAgent(options);
        agent.request = http.request;
        agent.createSocket = createSecureSocket;
        agent.defaultPort = 443;
        return agent;
      }
      function httpOverHttps(options) {
        var agent = new TunnelingAgent(options);
        agent.request = https.request;
        return agent;
      }
      function httpsOverHttps(options) {
        var agent = new TunnelingAgent(options);
        agent.request = https.request;
        agent.createSocket = createSecureSocket;
        agent.defaultPort = 443;
        return agent;
      }
      function TunnelingAgent(options) {
        var self2 = this;
        self2.options = options || {};
        self2.proxyOptions = self2.options.proxy || {};
        self2.maxSockets = self2.options.maxSockets || http.Agent.defaultMaxSockets;
        self2.requests = [];
        self2.sockets = [];
        self2.on("free", function onFree(socket, host, port, localAddress) {
          var options2 = toOptions(host, port, localAddress);
          for (var i = 0, len = self2.requests.length; i < len; ++i) {
            var pending = self2.requests[i];
            if (pending.host === options2.host && pending.port === options2.port) {
              self2.requests.splice(i, 1);
              pending.request.onSocket(socket);
              return;
            }
          }
          socket.destroy();
          self2.removeSocket(socket);
        });
      }
      util.inherits(TunnelingAgent, events.EventEmitter);
      TunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {
        var self2 = this;
        var options = mergeOptions({request: req}, self2.options, toOptions(host, port, localAddress));
        if (self2.sockets.length >= this.maxSockets) {
          self2.requests.push(options);
          return;
        }
        self2.createSocket(options, function(socket) {
          socket.on("free", onFree);
          socket.on("close", onCloseOrRemove);
          socket.on("agentRemove", onCloseOrRemove);
          req.onSocket(socket);
          function onFree() {
            self2.emit("free", socket, options);
          }
          function onCloseOrRemove(err) {
            self2.removeSocket(socket);
            socket.removeListener("free", onFree);
            socket.removeListener("close", onCloseOrRemove);
            socket.removeListener("agentRemove", onCloseOrRemove);
          }
        });
      };
      TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
        var self2 = this;
        var placeholder = {};
        self2.sockets.push(placeholder);
        var connectOptions = mergeOptions({}, self2.proxyOptions, {
          method: "CONNECT",
          path: options.host + ":" + options.port,
          agent: false,
          headers: {
            host: options.host + ":" + options.port
          }
        });
        if (options.localAddress) {
          connectOptions.localAddress = options.localAddress;
        }
        if (connectOptions.proxyAuth) {
          connectOptions.headers = connectOptions.headers || {};
          connectOptions.headers["Proxy-Authorization"] = "Basic " + new Buffer(connectOptions.proxyAuth).toString("base64");
        }
        debug2("making CONNECT request");
        var connectReq = self2.request(connectOptions);
        connectReq.useChunkedEncodingByDefault = false;
        connectReq.once("response", onResponse);
        connectReq.once("upgrade", onUpgrade);
        connectReq.once("connect", onConnect);
        connectReq.once("error", onError);
        connectReq.end();
        function onResponse(res) {
          res.upgrade = true;
        }
        function onUpgrade(res, socket, head) {
          process.nextTick(function() {
            onConnect(res, socket, head);
          });
        }
        function onConnect(res, socket, head) {
          connectReq.removeAllListeners();
          socket.removeAllListeners();
          if (res.statusCode !== 200) {
            debug2("tunneling socket could not be established, statusCode=%d", res.statusCode);
            socket.destroy();
            var error = new Error("tunneling socket could not be established, statusCode=" + res.statusCode);
            error.code = "ECONNRESET";
            options.request.emit("error", error);
            self2.removeSocket(placeholder);
            return;
          }
          if (head.length > 0) {
            debug2("got illegal response body from proxy");
            socket.destroy();
            var error = new Error("got illegal response body from proxy");
            error.code = "ECONNRESET";
            options.request.emit("error", error);
            self2.removeSocket(placeholder);
            return;
          }
          debug2("tunneling connection has established");
          self2.sockets[self2.sockets.indexOf(placeholder)] = socket;
          return cb(socket);
        }
        function onError(cause) {
          connectReq.removeAllListeners();
          debug2("tunneling socket could not be established, cause=%s\n", cause.message, cause.stack);
          var error = new Error("tunneling socket could not be established, cause=" + cause.message);
          error.code = "ECONNRESET";
          options.request.emit("error", error);
          self2.removeSocket(placeholder);
        }
      };
      TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
        var pos = this.sockets.indexOf(socket);
        if (pos === -1) {
          return;
        }
        this.sockets.splice(pos, 1);
        var pending = this.requests.shift();
        if (pending) {
          this.createSocket(pending, function(socket2) {
            pending.request.onSocket(socket2);
          });
        }
      };
      function createSecureSocket(options, cb) {
        var self2 = this;
        TunnelingAgent.prototype.createSocket.call(self2, options, function(socket) {
          var hostHeader = options.request.getHeader("host");
          var tlsOptions = mergeOptions({}, self2.options, {
            socket,
            servername: hostHeader ? hostHeader.replace(/:.*$/, "") : options.host
          });
          var secureSocket = tls.connect(0, tlsOptions);
          self2.sockets[self2.sockets.indexOf(socket)] = secureSocket;
          cb(secureSocket);
        });
      }
      function toOptions(host, port, localAddress) {
        if (typeof host === "string") {
          return {
            host,
            port,
            localAddress
          };
        }
        return host;
      }
      function mergeOptions(target) {
        for (var i = 1, len = arguments.length; i < len; ++i) {
          var overrides = arguments[i];
          if (typeof overrides === "object") {
            var keys = Object.keys(overrides);
            for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
              var k = keys[j];
              if (overrides[k] !== void 0) {
                target[k] = overrides[k];
              }
            }
          }
        }
        return target;
      }
      var debug2;
      if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
        debug2 = function() {
          var args = Array.prototype.slice.call(arguments);
          if (typeof args[0] === "string") {
            args[0] = "TUNNEL: " + args[0];
          } else {
            args.unshift("TUNNEL:");
          }
          console.error.apply(console, args);
        };
      } else {
        debug2 = function() {
        };
      }
      exports.debug = debug2;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tunnel-npm-0.0.6-b1c0830ea4-c362948df9.zip/node_modules/tunnel/index.js
  var require_tunnel2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tunnel-npm-0.0.6-b1c0830ea4-c362948df9.zip/node_modules/tunnel/index.js"(exports, module) {
      module.exports = require_tunnel();
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-libzip/sources/libzipSync.js
  var require_libzipSync = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-libzip/sources/libzipSync.js"(exports, module) {
      var frozenFs = Object.assign({}, require("fs"));
      var Module3 = typeof Module3 !== "undefined" ? Module3 : {};
      var moduleOverrides = {};
      var key;
      for (key in Module3) {
        if (Module3.hasOwnProperty(key)) {
          moduleOverrides[key] = Module3[key];
        }
      }
      var arguments_ = [];
      var thisProgram = "./this.program";
      var quit_ = function(status, toThrow) {
        throw toThrow;
      };
      var ENVIRONMENT_IS_WORKER = false;
      var ENVIRONMENT_IS_NODE = true;
      var scriptDirectory = "";
      function locateFile(path3) {
        if (Module3["locateFile"]) {
          return Module3["locateFile"](path3, scriptDirectory);
        }
        return scriptDirectory + path3;
      }
      var read_;
      var readBinary;
      var nodeFS;
      var nodePath;
      if (ENVIRONMENT_IS_NODE) {
        if (ENVIRONMENT_IS_WORKER) {
          scriptDirectory = require("path").dirname(scriptDirectory) + "/";
        } else {
          scriptDirectory = __dirname + "/";
        }
        read_ = function shell_read(filename, binary) {
          var ret = tryParseAsDataURI(filename);
          if (ret) {
            return binary ? ret : ret.toString();
          }
          if (!nodeFS)
            nodeFS = frozenFs;
          if (!nodePath)
            nodePath = require("path");
          filename = nodePath["normalize"](filename);
          return nodeFS["readFileSync"](filename, binary ? null : "utf8");
        };
        readBinary = function readBinary2(filename) {
          var ret = read_(filename, true);
          if (!ret.buffer) {
            ret = new Uint8Array(ret);
          }
          assert(ret.buffer);
          return ret;
        };
        if (process["argv"].length > 1) {
          thisProgram = process["argv"][1].replace(/\\/g, "/");
        }
        arguments_ = process["argv"].slice(2);
        if (typeof module !== "undefined") {
          module["exports"] = Module3;
        }
        quit_ = function(status) {
          process["exit"](status);
        };
        Module3["inspect"] = function() {
          return "[Emscripten Module object]";
        };
      } else {
      }
      var out = Module3["print"] || console.log.bind(console);
      var err = Module3["printErr"] || console.warn.bind(console);
      for (key in moduleOverrides) {
        if (moduleOverrides.hasOwnProperty(key)) {
          Module3[key] = moduleOverrides[key];
        }
      }
      moduleOverrides = null;
      if (Module3["arguments"])
        arguments_ = Module3["arguments"];
      if (Module3["thisProgram"])
        thisProgram = Module3["thisProgram"];
      if (Module3["quit"])
        quit_ = Module3["quit"];
      var STACK_ALIGN = 16;
      function alignMemory(size, factor) {
        if (!factor)
          factor = STACK_ALIGN;
        return Math.ceil(size / factor) * factor;
      }
      var tempRet0 = 0;
      var setTempRet0 = function(value) {
        tempRet0 = value;
      };
      var wasmBinary;
      if (Module3["wasmBinary"])
        wasmBinary = Module3["wasmBinary"];
      var noExitRuntime = Module3["noExitRuntime"] || true;
      if (typeof WebAssembly !== "object") {
        abort("no native wasm support detected");
      }
      function getValue(ptr, type, noSafe) {
        type = type || "i8";
        if (type.charAt(type.length - 1) === "*")
          type = "i32";
        switch (type) {
          case "i1":
            return HEAP8[ptr >> 0];
          case "i8":
            return HEAP8[ptr >> 0];
          case "i16":
            return HEAP16[ptr >> 1];
          case "i32":
            return HEAP32[ptr >> 2];
          case "i64":
            return HEAP32[ptr >> 2];
          case "float":
            return HEAPF32[ptr >> 2];
          case "double":
            return HEAPF64[ptr >> 3];
          default:
            abort("invalid type for getValue: " + type);
        }
        return null;
      }
      var wasmMemory;
      var ABORT = false;
      var EXITSTATUS;
      function assert(condition, text) {
        if (!condition) {
          abort("Assertion failed: " + text);
        }
      }
      function getCFunc(ident) {
        var func = Module3["_" + ident];
        assert(func, "Cannot call unknown function " + ident + ", make sure it is exported");
        return func;
      }
      function ccall(ident, returnType, argTypes, args, opts) {
        var toC = {
          string: function(str) {
            var ret2 = 0;
            if (str !== null && str !== void 0 && str !== 0) {
              var len = (str.length << 2) + 1;
              ret2 = stackAlloc(len);
              stringToUTF8(str, ret2, len);
            }
            return ret2;
          },
          array: function(arr) {
            var ret2 = stackAlloc(arr.length);
            writeArrayToMemory(arr, ret2);
            return ret2;
          }
        };
        function convertReturnValue(ret2) {
          if (returnType === "string")
            return UTF8ToString(ret2);
          if (returnType === "boolean")
            return Boolean(ret2);
          return ret2;
        }
        var func = getCFunc(ident);
        var cArgs = [];
        var stack = 0;
        if (args) {
          for (var i = 0; i < args.length; i++) {
            var converter = toC[argTypes[i]];
            if (converter) {
              if (stack === 0)
                stack = stackSave();
              cArgs[i] = converter(args[i]);
            } else {
              cArgs[i] = args[i];
            }
          }
        }
        var ret = func.apply(null, cArgs);
        ret = convertReturnValue(ret);
        if (stack !== 0)
          stackRestore(stack);
        return ret;
      }
      function cwrap(ident, returnType, argTypes, opts) {
        argTypes = argTypes || [];
        var numericArgs = argTypes.every(function(type) {
          return type === "number";
        });
        var numericRet = returnType !== "string";
        if (numericRet && numericArgs && !opts) {
          return getCFunc(ident);
        }
        return function() {
          return ccall(ident, returnType, argTypes, arguments, opts);
        };
      }
      var UTF8Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf8") : void 0;
      function UTF8ArrayToString(heap, idx, maxBytesToRead) {
        var endIdx = idx + maxBytesToRead;
        var endPtr = idx;
        while (heap[endPtr] && !(endPtr >= endIdx))
          ++endPtr;
        if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
          return UTF8Decoder.decode(heap.subarray(idx, endPtr));
        } else {
          var str = "";
          while (idx < endPtr) {
            var u0 = heap[idx++];
            if (!(u0 & 128)) {
              str += String.fromCharCode(u0);
              continue;
            }
            var u1 = heap[idx++] & 63;
            if ((u0 & 224) == 192) {
              str += String.fromCharCode((u0 & 31) << 6 | u1);
              continue;
            }
            var u2 = heap[idx++] & 63;
            if ((u0 & 240) == 224) {
              u0 = (u0 & 15) << 12 | u1 << 6 | u2;
            } else {
              u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heap[idx++] & 63;
            }
            if (u0 < 65536) {
              str += String.fromCharCode(u0);
            } else {
              var ch = u0 - 65536;
              str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
            }
          }
        }
        return str;
      }
      function UTF8ToString(ptr, maxBytesToRead) {
        return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
      }
      function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
        if (!(maxBytesToWrite > 0))
          return 0;
        var startIdx = outIdx;
        var endIdx = outIdx + maxBytesToWrite - 1;
        for (var i = 0; i < str.length; ++i) {
          var u = str.charCodeAt(i);
          if (u >= 55296 && u <= 57343) {
            var u1 = str.charCodeAt(++i);
            u = 65536 + ((u & 1023) << 10) | u1 & 1023;
          }
          if (u <= 127) {
            if (outIdx >= endIdx)
              break;
            heap[outIdx++] = u;
          } else if (u <= 2047) {
            if (outIdx + 1 >= endIdx)
              break;
            heap[outIdx++] = 192 | u >> 6;
            heap[outIdx++] = 128 | u & 63;
          } else if (u <= 65535) {
            if (outIdx + 2 >= endIdx)
              break;
            heap[outIdx++] = 224 | u >> 12;
            heap[outIdx++] = 128 | u >> 6 & 63;
            heap[outIdx++] = 128 | u & 63;
          } else {
            if (outIdx + 3 >= endIdx)
              break;
            heap[outIdx++] = 240 | u >> 18;
            heap[outIdx++] = 128 | u >> 12 & 63;
            heap[outIdx++] = 128 | u >> 6 & 63;
            heap[outIdx++] = 128 | u & 63;
          }
        }
        heap[outIdx] = 0;
        return outIdx - startIdx;
      }
      function stringToUTF8(str, outPtr, maxBytesToWrite) {
        return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
      }
      function lengthBytesUTF8(str) {
        var len = 0;
        for (var i = 0; i < str.length; ++i) {
          var u = str.charCodeAt(i);
          if (u >= 55296 && u <= 57343)
            u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
          if (u <= 127)
            ++len;
          else if (u <= 2047)
            len += 2;
          else if (u <= 65535)
            len += 3;
          else
            len += 4;
        }
        return len;
      }
      function allocateUTF8(str) {
        var size = lengthBytesUTF8(str) + 1;
        var ret = _malloc(size);
        if (ret)
          stringToUTF8Array(str, HEAP8, ret, size);
        return ret;
      }
      function writeArrayToMemory(array, buffer2) {
        HEAP8.set(array, buffer2);
      }
      function alignUp(x, multiple) {
        if (x % multiple > 0) {
          x += multiple - x % multiple;
        }
        return x;
      }
      var buffer;
      var HEAP8;
      var HEAPU8;
      var HEAP16;
      var HEAPU16;
      var HEAP32;
      var HEAPU32;
      var HEAPF32;
      var HEAPF64;
      function updateGlobalBufferAndViews(buf) {
        buffer = buf;
        Module3["HEAP8"] = HEAP8 = new Int8Array(buf);
        Module3["HEAP16"] = HEAP16 = new Int16Array(buf);
        Module3["HEAP32"] = HEAP32 = new Int32Array(buf);
        Module3["HEAPU8"] = HEAPU8 = new Uint8Array(buf);
        Module3["HEAPU16"] = HEAPU16 = new Uint16Array(buf);
        Module3["HEAPU32"] = HEAPU32 = new Uint32Array(buf);
        Module3["HEAPF32"] = HEAPF32 = new Float32Array(buf);
        Module3["HEAPF64"] = HEAPF64 = new Float64Array(buf);
      }
      var INITIAL_MEMORY = Module3["INITIAL_MEMORY"] || 16777216;
      var wasmTable;
      var __ATPRERUN__ = [];
      var __ATINIT__ = [];
      var __ATPOSTRUN__ = [];
      var runtimeInitialized = false;
      function preRun() {
        if (Module3["preRun"]) {
          if (typeof Module3["preRun"] == "function")
            Module3["preRun"] = [Module3["preRun"]];
          while (Module3["preRun"].length) {
            addOnPreRun(Module3["preRun"].shift());
          }
        }
        callRuntimeCallbacks(__ATPRERUN__);
      }
      function initRuntime() {
        runtimeInitialized = true;
        if (!Module3["noFSInit"] && !FS.init.initialized)
          FS.init();
        TTY.init();
        callRuntimeCallbacks(__ATINIT__);
      }
      function postRun() {
        if (Module3["postRun"]) {
          if (typeof Module3["postRun"] == "function")
            Module3["postRun"] = [Module3["postRun"]];
          while (Module3["postRun"].length) {
            addOnPostRun(Module3["postRun"].shift());
          }
        }
        callRuntimeCallbacks(__ATPOSTRUN__);
      }
      function addOnPreRun(cb) {
        __ATPRERUN__.unshift(cb);
      }
      function addOnInit(cb) {
        __ATINIT__.unshift(cb);
      }
      function addOnPostRun(cb) {
        __ATPOSTRUN__.unshift(cb);
      }
      var runDependencies = 0;
      var runDependencyWatcher = null;
      var dependenciesFulfilled = null;
      function getUniqueRunDependency(id) {
        return id;
      }
      function addRunDependency(id) {
        runDependencies++;
        if (Module3["monitorRunDependencies"]) {
          Module3["monitorRunDependencies"](runDependencies);
        }
      }
      function removeRunDependency(id) {
        runDependencies--;
        if (Module3["monitorRunDependencies"]) {
          Module3["monitorRunDependencies"](runDependencies);
        }
        if (runDependencies == 0) {
          if (runDependencyWatcher !== null) {
            clearInterval(runDependencyWatcher);
            runDependencyWatcher = null;
          }
          if (dependenciesFulfilled) {
            var callback = dependenciesFulfilled;
            dependenciesFulfilled = null;
            callback();
          }
        }
      }
      Module3["preloadedImages"] = {};
      Module3["preloadedAudios"] = {};
      function abort(what) {
        if (Module3["onAbort"]) {
          Module3["onAbort"](what);
        }
        what += "";
        err(what);
        ABORT = true;
        EXITSTATUS = 1;
        what = "abort(" + what + "). Build with -s ASSERTIONS=1 for more info.";
        var e = new WebAssembly.RuntimeError(what);
        throw e;
      }
      var dataURIPrefix = "data:application/octet-stream;base64,";
      function isDataURI(filename) {
        return filename.startsWith(dataURIPrefix);
      }
      var wasmBinaryFile = "data:application/octet-stream;base64,";
      if (!isDataURI(wasmBinaryFile)) {
        wasmBinaryFile = locateFile(wasmBinaryFile);
      }
      function getBinary(file) {
        try {
          if (file == wasmBinaryFile && wasmBinary) {
            return new Uint8Array(wasmBinary);
          }
          var binary = tryParseAsDataURI(file);
          if (binary) {
            return binary;
          }
          if (readBinary) {
            return readBinary(file);
          } else {
            throw "sync fetching of the wasm failed: you can preload it to Module['wasmBinary'] manually, or emcc.py will do that for you when generating HTML (but not JS)";
          }
        } catch (err2) {
          abort(err2);
        }
      }
      function instantiateSync(file, info) {
        var instance;
        var module2;
        var binary;
        try {
          binary = getBinary(file);
          module2 = new WebAssembly.Module(binary);
          instance = new WebAssembly.Instance(module2, info);
        } catch (e) {
          var str = e.toString();
          err("failed to compile wasm module: " + str);
          if (str.includes("imported Memory") || str.includes("memory import")) {
            err("Memory size incompatibility issues may be due to changing INITIAL_MEMORY at runtime to something too large. Use ALLOW_MEMORY_GROWTH to allow any size memory (and also make sure not to set INITIAL_MEMORY at runtime to something smaller than it was at compile time).");
          }
          throw e;
        }
        return [instance, module2];
      }
      function createWasm() {
        var info = {a: asmLibraryArg};
        function receiveInstance(instance, module2) {
          var exports3 = instance.exports;
          Module3["asm"] = exports3;
          wasmMemory = Module3["asm"]["u"];
          updateGlobalBufferAndViews(wasmMemory.buffer);
          wasmTable = Module3["asm"]["za"];
          addOnInit(Module3["asm"]["v"]);
          removeRunDependency("wasm-instantiate");
        }
        addRunDependency("wasm-instantiate");
        if (Module3["instantiateWasm"]) {
          try {
            var exports2 = Module3["instantiateWasm"](info, receiveInstance);
            return exports2;
          } catch (e) {
            err("Module.instantiateWasm callback failed with error: " + e);
            return false;
          }
        }
        var result = instantiateSync(wasmBinaryFile, info);
        receiveInstance(result[0]);
        return Module3["asm"];
      }
      var tempDouble;
      var tempI64;
      function callRuntimeCallbacks(callbacks) {
        while (callbacks.length > 0) {
          var callback = callbacks.shift();
          if (typeof callback == "function") {
            callback(Module3);
            continue;
          }
          var func = callback.func;
          if (typeof func === "number") {
            if (callback.arg === void 0) {
              wasmTable.get(func)();
            } else {
              wasmTable.get(func)(callback.arg);
            }
          } else {
            func(callback.arg === void 0 ? null : callback.arg);
          }
        }
      }
      function _gmtime_r(time, tmPtr) {
        var date = new Date(HEAP32[time >> 2] * 1e3);
        HEAP32[tmPtr >> 2] = date.getUTCSeconds();
        HEAP32[tmPtr + 4 >> 2] = date.getUTCMinutes();
        HEAP32[tmPtr + 8 >> 2] = date.getUTCHours();
        HEAP32[tmPtr + 12 >> 2] = date.getUTCDate();
        HEAP32[tmPtr + 16 >> 2] = date.getUTCMonth();
        HEAP32[tmPtr + 20 >> 2] = date.getUTCFullYear() - 1900;
        HEAP32[tmPtr + 24 >> 2] = date.getUTCDay();
        HEAP32[tmPtr + 36 >> 2] = 0;
        HEAP32[tmPtr + 32 >> 2] = 0;
        var start2 = Date.UTC(date.getUTCFullYear(), 0, 1, 0, 0, 0, 0);
        var yday = (date.getTime() - start2) / (1e3 * 60 * 60 * 24) | 0;
        HEAP32[tmPtr + 28 >> 2] = yday;
        if (!_gmtime_r.GMTString)
          _gmtime_r.GMTString = allocateUTF8("GMT");
        HEAP32[tmPtr + 40 >> 2] = _gmtime_r.GMTString;
        return tmPtr;
      }
      function ___gmtime_r(a0, a1) {
        return _gmtime_r(a0, a1);
      }
      var PATH = {
        splitPath: function(filename) {
          var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
          return splitPathRe.exec(filename).slice(1);
        },
        normalizeArray: function(parts, allowAboveRoot) {
          var up = 0;
          for (var i = parts.length - 1; i >= 0; i--) {
            var last = parts[i];
            if (last === ".") {
              parts.splice(i, 1);
            } else if (last === "..") {
              parts.splice(i, 1);
              up++;
            } else if (up) {
              parts.splice(i, 1);
              up--;
            }
          }
          if (allowAboveRoot) {
            for (; up; up--) {
              parts.unshift("..");
            }
          }
          return parts;
        },
        normalize: function(path3) {
          var isAbsolute = path3.charAt(0) === "/", trailingSlash = path3.substr(-1) === "/";
          path3 = PATH.normalizeArray(path3.split("/").filter(function(p) {
            return !!p;
          }), !isAbsolute).join("/");
          if (!path3 && !isAbsolute) {
            path3 = ".";
          }
          if (path3 && trailingSlash) {
            path3 += "/";
          }
          return (isAbsolute ? "/" : "") + path3;
        },
        dirname: function(path3) {
          var result = PATH.splitPath(path3), root = result[0], dir = result[1];
          if (!root && !dir) {
            return ".";
          }
          if (dir) {
            dir = dir.substr(0, dir.length - 1);
          }
          return root + dir;
        },
        basename: function(path3) {
          if (path3 === "/")
            return "/";
          path3 = PATH.normalize(path3);
          path3 = path3.replace(/\/$/, "");
          var lastSlash = path3.lastIndexOf("/");
          if (lastSlash === -1)
            return path3;
          return path3.substr(lastSlash + 1);
        },
        extname: function(path3) {
          return PATH.splitPath(path3)[3];
        },
        join: function() {
          var paths = Array.prototype.slice.call(arguments, 0);
          return PATH.normalize(paths.join("/"));
        },
        join2: function(l, r) {
          return PATH.normalize(l + "/" + r);
        }
      };
      function getRandomDevice() {
        if (typeof crypto === "object" && typeof crypto["getRandomValues"] === "function") {
          var randomBuffer = new Uint8Array(1);
          return function() {
            crypto.getRandomValues(randomBuffer);
            return randomBuffer[0];
          };
        } else if (ENVIRONMENT_IS_NODE) {
          try {
            var crypto_module = require("crypto");
            return function() {
              return crypto_module["randomBytes"](1)[0];
            };
          } catch (e) {
          }
        }
        return function() {
          abort("randomDevice");
        };
      }
      var PATH_FS = {
        resolve: function() {
          var resolvedPath = "", resolvedAbsolute = false;
          for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
            var path3 = i >= 0 ? arguments[i] : FS.cwd();
            if (typeof path3 !== "string") {
              throw new TypeError("Arguments to path.resolve must be strings");
            } else if (!path3) {
              return "";
            }
            resolvedPath = path3 + "/" + resolvedPath;
            resolvedAbsolute = path3.charAt(0) === "/";
          }
          resolvedPath = PATH.normalizeArray(resolvedPath.split("/").filter(function(p) {
            return !!p;
          }), !resolvedAbsolute).join("/");
          return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
        },
        relative: function(from, to) {
          from = PATH_FS.resolve(from).substr(1);
          to = PATH_FS.resolve(to).substr(1);
          function trim(arr) {
            var start2 = 0;
            for (; start2 < arr.length; start2++) {
              if (arr[start2] !== "")
                break;
            }
            var end = arr.length - 1;
            for (; end >= 0; end--) {
              if (arr[end] !== "")
                break;
            }
            if (start2 > end)
              return [];
            return arr.slice(start2, end - start2 + 1);
          }
          var fromParts = trim(from.split("/"));
          var toParts = trim(to.split("/"));
          var length = Math.min(fromParts.length, toParts.length);
          var samePartsLength = length;
          for (var i = 0; i < length; i++) {
            if (fromParts[i] !== toParts[i]) {
              samePartsLength = i;
              break;
            }
          }
          var outputParts = [];
          for (var i = samePartsLength; i < fromParts.length; i++) {
            outputParts.push("..");
          }
          outputParts = outputParts.concat(toParts.slice(samePartsLength));
          return outputParts.join("/");
        }
      };
      var TTY = {
        ttys: [],
        init: function() {
        },
        shutdown: function() {
        },
        register: function(dev, ops) {
          TTY.ttys[dev] = {input: [], output: [], ops};
          FS.registerDevice(dev, TTY.stream_ops);
        },
        stream_ops: {
          open: function(stream) {
            var tty = TTY.ttys[stream.node.rdev];
            if (!tty) {
              throw new FS.ErrnoError(43);
            }
            stream.tty = tty;
            stream.seekable = false;
          },
          close: function(stream) {
            stream.tty.ops.flush(stream.tty);
          },
          flush: function(stream) {
            stream.tty.ops.flush(stream.tty);
          },
          read: function(stream, buffer2, offset, length, pos) {
            if (!stream.tty || !stream.tty.ops.get_char) {
              throw new FS.ErrnoError(60);
            }
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = stream.tty.ops.get_char(stream.tty);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === void 0 && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === void 0)
                break;
              bytesRead++;
              buffer2[offset + i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer2, offset, length, pos) {
            if (!stream.tty || !stream.tty.ops.put_char) {
              throw new FS.ErrnoError(60);
            }
            try {
              for (var i = 0; i < length; i++) {
                stream.tty.ops.put_char(stream.tty, buffer2[offset + i]);
              }
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        },
        default_tty_ops: {
          get_char: function(tty) {
            if (!tty.input.length) {
              var result = null;
              if (ENVIRONMENT_IS_NODE) {
                var BUFSIZE = 256;
                var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
                var bytesRead = 0;
                try {
                  bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
                } catch (e) {
                  if (e.toString().includes("EOF"))
                    bytesRead = 0;
                  else
                    throw e;
                }
                if (bytesRead > 0) {
                  result = buf.slice(0, bytesRead).toString("utf-8");
                } else {
                  result = null;
                }
              } else if (typeof window != "undefined" && typeof window.prompt == "function") {
                result = window.prompt("Input: ");
                if (result !== null) {
                  result += "\n";
                }
              } else if (typeof readline == "function") {
                result = readline();
                if (result !== null) {
                  result += "\n";
                }
              }
              if (!result) {
                return null;
              }
              tty.input = intArrayFromString(result, true);
            }
            return tty.input.shift();
          },
          put_char: function(tty, val) {
            if (val === null || val === 10) {
              out(UTF8ArrayToString(tty.output, 0));
              tty.output = [];
            } else {
              if (val != 0)
                tty.output.push(val);
            }
          },
          flush: function(tty) {
            if (tty.output && tty.output.length > 0) {
              out(UTF8ArrayToString(tty.output, 0));
              tty.output = [];
            }
          }
        },
        default_tty1_ops: {
          put_char: function(tty, val) {
            if (val === null || val === 10) {
              err(UTF8ArrayToString(tty.output, 0));
              tty.output = [];
            } else {
              if (val != 0)
                tty.output.push(val);
            }
          },
          flush: function(tty) {
            if (tty.output && tty.output.length > 0) {
              err(UTF8ArrayToString(tty.output, 0));
              tty.output = [];
            }
          }
        }
      };
      function mmapAlloc(size) {
        var alignedSize = alignMemory(size, 65536);
        var ptr = _malloc(alignedSize);
        while (size < alignedSize)
          HEAP8[ptr + size++] = 0;
        return ptr;
      }
      var MEMFS = {
        ops_table: null,
        mount: function(mount) {
          return MEMFS.createNode(null, "/", 16384 | 511, 0);
        },
        createNode: function(parent, name, mode, dev) {
          if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
            throw new FS.ErrnoError(63);
          }
          if (!MEMFS.ops_table) {
            MEMFS.ops_table = {
              dir: {
                node: {
                  getattr: MEMFS.node_ops.getattr,
                  setattr: MEMFS.node_ops.setattr,
                  lookup: MEMFS.node_ops.lookup,
                  mknod: MEMFS.node_ops.mknod,
                  rename: MEMFS.node_ops.rename,
                  unlink: MEMFS.node_ops.unlink,
                  rmdir: MEMFS.node_ops.rmdir,
                  readdir: MEMFS.node_ops.readdir,
                  symlink: MEMFS.node_ops.symlink
                },
                stream: {llseek: MEMFS.stream_ops.llseek}
              },
              file: {
                node: {
                  getattr: MEMFS.node_ops.getattr,
                  setattr: MEMFS.node_ops.setattr
                },
                stream: {
                  llseek: MEMFS.stream_ops.llseek,
                  read: MEMFS.stream_ops.read,
                  write: MEMFS.stream_ops.write,
                  allocate: MEMFS.stream_ops.allocate,
                  mmap: MEMFS.stream_ops.mmap,
                  msync: MEMFS.stream_ops.msync
                }
              },
              link: {
                node: {
                  getattr: MEMFS.node_ops.getattr,
                  setattr: MEMFS.node_ops.setattr,
                  readlink: MEMFS.node_ops.readlink
                },
                stream: {}
              },
              chrdev: {
                node: {
                  getattr: MEMFS.node_ops.getattr,
                  setattr: MEMFS.node_ops.setattr
                },
                stream: FS.chrdev_stream_ops
              }
            };
          }
          var node = FS.createNode(parent, name, mode, dev);
          if (FS.isDir(node.mode)) {
            node.node_ops = MEMFS.ops_table.dir.node;
            node.stream_ops = MEMFS.ops_table.dir.stream;
            node.contents = {};
          } else if (FS.isFile(node.mode)) {
            node.node_ops = MEMFS.ops_table.file.node;
            node.stream_ops = MEMFS.ops_table.file.stream;
            node.usedBytes = 0;
            node.contents = null;
          } else if (FS.isLink(node.mode)) {
            node.node_ops = MEMFS.ops_table.link.node;
            node.stream_ops = MEMFS.ops_table.link.stream;
          } else if (FS.isChrdev(node.mode)) {
            node.node_ops = MEMFS.ops_table.chrdev.node;
            node.stream_ops = MEMFS.ops_table.chrdev.stream;
          }
          node.timestamp = Date.now();
          if (parent) {
            parent.contents[name] = node;
            parent.timestamp = node.timestamp;
          }
          return node;
        },
        getFileDataAsTypedArray: function(node) {
          if (!node.contents)
            return new Uint8Array(0);
          if (node.contents.subarray)
            return node.contents.subarray(0, node.usedBytes);
          return new Uint8Array(node.contents);
        },
        expandFileStorage: function(node, newCapacity) {
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity)
            return;
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125) >>> 0);
          if (prevCapacity != 0)
            newCapacity = Math.max(newCapacity, 256);
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity);
          if (node.usedBytes > 0)
            node.contents.set(oldContents.subarray(0, node.usedBytes), 0);
        },
        resizeFileStorage: function(node, newSize) {
          if (node.usedBytes == newSize)
            return;
          if (newSize == 0) {
            node.contents = null;
            node.usedBytes = 0;
          } else {
            var oldContents = node.contents;
            node.contents = new Uint8Array(newSize);
            if (oldContents) {
              node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes)));
            }
            node.usedBytes = newSize;
          }
        },
        node_ops: {
          getattr: function(node) {
            var attr = {};
            attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
            attr.ino = node.id;
            attr.mode = node.mode;
            attr.nlink = 1;
            attr.uid = 0;
            attr.gid = 0;
            attr.rdev = node.rdev;
            if (FS.isDir(node.mode)) {
              attr.size = 4096;
            } else if (FS.isFile(node.mode)) {
              attr.size = node.usedBytes;
            } else if (FS.isLink(node.mode)) {
              attr.size = node.link.length;
            } else {
              attr.size = 0;
            }
            attr.atime = new Date(node.timestamp);
            attr.mtime = new Date(node.timestamp);
            attr.ctime = new Date(node.timestamp);
            attr.blksize = 4096;
            attr.blocks = Math.ceil(attr.size / attr.blksize);
            return attr;
          },
          setattr: function(node, attr) {
            if (attr.mode !== void 0) {
              node.mode = attr.mode;
            }
            if (attr.timestamp !== void 0) {
              node.timestamp = attr.timestamp;
            }
            if (attr.size !== void 0) {
              MEMFS.resizeFileStorage(node, attr.size);
            }
          },
          lookup: function(parent, name) {
            throw FS.genericErrors[44];
          },
          mknod: function(parent, name, mode, dev) {
            return MEMFS.createNode(parent, name, mode, dev);
          },
          rename: function(old_node, new_dir, new_name) {
            if (FS.isDir(old_node.mode)) {
              var new_node;
              try {
                new_node = FS.lookupNode(new_dir, new_name);
              } catch (e) {
              }
              if (new_node) {
                for (var i in new_node.contents) {
                  throw new FS.ErrnoError(55);
                }
              }
            }
            delete old_node.parent.contents[old_node.name];
            old_node.parent.timestamp = Date.now();
            old_node.name = new_name;
            new_dir.contents[new_name] = old_node;
            new_dir.timestamp = old_node.parent.timestamp;
            old_node.parent = new_dir;
          },
          unlink: function(parent, name) {
            delete parent.contents[name];
            parent.timestamp = Date.now();
          },
          rmdir: function(parent, name) {
            var node = FS.lookupNode(parent, name);
            for (var i in node.contents) {
              throw new FS.ErrnoError(55);
            }
            delete parent.contents[name];
            parent.timestamp = Date.now();
          },
          readdir: function(node) {
            var entries = [".", ".."];
            for (var key2 in node.contents) {
              if (!node.contents.hasOwnProperty(key2)) {
                continue;
              }
              entries.push(key2);
            }
            return entries;
          },
          symlink: function(parent, newname, oldpath) {
            var node = MEMFS.createNode(parent, newname, 511 | 40960, 0);
            node.link = oldpath;
            return node;
          },
          readlink: function(node) {
            if (!FS.isLink(node.mode)) {
              throw new FS.ErrnoError(28);
            }
            return node.link;
          }
        },
        stream_ops: {
          read: function(stream, buffer2, offset, length, position) {
            var contents = stream.node.contents;
            if (position >= stream.node.usedBytes)
              return 0;
            var size = Math.min(stream.node.usedBytes - position, length);
            if (size > 8 && contents.subarray) {
              buffer2.set(contents.subarray(position, position + size), offset);
            } else {
              for (var i = 0; i < size; i++)
                buffer2[offset + i] = contents[position + i];
            }
            return size;
          },
          write: function(stream, buffer2, offset, length, position, canOwn) {
            if (buffer2.buffer === HEAP8.buffer) {
              canOwn = false;
            }
            if (!length)
              return 0;
            var node = stream.node;
            node.timestamp = Date.now();
            if (buffer2.subarray && (!node.contents || node.contents.subarray)) {
              if (canOwn) {
                node.contents = buffer2.subarray(offset, offset + length);
                node.usedBytes = length;
                return length;
              } else if (node.usedBytes === 0 && position === 0) {
                node.contents = buffer2.slice(offset, offset + length);
                node.usedBytes = length;
                return length;
              } else if (position + length <= node.usedBytes) {
                node.contents.set(buffer2.subarray(offset, offset + length), position);
                return length;
              }
            }
            MEMFS.expandFileStorage(node, position + length);
            if (node.contents.subarray && buffer2.subarray) {
              node.contents.set(buffer2.subarray(offset, offset + length), position);
            } else {
              for (var i = 0; i < length; i++) {
                node.contents[position + i] = buffer2[offset + i];
              }
            }
            node.usedBytes = Math.max(node.usedBytes, position + length);
            return length;
          },
          llseek: function(stream, offset, whence) {
            var position = offset;
            if (whence === 1) {
              position += stream.position;
            } else if (whence === 2) {
              if (FS.isFile(stream.node.mode)) {
                position += stream.node.usedBytes;
              }
            }
            if (position < 0) {
              throw new FS.ErrnoError(28);
            }
            return position;
          },
          allocate: function(stream, offset, length) {
            MEMFS.expandFileStorage(stream.node, offset + length);
            stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
          },
          mmap: function(stream, address, length, position, prot, flags) {
            if (address !== 0) {
              throw new FS.ErrnoError(28);
            }
            if (!FS.isFile(stream.node.mode)) {
              throw new FS.ErrnoError(43);
            }
            var ptr;
            var allocated;
            var contents = stream.node.contents;
            if (!(flags & 2) && contents.buffer === buffer) {
              allocated = false;
              ptr = contents.byteOffset;
            } else {
              if (position > 0 || position + length < contents.length) {
                if (contents.subarray) {
                  contents = contents.subarray(position, position + length);
                } else {
                  contents = Array.prototype.slice.call(contents, position, position + length);
                }
              }
              allocated = true;
              ptr = mmapAlloc(length);
              if (!ptr) {
                throw new FS.ErrnoError(48);
              }
              HEAP8.set(contents, ptr);
            }
            return {ptr, allocated};
          },
          msync: function(stream, buffer2, offset, length, mmapFlags) {
            if (!FS.isFile(stream.node.mode)) {
              throw new FS.ErrnoError(43);
            }
            if (mmapFlags & 2) {
              return 0;
            }
            var bytesWritten = MEMFS.stream_ops.write(stream, buffer2, 0, length, offset, false);
            return 0;
          }
        }
      };
      var ERRNO_CODES = {
        EPERM: 63,
        ENOENT: 44,
        ESRCH: 71,
        EINTR: 27,
        EIO: 29,
        ENXIO: 60,
        E2BIG: 1,
        ENOEXEC: 45,
        EBADF: 8,
        ECHILD: 12,
        EAGAIN: 6,
        EWOULDBLOCK: 6,
        ENOMEM: 48,
        EACCES: 2,
        EFAULT: 21,
        ENOTBLK: 105,
        EBUSY: 10,
        EEXIST: 20,
        EXDEV: 75,
        ENODEV: 43,
        ENOTDIR: 54,
        EISDIR: 31,
        EINVAL: 28,
        ENFILE: 41,
        EMFILE: 33,
        ENOTTY: 59,
        ETXTBSY: 74,
        EFBIG: 22,
        ENOSPC: 51,
        ESPIPE: 70,
        EROFS: 69,
        EMLINK: 34,
        EPIPE: 64,
        EDOM: 18,
        ERANGE: 68,
        ENOMSG: 49,
        EIDRM: 24,
        ECHRNG: 106,
        EL2NSYNC: 156,
        EL3HLT: 107,
        EL3RST: 108,
        ELNRNG: 109,
        EUNATCH: 110,
        ENOCSI: 111,
        EL2HLT: 112,
        EDEADLK: 16,
        ENOLCK: 46,
        EBADE: 113,
        EBADR: 114,
        EXFULL: 115,
        ENOANO: 104,
        EBADRQC: 103,
        EBADSLT: 102,
        EDEADLOCK: 16,
        EBFONT: 101,
        ENOSTR: 100,
        ENODATA: 116,
        ETIME: 117,
        ENOSR: 118,
        ENONET: 119,
        ENOPKG: 120,
        EREMOTE: 121,
        ENOLINK: 47,
        EADV: 122,
        ESRMNT: 123,
        ECOMM: 124,
        EPROTO: 65,
        EMULTIHOP: 36,
        EDOTDOT: 125,
        EBADMSG: 9,
        ENOTUNIQ: 126,
        EBADFD: 127,
        EREMCHG: 128,
        ELIBACC: 129,
        ELIBBAD: 130,
        ELIBSCN: 131,
        ELIBMAX: 132,
        ELIBEXEC: 133,
        ENOSYS: 52,
        ENOTEMPTY: 55,
        ENAMETOOLONG: 37,
        ELOOP: 32,
        EOPNOTSUPP: 138,
        EPFNOSUPPORT: 139,
        ECONNRESET: 15,
        ENOBUFS: 42,
        EAFNOSUPPORT: 5,
        EPROTOTYPE: 67,
        ENOTSOCK: 57,
        ENOPROTOOPT: 50,
        ESHUTDOWN: 140,
        ECONNREFUSED: 14,
        EADDRINUSE: 3,
        ECONNABORTED: 13,
        ENETUNREACH: 40,
        ENETDOWN: 38,
        ETIMEDOUT: 73,
        EHOSTDOWN: 142,
        EHOSTUNREACH: 23,
        EINPROGRESS: 26,
        EALREADY: 7,
        EDESTADDRREQ: 17,
        EMSGSIZE: 35,
        EPROTONOSUPPORT: 66,
        ESOCKTNOSUPPORT: 137,
        EADDRNOTAVAIL: 4,
        ENETRESET: 39,
        EISCONN: 30,
        ENOTCONN: 53,
        ETOOMANYREFS: 141,
        EUSERS: 136,
        EDQUOT: 19,
        ESTALE: 72,
        ENOTSUP: 138,
        ENOMEDIUM: 148,
        EILSEQ: 25,
        EOVERFLOW: 61,
        ECANCELED: 11,
        ENOTRECOVERABLE: 56,
        EOWNERDEAD: 62,
        ESTRPIPE: 135
      };
      var NODEFS = {
        isWindows: false,
        staticInit: function() {
          NODEFS.isWindows = !!process.platform.match(/^win/);
          var flags = {fs: fs8.constants};
          if (flags["fs"]) {
            flags = flags["fs"];
          }
          NODEFS.flagsForNodeMap = {
            1024: flags["O_APPEND"],
            64: flags["O_CREAT"],
            128: flags["O_EXCL"],
            256: flags["O_NOCTTY"],
            0: flags["O_RDONLY"],
            2: flags["O_RDWR"],
            4096: flags["O_SYNC"],
            512: flags["O_TRUNC"],
            1: flags["O_WRONLY"]
          };
        },
        bufferFrom: function(arrayBuffer) {
          return Buffer["alloc"] ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
        },
        convertNodeCode: function(e) {
          var code = e.code;
          return ERRNO_CODES[code];
        },
        mount: function(mount) {
          return NODEFS.createNode(null, "/", NODEFS.getMode(mount.opts.root), 0);
        },
        createNode: function(parent, name, mode, dev) {
          if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
            throw new FS.ErrnoError(28);
          }
          var node = FS.createNode(parent, name, mode);
          node.node_ops = NODEFS.node_ops;
          node.stream_ops = NODEFS.stream_ops;
          return node;
        },
        getMode: function(path3) {
          var stat;
          try {
            stat = fs8.lstatSync(path3);
            if (NODEFS.isWindows) {
              stat.mode = stat.mode | (stat.mode & 292) >> 2;
            }
          } catch (e) {
            if (!e.code)
              throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
          return stat.mode;
        },
        realPath: function(node) {
          var parts = [];
          while (node.parent !== node) {
            parts.push(node.name);
            node = node.parent;
          }
          parts.push(node.mount.opts.root);
          parts.reverse();
          return PATH.join.apply(null, parts);
        },
        flagsForNode: function(flags) {
          flags &= ~2097152;
          flags &= ~2048;
          flags &= ~32768;
          flags &= ~524288;
          var newFlags = 0;
          for (var k in NODEFS.flagsForNodeMap) {
            if (flags & k) {
              newFlags |= NODEFS.flagsForNodeMap[k];
              flags ^= k;
            }
          }
          if (!flags) {
            return newFlags;
          } else {
            throw new FS.ErrnoError(28);
          }
        },
        node_ops: {
          getattr: function(node) {
            var path3 = NODEFS.realPath(node);
            var stat;
            try {
              stat = fs8.lstatSync(path3);
            } catch (e) {
              if (!e.code)
                throw e;
              throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
            }
            if (NODEFS.isWindows && !stat.blksize) {
              stat.blksize = 4096;
            }
            if (NODEFS.isWindows && !stat.blocks) {
              stat.blocks = (stat.size + stat.blksize - 1) / stat.blksize | 0;
            }
            return {
              dev: stat.dev,
              ino: stat.ino,
              mode: stat.mode,
              nlink: stat.nlink,
              uid: stat.uid,
              gid: stat.gid,
              rdev: stat.rdev,
              size: stat.size,
              atime: stat.atime,
              mtime: stat.mtime,
              ctime: stat.ctime,
              blksize: stat.blksize,
              blocks: stat.blocks
            };
          },
          setattr: function(node, attr) {
            var path3 = NODEFS.realPath(node);
            try {
              if (attr.mode !== void 0) {
                fs8.chmodSync(path3, attr.mode);
                node.mode = attr.mode;
              }
              if (attr.timestamp !== void 0) {
                var date = new Date(attr.timestamp);
                fs8.utimesSync(path3, date, date);
              }
              if (attr.size !== void 0) {
                fs8.truncateSync(path3, attr.size);
              }
            } catch (e) {
              if (!e.code)
                throw e;
              throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
            }
          },
          lookup: function(parent, name) {
            var path3 = PATH.join2(NODEFS.realPath(parent), name);
            var mode = NODEFS.getMode(path3);
            return NODEFS.createNode(parent, name, mode);
          },
          mknod: function(parent, name, mode, dev) {
            var node = NODEFS.createNode(parent, name, mode, dev);
            var path3 = NODEFS.realPath(node);
            try {
              if (FS.isDir(node.mode)) {
                fs8.mkdirSync(path3, node.mode);
              } else {
                fs8.writeFileSync(path3, "", {mode: node.mode});
              }
            } catch (e) {
              if (!e.code)
                throw e;
              throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
            }
            return node;
          },
          rename: function(oldNode, newDir, newName) {
            var oldPath = NODEFS.realPath(oldNode);
            var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
            try {
              fs8.renameSync(oldPath, newPath);
            } catch (e) {
              if (!e.code)
                throw e;
              throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
            }
            oldNode.name = newName;
          },
          unlink: function(parent, name) {
            var path3 = PATH.join2(NODEFS.realPath(parent), name);
            try {
              fs8.unlinkSync(path3);
            } catch (e) {
              if (!e.code)
                throw e;
              throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
            }
          },
          rmdir: function(parent, name) {
            var path3 = PATH.join2(NODEFS.realPath(parent), name);
            try {
              fs8.rmdirSync(path3);
            } catch (e) {
              if (!e.code)
                throw e;
              throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
            }
          },
          readdir: function(node) {
            var path3 = NODEFS.realPath(node);
            try {
              return fs8.readdirSync(path3);
            } catch (e) {
              if (!e.code)
                throw e;
              throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
            }
          },
          symlink: function(parent, newName, oldPath) {
            var newPath = PATH.join2(NODEFS.realPath(parent), newName);
            try {
              fs8.symlinkSync(oldPath, newPath);
            } catch (e) {
              if (!e.code)
                throw e;
              throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
            }
          },
          readlink: function(node) {
            var path3 = NODEFS.realPath(node);
            try {
              path3 = fs8.readlinkSync(path3);
              path3 = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path3);
              return path3;
            } catch (e) {
              if (!e.code)
                throw e;
              throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
            }
          }
        },
        stream_ops: {
          open: function(stream) {
            var path3 = NODEFS.realPath(stream.node);
            try {
              if (FS.isFile(stream.node.mode)) {
                stream.nfd = fs8.openSync(path3, NODEFS.flagsForNode(stream.flags));
              }
            } catch (e) {
              if (!e.code)
                throw e;
              throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
            }
          },
          close: function(stream) {
            try {
              if (FS.isFile(stream.node.mode) && stream.nfd) {
                fs8.closeSync(stream.nfd);
              }
            } catch (e) {
              if (!e.code)
                throw e;
              throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
            }
          },
          read: function(stream, buffer2, offset, length, position) {
            if (length === 0)
              return 0;
            try {
              return fs8.readSync(stream.nfd, NODEFS.bufferFrom(buffer2.buffer), offset, length, position);
            } catch (e) {
              throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
            }
          },
          write: function(stream, buffer2, offset, length, position) {
            try {
              return fs8.writeSync(stream.nfd, NODEFS.bufferFrom(buffer2.buffer), offset, length, position);
            } catch (e) {
              throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
            }
          },
          llseek: function(stream, offset, whence) {
            var position = offset;
            if (whence === 1) {
              position += stream.position;
            } else if (whence === 2) {
              if (FS.isFile(stream.node.mode)) {
                try {
                  var stat = fs8.fstatSync(stream.nfd);
                  position += stat.size;
                } catch (e) {
                  throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
                }
              }
            }
            if (position < 0) {
              throw new FS.ErrnoError(28);
            }
            return position;
          },
          mmap: function(stream, address, length, position, prot, flags) {
            if (address !== 0) {
              throw new FS.ErrnoError(28);
            }
            if (!FS.isFile(stream.node.mode)) {
              throw new FS.ErrnoError(43);
            }
            var ptr = mmapAlloc(length);
            NODEFS.stream_ops.read(stream, HEAP8, ptr, length, position);
            return {ptr, allocated: true};
          },
          msync: function(stream, buffer2, offset, length, mmapFlags) {
            if (!FS.isFile(stream.node.mode)) {
              throw new FS.ErrnoError(43);
            }
            if (mmapFlags & 2) {
              return 0;
            }
            var bytesWritten = NODEFS.stream_ops.write(stream, buffer2, 0, length, offset, false);
            return 0;
          }
        }
      };
      var NODERAWFS = {
        lookupPath: function(path3) {
          return {path: path3, node: {mode: NODEFS.getMode(path3)}};
        },
        createStandardStreams: function() {
          FS.streams[0] = {
            fd: 0,
            nfd: 0,
            position: 0,
            path: "",
            flags: 0,
            tty: true,
            seekable: false
          };
          for (var i = 1; i < 3; i++) {
            FS.streams[i] = {
              fd: i,
              nfd: i,
              position: 0,
              path: "",
              flags: 577,
              tty: true,
              seekable: false
            };
          }
        },
        cwd: function() {
          return process.cwd();
        },
        chdir: function() {
          process.chdir.apply(void 0, arguments);
        },
        mknod: function(path3, mode) {
          if (FS.isDir(path3)) {
            fs8.mkdirSync(path3, mode);
          } else {
            fs8.writeFileSync(path3, "", {mode});
          }
        },
        mkdir: function() {
          fs8.mkdirSync.apply(void 0, arguments);
        },
        symlink: function() {
          fs8.symlinkSync.apply(void 0, arguments);
        },
        rename: function() {
          fs8.renameSync.apply(void 0, arguments);
        },
        rmdir: function() {
          fs8.rmdirSync.apply(void 0, arguments);
        },
        readdir: function() {
          fs8.readdirSync.apply(void 0, arguments);
        },
        unlink: function() {
          fs8.unlinkSync.apply(void 0, arguments);
        },
        readlink: function() {
          return fs8.readlinkSync.apply(void 0, arguments);
        },
        stat: function() {
          return fs8.statSync.apply(void 0, arguments);
        },
        lstat: function() {
          return fs8.lstatSync.apply(void 0, arguments);
        },
        chmod: function() {
          fs8.chmodSync.apply(void 0, arguments);
        },
        fchmod: function() {
          fs8.fchmodSync.apply(void 0, arguments);
        },
        chown: function() {
          fs8.chownSync.apply(void 0, arguments);
        },
        fchown: function() {
          fs8.fchownSync.apply(void 0, arguments);
        },
        truncate: function() {
          fs8.truncateSync.apply(void 0, arguments);
        },
        ftruncate: function(fd, len) {
          if (len < 0) {
            throw new FS.ErrnoError(28);
          }
          fs8.ftruncateSync.apply(void 0, arguments);
        },
        utime: function() {
          fs8.utimesSync.apply(void 0, arguments);
        },
        open: function(path3, flags, mode, suggestFD) {
          if (typeof flags === "string") {
            flags = VFS.modeStringToFlags(flags);
          }
          var nfd = fs8.openSync(path3, NODEFS.flagsForNode(flags), mode);
          var fd = suggestFD != null ? suggestFD : FS.nextfd(nfd);
          var stream = {
            fd,
            nfd,
            position: 0,
            path: path3,
            flags,
            seekable: true
          };
          FS.streams[fd] = stream;
          return stream;
        },
        close: function(stream) {
          if (!stream.stream_ops) {
            fs8.closeSync(stream.nfd);
          }
          FS.closeStream(stream.fd);
        },
        llseek: function(stream, offset, whence) {
          if (stream.stream_ops) {
            return VFS.llseek(stream, offset, whence);
          }
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            position += fs8.fstatSync(stream.nfd).size;
          } else if (whence !== 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.position = position;
          return position;
        },
        read: function(stream, buffer2, offset, length, position) {
          if (stream.stream_ops) {
            return VFS.read(stream, buffer2, offset, length, position);
          }
          var seeking = typeof position !== "undefined";
          if (!seeking && stream.seekable)
            position = stream.position;
          var bytesRead = fs8.readSync(stream.nfd, NODEFS.bufferFrom(buffer2.buffer), offset, length, position);
          if (!seeking)
            stream.position += bytesRead;
          return bytesRead;
        },
        write: function(stream, buffer2, offset, length, position) {
          if (stream.stream_ops) {
            return VFS.write(stream, buffer2, offset, length, position);
          }
          if (stream.flags & +"1024") {
            FS.llseek(stream, 0, +"2");
          }
          var seeking = typeof position !== "undefined";
          if (!seeking && stream.seekable)
            position = stream.position;
          var bytesWritten = fs8.writeSync(stream.nfd, NODEFS.bufferFrom(buffer2.buffer), offset, length, position);
          if (!seeking)
            stream.position += bytesWritten;
          return bytesWritten;
        },
        allocate: function() {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        },
        mmap: function(stream, address, length, position, prot, flags) {
          if (stream.stream_ops) {
            return VFS.mmap(stream, address, length, position, prot, flags);
          }
          if (address !== 0) {
            throw new FS.ErrnoError(28);
          }
          var ptr = mmapAlloc(length);
          FS.read(stream, HEAP8, ptr, length, position);
          return {ptr, allocated: true};
        },
        msync: function(stream, buffer2, offset, length, mmapFlags) {
          if (stream.stream_ops) {
            return VFS.msync(stream, buffer2, offset, length, mmapFlags);
          }
          if (mmapFlags & 2) {
            return 0;
          }
          FS.write(stream, buffer2, 0, length, offset);
          return 0;
        },
        munmap: function() {
          return 0;
        },
        ioctl: function() {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
      };
      var FS = {
        root: null,
        mounts: [],
        devices: {},
        streams: [],
        nextInode: 1,
        nameTable: null,
        currentPath: "/",
        initialized: false,
        ignorePermissions: true,
        trackingDelegate: {},
        tracking: {openFlags: {READ: 1, WRITE: 2}},
        ErrnoError: null,
        genericErrors: {},
        filesystems: null,
        syncFSRequests: 0,
        lookupPath: function(path3, opts) {
          path3 = PATH_FS.resolve(FS.cwd(), path3);
          opts = opts || {};
          if (!path3)
            return {path: "", node: null};
          var defaults = {follow_mount: true, recurse_count: 0};
          for (var key2 in defaults) {
            if (opts[key2] === void 0) {
              opts[key2] = defaults[key2];
            }
          }
          if (opts.recurse_count > 8) {
            throw new FS.ErrnoError(32);
          }
          var parts = PATH.normalizeArray(path3.split("/").filter(function(p) {
            return !!p;
          }), false);
          var current = FS.root;
          var current_path = "/";
          for (var i = 0; i < parts.length; i++) {
            var islast = i === parts.length - 1;
            if (islast && opts.parent) {
              break;
            }
            current = FS.lookupNode(current, parts[i]);
            current_path = PATH.join2(current_path, parts[i]);
            if (FS.isMountpoint(current)) {
              if (!islast || islast && opts.follow_mount) {
                current = current.mounted.root;
              }
            }
            if (!islast || opts.follow) {
              var count = 0;
              while (FS.isLink(current.mode)) {
                var link = FS.readlink(current_path);
                current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
                var lookup = FS.lookupPath(current_path, {
                  recurse_count: opts.recurse_count
                });
                current = lookup.node;
                if (count++ > 40) {
                  throw new FS.ErrnoError(32);
                }
              }
            }
          }
          return {path: current_path, node: current};
        },
        getPath: function(node) {
          var path3;
          while (true) {
            if (FS.isRoot(node)) {
              var mount = node.mount.mountpoint;
              if (!path3)
                return mount;
              return mount[mount.length - 1] !== "/" ? mount + "/" + path3 : mount + path3;
            }
            path3 = path3 ? node.name + "/" + path3 : node.name;
            node = node.parent;
          }
        },
        hashName: function(parentid, name) {
          var hash = 0;
          for (var i = 0; i < name.length; i++) {
            hash = (hash << 5) - hash + name.charCodeAt(i) | 0;
          }
          return (parentid + hash >>> 0) % FS.nameTable.length;
        },
        hashAddNode: function(node) {
          var hash = FS.hashName(node.parent.id, node.name);
          node.name_next = FS.nameTable[hash];
          FS.nameTable[hash] = node;
        },
        hashRemoveNode: function(node) {
          var hash = FS.hashName(node.parent.id, node.name);
          if (FS.nameTable[hash] === node) {
            FS.nameTable[hash] = node.name_next;
          } else {
            var current = FS.nameTable[hash];
            while (current) {
              if (current.name_next === node) {
                current.name_next = node.name_next;
                break;
              }
              current = current.name_next;
            }
          }
        },
        lookupNode: function(parent, name) {
          var errCode = FS.mayLookup(parent);
          if (errCode) {
            throw new FS.ErrnoError(errCode, parent);
          }
          var hash = FS.hashName(parent.id, name);
          for (var node = FS.nameTable[hash]; node; node = node.name_next) {
            var nodeName = node.name;
            if (node.parent.id === parent.id && nodeName === name) {
              return node;
            }
          }
          return FS.lookup(parent, name);
        },
        createNode: function(parent, name, mode, rdev) {
          var node = new FS.FSNode(parent, name, mode, rdev);
          FS.hashAddNode(node);
          return node;
        },
        destroyNode: function(node) {
          FS.hashRemoveNode(node);
        },
        isRoot: function(node) {
          return node === node.parent;
        },
        isMountpoint: function(node) {
          return !!node.mounted;
        },
        isFile: function(mode) {
          return (mode & 61440) === 32768;
        },
        isDir: function(mode) {
          return (mode & 61440) === 16384;
        },
        isLink: function(mode) {
          return (mode & 61440) === 40960;
        },
        isChrdev: function(mode) {
          return (mode & 61440) === 8192;
        },
        isBlkdev: function(mode) {
          return (mode & 61440) === 24576;
        },
        isFIFO: function(mode) {
          return (mode & 61440) === 4096;
        },
        isSocket: function(mode) {
          return (mode & 49152) === 49152;
        },
        flagModes: {r: 0, "r+": 2, w: 577, "w+": 578, a: 1089, "a+": 1090},
        modeStringToFlags: function(str) {
          var flags = FS.flagModes[str];
          if (typeof flags === "undefined") {
            throw new Error("Unknown file open mode: " + str);
          }
          return flags;
        },
        flagsToPermissionString: function(flag) {
          var perms = ["r", "w", "rw"][flag & 3];
          if (flag & 512) {
            perms += "w";
          }
          return perms;
        },
        nodePermissions: function(node, perms) {
          if (FS.ignorePermissions) {
            return 0;
          }
          if (perms.includes("r") && !(node.mode & 292)) {
            return 2;
          } else if (perms.includes("w") && !(node.mode & 146)) {
            return 2;
          } else if (perms.includes("x") && !(node.mode & 73)) {
            return 2;
          }
          return 0;
        },
        mayLookup: function(dir) {
          var errCode = FS.nodePermissions(dir, "x");
          if (errCode)
            return errCode;
          if (!dir.node_ops.lookup)
            return 2;
          return 0;
        },
        mayCreate: function(dir, name) {
          try {
            var node = FS.lookupNode(dir, name);
            return 20;
          } catch (e) {
          }
          return FS.nodePermissions(dir, "wx");
        },
        mayDelete: function(dir, name, isdir) {
          var node;
          try {
            node = FS.lookupNode(dir, name);
          } catch (e) {
            return e.errno;
          }
          var errCode = FS.nodePermissions(dir, "wx");
          if (errCode) {
            return errCode;
          }
          if (isdir) {
            if (!FS.isDir(node.mode)) {
              return 54;
            }
            if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
              return 10;
            }
          } else {
            if (FS.isDir(node.mode)) {
              return 31;
            }
          }
          return 0;
        },
        mayOpen: function(node, flags) {
          if (!node) {
            return 44;
          }
          if (FS.isLink(node.mode)) {
            return 32;
          } else if (FS.isDir(node.mode)) {
            if (FS.flagsToPermissionString(flags) !== "r" || flags & 512) {
              return 31;
            }
          }
          return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
        },
        MAX_OPEN_FDS: 4096,
        nextfd: function(fd_start, fd_end) {
          fd_start = fd_start || 0;
          fd_end = fd_end || FS.MAX_OPEN_FDS;
          for (var fd = fd_start; fd <= fd_end; fd++) {
            if (!FS.streams[fd]) {
              return fd;
            }
          }
          throw new FS.ErrnoError(33);
        },
        getStream: function(fd) {
          return FS.streams[fd];
        },
        createStream: function(stream, fd_start, fd_end) {
          if (!FS.FSStream) {
            FS.FSStream = function() {
            };
            FS.FSStream.prototype = {
              object: {
                get: function() {
                  return this.node;
                },
                set: function(val) {
                  this.node = val;
                }
              },
              isRead: {
                get: function() {
                  return (this.flags & 2097155) !== 1;
                }
              },
              isWrite: {
                get: function() {
                  return (this.flags & 2097155) !== 0;
                }
              },
              isAppend: {
                get: function() {
                  return this.flags & 1024;
                }
              }
            };
          }
          var newStream = new FS.FSStream();
          for (var p in stream) {
            newStream[p] = stream[p];
          }
          stream = newStream;
          var fd = FS.nextfd(fd_start, fd_end);
          stream.fd = fd;
          FS.streams[fd] = stream;
          return stream;
        },
        closeStream: function(fd) {
          FS.streams[fd] = null;
        },
        chrdev_stream_ops: {
          open: function(stream) {
            var device = FS.getDevice(stream.node.rdev);
            stream.stream_ops = device.stream_ops;
            if (stream.stream_ops.open) {
              stream.stream_ops.open(stream);
            }
          },
          llseek: function() {
            throw new FS.ErrnoError(70);
          }
        },
        major: function(dev) {
          return dev >> 8;
        },
        minor: function(dev) {
          return dev & 255;
        },
        makedev: function(ma, mi) {
          return ma << 8 | mi;
        },
        registerDevice: function(dev, ops) {
          FS.devices[dev] = {stream_ops: ops};
        },
        getDevice: function(dev) {
          return FS.devices[dev];
        },
        getMounts: function(mount) {
          var mounts = [];
          var check = [mount];
          while (check.length) {
            var m = check.pop();
            mounts.push(m);
            check.push.apply(check, m.mounts);
          }
          return mounts;
        },
        syncfs: function(populate, callback) {
          if (typeof populate === "function") {
            callback = populate;
            populate = false;
          }
          FS.syncFSRequests++;
          if (FS.syncFSRequests > 1) {
            err("warning: " + FS.syncFSRequests + " FS.syncfs operations in flight at once, probably just doing extra work");
          }
          var mounts = FS.getMounts(FS.root.mount);
          var completed = 0;
          function doCallback(errCode) {
            FS.syncFSRequests--;
            return callback(errCode);
          }
          function done(errCode) {
            if (errCode) {
              if (!done.errored) {
                done.errored = true;
                return doCallback(errCode);
              }
              return;
            }
            if (++completed >= mounts.length) {
              doCallback(null);
            }
          }
          mounts.forEach(function(mount) {
            if (!mount.type.syncfs) {
              return done(null);
            }
            mount.type.syncfs(mount, populate, done);
          });
        },
        mount: function(type, opts, mountpoint) {
          var root = mountpoint === "/";
          var pseudo = !mountpoint;
          var node;
          if (root && FS.root) {
            throw new FS.ErrnoError(10);
          } else if (!root && !pseudo) {
            var lookup = FS.lookupPath(mountpoint, {follow_mount: false});
            mountpoint = lookup.path;
            node = lookup.node;
            if (FS.isMountpoint(node)) {
              throw new FS.ErrnoError(10);
            }
            if (!FS.isDir(node.mode)) {
              throw new FS.ErrnoError(54);
            }
          }
          var mount = {type, opts, mountpoint, mounts: []};
          var mountRoot = type.mount(mount);
          mountRoot.mount = mount;
          mount.root = mountRoot;
          if (root) {
            FS.root = mountRoot;
          } else if (node) {
            node.mounted = mount;
            if (node.mount) {
              node.mount.mounts.push(mount);
            }
          }
          return mountRoot;
        },
        unmount: function(mountpoint) {
          var lookup = FS.lookupPath(mountpoint, {follow_mount: false});
          if (!FS.isMountpoint(lookup.node)) {
            throw new FS.ErrnoError(28);
          }
          var node = lookup.node;
          var mount = node.mounted;
          var mounts = FS.getMounts(mount);
          Object.keys(FS.nameTable).forEach(function(hash) {
            var current = FS.nameTable[hash];
            while (current) {
              var next = current.name_next;
              if (mounts.includes(current.mount)) {
                FS.destroyNode(current);
              }
              current = next;
            }
          });
          node.mounted = null;
          var idx = node.mount.mounts.indexOf(mount);
          node.mount.mounts.splice(idx, 1);
        },
        lookup: function(parent, name) {
          return parent.node_ops.lookup(parent, name);
        },
        mknod: function(path3, mode, dev) {
          var lookup = FS.lookupPath(path3, {parent: true});
          var parent = lookup.node;
          var name = PATH.basename(path3);
          if (!name || name === "." || name === "..") {
            throw new FS.ErrnoError(28);
          }
          var errCode = FS.mayCreate(parent, name);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
          if (!parent.node_ops.mknod) {
            throw new FS.ErrnoError(63);
          }
          return parent.node_ops.mknod(parent, name, mode, dev);
        },
        create: function(path3, mode) {
          mode = mode !== void 0 ? mode : 438;
          mode &= 4095;
          mode |= 32768;
          return FS.mknod(path3, mode, 0);
        },
        mkdir: function(path3, mode) {
          mode = mode !== void 0 ? mode : 511;
          mode &= 511 | 512;
          mode |= 16384;
          return FS.mknod(path3, mode, 0);
        },
        mkdirTree: function(path3, mode) {
          var dirs = path3.split("/");
          var d = "";
          for (var i = 0; i < dirs.length; ++i) {
            if (!dirs[i])
              continue;
            d += "/" + dirs[i];
            try {
              FS.mkdir(d, mode);
            } catch (e) {
              if (e.errno != 20)
                throw e;
            }
          }
        },
        mkdev: function(path3, mode, dev) {
          if (typeof dev === "undefined") {
            dev = mode;
            mode = 438;
          }
          mode |= 8192;
          return FS.mknod(path3, mode, dev);
        },
        symlink: function(oldpath, newpath) {
          if (!PATH_FS.resolve(oldpath)) {
            throw new FS.ErrnoError(44);
          }
          var lookup = FS.lookupPath(newpath, {parent: true});
          var parent = lookup.node;
          if (!parent) {
            throw new FS.ErrnoError(44);
          }
          var newname = PATH.basename(newpath);
          var errCode = FS.mayCreate(parent, newname);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
          if (!parent.node_ops.symlink) {
            throw new FS.ErrnoError(63);
          }
          return parent.node_ops.symlink(parent, newname, oldpath);
        },
        rename: function(old_path, new_path) {
          var old_dirname = PATH.dirname(old_path);
          var new_dirname = PATH.dirname(new_path);
          var old_name = PATH.basename(old_path);
          var new_name = PATH.basename(new_path);
          var lookup, old_dir, new_dir;
          lookup = FS.lookupPath(old_path, {parent: true});
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, {parent: true});
          new_dir = lookup.node;
          if (!old_dir || !new_dir)
            throw new FS.ErrnoError(44);
          if (old_dir.mount !== new_dir.mount) {
            throw new FS.ErrnoError(75);
          }
          var old_node = FS.lookupNode(old_dir, old_name);
          var relative = PATH_FS.relative(old_path, new_dirname);
          if (relative.charAt(0) !== ".") {
            throw new FS.ErrnoError(28);
          }
          relative = PATH_FS.relative(new_path, old_dirname);
          if (relative.charAt(0) !== ".") {
            throw new FS.ErrnoError(55);
          }
          var new_node;
          try {
            new_node = FS.lookupNode(new_dir, new_name);
          } catch (e) {
          }
          if (old_node === new_node) {
            return;
          }
          var isdir = FS.isDir(old_node.mode);
          var errCode = FS.mayDelete(old_dir, old_name, isdir);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
          errCode = new_node ? FS.mayDelete(new_dir, new_name, isdir) : FS.mayCreate(new_dir, new_name);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
          if (!old_dir.node_ops.rename) {
            throw new FS.ErrnoError(63);
          }
          if (FS.isMountpoint(old_node) || new_node && FS.isMountpoint(new_node)) {
            throw new FS.ErrnoError(10);
          }
          if (new_dir !== old_dir) {
            errCode = FS.nodePermissions(old_dir, "w");
            if (errCode) {
              throw new FS.ErrnoError(errCode);
            }
          }
          try {
            if (FS.trackingDelegate["willMovePath"]) {
              FS.trackingDelegate["willMovePath"](old_path, new_path);
            }
          } catch (e) {
            err("FS.trackingDelegate['willMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
          }
          FS.hashRemoveNode(old_node);
          try {
            old_dir.node_ops.rename(old_node, new_dir, new_name);
          } catch (e) {
            throw e;
          } finally {
            FS.hashAddNode(old_node);
          }
          try {
            if (FS.trackingDelegate["onMovePath"])
              FS.trackingDelegate["onMovePath"](old_path, new_path);
          } catch (e) {
            err("FS.trackingDelegate['onMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
          }
        },
        rmdir: function(path3) {
          var lookup = FS.lookupPath(path3, {parent: true});
          var parent = lookup.node;
          var name = PATH.basename(path3);
          var node = FS.lookupNode(parent, name);
          var errCode = FS.mayDelete(parent, name, true);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
          if (!parent.node_ops.rmdir) {
            throw new FS.ErrnoError(63);
          }
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
          try {
            if (FS.trackingDelegate["willDeletePath"]) {
              FS.trackingDelegate["willDeletePath"](path3);
            }
          } catch (e) {
            err("FS.trackingDelegate['willDeletePath']('" + path3 + "') threw an exception: " + e.message);
          }
          parent.node_ops.rmdir(parent, name);
          FS.destroyNode(node);
          try {
            if (FS.trackingDelegate["onDeletePath"])
              FS.trackingDelegate["onDeletePath"](path3);
          } catch (e) {
            err("FS.trackingDelegate['onDeletePath']('" + path3 + "') threw an exception: " + e.message);
          }
        },
        readdir: function(path3) {
          var lookup = FS.lookupPath(path3, {follow: true});
          var node = lookup.node;
          if (!node.node_ops.readdir) {
            throw new FS.ErrnoError(54);
          }
          return node.node_ops.readdir(node);
        },
        unlink: function(path3) {
          var lookup = FS.lookupPath(path3, {parent: true});
          var parent = lookup.node;
          var name = PATH.basename(path3);
          var node = FS.lookupNode(parent, name);
          var errCode = FS.mayDelete(parent, name, false);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
          if (!parent.node_ops.unlink) {
            throw new FS.ErrnoError(63);
          }
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
          try {
            if (FS.trackingDelegate["willDeletePath"]) {
              FS.trackingDelegate["willDeletePath"](path3);
            }
          } catch (e) {
            err("FS.trackingDelegate['willDeletePath']('" + path3 + "') threw an exception: " + e.message);
          }
          parent.node_ops.unlink(parent, name);
          FS.destroyNode(node);
          try {
            if (FS.trackingDelegate["onDeletePath"])
              FS.trackingDelegate["onDeletePath"](path3);
          } catch (e) {
            err("FS.trackingDelegate['onDeletePath']('" + path3 + "') threw an exception: " + e.message);
          }
        },
        readlink: function(path3) {
          var lookup = FS.lookupPath(path3);
          var link = lookup.node;
          if (!link) {
            throw new FS.ErrnoError(44);
          }
          if (!link.node_ops.readlink) {
            throw new FS.ErrnoError(28);
          }
          return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
        },
        stat: function(path3, dontFollow) {
          var lookup = FS.lookupPath(path3, {follow: !dontFollow});
          var node = lookup.node;
          if (!node) {
            throw new FS.ErrnoError(44);
          }
          if (!node.node_ops.getattr) {
            throw new FS.ErrnoError(63);
          }
          return node.node_ops.getattr(node);
        },
        lstat: function(path3) {
          return FS.stat(path3, true);
        },
        chmod: function(path3, mode, dontFollow) {
          var node;
          if (typeof path3 === "string") {
            var lookup = FS.lookupPath(path3, {follow: !dontFollow});
            node = lookup.node;
          } else {
            node = path3;
          }
          if (!node.node_ops.setattr) {
            throw new FS.ErrnoError(63);
          }
          node.node_ops.setattr(node, {
            mode: mode & 4095 | node.mode & ~4095,
            timestamp: Date.now()
          });
        },
        lchmod: function(path3, mode) {
          FS.chmod(path3, mode, true);
        },
        fchmod: function(fd, mode) {
          var stream = FS.getStream(fd);
          if (!stream) {
            throw new FS.ErrnoError(8);
          }
          FS.chmod(stream.node, mode);
        },
        chown: function(path3, uid, gid, dontFollow) {
          var node;
          if (typeof path3 === "string") {
            var lookup = FS.lookupPath(path3, {follow: !dontFollow});
            node = lookup.node;
          } else {
            node = path3;
          }
          if (!node.node_ops.setattr) {
            throw new FS.ErrnoError(63);
          }
          node.node_ops.setattr(node, {timestamp: Date.now()});
        },
        lchown: function(path3, uid, gid) {
          FS.chown(path3, uid, gid, true);
        },
        fchown: function(fd, uid, gid) {
          var stream = FS.getStream(fd);
          if (!stream) {
            throw new FS.ErrnoError(8);
          }
          FS.chown(stream.node, uid, gid);
        },
        truncate: function(path3, len) {
          if (len < 0) {
            throw new FS.ErrnoError(28);
          }
          var node;
          if (typeof path3 === "string") {
            var lookup = FS.lookupPath(path3, {follow: true});
            node = lookup.node;
          } else {
            node = path3;
          }
          if (!node.node_ops.setattr) {
            throw new FS.ErrnoError(63);
          }
          if (FS.isDir(node.mode)) {
            throw new FS.ErrnoError(31);
          }
          if (!FS.isFile(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          var errCode = FS.nodePermissions(node, "w");
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
          node.node_ops.setattr(node, {size: len, timestamp: Date.now()});
        },
        ftruncate: function(fd, len) {
          var stream = FS.getStream(fd);
          if (!stream) {
            throw new FS.ErrnoError(8);
          }
          if ((stream.flags & 2097155) === 0) {
            throw new FS.ErrnoError(28);
          }
          FS.truncate(stream.node, len);
        },
        utime: function(path3, atime, mtime) {
          var lookup = FS.lookupPath(path3, {follow: true});
          var node = lookup.node;
          node.node_ops.setattr(node, {timestamp: Math.max(atime, mtime)});
        },
        open: function(path3, flags, mode, fd_start, fd_end) {
          if (path3 === "") {
            throw new FS.ErrnoError(44);
          }
          flags = typeof flags === "string" ? FS.modeStringToFlags(flags) : flags;
          mode = typeof mode === "undefined" ? 438 : mode;
          if (flags & 64) {
            mode = mode & 4095 | 32768;
          } else {
            mode = 0;
          }
          var node;
          if (typeof path3 === "object") {
            node = path3;
          } else {
            path3 = PATH.normalize(path3);
            try {
              var lookup = FS.lookupPath(path3, {follow: !(flags & 131072)});
              node = lookup.node;
            } catch (e) {
            }
          }
          var created = false;
          if (flags & 64) {
            if (node) {
              if (flags & 128) {
                throw new FS.ErrnoError(20);
              }
            } else {
              node = FS.mknod(path3, mode, 0);
              created = true;
            }
          }
          if (!node) {
            throw new FS.ErrnoError(44);
          }
          if (FS.isChrdev(node.mode)) {
            flags &= ~512;
          }
          if (flags & 65536 && !FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
          if (!created) {
            var errCode = FS.mayOpen(node, flags);
            if (errCode) {
              throw new FS.ErrnoError(errCode);
            }
          }
          if (flags & 512) {
            FS.truncate(node, 0);
          }
          flags &= ~(128 | 512 | 131072);
          var stream = FS.createStream({
            node,
            path: FS.getPath(node),
            flags,
            seekable: true,
            position: 0,
            stream_ops: node.stream_ops,
            ungotten: [],
            error: false
          }, fd_start, fd_end);
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
          if (Module3["logReadFiles"] && !(flags & 1)) {
            if (!FS.readFiles)
              FS.readFiles = {};
            if (!(path3 in FS.readFiles)) {
              FS.readFiles[path3] = 1;
              err("FS.trackingDelegate error on read file: " + path3);
            }
          }
          try {
            if (FS.trackingDelegate["onOpenFile"]) {
              var trackingFlags = 0;
              if ((flags & 2097155) !== 1) {
                trackingFlags |= FS.tracking.openFlags.READ;
              }
              if ((flags & 2097155) !== 0) {
                trackingFlags |= FS.tracking.openFlags.WRITE;
              }
              FS.trackingDelegate["onOpenFile"](path3, trackingFlags);
            }
          } catch (e) {
            err("FS.trackingDelegate['onOpenFile']('" + path3 + "', flags) threw an exception: " + e.message);
          }
          return stream;
        },
        close: function(stream) {
          if (FS.isClosed(stream)) {
            throw new FS.ErrnoError(8);
          }
          if (stream.getdents)
            stream.getdents = null;
          try {
            if (stream.stream_ops.close) {
              stream.stream_ops.close(stream);
            }
          } catch (e) {
            throw e;
          } finally {
            FS.closeStream(stream.fd);
          }
          stream.fd = null;
        },
        isClosed: function(stream) {
          return stream.fd === null;
        },
        llseek: function(stream, offset, whence) {
          if (FS.isClosed(stream)) {
            throw new FS.ErrnoError(8);
          }
          if (!stream.seekable || !stream.stream_ops.llseek) {
            throw new FS.ErrnoError(70);
          }
          if (whence != 0 && whence != 1 && whence != 2) {
            throw new FS.ErrnoError(28);
          }
          stream.position = stream.stream_ops.llseek(stream, offset, whence);
          stream.ungotten = [];
          return stream.position;
        },
        read: function(stream, buffer2, offset, length, position) {
          if (length < 0 || position < 0) {
            throw new FS.ErrnoError(28);
          }
          if (FS.isClosed(stream)) {
            throw new FS.ErrnoError(8);
          }
          if ((stream.flags & 2097155) === 1) {
            throw new FS.ErrnoError(8);
          }
          if (FS.isDir(stream.node.mode)) {
            throw new FS.ErrnoError(31);
          }
          if (!stream.stream_ops.read) {
            throw new FS.ErrnoError(28);
          }
          var seeking = typeof position !== "undefined";
          if (!seeking) {
            position = stream.position;
          } else if (!stream.seekable) {
            throw new FS.ErrnoError(70);
          }
          var bytesRead = stream.stream_ops.read(stream, buffer2, offset, length, position);
          if (!seeking)
            stream.position += bytesRead;
          return bytesRead;
        },
        write: function(stream, buffer2, offset, length, position, canOwn) {
          if (length < 0 || position < 0) {
            throw new FS.ErrnoError(28);
          }
          if (FS.isClosed(stream)) {
            throw new FS.ErrnoError(8);
          }
          if ((stream.flags & 2097155) === 0) {
            throw new FS.ErrnoError(8);
          }
          if (FS.isDir(stream.node.mode)) {
            throw new FS.ErrnoError(31);
          }
          if (!stream.stream_ops.write) {
            throw new FS.ErrnoError(28);
          }
          if (stream.seekable && stream.flags & 1024) {
            FS.llseek(stream, 0, 2);
          }
          var seeking = typeof position !== "undefined";
          if (!seeking) {
            position = stream.position;
          } else if (!stream.seekable) {
            throw new FS.ErrnoError(70);
          }
          var bytesWritten = stream.stream_ops.write(stream, buffer2, offset, length, position, canOwn);
          if (!seeking)
            stream.position += bytesWritten;
          try {
            if (stream.path && FS.trackingDelegate["onWriteToFile"])
              FS.trackingDelegate["onWriteToFile"](stream.path);
          } catch (e) {
            err("FS.trackingDelegate['onWriteToFile']('" + stream.path + "') threw an exception: " + e.message);
          }
          return bytesWritten;
        },
        allocate: function(stream, offset, length) {
          if (FS.isClosed(stream)) {
            throw new FS.ErrnoError(8);
          }
          if (offset < 0 || length <= 0) {
            throw new FS.ErrnoError(28);
          }
          if ((stream.flags & 2097155) === 0) {
            throw new FS.ErrnoError(8);
          }
          if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (!stream.stream_ops.allocate) {
            throw new FS.ErrnoError(138);
          }
          stream.stream_ops.allocate(stream, offset, length);
        },
        mmap: function(stream, address, length, position, prot, flags) {
          if ((prot & 2) !== 0 && (flags & 2) === 0 && (stream.flags & 2097155) !== 2) {
            throw new FS.ErrnoError(2);
          }
          if ((stream.flags & 2097155) === 1) {
            throw new FS.ErrnoError(2);
          }
          if (!stream.stream_ops.mmap) {
            throw new FS.ErrnoError(43);
          }
          return stream.stream_ops.mmap(stream, address, length, position, prot, flags);
        },
        msync: function(stream, buffer2, offset, length, mmapFlags) {
          if (!stream || !stream.stream_ops.msync) {
            return 0;
          }
          return stream.stream_ops.msync(stream, buffer2, offset, length, mmapFlags);
        },
        munmap: function(stream) {
          return 0;
        },
        ioctl: function(stream, cmd, arg) {
          if (!stream.stream_ops.ioctl) {
            throw new FS.ErrnoError(59);
          }
          return stream.stream_ops.ioctl(stream, cmd, arg);
        },
        readFile: function(path3, opts) {
          opts = opts || {};
          opts.flags = opts.flags || 0;
          opts.encoding = opts.encoding || "binary";
          if (opts.encoding !== "utf8" && opts.encoding !== "binary") {
            throw new Error('Invalid encoding type "' + opts.encoding + '"');
          }
          var ret;
          var stream = FS.open(path3, opts.flags);
          var stat = FS.stat(path3);
          var length = stat.size;
          var buf = new Uint8Array(length);
          FS.read(stream, buf, 0, length, 0);
          if (opts.encoding === "utf8") {
            ret = UTF8ArrayToString(buf, 0);
          } else if (opts.encoding === "binary") {
            ret = buf;
          }
          FS.close(stream);
          return ret;
        },
        writeFile: function(path3, data, opts) {
          opts = opts || {};
          opts.flags = opts.flags || 577;
          var stream = FS.open(path3, opts.flags, opts.mode);
          if (typeof data === "string") {
            var buf = new Uint8Array(lengthBytesUTF8(data) + 1);
            var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
            FS.write(stream, buf, 0, actualNumBytes, void 0, opts.canOwn);
          } else if (ArrayBuffer.isView(data)) {
            FS.write(stream, data, 0, data.byteLength, void 0, opts.canOwn);
          } else {
            throw new Error("Unsupported data type");
          }
          FS.close(stream);
        },
        cwd: function() {
          return FS.currentPath;
        },
        chdir: function(path3) {
          var lookup = FS.lookupPath(path3, {follow: true});
          if (lookup.node === null) {
            throw new FS.ErrnoError(44);
          }
          if (!FS.isDir(lookup.node.mode)) {
            throw new FS.ErrnoError(54);
          }
          var errCode = FS.nodePermissions(lookup.node, "x");
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
          FS.currentPath = lookup.path;
        },
        createDefaultDirectories: function() {
          FS.mkdir("/tmp");
          FS.mkdir("/home");
          FS.mkdir("/home/web_user");
        },
        createDefaultDevices: function() {
          FS.mkdir("/dev");
          FS.registerDevice(FS.makedev(1, 3), {
            read: function() {
              return 0;
            },
            write: function(stream, buffer2, offset, length, pos) {
              return length;
            }
          });
          FS.mkdev("/dev/null", FS.makedev(1, 3));
          TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
          TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
          FS.mkdev("/dev/tty", FS.makedev(5, 0));
          FS.mkdev("/dev/tty1", FS.makedev(6, 0));
          var random_device = getRandomDevice();
          FS.createDevice("/dev", "random", random_device);
          FS.createDevice("/dev", "urandom", random_device);
          FS.mkdir("/dev/shm");
          FS.mkdir("/dev/shm/tmp");
        },
        createSpecialDirectories: function() {
          FS.mkdir("/proc");
          var proc_self = FS.mkdir("/proc/self");
          FS.mkdir("/proc/self/fd");
          FS.mount({
            mount: function() {
              var node = FS.createNode(proc_self, "fd", 16384 | 511, 73);
              node.node_ops = {
                lookup: function(parent, name) {
                  var fd = +name;
                  var stream = FS.getStream(fd);
                  if (!stream)
                    throw new FS.ErrnoError(8);
                  var ret = {
                    parent: null,
                    mount: {mountpoint: "fake"},
                    node_ops: {
                      readlink: function() {
                        return stream.path;
                      }
                    }
                  };
                  ret.parent = ret;
                  return ret;
                }
              };
              return node;
            }
          }, {}, "/proc/self/fd");
        },
        createStandardStreams: function() {
          if (Module3["stdin"]) {
            FS.createDevice("/dev", "stdin", Module3["stdin"]);
          } else {
            FS.symlink("/dev/tty", "/dev/stdin");
          }
          if (Module3["stdout"]) {
            FS.createDevice("/dev", "stdout", null, Module3["stdout"]);
          } else {
            FS.symlink("/dev/tty", "/dev/stdout");
          }
          if (Module3["stderr"]) {
            FS.createDevice("/dev", "stderr", null, Module3["stderr"]);
          } else {
            FS.symlink("/dev/tty1", "/dev/stderr");
          }
          var stdin = FS.open("/dev/stdin", 0);
          var stdout = FS.open("/dev/stdout", 1);
          var stderr = FS.open("/dev/stderr", 1);
        },
        ensureErrnoError: function() {
          if (FS.ErrnoError)
            return;
          FS.ErrnoError = function ErrnoError(errno, node) {
            this.node = node;
            this.setErrno = function(errno2) {
              this.errno = errno2;
            };
            this.setErrno(errno);
            this.message = "FS error";
          };
          FS.ErrnoError.prototype = new Error();
          FS.ErrnoError.prototype.constructor = FS.ErrnoError;
          [44].forEach(function(code) {
            FS.genericErrors[code] = new FS.ErrnoError(code);
            FS.genericErrors[code].stack = "<generic error, no stack>";
          });
        },
        staticInit: function() {
          FS.ensureErrnoError();
          FS.nameTable = new Array(4096);
          FS.mount(MEMFS, {}, "/");
          FS.createDefaultDirectories();
          FS.createDefaultDevices();
          FS.createSpecialDirectories();
          FS.filesystems = {MEMFS, NODEFS};
        },
        init: function(input, output, error) {
          FS.init.initialized = true;
          FS.ensureErrnoError();
          Module3["stdin"] = input || Module3["stdin"];
          Module3["stdout"] = output || Module3["stdout"];
          Module3["stderr"] = error || Module3["stderr"];
          FS.createStandardStreams();
        },
        quit: function() {
          FS.init.initialized = false;
          var fflush = Module3["_fflush"];
          if (fflush)
            fflush(0);
          for (var i = 0; i < FS.streams.length; i++) {
            var stream = FS.streams[i];
            if (!stream) {
              continue;
            }
            FS.close(stream);
          }
        },
        getMode: function(canRead, canWrite) {
          var mode = 0;
          if (canRead)
            mode |= 292 | 73;
          if (canWrite)
            mode |= 146;
          return mode;
        },
        findObject: function(path3, dontResolveLastLink) {
          var ret = FS.analyzePath(path3, dontResolveLastLink);
          if (ret.exists) {
            return ret.object;
          } else {
            return null;
          }
        },
        analyzePath: function(path3, dontResolveLastLink) {
          try {
            var lookup = FS.lookupPath(path3, {follow: !dontResolveLastLink});
            path3 = lookup.path;
          } catch (e) {
          }
          var ret = {
            isRoot: false,
            exists: false,
            error: 0,
            name: null,
            path: null,
            object: null,
            parentExists: false,
            parentPath: null,
            parentObject: null
          };
          try {
            var lookup = FS.lookupPath(path3, {parent: true});
            ret.parentExists = true;
            ret.parentPath = lookup.path;
            ret.parentObject = lookup.node;
            ret.name = PATH.basename(path3);
            lookup = FS.lookupPath(path3, {follow: !dontResolveLastLink});
            ret.exists = true;
            ret.path = lookup.path;
            ret.object = lookup.node;
            ret.name = lookup.node.name;
            ret.isRoot = lookup.path === "/";
          } catch (e) {
            ret.error = e.errno;
          }
          return ret;
        },
        createPath: function(parent, path3, canRead, canWrite) {
          parent = typeof parent === "string" ? parent : FS.getPath(parent);
          var parts = path3.split("/").reverse();
          while (parts.length) {
            var part = parts.pop();
            if (!part)
              continue;
            var current = PATH.join2(parent, part);
            try {
              FS.mkdir(current);
            } catch (e) {
            }
            parent = current;
          }
          return current;
        },
        createFile: function(parent, name, properties, canRead, canWrite) {
          var path3 = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
          var mode = FS.getMode(canRead, canWrite);
          return FS.create(path3, mode);
        },
        createDataFile: function(parent, name, data, canRead, canWrite, canOwn) {
          var path3 = name ? PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name) : parent;
          var mode = FS.getMode(canRead, canWrite);
          var node = FS.create(path3, mode);
          if (data) {
            if (typeof data === "string") {
              var arr = new Array(data.length);
              for (var i = 0, len = data.length; i < len; ++i)
                arr[i] = data.charCodeAt(i);
              data = arr;
            }
            FS.chmod(node, mode | 146);
            var stream = FS.open(node, 577);
            FS.write(stream, data, 0, data.length, 0, canOwn);
            FS.close(stream);
            FS.chmod(node, mode);
          }
          return node;
        },
        createDevice: function(parent, name, input, output) {
          var path3 = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
          var mode = FS.getMode(!!input, !!output);
          if (!FS.createDevice.major)
            FS.createDevice.major = 64;
          var dev = FS.makedev(FS.createDevice.major++, 0);
          FS.registerDevice(dev, {
            open: function(stream) {
              stream.seekable = false;
            },
            close: function(stream) {
              if (output && output.buffer && output.buffer.length) {
                output(10);
              }
            },
            read: function(stream, buffer2, offset, length, pos) {
              var bytesRead = 0;
              for (var i = 0; i < length; i++) {
                var result;
                try {
                  result = input();
                } catch (e) {
                  throw new FS.ErrnoError(29);
                }
                if (result === void 0 && bytesRead === 0) {
                  throw new FS.ErrnoError(6);
                }
                if (result === null || result === void 0)
                  break;
                bytesRead++;
                buffer2[offset + i] = result;
              }
              if (bytesRead) {
                stream.node.timestamp = Date.now();
              }
              return bytesRead;
            },
            write: function(stream, buffer2, offset, length, pos) {
              for (var i = 0; i < length; i++) {
                try {
                  output(buffer2[offset + i]);
                } catch (e) {
                  throw new FS.ErrnoError(29);
                }
              }
              if (length) {
                stream.node.timestamp = Date.now();
              }
              return i;
            }
          });
          return FS.mkdev(path3, mode, dev);
        },
        forceLoadFile: function(obj) {
          if (obj.isDevice || obj.isFolder || obj.link || obj.contents)
            return true;
          if (typeof XMLHttpRequest !== "undefined") {
            throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
          } else if (read_) {
            try {
              obj.contents = intArrayFromString(read_(obj.url), true);
              obj.usedBytes = obj.contents.length;
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
          } else {
            throw new Error("Cannot load without read() or XMLHttpRequest.");
          }
        },
        createLazyFile: function(parent, name, url, canRead, canWrite) {
          function LazyUint8Array() {
            this.lengthKnown = false;
            this.chunks = [];
          }
          LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
            if (idx > this.length - 1 || idx < 0) {
              return void 0;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = idx / this.chunkSize | 0;
            return this.getter(chunkNum)[chunkOffset];
          };
          LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
            this.getter = getter;
          };
          LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
            var xhr = new XMLHttpRequest();
            xhr.open("HEAD", url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304))
              throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
            var chunkSize = 1024 * 1024;
            if (!hasByteServing)
              chunkSize = datalength;
            var doXHR = function(from, to) {
              if (from > to)
                throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
              if (to > datalength - 1)
                throw new Error("only " + datalength + " bytes available! programmer error!");
              var xhr2 = new XMLHttpRequest();
              xhr2.open("GET", url, false);
              if (datalength !== chunkSize)
                xhr2.setRequestHeader("Range", "bytes=" + from + "-" + to);
              if (typeof Uint8Array != "undefined")
                xhr2.responseType = "arraybuffer";
              if (xhr2.overrideMimeType) {
                xhr2.overrideMimeType("text/plain; charset=x-user-defined");
              }
              xhr2.send(null);
              if (!(xhr2.status >= 200 && xhr2.status < 300 || xhr2.status === 304))
                throw new Error("Couldn't load " + url + ". Status: " + xhr2.status);
              if (xhr2.response !== void 0) {
                return new Uint8Array(xhr2.response || []);
              } else {
                return intArrayFromString(xhr2.responseText || "", true);
              }
            };
            var lazyArray2 = this;
            lazyArray2.setDataGetter(function(chunkNum) {
              var start2 = chunkNum * chunkSize;
              var end = (chunkNum + 1) * chunkSize - 1;
              end = Math.min(end, datalength - 1);
              if (typeof lazyArray2.chunks[chunkNum] === "undefined") {
                lazyArray2.chunks[chunkNum] = doXHR(start2, end);
              }
              if (typeof lazyArray2.chunks[chunkNum] === "undefined")
                throw new Error("doXHR failed!");
              return lazyArray2.chunks[chunkNum];
            });
            if (usesGzip || !datalength) {
              chunkSize = datalength = 1;
              datalength = this.getter(0).length;
              chunkSize = datalength;
              out("LazyFiles on gzip forces download of the whole file when length is accessed");
            }
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
          };
          if (typeof XMLHttpRequest !== "undefined") {
            if (!ENVIRONMENT_IS_WORKER)
              throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
            var lazyArray = new LazyUint8Array();
            Object.defineProperties(lazyArray, {
              length: {
                get: function() {
                  if (!this.lengthKnown) {
                    this.cacheLength();
                  }
                  return this._length;
                }
              },
              chunkSize: {
                get: function() {
                  if (!this.lengthKnown) {
                    this.cacheLength();
                  }
                  return this._chunkSize;
                }
              }
            });
            var properties = {isDevice: false, contents: lazyArray};
          } else {
            var properties = {isDevice: false, url};
          }
          var node = FS.createFile(parent, name, properties, canRead, canWrite);
          if (properties.contents) {
            node.contents = properties.contents;
          } else if (properties.url) {
            node.contents = null;
            node.url = properties.url;
          }
          Object.defineProperties(node, {
            usedBytes: {
              get: function() {
                return this.contents.length;
              }
            }
          });
          var stream_ops = {};
          var keys = Object.keys(node.stream_ops);
          keys.forEach(function(key2) {
            var fn = node.stream_ops[key2];
            stream_ops[key2] = function forceLoadLazyFile() {
              FS.forceLoadFile(node);
              return fn.apply(null, arguments);
            };
          });
          stream_ops.read = function stream_ops_read(stream, buffer2, offset, length, position) {
            FS.forceLoadFile(node);
            var contents = stream.node.contents;
            if (position >= contents.length)
              return 0;
            var size = Math.min(contents.length - position, length);
            if (contents.slice) {
              for (var i = 0; i < size; i++) {
                buffer2[offset + i] = contents[position + i];
              }
            } else {
              for (var i = 0; i < size; i++) {
                buffer2[offset + i] = contents.get(position + i);
              }
            }
            return size;
          };
          node.stream_ops = stream_ops;
          return node;
        },
        createPreloadedFile: function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
          Browser.init();
          var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
          var dep = getUniqueRunDependency("cp " + fullname);
          function processData(byteArray) {
            function finish(byteArray2) {
              if (preFinish)
                preFinish();
              if (!dontCreateFile) {
                FS.createDataFile(parent, name, byteArray2, canRead, canWrite, canOwn);
              }
              if (onload)
                onload();
              removeRunDependency(dep);
            }
            var handled = false;
            Module3["preloadPlugins"].forEach(function(plugin16) {
              if (handled)
                return;
              if (plugin16["canHandle"](fullname)) {
                plugin16["handle"](byteArray, fullname, finish, function() {
                  if (onerror)
                    onerror();
                  removeRunDependency(dep);
                });
                handled = true;
              }
            });
            if (!handled)
              finish(byteArray);
          }
          addRunDependency(dep);
          if (typeof url == "string") {
            Browser.asyncLoad(url, function(byteArray) {
              processData(byteArray);
            }, onerror);
          } else {
            processData(url);
          }
        },
        indexedDB: function() {
          return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        },
        DB_NAME: function() {
          return "EM_FS_" + window.location.pathname;
        },
        DB_VERSION: 20,
        DB_STORE_NAME: "FILE_DATA",
        saveFilesToDB: function(paths, onload, onerror) {
          onload = onload || function() {
          };
          onerror = onerror || function() {
          };
          var indexedDB = FS.indexedDB();
          try {
            var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
          } catch (e) {
            return onerror(e);
          }
          openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
            out("creating db");
            var db = openRequest.result;
            db.createObjectStore(FS.DB_STORE_NAME);
          };
          openRequest.onsuccess = function openRequest_onsuccess() {
            var db = openRequest.result;
            var transaction = db.transaction([FS.DB_STORE_NAME], "readwrite");
            var files = transaction.objectStore(FS.DB_STORE_NAME);
            var ok = 0, fail = 0, total = paths.length;
            function finish() {
              if (fail == 0)
                onload();
              else
                onerror();
            }
            paths.forEach(function(path3) {
              var putRequest = files.put(FS.analyzePath(path3).object.contents, path3);
              putRequest.onsuccess = function putRequest_onsuccess() {
                ok++;
                if (ok + fail == total)
                  finish();
              };
              putRequest.onerror = function putRequest_onerror() {
                fail++;
                if (ok + fail == total)
                  finish();
              };
            });
            transaction.onerror = onerror;
          };
          openRequest.onerror = onerror;
        },
        loadFilesFromDB: function(paths, onload, onerror) {
          onload = onload || function() {
          };
          onerror = onerror || function() {
          };
          var indexedDB = FS.indexedDB();
          try {
            var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
          } catch (e) {
            return onerror(e);
          }
          openRequest.onupgradeneeded = onerror;
          openRequest.onsuccess = function openRequest_onsuccess() {
            var db = openRequest.result;
            try {
              var transaction = db.transaction([FS.DB_STORE_NAME], "readonly");
            } catch (e) {
              onerror(e);
              return;
            }
            var files = transaction.objectStore(FS.DB_STORE_NAME);
            var ok = 0, fail = 0, total = paths.length;
            function finish() {
              if (fail == 0)
                onload();
              else
                onerror();
            }
            paths.forEach(function(path3) {
              var getRequest = files.get(path3);
              getRequest.onsuccess = function getRequest_onsuccess() {
                if (FS.analyzePath(path3).exists) {
                  FS.unlink(path3);
                }
                FS.createDataFile(PATH.dirname(path3), PATH.basename(path3), getRequest.result, true, true, true);
                ok++;
                if (ok + fail == total)
                  finish();
              };
              getRequest.onerror = function getRequest_onerror() {
                fail++;
                if (ok + fail == total)
                  finish();
              };
            });
            transaction.onerror = onerror;
          };
          openRequest.onerror = onerror;
        }
      };
      var SYSCALLS = {
        mappings: {},
        DEFAULT_POLLMASK: 5,
        umask: 511,
        calculateAt: function(dirfd, path3, allowEmpty) {
          if (path3[0] === "/") {
            return path3;
          }
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream)
              throw new FS.ErrnoError(8);
            dir = dirstream.path;
          }
          if (path3.length == 0) {
            if (!allowEmpty) {
              throw new FS.ErrnoError(44);
            }
            return dir;
          }
          return PATH.join2(dir, path3);
        },
        doStat: function(func, path3, buf) {
          try {
            var stat = func(path3);
          } catch (e) {
            if (e && e.node && PATH.normalize(path3) !== PATH.normalize(FS.getPath(e.node))) {
              return -54;
            }
            throw e;
          }
          HEAP32[buf >> 2] = stat.dev;
          HEAP32[buf + 4 >> 2] = 0;
          HEAP32[buf + 8 >> 2] = stat.ino;
          HEAP32[buf + 12 >> 2] = stat.mode;
          HEAP32[buf + 16 >> 2] = stat.nlink;
          HEAP32[buf + 20 >> 2] = stat.uid;
          HEAP32[buf + 24 >> 2] = stat.gid;
          HEAP32[buf + 28 >> 2] = stat.rdev;
          HEAP32[buf + 32 >> 2] = 0;
          tempI64 = [
            stat.size >>> 0,
            (tempDouble = stat.size, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)
          ], HEAP32[buf + 40 >> 2] = tempI64[0], HEAP32[buf + 44 >> 2] = tempI64[1];
          HEAP32[buf + 48 >> 2] = 4096;
          HEAP32[buf + 52 >> 2] = stat.blocks;
          HEAP32[buf + 56 >> 2] = stat.atime.getTime() / 1e3 | 0;
          HEAP32[buf + 60 >> 2] = 0;
          HEAP32[buf + 64 >> 2] = stat.mtime.getTime() / 1e3 | 0;
          HEAP32[buf + 68 >> 2] = 0;
          HEAP32[buf + 72 >> 2] = stat.ctime.getTime() / 1e3 | 0;
          HEAP32[buf + 76 >> 2] = 0;
          tempI64 = [
            stat.ino >>> 0,
            (tempDouble = stat.ino, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)
          ], HEAP32[buf + 80 >> 2] = tempI64[0], HEAP32[buf + 84 >> 2] = tempI64[1];
          return 0;
        },
        doMsync: function(addr, stream, len, flags, offset) {
          var buffer2 = HEAPU8.slice(addr, addr + len);
          FS.msync(stream, buffer2, offset, len, flags);
        },
        doMkdir: function(path3, mode) {
          path3 = PATH.normalize(path3);
          if (path3[path3.length - 1] === "/")
            path3 = path3.substr(0, path3.length - 1);
          FS.mkdir(path3, mode, 0);
          return 0;
        },
        doMknod: function(path3, mode, dev) {
          switch (mode & 61440) {
            case 32768:
            case 8192:
            case 24576:
            case 4096:
            case 49152:
              break;
            default:
              return -28;
          }
          FS.mknod(path3, mode, dev);
          return 0;
        },
        doReadlink: function(path3, buf, bufsize) {
          if (bufsize <= 0)
            return -28;
          var ret = FS.readlink(path3);
          var len = Math.min(bufsize, lengthBytesUTF8(ret));
          var endChar = HEAP8[buf + len];
          stringToUTF8(ret, buf, bufsize + 1);
          HEAP8[buf + len] = endChar;
          return len;
        },
        doAccess: function(path3, amode) {
          if (amode & ~7) {
            return -28;
          }
          var node;
          var lookup = FS.lookupPath(path3, {follow: true});
          node = lookup.node;
          if (!node) {
            return -44;
          }
          var perms = "";
          if (amode & 4)
            perms += "r";
          if (amode & 2)
            perms += "w";
          if (amode & 1)
            perms += "x";
          if (perms && FS.nodePermissions(node, perms)) {
            return -2;
          }
          return 0;
        },
        doDup: function(path3, flags, suggestFD) {
          var suggest2 = FS.getStream(suggestFD);
          if (suggest2)
            FS.close(suggest2);
          return FS.open(path3, flags, 0, suggestFD, suggestFD).fd;
        },
        doReadv: function(stream, iov, iovcnt, offset) {
          var ret = 0;
          for (var i = 0; i < iovcnt; i++) {
            var ptr = HEAP32[iov + i * 8 >> 2];
            var len = HEAP32[iov + (i * 8 + 4) >> 2];
            var curr = FS.read(stream, HEAP8, ptr, len, offset);
            if (curr < 0)
              return -1;
            ret += curr;
            if (curr < len)
              break;
          }
          return ret;
        },
        doWritev: function(stream, iov, iovcnt, offset) {
          var ret = 0;
          for (var i = 0; i < iovcnt; i++) {
            var ptr = HEAP32[iov + i * 8 >> 2];
            var len = HEAP32[iov + (i * 8 + 4) >> 2];
            var curr = FS.write(stream, HEAP8, ptr, len, offset);
            if (curr < 0)
              return -1;
            ret += curr;
          }
          return ret;
        },
        varargs: void 0,
        get: function() {
          SYSCALLS.varargs += 4;
          var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];
          return ret;
        },
        getStr: function(ptr) {
          var ret = UTF8ToString(ptr);
          return ret;
        },
        getStreamFromFD: function(fd) {
          var stream = FS.getStream(fd);
          if (!stream)
            throw new FS.ErrnoError(8);
          return stream;
        },
        get64: function(low, high) {
          return low;
        }
      };
      function ___sys_chmod(path3, mode) {
        try {
          path3 = SYSCALLS.getStr(path3);
          FS.chmod(path3, mode);
          return 0;
        } catch (e) {
          if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
            abort(e);
          return -e.errno;
        }
      }
      function setErrNo(value) {
        HEAP32[___errno_location() >> 2] = value;
        return value;
      }
      function ___sys_fcntl64(fd, cmd, varargs) {
        SYSCALLS.varargs = varargs;
        try {
          var stream = SYSCALLS.getStreamFromFD(fd);
          switch (cmd) {
            case 0: {
              var arg = SYSCALLS.get();
              if (arg < 0) {
                return -28;
              }
              var newStream;
              newStream = FS.open(stream.path, stream.flags, 0, arg);
              return newStream.fd;
            }
            case 1:
            case 2:
              return 0;
            case 3:
              return stream.flags;
            case 4: {
              var arg = SYSCALLS.get();
              stream.flags |= arg;
              return 0;
            }
            case 12: {
              var arg = SYSCALLS.get();
              var offset = 0;
              HEAP16[arg + offset >> 1] = 2;
              return 0;
            }
            case 13:
            case 14:
              return 0;
            case 16:
            case 8:
              return -28;
            case 9:
              setErrNo(28);
              return -1;
            default: {
              return -28;
            }
          }
        } catch (e) {
          if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
            abort(e);
          return -e.errno;
        }
      }
      function ___sys_fstat64(fd, buf) {
        try {
          var stream = SYSCALLS.getStreamFromFD(fd);
          return SYSCALLS.doStat(FS.stat, stream.path, buf);
        } catch (e) {
          if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
            abort(e);
          return -e.errno;
        }
      }
      function ___sys_ioctl(fd, op, varargs) {
        SYSCALLS.varargs = varargs;
        try {
          var stream = SYSCALLS.getStreamFromFD(fd);
          switch (op) {
            case 21509:
            case 21505: {
              if (!stream.tty)
                return -59;
              return 0;
            }
            case 21510:
            case 21511:
            case 21512:
            case 21506:
            case 21507:
            case 21508: {
              if (!stream.tty)
                return -59;
              return 0;
            }
            case 21519: {
              if (!stream.tty)
                return -59;
              var argp = SYSCALLS.get();
              HEAP32[argp >> 2] = 0;
              return 0;
            }
            case 21520: {
              if (!stream.tty)
                return -59;
              return -28;
            }
            case 21531: {
              var argp = SYSCALLS.get();
              return FS.ioctl(stream, op, argp);
            }
            case 21523: {
              if (!stream.tty)
                return -59;
              return 0;
            }
            case 21524: {
              if (!stream.tty)
                return -59;
              return 0;
            }
            default:
              abort("bad ioctl syscall " + op);
          }
        } catch (e) {
          if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
            abort(e);
          return -e.errno;
        }
      }
      function ___sys_open(path3, flags, varargs) {
        SYSCALLS.varargs = varargs;
        try {
          var pathname = SYSCALLS.getStr(path3);
          var mode = varargs ? SYSCALLS.get() : 0;
          var stream = FS.open(pathname, flags, mode);
          return stream.fd;
        } catch (e) {
          if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
            abort(e);
          return -e.errno;
        }
      }
      function ___sys_rename(old_path, new_path) {
        try {
          old_path = SYSCALLS.getStr(old_path);
          new_path = SYSCALLS.getStr(new_path);
          FS.rename(old_path, new_path);
          return 0;
        } catch (e) {
          if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
            abort(e);
          return -e.errno;
        }
      }
      function ___sys_rmdir(path3) {
        try {
          path3 = SYSCALLS.getStr(path3);
          FS.rmdir(path3);
          return 0;
        } catch (e) {
          if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
            abort(e);
          return -e.errno;
        }
      }
      function ___sys_stat64(path3, buf) {
        try {
          path3 = SYSCALLS.getStr(path3);
          return SYSCALLS.doStat(FS.stat, path3, buf);
        } catch (e) {
          if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
            abort(e);
          return -e.errno;
        }
      }
      function ___sys_unlink(path3) {
        try {
          path3 = SYSCALLS.getStr(path3);
          FS.unlink(path3);
          return 0;
        } catch (e) {
          if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
            abort(e);
          return -e.errno;
        }
      }
      function _emscripten_memcpy_big(dest, src, num) {
        HEAPU8.copyWithin(dest, src, src + num);
      }
      function emscripten_realloc_buffer(size) {
        try {
          wasmMemory.grow(size - buffer.byteLength + 65535 >>> 16);
          updateGlobalBufferAndViews(wasmMemory.buffer);
          return 1;
        } catch (e) {
        }
      }
      function _emscripten_resize_heap(requestedSize) {
        var oldSize = HEAPU8.length;
        requestedSize = requestedSize >>> 0;
        var maxHeapSize = 2147483648;
        if (requestedSize > maxHeapSize) {
          return false;
        }
        for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
          var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown);
          overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);
          var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));
          var replacement = emscripten_realloc_buffer(newSize);
          if (replacement) {
            return true;
          }
        }
        return false;
      }
      function _fd_close(fd) {
        try {
          var stream = SYSCALLS.getStreamFromFD(fd);
          FS.close(stream);
          return 0;
        } catch (e) {
          if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
            abort(e);
          return e.errno;
        }
      }
      function _fd_fdstat_get(fd, pbuf) {
        try {
          var stream = SYSCALLS.getStreamFromFD(fd);
          var type = stream.tty ? 2 : FS.isDir(stream.mode) ? 3 : FS.isLink(stream.mode) ? 7 : 4;
          HEAP8[pbuf >> 0] = type;
          return 0;
        } catch (e) {
          if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
            abort(e);
          return e.errno;
        }
      }
      function _fd_read(fd, iov, iovcnt, pnum) {
        try {
          var stream = SYSCALLS.getStreamFromFD(fd);
          var num = SYSCALLS.doReadv(stream, iov, iovcnt);
          HEAP32[pnum >> 2] = num;
          return 0;
        } catch (e) {
          if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
            abort(e);
          return e.errno;
        }
      }
      function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
        try {
          var stream = SYSCALLS.getStreamFromFD(fd);
          var HIGH_OFFSET = 4294967296;
          var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
          var DOUBLE_LIMIT = 9007199254740992;
          if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
            return -61;
          }
          FS.llseek(stream, offset, whence);
          tempI64 = [
            stream.position >>> 0,
            (tempDouble = stream.position, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)
          ], HEAP32[newOffset >> 2] = tempI64[0], HEAP32[newOffset + 4 >> 2] = tempI64[1];
          if (stream.getdents && offset === 0 && whence === 0)
            stream.getdents = null;
          return 0;
        } catch (e) {
          if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
            abort(e);
          return e.errno;
        }
      }
      function _fd_write(fd, iov, iovcnt, pnum) {
        try {
          var stream = SYSCALLS.getStreamFromFD(fd);
          var num = SYSCALLS.doWritev(stream, iov, iovcnt);
          HEAP32[pnum >> 2] = num;
          return 0;
        } catch (e) {
          if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
            abort(e);
          return e.errno;
        }
      }
      function _setTempRet0(val) {
        setTempRet0(val);
      }
      function _time(ptr) {
        var ret = Date.now() / 1e3 | 0;
        if (ptr) {
          HEAP32[ptr >> 2] = ret;
        }
        return ret;
      }
      function _tzset() {
        if (_tzset.called)
          return;
        _tzset.called = true;
        var currentYear = new Date().getFullYear();
        var winter = new Date(currentYear, 0, 1);
        var summer = new Date(currentYear, 6, 1);
        var winterOffset = winter.getTimezoneOffset();
        var summerOffset = summer.getTimezoneOffset();
        var stdTimezoneOffset = Math.max(winterOffset, summerOffset);
        HEAP32[__get_timezone() >> 2] = stdTimezoneOffset * 60;
        HEAP32[__get_daylight() >> 2] = Number(winterOffset != summerOffset);
        function extractZone(date) {
          var match2 = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
          return match2 ? match2[1] : "GMT";
        }
        var winterName = extractZone(winter);
        var summerName = extractZone(summer);
        var winterNamePtr = allocateUTF8(winterName);
        var summerNamePtr = allocateUTF8(summerName);
        if (summerOffset < winterOffset) {
          HEAP32[__get_tzname() >> 2] = winterNamePtr;
          HEAP32[__get_tzname() + 4 >> 2] = summerNamePtr;
        } else {
          HEAP32[__get_tzname() >> 2] = summerNamePtr;
          HEAP32[__get_tzname() + 4 >> 2] = winterNamePtr;
        }
      }
      function _timegm(tmPtr) {
        _tzset();
        var time = Date.UTC(HEAP32[tmPtr + 20 >> 2] + 1900, HEAP32[tmPtr + 16 >> 2], HEAP32[tmPtr + 12 >> 2], HEAP32[tmPtr + 8 >> 2], HEAP32[tmPtr + 4 >> 2], HEAP32[tmPtr >> 2], 0);
        var date = new Date(time);
        HEAP32[tmPtr + 24 >> 2] = date.getUTCDay();
        var start2 = Date.UTC(date.getUTCFullYear(), 0, 1, 0, 0, 0, 0);
        var yday = (date.getTime() - start2) / (1e3 * 60 * 60 * 24) | 0;
        HEAP32[tmPtr + 28 >> 2] = yday;
        return date.getTime() / 1e3 | 0;
      }
      var FSNode = function(parent, name, mode, rdev) {
        if (!parent) {
          parent = this;
        }
        this.parent = parent;
        this.mount = parent.mount;
        this.mounted = null;
        this.id = FS.nextInode++;
        this.name = name;
        this.mode = mode;
        this.node_ops = {};
        this.stream_ops = {};
        this.rdev = rdev;
      };
      var readMode = 292 | 73;
      var writeMode = 146;
      Object.defineProperties(FSNode.prototype, {
        read: {
          get: function() {
            return (this.mode & readMode) === readMode;
          },
          set: function(val) {
            val ? this.mode |= readMode : this.mode &= ~readMode;
          }
        },
        write: {
          get: function() {
            return (this.mode & writeMode) === writeMode;
          },
          set: function(val) {
            val ? this.mode |= writeMode : this.mode &= ~writeMode;
          }
        },
        isFolder: {
          get: function() {
            return FS.isDir(this.mode);
          }
        },
        isDevice: {
          get: function() {
            return FS.isChrdev(this.mode);
          }
        }
      });
      FS.FSNode = FSNode;
      FS.staticInit();
      if (ENVIRONMENT_IS_NODE) {
        fs8 = frozenFs;
        NODEJS_PATH = require("path");
        NODEFS.staticInit();
      }
      var fs8;
      var NODEJS_PATH;
      if (ENVIRONMENT_IS_NODE) {
        _wrapNodeError = function(func) {
          return function() {
            try {
              return func.apply(this, arguments);
            } catch (e) {
              if (!e.code)
                throw e;
              throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
          };
        };
        VFS = Object.assign({}, FS);
        for (_key in NODERAWFS)
          FS[_key] = _wrapNodeError(NODERAWFS[_key]);
      } else {
        throw new Error("NODERAWFS is currently only supported on Node.js environment.");
      }
      var _wrapNodeError;
      var VFS;
      var _key;
      function intArrayFromString(stringy, dontAddNull, length) {
        var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
        var u8array = new Array(len);
        var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
        if (dontAddNull)
          u8array.length = numBytesWritten;
        return u8array;
      }
      var decodeBase64 = typeof atob === "function" ? atob : function(input) {
        var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        var output = "";
        var chr1, chr2, chr3;
        var enc1, enc2, enc3, enc4;
        var i = 0;
        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
        do {
          enc1 = keyStr.indexOf(input.charAt(i++));
          enc2 = keyStr.indexOf(input.charAt(i++));
          enc3 = keyStr.indexOf(input.charAt(i++));
          enc4 = keyStr.indexOf(input.charAt(i++));
          chr1 = enc1 << 2 | enc2 >> 4;
          chr2 = (enc2 & 15) << 4 | enc3 >> 2;
          chr3 = (enc3 & 3) << 6 | enc4;
          output = output + String.fromCharCode(chr1);
          if (enc3 !== 64) {
            output = output + String.fromCharCode(chr2);
          }
          if (enc4 !== 64) {
            output = output + String.fromCharCode(chr3);
          }
        } while (i < input.length);
        return output;
      };
      function intArrayFromBase64(s) {
        if (typeof ENVIRONMENT_IS_NODE === "boolean" && ENVIRONMENT_IS_NODE) {
          var buf;
          try {
            buf = Buffer.from(s, "base64");
          } catch (_) {
            buf = new Buffer(s, "base64");
          }
          return new Uint8Array(buf["buffer"], buf["byteOffset"], buf["byteLength"]);
        }
        try {
          var decoded = decodeBase64(s);
          var bytes = new Uint8Array(decoded.length);
          for (var i = 0; i < decoded.length; ++i) {
            bytes[i] = decoded.charCodeAt(i);
          }
          return bytes;
        } catch (_) {
          throw new Error("Converting base64 string to bytes failed.");
        }
      }
      function tryParseAsDataURI(filename) {
        if (!isDataURI(filename)) {
          return;
        }
        return intArrayFromBase64(filename.slice(dataURIPrefix.length));
      }
      var asmLibraryArg = {
        l: ___gmtime_r,
        p: ___sys_chmod,
        e: ___sys_fcntl64,
        k: ___sys_fstat64,
        o: ___sys_ioctl,
        q: ___sys_open,
        i: ___sys_rename,
        r: ___sys_rmdir,
        c: ___sys_stat64,
        h: ___sys_unlink,
        s: _emscripten_memcpy_big,
        t: _emscripten_resize_heap,
        f: _fd_close,
        j: _fd_fdstat_get,
        g: _fd_read,
        n: _fd_seek,
        d: _fd_write,
        a: _setTempRet0,
        b: _time,
        m: _timegm
      };
      var asm = createWasm();
      var ___wasm_call_ctors = Module3["___wasm_call_ctors"] = asm["v"];
      var _zipstruct_stat = Module3["_zipstruct_stat"] = asm["w"];
      var _zipstruct_statS = Module3["_zipstruct_statS"] = asm["x"];
      var _zipstruct_stat_name = Module3["_zipstruct_stat_name"] = asm["y"];
      var _zipstruct_stat_index = Module3["_zipstruct_stat_index"] = asm["z"];
      var _zipstruct_stat_size = Module3["_zipstruct_stat_size"] = asm["A"];
      var _zipstruct_stat_mtime = Module3["_zipstruct_stat_mtime"] = asm["B"];
      var _zipstruct_stat_crc = Module3["_zipstruct_stat_crc"] = asm["C"];
      var _zipstruct_error = Module3["_zipstruct_error"] = asm["D"];
      var _zipstruct_errorS = Module3["_zipstruct_errorS"] = asm["E"];
      var _zipstruct_error_code_zip = Module3["_zipstruct_error_code_zip"] = asm["F"];
      var _zipstruct_stat_comp_size = Module3["_zipstruct_stat_comp_size"] = asm["G"];
      var _zipstruct_stat_comp_method = Module3["_zipstruct_stat_comp_method"] = asm["H"];
      var _zip_close = Module3["_zip_close"] = asm["I"];
      var _zip_delete = Module3["_zip_delete"] = asm["J"];
      var _zip_dir_add = Module3["_zip_dir_add"] = asm["K"];
      var _zip_discard = Module3["_zip_discard"] = asm["L"];
      var _zip_error_init_with_code = Module3["_zip_error_init_with_code"] = asm["M"];
      var _zip_get_error = Module3["_zip_get_error"] = asm["N"];
      var _zip_file_get_error = Module3["_zip_file_get_error"] = asm["O"];
      var _zip_error_strerror = Module3["_zip_error_strerror"] = asm["P"];
      var _zip_fclose = Module3["_zip_fclose"] = asm["Q"];
      var _zip_file_add = Module3["_zip_file_add"] = asm["R"];
      var _zip_file_get_external_attributes = Module3["_zip_file_get_external_attributes"] = asm["S"];
      var _zip_file_set_external_attributes = Module3["_zip_file_set_external_attributes"] = asm["T"];
      var _zip_file_set_mtime = Module3["_zip_file_set_mtime"] = asm["U"];
      var _zip_fopen = Module3["_zip_fopen"] = asm["V"];
      var _zip_fopen_index = Module3["_zip_fopen_index"] = asm["W"];
      var _zip_fread = Module3["_zip_fread"] = asm["X"];
      var _zip_get_name = Module3["_zip_get_name"] = asm["Y"];
      var _zip_get_num_entries = Module3["_zip_get_num_entries"] = asm["Z"];
      var _zip_name_locate = Module3["_zip_name_locate"] = asm["_"];
      var _zip_open = Module3["_zip_open"] = asm["$"];
      var _zip_open_from_source = Module3["_zip_open_from_source"] = asm["aa"];
      var _zip_set_file_compression = Module3["_zip_set_file_compression"] = asm["ba"];
      var _zip_source_buffer = Module3["_zip_source_buffer"] = asm["ca"];
      var _zip_source_buffer_create = Module3["_zip_source_buffer_create"] = asm["da"];
      var _zip_source_close = Module3["_zip_source_close"] = asm["ea"];
      var _zip_source_error = Module3["_zip_source_error"] = asm["fa"];
      var _zip_source_free = Module3["_zip_source_free"] = asm["ga"];
      var _zip_source_keep = Module3["_zip_source_keep"] = asm["ha"];
      var _zip_source_open = Module3["_zip_source_open"] = asm["ia"];
      var _zip_source_read = Module3["_zip_source_read"] = asm["ja"];
      var _zip_source_seek = Module3["_zip_source_seek"] = asm["ka"];
      var _zip_source_set_mtime = Module3["_zip_source_set_mtime"] = asm["la"];
      var _zip_source_tell = Module3["_zip_source_tell"] = asm["ma"];
      var _zip_stat = Module3["_zip_stat"] = asm["na"];
      var _zip_stat_index = Module3["_zip_stat_index"] = asm["oa"];
      var _zip_ext_count_symlinks = Module3["_zip_ext_count_symlinks"] = asm["pa"];
      var ___errno_location = Module3["___errno_location"] = asm["qa"];
      var __get_tzname = Module3["__get_tzname"] = asm["ra"];
      var __get_daylight = Module3["__get_daylight"] = asm["sa"];
      var __get_timezone = Module3["__get_timezone"] = asm["ta"];
      var stackSave = Module3["stackSave"] = asm["ua"];
      var stackRestore = Module3["stackRestore"] = asm["va"];
      var stackAlloc = Module3["stackAlloc"] = asm["wa"];
      var _malloc = Module3["_malloc"] = asm["xa"];
      var _free = Module3["_free"] = asm["ya"];
      Module3["cwrap"] = cwrap;
      Module3["getValue"] = getValue;
      var calledRun;
      dependenciesFulfilled = function runCaller() {
        if (!calledRun)
          run();
        if (!calledRun)
          dependenciesFulfilled = runCaller;
      };
      function run(args) {
        args = args || arguments_;
        if (runDependencies > 0) {
          return;
        }
        preRun();
        if (runDependencies > 0) {
          return;
        }
        function doRun() {
          if (calledRun)
            return;
          calledRun = true;
          Module3["calledRun"] = true;
          if (ABORT)
            return;
          initRuntime();
          if (Module3["onRuntimeInitialized"])
            Module3["onRuntimeInitialized"]();
          postRun();
        }
        if (Module3["setStatus"]) {
          Module3["setStatus"]("Running...");
          setTimeout(function() {
            setTimeout(function() {
              Module3["setStatus"]("");
            }, 1);
            doRun();
          }, 1);
        } else {
          doRun();
        }
      }
      Module3["run"] = run;
      if (Module3["preInit"]) {
        if (typeof Module3["preInit"] == "function")
          Module3["preInit"] = [Module3["preInit"]];
        while (Module3["preInit"].length > 0) {
          Module3["preInit"].pop()();
        }
      }
      run();
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-parsers/sources/grammars/shell.js
  var require_shell = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-parsers/sources/grammars/shell.js"(exports, module) {
      "use strict";
      function peg$subclass(child, parent) {
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
      }
      function peg$SyntaxError(message, expected, found, location) {
        this.message = message;
        this.expected = expected;
        this.found = found;
        this.location = location;
        this.name = "SyntaxError";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, peg$SyntaxError);
        }
      }
      peg$subclass(peg$SyntaxError, Error);
      peg$SyntaxError.buildMessage = function(expected, found) {
        var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return '"' + literalEscape(expectation.text) + '"';
          },
          "class": function(expectation) {
            var escapedParts = "", i;
            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1]) : classEscape(expectation.parts[i]);
            }
            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },
          any: function(expectation) {
            return "any character";
          },
          end: function(expectation) {
            return "end of input";
          },
          other: function(expectation) {
            return expectation.description;
          }
        };
        function hex(ch) {
          return ch.charCodeAt(0).toString(16).toUpperCase();
        }
        function literalEscape(s) {
          return s.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
            return "\\x0" + hex(ch);
          }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
            return "\\x" + hex(ch);
          });
        }
        function classEscape(s) {
          return s.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
            return "\\x0" + hex(ch);
          }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
            return "\\x" + hex(ch);
          });
        }
        function describeExpectation(expectation) {
          return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
        }
        function describeExpected(expected2) {
          var descriptions = new Array(expected2.length), i, j;
          for (i = 0; i < expected2.length; i++) {
            descriptions[i] = describeExpectation(expected2[i]);
          }
          descriptions.sort();
          if (descriptions.length > 0) {
            for (i = 1, j = 1; i < descriptions.length; i++) {
              if (descriptions[i - 1] !== descriptions[i]) {
                descriptions[j] = descriptions[i];
                j++;
              }
            }
            descriptions.length = j;
          }
          switch (descriptions.length) {
            case 1:
              return descriptions[0];
            case 2:
              return descriptions[0] + " or " + descriptions[1];
            default:
              return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
          }
        }
        function describeFound(found2) {
          return found2 ? '"' + literalEscape(found2) + '"' : "end of input";
        }
        return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
      };
      function peg$parse(input, options) {
        options = options !== void 0 ? options : {};
        var peg$FAILED = {}, peg$startRuleFunctions = {Start: peg$parseStart}, peg$startRuleFunction = peg$parseStart, peg$c0 = function(line) {
          return line ? line : [];
        }, peg$c1 = function(command, type, then) {
          return [{command, type}].concat(then || []);
        }, peg$c2 = function(command, type) {
          return [{command, type: type || ";"}];
        }, peg$c3 = function(then) {
          return then;
        }, peg$c4 = ";", peg$c5 = peg$literalExpectation(";", false), peg$c6 = "&", peg$c7 = peg$literalExpectation("&", false), peg$c8 = function(chain, then) {
          return then ? {chain, then} : {chain};
        }, peg$c9 = function(type, then) {
          return {type, line: then};
        }, peg$c10 = "&&", peg$c11 = peg$literalExpectation("&&", false), peg$c12 = "||", peg$c13 = peg$literalExpectation("||", false), peg$c14 = function(main2, then) {
          return then ? __spreadProps(__spreadValues({}, main2), {then}) : main2;
        }, peg$c15 = function(type, then) {
          return {type, chain: then};
        }, peg$c16 = "|&", peg$c17 = peg$literalExpectation("|&", false), peg$c18 = "|", peg$c19 = peg$literalExpectation("|", false), peg$c20 = "=", peg$c21 = peg$literalExpectation("=", false), peg$c22 = function(name, arg) {
          return {name, args: [arg]};
        }, peg$c23 = function(name) {
          return {name, args: []};
        }, peg$c24 = "(", peg$c25 = peg$literalExpectation("(", false), peg$c26 = ")", peg$c27 = peg$literalExpectation(")", false), peg$c28 = function(subshell, args) {
          return {type: `subshell`, subshell, args};
        }, peg$c29 = "{", peg$c30 = peg$literalExpectation("{", false), peg$c31 = "}", peg$c32 = peg$literalExpectation("}", false), peg$c33 = function(group, args) {
          return {type: `group`, group, args};
        }, peg$c34 = function(envs, args) {
          return {type: `command`, args, envs};
        }, peg$c35 = function(envs) {
          return {type: `envs`, envs};
        }, peg$c36 = function(args) {
          return args;
        }, peg$c37 = function(arg) {
          return arg;
        }, peg$c38 = function(redirect, arg) {
          return {type: `redirection`, subtype: redirect, args: [arg]};
        }, peg$c39 = ">>", peg$c40 = peg$literalExpectation(">>", false), peg$c41 = ">&", peg$c42 = peg$literalExpectation(">&", false), peg$c43 = ">", peg$c44 = peg$literalExpectation(">", false), peg$c45 = "<<<", peg$c46 = peg$literalExpectation("<<<", false), peg$c47 = "<&", peg$c48 = peg$literalExpectation("<&", false), peg$c49 = "<", peg$c50 = peg$literalExpectation("<", false), peg$c51 = function(segments) {
          return {type: `argument`, segments: [].concat(...segments)};
        }, peg$c52 = function(string) {
          return string;
        }, peg$c53 = "'", peg$c54 = peg$literalExpectation("'", false), peg$c55 = function(text2) {
          return [{type: `text`, text: text2}];
        }, peg$c56 = '"', peg$c57 = peg$literalExpectation('"', false), peg$c58 = function(segments) {
          return segments;
        }, peg$c59 = function(arithmetic) {
          return {type: `arithmetic`, arithmetic, quoted: true};
        }, peg$c60 = function(shell) {
          return {type: `shell`, shell, quoted: true};
        }, peg$c61 = function(variable) {
          return __spreadProps(__spreadValues({type: `variable`}, variable), {quoted: true});
        }, peg$c62 = function(text2) {
          return {type: `text`, text: text2};
        }, peg$c63 = function(arithmetic) {
          return {type: `arithmetic`, arithmetic, quoted: false};
        }, peg$c64 = function(shell) {
          return {type: `shell`, shell, quoted: false};
        }, peg$c65 = function(variable) {
          return __spreadProps(__spreadValues({type: `variable`}, variable), {quoted: false});
        }, peg$c66 = function(pattern) {
          return {type: `glob`, pattern};
        }, peg$c67 = "\\", peg$c68 = peg$literalExpectation("\\", false), peg$c69 = peg$anyExpectation(), peg$c70 = function(c) {
          return c;
        }, peg$c71 = /^[^']/, peg$c72 = peg$classExpectation(["'"], true, false), peg$c73 = function(chars) {
          return chars.join(``);
        }, peg$c74 = /^[^$"]/, peg$c75 = peg$classExpectation(["$", '"'], true, false), peg$c76 = "-", peg$c77 = peg$literalExpectation("-", false), peg$c78 = "+", peg$c79 = peg$literalExpectation("+", false), peg$c80 = /^[0-9]/, peg$c81 = peg$classExpectation([["0", "9"]], false, false), peg$c82 = ".", peg$c83 = peg$literalExpectation(".", false), peg$c84 = function(sign, left, right) {
          return {type: `number`, value: (sign === "-" ? -1 : 1) * parseFloat(left.join(``) + `.` + right.join(``))};
        }, peg$c85 = function(sign, value) {
          return {type: `number`, value: (sign === "-" ? -1 : 1) * parseInt(value.join(``))};
        }, peg$c86 = function(variable) {
          return __spreadValues({type: `variable`}, variable);
        }, peg$c87 = function(name) {
          return {type: `variable`, name};
        }, peg$c88 = function(value) {
          return value;
        }, peg$c89 = "*", peg$c90 = peg$literalExpectation("*", false), peg$c91 = function(left, right) {
          return {type: `multiplication`, left, right};
        }, peg$c92 = "/", peg$c93 = peg$literalExpectation("/", false), peg$c94 = function(left, right) {
          return {type: `division`, left, right};
        }, peg$c95 = function(left, right) {
          return {type: `addition`, left, right};
        }, peg$c96 = function(left, right) {
          return {type: `subtraction`, left, right};
        }, peg$c97 = "$((", peg$c98 = peg$literalExpectation("$((", false), peg$c99 = "))", peg$c100 = peg$literalExpectation("))", false), peg$c101 = function(arithmetic) {
          return arithmetic;
        }, peg$c102 = "$(", peg$c103 = peg$literalExpectation("$(", false), peg$c104 = function(command) {
          return command;
        }, peg$c105 = "${", peg$c106 = peg$literalExpectation("${", false), peg$c107 = ":-", peg$c108 = peg$literalExpectation(":-", false), peg$c109 = function(name, arg) {
          return {name, defaultValue: arg};
        }, peg$c110 = ":-}", peg$c111 = peg$literalExpectation(":-}", false), peg$c112 = function(name) {
          return {name, defaultValue: []};
        }, peg$c113 = function(name) {
          return {name};
        }, peg$c114 = "$", peg$c115 = peg$literalExpectation("$", false), peg$c116 = function(pattern) {
          return options.isGlobPattern(pattern);
        }, peg$c117 = function(pattern) {
          return pattern;
        }, peg$c118 = /^[a-zA-Z0-9_]/, peg$c119 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], false, false), peg$c120 = function() {
          return text();
        }, peg$c121 = /^[$@*?#a-zA-Z0-9_\-]/, peg$c122 = peg$classExpectation(["$", "@", "*", "?", "#", ["a", "z"], ["A", "Z"], ["0", "9"], "_", "-"], false, false), peg$c123 = /^[(){}<>$|&; \t"']/, peg$c124 = peg$classExpectation(["(", ")", "{", "}", "<", ">", "$", "|", "&", ";", " ", "	", '"', "'"], false, false), peg$c125 = /^[<>&; \t"']/, peg$c126 = peg$classExpectation(["<", ">", "&", ";", " ", "	", '"', "'"], false, false), peg$c127 = /^[ \t]/, peg$c128 = peg$classExpectation([" ", "	"], false, false), peg$currPos = 0, peg$savedPos = 0, peg$posDetailsCache = [{line: 1, column: 1}], peg$maxFailPos = 0, peg$maxFailExpected = [], peg$silentFails = 0, peg$result;
        if ("startRule" in options) {
          if (!(options.startRule in peg$startRuleFunctions)) {
            throw new Error(`Can't start parsing from rule "` + options.startRule + '".');
          }
          peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
        }
        function text() {
          return input.substring(peg$savedPos, peg$currPos);
        }
        function location() {
          return peg$computeLocation(peg$savedPos, peg$currPos);
        }
        function expected(description, location2) {
          location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
          throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location2);
        }
        function error(message, location2) {
          location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
          throw peg$buildSimpleError(message, location2);
        }
        function peg$literalExpectation(text2, ignoreCase) {
          return {type: "literal", text: text2, ignoreCase};
        }
        function peg$classExpectation(parts, inverted, ignoreCase) {
          return {type: "class", parts, inverted, ignoreCase};
        }
        function peg$anyExpectation() {
          return {type: "any"};
        }
        function peg$endExpectation() {
          return {type: "end"};
        }
        function peg$otherExpectation(description) {
          return {type: "other", description};
        }
        function peg$computePosDetails(pos) {
          var details = peg$posDetailsCache[pos], p;
          if (details) {
            return details;
          } else {
            p = pos - 1;
            while (!peg$posDetailsCache[p]) {
              p--;
            }
            details = peg$posDetailsCache[p];
            details = {
              line: details.line,
              column: details.column
            };
            while (p < pos) {
              if (input.charCodeAt(p) === 10) {
                details.line++;
                details.column = 1;
              } else {
                details.column++;
              }
              p++;
            }
            peg$posDetailsCache[pos] = details;
            return details;
          }
        }
        function peg$computeLocation(startPos, endPos) {
          var startPosDetails = peg$computePosDetails(startPos), endPosDetails = peg$computePosDetails(endPos);
          return {
            start: {
              offset: startPos,
              line: startPosDetails.line,
              column: startPosDetails.column
            },
            end: {
              offset: endPos,
              line: endPosDetails.line,
              column: endPosDetails.column
            }
          };
        }
        function peg$fail(expected2) {
          if (peg$currPos < peg$maxFailPos) {
            return;
          }
          if (peg$currPos > peg$maxFailPos) {
            peg$maxFailPos = peg$currPos;
            peg$maxFailExpected = [];
          }
          peg$maxFailExpected.push(expected2);
        }
        function peg$buildSimpleError(message, location2) {
          return new peg$SyntaxError(message, null, null, location2);
        }
        function peg$buildStructuredError(expected2, found, location2) {
          return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected2, found), expected2, found, location2);
        }
        function peg$parseStart() {
          var s0, s1;
          s0 = peg$currPos;
          s1 = peg$parseShellLine();
          if (s1 === peg$FAILED) {
            s1 = null;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c0(s1);
          }
          s0 = s1;
          return s0;
        }
        function peg$parseShellLine() {
          var s0, s1, s2, s3, s4;
          s0 = peg$currPos;
          s1 = peg$parseCommandLine();
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseS();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseS();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseShellLineType();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseShellLineThen();
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c1(s1, s3, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseCommandLine();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parseS();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseS();
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parseShellLineType();
                if (s3 === peg$FAILED) {
                  s3 = null;
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c2(s1, s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
          return s0;
        }
        function peg$parseShellLineThen() {
          var s0, s1, s2, s3, s4;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseS();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseS();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseShellLine();
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parseS();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseS();
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c3(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseShellLineType() {
          var s0;
          if (input.charCodeAt(peg$currPos) === 59) {
            s0 = peg$c4;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c5);
            }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 38) {
              s0 = peg$c6;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c7);
              }
            }
          }
          return s0;
        }
        function peg$parseCommandLine() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = peg$parseCommandChain();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseCommandLineThen();
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c8(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseCommandLineThen() {
          var s0, s1, s2, s3, s4, s5, s6;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseS();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseS();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseCommandLineType();
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parseS();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseS();
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseCommandLine();
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  s6 = peg$parseS();
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$parseS();
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c9(s2, s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseCommandLineType() {
          var s0;
          if (input.substr(peg$currPos, 2) === peg$c10) {
            s0 = peg$c10;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c11);
            }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c12) {
              s0 = peg$c12;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c13);
              }
            }
          }
          return s0;
        }
        function peg$parseCommandChain() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = peg$parseCommand();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseCommandChainThen();
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c14(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseCommandChainThen() {
          var s0, s1, s2, s3, s4, s5, s6;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseS();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseS();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseCommandChainType();
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parseS();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseS();
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseCommandChain();
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  s6 = peg$parseS();
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$parseS();
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c15(s2, s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseCommandChainType() {
          var s0;
          if (input.substr(peg$currPos, 2) === peg$c16) {
            s0 = peg$c16;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c17);
            }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 124) {
              s0 = peg$c18;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c19);
              }
            }
          }
          return s0;
        }
        function peg$parseVariableAssignment() {
          var s0, s1, s2, s3, s4, s5;
          s0 = peg$currPos;
          s1 = peg$parseEnvVariable();
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s2 = peg$c20;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c21);
              }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseStrictValueArgument();
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parseS();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parseS();
                }
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c22(s1, s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseEnvVariable();
            if (s1 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 61) {
                s2 = peg$c20;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c21);
                }
              }
              if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$parseS();
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$parseS();
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c23(s1);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
          return s0;
        }
        function peg$parseCommand() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseS();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseS();
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 40) {
              s2 = peg$c24;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c25);
              }
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parseS();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseS();
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseShellLine();
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  s6 = peg$parseS();
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$parseS();
                  }
                  if (s5 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s6 = peg$c26;
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c27);
                      }
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = [];
                      s8 = peg$parseS();
                      while (s8 !== peg$FAILED) {
                        s7.push(s8);
                        s8 = peg$parseS();
                      }
                      if (s7 !== peg$FAILED) {
                        s8 = [];
                        s9 = peg$parseRedirectArgument();
                        while (s9 !== peg$FAILED) {
                          s8.push(s9);
                          s9 = peg$parseRedirectArgument();
                        }
                        if (s8 !== peg$FAILED) {
                          s9 = [];
                          s10 = peg$parseS();
                          while (s10 !== peg$FAILED) {
                            s9.push(s10);
                            s10 = peg$parseS();
                          }
                          if (s9 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c28(s4, s8);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parseS();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parseS();
            }
            if (s1 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s2 = peg$c29;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c30);
                }
              }
              if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$parseS();
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$parseS();
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseShellLine();
                  if (s4 !== peg$FAILED) {
                    s5 = [];
                    s6 = peg$parseS();
                    while (s6 !== peg$FAILED) {
                      s5.push(s6);
                      s6 = peg$parseS();
                    }
                    if (s5 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s6 = peg$c31;
                        peg$currPos++;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c32);
                        }
                      }
                      if (s6 !== peg$FAILED) {
                        s7 = [];
                        s8 = peg$parseS();
                        while (s8 !== peg$FAILED) {
                          s7.push(s8);
                          s8 = peg$parseS();
                        }
                        if (s7 !== peg$FAILED) {
                          s8 = [];
                          s9 = peg$parseRedirectArgument();
                          while (s9 !== peg$FAILED) {
                            s8.push(s9);
                            s9 = peg$parseRedirectArgument();
                          }
                          if (s8 !== peg$FAILED) {
                            s9 = [];
                            s10 = peg$parseS();
                            while (s10 !== peg$FAILED) {
                              s9.push(s10);
                              s10 = peg$parseS();
                            }
                            if (s9 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c33(s4, s8);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = [];
              s2 = peg$parseS();
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parseS();
              }
              if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseVariableAssignment();
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parseVariableAssignment();
                }
                if (s2 !== peg$FAILED) {
                  s3 = [];
                  s4 = peg$parseS();
                  while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    s4 = peg$parseS();
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = [];
                    s5 = peg$parseArgument();
                    if (s5 !== peg$FAILED) {
                      while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        s5 = peg$parseArgument();
                      }
                    } else {
                      s4 = peg$FAILED;
                    }
                    if (s4 !== peg$FAILED) {
                      s5 = [];
                      s6 = peg$parseS();
                      while (s6 !== peg$FAILED) {
                        s5.push(s6);
                        s6 = peg$parseS();
                      }
                      if (s5 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c34(s2, s4);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parseS();
                while (s2 !== peg$FAILED) {
                  s1.push(s2);
                  s2 = peg$parseS();
                }
                if (s1 !== peg$FAILED) {
                  s2 = [];
                  s3 = peg$parseVariableAssignment();
                  if (s3 !== peg$FAILED) {
                    while (s3 !== peg$FAILED) {
                      s2.push(s3);
                      s3 = peg$parseVariableAssignment();
                    }
                  } else {
                    s2 = peg$FAILED;
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parseS();
                    while (s4 !== peg$FAILED) {
                      s3.push(s4);
                      s4 = peg$parseS();
                    }
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c35(s2);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              }
            }
          }
          return s0;
        }
        function peg$parseCommandString() {
          var s0, s1, s2, s3, s4;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseS();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseS();
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseValueArgument();
            if (s3 !== peg$FAILED) {
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseValueArgument();
              }
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parseS();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseS();
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c36(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseArgument() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseS();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseS();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseRedirectArgument();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c37(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parseS();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parseS();
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseValueArgument();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c37(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
          return s0;
        }
        function peg$parseRedirectArgument() {
          var s0, s1, s2, s3;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseS();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseS();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseRedirectType();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseValueArgument();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c38(s2, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseRedirectType() {
          var s0;
          if (input.substr(peg$currPos, 2) === peg$c39) {
            s0 = peg$c39;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c40);
            }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c41) {
              s0 = peg$c41;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c42);
              }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 62) {
                s0 = peg$c43;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c44);
                }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c45) {
                  s0 = peg$c45;
                  peg$currPos += 3;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c46);
                  }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c47) {
                    s0 = peg$c47;
                    peg$currPos += 2;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c48);
                    }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 60) {
                      s0 = peg$c49;
                      peg$currPos++;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c50);
                      }
                    }
                  }
                }
              }
            }
          }
          return s0;
        }
        function peg$parseValueArgument() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseS();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseS();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseStrictValueArgument();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c37(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseStrictValueArgument() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseArgumentSegment();
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parseArgumentSegment();
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c51(s1);
          }
          s0 = s1;
          return s0;
        }
        function peg$parseArgumentSegment() {
          var s0, s1;
          s0 = peg$currPos;
          s1 = peg$parseSglQuoteString();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c52(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseDblQuoteString();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c52(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsePlainString();
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c52(s1);
              }
              s0 = s1;
            }
          }
          return s0;
        }
        function peg$parseSglQuoteString() {
          var s0, s1, s2, s3;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 39) {
            s1 = peg$c53;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c54);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseSglQuoteStringText();
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 39) {
                s3 = peg$c53;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c54);
                }
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c55(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseDblQuoteString() {
          var s0, s1, s2, s3;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 34) {
            s1 = peg$c56;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c57);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseDblQuoteStringSegment();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseDblQuoteStringSegment();
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 34) {
                s3 = peg$c56;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c57);
                }
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c58(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parsePlainString() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parsePlainStringSegment();
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parsePlainStringSegment();
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c58(s1);
          }
          s0 = s1;
          return s0;
        }
        function peg$parseDblQuoteStringSegment() {
          var s0, s1;
          s0 = peg$currPos;
          s1 = peg$parseArithmetic();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c59(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseSubshell();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c60(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseVariable();
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c61(s1);
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseDblQuoteStringText();
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c62(s1);
                }
                s0 = s1;
              }
            }
          }
          return s0;
        }
        function peg$parsePlainStringSegment() {
          var s0, s1;
          s0 = peg$currPos;
          s1 = peg$parseArithmetic();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c63(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseSubshell();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c64(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseVariable();
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c65(s1);
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseGlob();
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c66(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parsePlainStringText();
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c62(s1);
                  }
                  s0 = s1;
                }
              }
            }
          }
          return s0;
        }
        function peg$parseSglQuoteStringText() {
          var s0, s1, s2, s3, s4;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 92) {
            s3 = peg$c67;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c68);
            }
          }
          if (s3 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c69);
              }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s2;
              s3 = peg$c70(s4);
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            if (peg$c71.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c72);
              }
            }
          }
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 92) {
              s3 = peg$c67;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c68);
              }
            }
            if (s3 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c69);
                }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s2;
                s3 = peg$c70(s4);
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
              if (peg$c71.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c72);
                }
              }
            }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c73(s1);
          }
          s0 = s1;
          return s0;
        }
        function peg$parseDblQuoteStringText() {
          var s0, s1, s2, s3, s4;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 92) {
            s3 = peg$c67;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c68);
            }
          }
          if (s3 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c69);
              }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s2;
              s3 = peg$c70(s4);
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            if (peg$c74.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c75);
              }
            }
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 92) {
                s3 = peg$c67;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c68);
                }
              }
              if (s3 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c69);
                  }
                }
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s2;
                  s3 = peg$c70(s4);
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
              if (s2 === peg$FAILED) {
                if (peg$c74.test(input.charAt(peg$currPos))) {
                  s2 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c75);
                  }
                }
              }
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c73(s1);
          }
          s0 = s1;
          return s0;
        }
        function peg$parsePlainStringText() {
          var s0, s1, s2, s3, s4;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 92) {
            s3 = peg$c67;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c68);
            }
          }
          if (s3 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c69);
              }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s2;
              s3 = peg$c70(s4);
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$currPos;
            peg$silentFails++;
            s4 = peg$parseSpecialShellChars();
            peg$silentFails--;
            if (s4 === peg$FAILED) {
              s3 = void 0;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c69);
                }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s2;
                s3 = peg$c70(s4);
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 92) {
                s3 = peg$c67;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c68);
                }
              }
              if (s3 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c69);
                  }
                }
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s2;
                  s3 = peg$c70(s4);
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$currPos;
                peg$silentFails++;
                s4 = peg$parseSpecialShellChars();
                peg$silentFails--;
                if (s4 === peg$FAILED) {
                  s3 = void 0;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                  if (input.length > peg$currPos) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c69);
                    }
                  }
                  if (s4 !== peg$FAILED) {
                    peg$savedPos = s2;
                    s3 = peg$c70(s4);
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              }
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c73(s1);
          }
          s0 = s1;
          return s0;
        }
        function peg$parseArithmeticPrimary() {
          var s0, s1, s2, s3, s4, s5;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 45) {
            s1 = peg$c76;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c77);
            }
          }
          if (s1 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 43) {
              s1 = peg$c78;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c79);
              }
            }
          }
          if (s1 === peg$FAILED) {
            s1 = null;
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            if (peg$c80.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c81);
              }
            }
            if (s3 !== peg$FAILED) {
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                if (peg$c80.test(input.charAt(peg$currPos))) {
                  s3 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c81);
                  }
                }
              }
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s3 = peg$c82;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c83);
                }
              }
              if (s3 !== peg$FAILED) {
                s4 = [];
                if (peg$c80.test(input.charAt(peg$currPos))) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c81);
                  }
                }
                if (s5 !== peg$FAILED) {
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    if (peg$c80.test(input.charAt(peg$currPos))) {
                      s5 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c81);
                      }
                    }
                  }
                } else {
                  s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c84(s1, s2, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 45) {
              s1 = peg$c76;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c77);
              }
            }
            if (s1 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 43) {
                s1 = peg$c78;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c79);
                }
              }
            }
            if (s1 === peg$FAILED) {
              s1 = null;
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              if (peg$c80.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c81);
                }
              }
              if (s3 !== peg$FAILED) {
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  if (peg$c80.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c81);
                    }
                  }
                }
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c85(s1, s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseVariable();
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c86(s1);
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseIdentifier();
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c87(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 40) {
                    s1 = peg$c24;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c25);
                    }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$parseS();
                    while (s3 !== peg$FAILED) {
                      s2.push(s3);
                      s3 = peg$parseS();
                    }
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseArithmeticExpression();
                      if (s3 !== peg$FAILED) {
                        s4 = [];
                        s5 = peg$parseS();
                        while (s5 !== peg$FAILED) {
                          s4.push(s5);
                          s5 = peg$parseS();
                        }
                        if (s4 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 41) {
                            s5 = peg$c26;
                            peg$currPos++;
                          } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c27);
                            }
                          }
                          if (s5 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c88(s3);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                }
              }
            }
          }
          return s0;
        }
        function peg$parseArithmeticTimesExpression() {
          var s0, s1, s2, s3, s4, s5;
          s0 = peg$currPos;
          s1 = peg$parseArithmeticPrimary();
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseS();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseS();
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 42) {
                s3 = peg$c89;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c90);
                }
              }
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parseS();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parseS();
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseArithmeticTimesExpression();
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c91(s1, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseArithmeticPrimary();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parseS();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseS();
              }
              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 47) {
                  s3 = peg$c92;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c93);
                  }
                }
                if (s3 !== peg$FAILED) {
                  s4 = [];
                  s5 = peg$parseS();
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    s5 = peg$parseS();
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseArithmeticTimesExpression();
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c94(s1, s5);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$parseArithmeticPrimary();
            }
          }
          return s0;
        }
        function peg$parseArithmeticExpression() {
          var s0, s1, s2, s3, s4, s5;
          s0 = peg$currPos;
          s1 = peg$parseArithmeticTimesExpression();
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseS();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseS();
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 43) {
                s3 = peg$c78;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c79);
                }
              }
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parseS();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parseS();
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseArithmeticExpression();
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c95(s1, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseArithmeticTimesExpression();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parseS();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseS();
              }
              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 45) {
                  s3 = peg$c76;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c77);
                  }
                }
                if (s3 !== peg$FAILED) {
                  s4 = [];
                  s5 = peg$parseS();
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    s5 = peg$parseS();
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseArithmeticExpression();
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c96(s1, s5);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$parseArithmeticTimesExpression();
            }
          }
          return s0;
        }
        function peg$parseArithmetic() {
          var s0, s1, s2, s3, s4, s5;
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 3) === peg$c97) {
            s1 = peg$c97;
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c98);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseS();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseS();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseArithmeticExpression();
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parseS();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parseS();
                }
                if (s4 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c99) {
                    s5 = peg$c99;
                    peg$currPos += 2;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c100);
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c101(s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseSubshell() {
          var s0, s1, s2, s3;
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c102) {
            s1 = peg$c102;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c103);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseShellLine();
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s3 = peg$c26;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c27);
                }
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c104(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseVariable() {
          var s0, s1, s2, s3, s4, s5;
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c105) {
            s1 = peg$c105;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c106);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseIdentifier();
            if (s2 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c107) {
                s3 = peg$c107;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c108);
                }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseCommandString();
                if (s4 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s5 = peg$c31;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c32);
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c109(s2, s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c105) {
              s1 = peg$c105;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c106);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseIdentifier();
              if (s2 !== peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c110) {
                  s3 = peg$c110;
                  peg$currPos += 3;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c111);
                  }
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c112(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c105) {
                s1 = peg$c105;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c106);
                }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parseIdentifier();
                if (s2 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s3 = peg$c31;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c32);
                    }
                  }
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c113(s2);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 36) {
                  s1 = peg$c114;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c115);
                  }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseIdentifier();
                  if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c113(s2);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              }
            }
          }
          return s0;
        }
        function peg$parseGlob() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = peg$parseGlobText();
          if (s1 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s2 = peg$c116(s1);
            if (s2) {
              s2 = void 0;
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c117(s1);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseGlobText() {
          var s0, s1, s2, s3, s4;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$currPos;
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseGlobSpecialShellChars();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = void 0;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c69);
              }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s2;
              s3 = peg$c70(s4);
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$currPos;
              s3 = peg$currPos;
              peg$silentFails++;
              s4 = peg$parseGlobSpecialShellChars();
              peg$silentFails--;
              if (s4 === peg$FAILED) {
                s3 = void 0;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c69);
                  }
                }
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s2;
                  s3 = peg$c70(s4);
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c73(s1);
          }
          s0 = s1;
          return s0;
        }
        function peg$parseEnvVariable() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = [];
          if (peg$c118.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c119);
            }
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              if (peg$c118.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c119);
                }
              }
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c120();
          }
          s0 = s1;
          return s0;
        }
        function peg$parseIdentifier() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = [];
          if (peg$c121.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c122);
            }
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              if (peg$c121.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c122);
                }
              }
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c120();
          }
          s0 = s1;
          return s0;
        }
        function peg$parseSpecialShellChars() {
          var s0;
          if (peg$c123.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c124);
            }
          }
          return s0;
        }
        function peg$parseGlobSpecialShellChars() {
          var s0;
          if (peg$c125.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c126);
            }
          }
          return s0;
        }
        function peg$parseS() {
          var s0, s1;
          s0 = [];
          if (peg$c127.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c128);
            }
          }
          if (s1 !== peg$FAILED) {
            while (s1 !== peg$FAILED) {
              s0.push(s1);
              if (peg$c127.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c128);
                }
              }
            }
          } else {
            s0 = peg$FAILED;
          }
          return s0;
        }
        peg$result = peg$startRuleFunction();
        if (peg$result !== peg$FAILED && peg$currPos === input.length) {
          return peg$result;
        } else {
          if (peg$result !== peg$FAILED && peg$currPos < input.length) {
            peg$fail(peg$endExpectation());
          }
          throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
        }
      }
      module.exports = {
        SyntaxError: peg$SyntaxError,
        parse: peg$parse
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-parsers/sources/grammars/resolution.js
  var require_resolution = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-parsers/sources/grammars/resolution.js"(exports, module) {
      "use strict";
      function peg$subclass(child, parent) {
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
      }
      function peg$SyntaxError(message, expected, found, location) {
        this.message = message;
        this.expected = expected;
        this.found = found;
        this.location = location;
        this.name = "SyntaxError";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, peg$SyntaxError);
        }
      }
      peg$subclass(peg$SyntaxError, Error);
      peg$SyntaxError.buildMessage = function(expected, found) {
        var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return `"${literalEscape(expectation.text)}"`;
          },
          "class": function(expectation) {
            var escapedParts = "", i;
            for (i = 0; i < expectation.parts.length; i++)
              escapedParts += expectation.parts[i] instanceof Array ? `${classEscape(expectation.parts[i][0])}-${classEscape(expectation.parts[i][1])}` : classEscape(expectation.parts[i]);
            return `[${expectation.inverted ? "^" : ""}${escapedParts}]`;
          },
          any: function(expectation) {
            return "any character";
          },
          end: function(expectation) {
            return "end of input";
          },
          other: function(expectation) {
            return expectation.description;
          }
        };
        function hex(ch) {
          return ch.charCodeAt(0).toString(16).toUpperCase();
        }
        function literalEscape(s) {
          return s.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
            return `\\x0${hex(ch)}`;
          }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
            return `\\x${hex(ch)}`;
          });
        }
        function classEscape(s) {
          return s.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
            return `\\x0${hex(ch)}`;
          }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
            return `\\x${hex(ch)}`;
          });
        }
        function describeExpectation(expectation) {
          return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
        }
        function describeExpected(expected2) {
          var descriptions = new Array(expected2.length), i, j;
          for (i = 0; i < expected2.length; i++)
            descriptions[i] = describeExpectation(expected2[i]);
          descriptions.sort();
          if (descriptions.length > 0) {
            for (i = 1, j = 1; i < descriptions.length; i++) {
              if (descriptions[i - 1] !== descriptions[i]) {
                descriptions[j] = descriptions[i];
                j++;
              }
            }
            descriptions.length = j;
          }
          switch (descriptions.length) {
            case 1:
              return descriptions[0];
            case 2:
              return `${descriptions[0]} or ${descriptions[1]}`;
            default:
              return `${descriptions.slice(0, -1).join(", ")}, or ${descriptions[descriptions.length - 1]}`;
          }
        }
        function describeFound(found2) {
          return found2 ? `"${literalEscape(found2)}"` : "end of input";
        }
        return `Expected ${describeExpected(expected)} but ${describeFound(found)} found.`;
      };
      function peg$parse(input, options) {
        options = options !== void 0 ? options : {};
        var peg$FAILED = {}, peg$startRuleFunctions = {resolution: peg$parseresolution}, peg$startRuleFunction = peg$parseresolution, peg$c0 = "/", peg$c1 = peg$literalExpectation("/", false), peg$c2 = function(from, descriptor) {
          return {from, descriptor};
        }, peg$c3 = function(descriptor) {
          return {descriptor};
        }, peg$c4 = "@", peg$c5 = peg$literalExpectation("@", false), peg$c6 = function(fullName, description) {
          return {fullName, description};
        }, peg$c7 = function(fullName) {
          return {fullName};
        }, peg$c8 = function() {
          return text();
        }, peg$c9 = /^[^\/@]/, peg$c10 = peg$classExpectation(["/", "@"], true, false), peg$c11 = /^[^\/]/, peg$c12 = peg$classExpectation(["/"], true, false), peg$currPos = 0, peg$savedPos = 0, peg$posDetailsCache = [{line: 1, column: 1}], peg$maxFailPos = 0, peg$maxFailExpected = [], peg$silentFails = 0, peg$result;
        if ("startRule" in options) {
          if (!(options.startRule in peg$startRuleFunctions))
            throw new Error(`Can't start parsing from rule "${options.startRule}".`);
          peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
        }
        function text() {
          return input.substring(peg$savedPos, peg$currPos);
        }
        function location() {
          return peg$computeLocation(peg$savedPos, peg$currPos);
        }
        function expected(description, location2) {
          location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
          throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location2);
        }
        function error(message, location2) {
          location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
          throw peg$buildSimpleError(message, location2);
        }
        function peg$literalExpectation(text2, ignoreCase) {
          return {type: "literal", text: text2, ignoreCase};
        }
        function peg$classExpectation(parts, inverted, ignoreCase) {
          return {type: "class", parts, inverted, ignoreCase};
        }
        function peg$anyExpectation() {
          return {type: "any"};
        }
        function peg$endExpectation() {
          return {type: "end"};
        }
        function peg$otherExpectation(description) {
          return {type: "other", description};
        }
        function peg$computePosDetails(pos) {
          var details = peg$posDetailsCache[pos], p;
          if (details) {
            return details;
          } else {
            p = pos - 1;
            while (!peg$posDetailsCache[p])
              p--;
            details = peg$posDetailsCache[p];
            details = {
              line: details.line,
              column: details.column
            };
            while (p < pos) {
              if (input.charCodeAt(p) === 10) {
                details.line++;
                details.column = 1;
              } else {
                details.column++;
              }
              p++;
            }
            peg$posDetailsCache[pos] = details;
            return details;
          }
        }
        function peg$computeLocation(startPos, endPos) {
          var startPosDetails = peg$computePosDetails(startPos), endPosDetails = peg$computePosDetails(endPos);
          return {
            start: {
              offset: startPos,
              line: startPosDetails.line,
              column: startPosDetails.column
            },
            end: {
              offset: endPos,
              line: endPosDetails.line,
              column: endPosDetails.column
            }
          };
        }
        function peg$fail(expected2) {
          if (peg$currPos < peg$maxFailPos)
            return;
          if (peg$currPos > peg$maxFailPos) {
            peg$maxFailPos = peg$currPos;
            peg$maxFailExpected = [];
          }
          peg$maxFailExpected.push(expected2);
        }
        function peg$buildSimpleError(message, location2) {
          return new peg$SyntaxError(message, null, null, location2);
        }
        function peg$buildStructuredError(expected2, found, location2) {
          return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected2, found), expected2, found, location2);
        }
        function peg$parseresolution() {
          var s0, s1, s2, s3;
          s0 = peg$currPos;
          s1 = peg$parsespecifier();
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s2 = peg$c0;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c1);
              }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsespecifier();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c2(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsespecifier();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c3(s1);
            }
            s0 = s1;
          }
          return s0;
        }
        function peg$parsespecifier() {
          var s0, s1, s2, s3;
          s0 = peg$currPos;
          s1 = peg$parsefullName();
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 64) {
              s2 = peg$c4;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c5);
              }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsedescription();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c6(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsefullName();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c7(s1);
            }
            s0 = s1;
          }
          return s0;
        }
        function peg$parsefullName() {
          var s0, s1, s2, s3, s4;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 64) {
            s1 = peg$c4;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c5);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseident();
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 47) {
                s3 = peg$c0;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c1);
                }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseident();
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c8();
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseident();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c8();
            }
            s0 = s1;
          }
          return s0;
        }
        function peg$parseident() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = [];
          if (peg$c9.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c10);
            }
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              if (peg$c9.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c10);
                }
              }
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c8();
          }
          s0 = s1;
          return s0;
        }
        function peg$parsedescription() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = [];
          if (peg$c11.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c12);
            }
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              if (peg$c11.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c12);
                }
              }
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c8();
          }
          s0 = s1;
          return s0;
        }
        peg$result = peg$startRuleFunction();
        if (peg$result !== peg$FAILED && peg$currPos === input.length) {
          return peg$result;
        } else {
          if (peg$result !== peg$FAILED && peg$currPos < input.length)
            peg$fail(peg$endExpectation());
          throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
        }
      }
      module.exports = {
        SyntaxError: peg$SyntaxError,
        parse: peg$parse
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/common.js
  var require_common2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/common.js"(exports, module) {
      "use strict";
      function isNothing(subject) {
        return typeof subject === "undefined" || subject === null;
      }
      function isObject2(subject) {
        return typeof subject === "object" && subject !== null;
      }
      function toArray(sequence) {
        if (Array.isArray(sequence))
          return sequence;
        else if (isNothing(sequence))
          return [];
        return [sequence];
      }
      function extend(target, source) {
        var index, length, key, sourceKeys;
        if (source) {
          sourceKeys = Object.keys(source);
          for (index = 0, length = sourceKeys.length; index < length; index += 1) {
            key = sourceKeys[index];
            target[key] = source[key];
          }
        }
        return target;
      }
      function repeat(string, count) {
        var result = "", cycle;
        for (cycle = 0; cycle < count; cycle += 1) {
          result += string;
        }
        return result;
      }
      function isNegativeZero(number) {
        return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;
      }
      module.exports.isNothing = isNothing;
      module.exports.isObject = isObject2;
      module.exports.toArray = toArray;
      module.exports.repeat = repeat;
      module.exports.isNegativeZero = isNegativeZero;
      module.exports.extend = extend;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/exception.js
  var require_exception = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/exception.js"(exports, module) {
      "use strict";
      function YAMLException(reason, mark2) {
        Error.call(this);
        this.name = "YAMLException";
        this.reason = reason;
        this.mark = mark2;
        this.message = (this.reason || "(unknown reason)") + (this.mark ? " " + this.mark.toString() : "");
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
        } else {
          this.stack = new Error().stack || "";
        }
      }
      YAMLException.prototype = Object.create(Error.prototype);
      YAMLException.prototype.constructor = YAMLException;
      YAMLException.prototype.toString = function toString(compact) {
        var result = this.name + ": ";
        result += this.reason || "(unknown reason)";
        if (!compact && this.mark) {
          result += " " + this.mark.toString();
        }
        return result;
      };
      module.exports = YAMLException;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/mark.js
  var require_mark = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/mark.js"(exports, module) {
      "use strict";
      var common = require_common2();
      function Mark(name, buffer, position, line, column) {
        this.name = name;
        this.buffer = buffer;
        this.position = position;
        this.line = line;
        this.column = column;
      }
      Mark.prototype.getSnippet = function getSnippet(indent, maxLength) {
        var head, start2, tail, end, snippet;
        if (!this.buffer)
          return null;
        indent = indent || 4;
        maxLength = maxLength || 75;
        head = "";
        start2 = this.position;
        while (start2 > 0 && "\0\r\n\x85\u2028\u2029".indexOf(this.buffer.charAt(start2 - 1)) === -1) {
          start2 -= 1;
          if (this.position - start2 > maxLength / 2 - 1) {
            head = " ... ";
            start2 += 5;
            break;
          }
        }
        tail = "";
        end = this.position;
        while (end < this.buffer.length && "\0\r\n\x85\u2028\u2029".indexOf(this.buffer.charAt(end)) === -1) {
          end += 1;
          if (end - this.position > maxLength / 2 - 1) {
            tail = " ... ";
            end -= 5;
            break;
          }
        }
        snippet = this.buffer.slice(start2, end);
        return common.repeat(" ", indent) + head + snippet + tail + "\n" + common.repeat(" ", indent + this.position - start2 + head.length) + "^";
      };
      Mark.prototype.toString = function toString(compact) {
        var snippet, where = "";
        if (this.name) {
          where += 'in "' + this.name + '" ';
        }
        where += "at line " + (this.line + 1) + ", column " + (this.column + 1);
        if (!compact) {
          snippet = this.getSnippet();
          if (snippet) {
            where += ":\n" + snippet;
          }
        }
        return where;
      };
      module.exports = Mark;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/type.js
  var require_type = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/type.js"(exports, module) {
      "use strict";
      var YAMLException = require_exception();
      var TYPE_CONSTRUCTOR_OPTIONS = [
        "kind",
        "resolve",
        "construct",
        "instanceOf",
        "predicate",
        "represent",
        "defaultStyle",
        "styleAliases"
      ];
      var YAML_NODE_KINDS = [
        "scalar",
        "sequence",
        "mapping"
      ];
      function compileStyleAliases(map) {
        var result = {};
        if (map !== null) {
          Object.keys(map).forEach(function(style) {
            map[style].forEach(function(alias) {
              result[String(alias)] = style;
            });
          });
        }
        return result;
      }
      function Type2(tag, options) {
        options = options || {};
        Object.keys(options).forEach(function(name) {
          if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
            throw new YAMLException('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
          }
        });
        this.tag = tag;
        this.kind = options["kind"] || null;
        this.resolve = options["resolve"] || function() {
          return true;
        };
        this.construct = options["construct"] || function(data) {
          return data;
        };
        this.instanceOf = options["instanceOf"] || null;
        this.predicate = options["predicate"] || null;
        this.represent = options["represent"] || null;
        this.defaultStyle = options["defaultStyle"] || null;
        this.styleAliases = compileStyleAliases(options["styleAliases"] || null);
        if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
          throw new YAMLException('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
        }
      }
      module.exports = Type2;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/schema.js
  var require_schema = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/schema.js"(exports, module) {
      "use strict";
      var common = require_common2();
      var YAMLException = require_exception();
      var Type2 = require_type();
      function compileList(schema, name, result) {
        var exclude = [];
        schema.include.forEach(function(includedSchema) {
          result = compileList(includedSchema, name, result);
        });
        schema[name].forEach(function(currentType) {
          result.forEach(function(previousType, previousIndex) {
            if (previousType.tag === currentType.tag && previousType.kind === currentType.kind) {
              exclude.push(previousIndex);
            }
          });
          result.push(currentType);
        });
        return result.filter(function(type, index) {
          return exclude.indexOf(index) === -1;
        });
      }
      function compileMap() {
        var result = {
          scalar: {},
          sequence: {},
          mapping: {},
          fallback: {}
        }, index, length;
        function collectType(type) {
          result[type.kind][type.tag] = result["fallback"][type.tag] = type;
        }
        for (index = 0, length = arguments.length; index < length; index += 1) {
          arguments[index].forEach(collectType);
        }
        return result;
      }
      function Schema(definition) {
        this.include = definition.include || [];
        this.implicit = definition.implicit || [];
        this.explicit = definition.explicit || [];
        this.implicit.forEach(function(type) {
          if (type.loadKind && type.loadKind !== "scalar") {
            throw new YAMLException("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");
          }
        });
        this.compiledImplicit = compileList(this, "implicit", []);
        this.compiledExplicit = compileList(this, "explicit", []);
        this.compiledTypeMap = compileMap(this.compiledImplicit, this.compiledExplicit);
      }
      Schema.DEFAULT = null;
      Schema.create = function createSchema() {
        var schemas, types2;
        switch (arguments.length) {
          case 1:
            schemas = Schema.DEFAULT;
            types2 = arguments[0];
            break;
          case 2:
            schemas = arguments[0];
            types2 = arguments[1];
            break;
          default:
            throw new YAMLException("Wrong number of arguments for Schema.create function");
        }
        schemas = common.toArray(schemas);
        types2 = common.toArray(types2);
        if (!schemas.every(function(schema) {
          return schema instanceof Schema;
        })) {
          throw new YAMLException("Specified list of super schemas (or a single Schema object) contains a non-Schema object.");
        }
        if (!types2.every(function(type) {
          return type instanceof Type2;
        })) {
          throw new YAMLException("Specified list of YAML types (or a single Type object) contains a non-Type object.");
        }
        return new Schema({
          include: schemas,
          explicit: types2
        });
      };
      module.exports = Schema;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/type/str.js
  var require_str = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/type/str.js"(exports, module) {
      "use strict";
      var Type2 = require_type();
      module.exports = new Type2("tag:yaml.org,2002:str", {
        kind: "scalar",
        construct: function(data) {
          return data !== null ? data : "";
        }
      });
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/type/seq.js
  var require_seq = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/type/seq.js"(exports, module) {
      "use strict";
      var Type2 = require_type();
      module.exports = new Type2("tag:yaml.org,2002:seq", {
        kind: "sequence",
        construct: function(data) {
          return data !== null ? data : [];
        }
      });
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/type/map.js
  var require_map = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/type/map.js"(exports, module) {
      "use strict";
      var Type2 = require_type();
      module.exports = new Type2("tag:yaml.org,2002:map", {
        kind: "mapping",
        construct: function(data) {
          return data !== null ? data : {};
        }
      });
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/schema/failsafe.js
  var require_failsafe = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/schema/failsafe.js"(exports, module) {
      "use strict";
      var Schema = require_schema();
      module.exports = new Schema({
        explicit: [
          require_str(),
          require_seq(),
          require_map()
        ]
      });
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/type/null.js
  var require_null = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/type/null.js"(exports, module) {
      "use strict";
      var Type2 = require_type();
      function resolveYamlNull(data) {
        if (data === null)
          return true;
        var max = data.length;
        return max === 1 && data === "~" || max === 4 && (data === "null" || data === "Null" || data === "NULL");
      }
      function constructYamlNull() {
        return null;
      }
      function isNull(object) {
        return object === null;
      }
      module.exports = new Type2("tag:yaml.org,2002:null", {
        kind: "scalar",
        resolve: resolveYamlNull,
        construct: constructYamlNull,
        predicate: isNull,
        represent: {
          canonical: function() {
            return "~";
          },
          lowercase: function() {
            return "null";
          },
          uppercase: function() {
            return "NULL";
          },
          camelcase: function() {
            return "Null";
          }
        },
        defaultStyle: "lowercase"
      });
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/type/bool.js
  var require_bool = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/type/bool.js"(exports, module) {
      "use strict";
      var Type2 = require_type();
      function resolveYamlBoolean(data) {
        if (data === null)
          return false;
        var max = data.length;
        return max === 4 && (data === "true" || data === "True" || data === "TRUE") || max === 5 && (data === "false" || data === "False" || data === "FALSE");
      }
      function constructYamlBoolean(data) {
        return data === "true" || data === "True" || data === "TRUE";
      }
      function isBoolean2(object) {
        return Object.prototype.toString.call(object) === "[object Boolean]";
      }
      module.exports = new Type2("tag:yaml.org,2002:bool", {
        kind: "scalar",
        resolve: resolveYamlBoolean,
        construct: constructYamlBoolean,
        predicate: isBoolean2,
        represent: {
          lowercase: function(object) {
            return object ? "true" : "false";
          },
          uppercase: function(object) {
            return object ? "TRUE" : "FALSE";
          },
          camelcase: function(object) {
            return object ? "True" : "False";
          }
        },
        defaultStyle: "lowercase"
      });
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/type/int.js
  var require_int = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/type/int.js"(exports, module) {
      "use strict";
      var common = require_common2();
      var Type2 = require_type();
      function isHexCode(c) {
        return 48 <= c && c <= 57 || 65 <= c && c <= 70 || 97 <= c && c <= 102;
      }
      function isOctCode(c) {
        return 48 <= c && c <= 55;
      }
      function isDecCode(c) {
        return 48 <= c && c <= 57;
      }
      function resolveYamlInteger(data) {
        if (data === null)
          return false;
        var max = data.length, index = 0, hasDigits = false, ch;
        if (!max)
          return false;
        ch = data[index];
        if (ch === "-" || ch === "+") {
          ch = data[++index];
        }
        if (ch === "0") {
          if (index + 1 === max)
            return true;
          ch = data[++index];
          if (ch === "b") {
            index++;
            for (; index < max; index++) {
              ch = data[index];
              if (ch === "_")
                continue;
              if (ch !== "0" && ch !== "1")
                return false;
              hasDigits = true;
            }
            return hasDigits && ch !== "_";
          }
          if (ch === "x") {
            index++;
            for (; index < max; index++) {
              ch = data[index];
              if (ch === "_")
                continue;
              if (!isHexCode(data.charCodeAt(index)))
                return false;
              hasDigits = true;
            }
            return hasDigits && ch !== "_";
          }
          for (; index < max; index++) {
            ch = data[index];
            if (ch === "_")
              continue;
            if (!isOctCode(data.charCodeAt(index)))
              return false;
            hasDigits = true;
          }
          return hasDigits && ch !== "_";
        }
        if (ch === "_")
          return false;
        for (; index < max; index++) {
          ch = data[index];
          if (ch === "_")
            continue;
          if (ch === ":")
            break;
          if (!isDecCode(data.charCodeAt(index))) {
            return false;
          }
          hasDigits = true;
        }
        if (!hasDigits || ch === "_")
          return false;
        if (ch !== ":")
          return true;
        return /^(:[0-5]?[0-9])+$/.test(data.slice(index));
      }
      function constructYamlInteger(data) {
        var value = data, sign = 1, ch, base, digits = [];
        if (value.indexOf("_") !== -1) {
          value = value.replace(/_/g, "");
        }
        ch = value[0];
        if (ch === "-" || ch === "+") {
          if (ch === "-")
            sign = -1;
          value = value.slice(1);
          ch = value[0];
        }
        if (value === "0")
          return 0;
        if (ch === "0") {
          if (value[1] === "b")
            return sign * parseInt(value.slice(2), 2);
          if (value[1] === "x")
            return sign * parseInt(value, 16);
          return sign * parseInt(value, 8);
        }
        if (value.indexOf(":") !== -1) {
          value.split(":").forEach(function(v) {
            digits.unshift(parseInt(v, 10));
          });
          value = 0;
          base = 1;
          digits.forEach(function(d) {
            value += d * base;
            base *= 60;
          });
          return sign * value;
        }
        return sign * parseInt(value, 10);
      }
      function isInteger2(object) {
        return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 === 0 && !common.isNegativeZero(object));
      }
      module.exports = new Type2("tag:yaml.org,2002:int", {
        kind: "scalar",
        resolve: resolveYamlInteger,
        construct: constructYamlInteger,
        predicate: isInteger2,
        represent: {
          binary: function(obj) {
            return obj >= 0 ? "0b" + obj.toString(2) : "-0b" + obj.toString(2).slice(1);
          },
          octal: function(obj) {
            return obj >= 0 ? "0" + obj.toString(8) : "-0" + obj.toString(8).slice(1);
          },
          decimal: function(obj) {
            return obj.toString(10);
          },
          hexadecimal: function(obj) {
            return obj >= 0 ? "0x" + obj.toString(16).toUpperCase() : "-0x" + obj.toString(16).toUpperCase().slice(1);
          }
        },
        defaultStyle: "decimal",
        styleAliases: {
          binary: [2, "bin"],
          octal: [8, "oct"],
          decimal: [10, "dec"],
          hexadecimal: [16, "hex"]
        }
      });
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/type/float.js
  var require_float = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/type/float.js"(exports, module) {
      "use strict";
      var common = require_common2();
      var Type2 = require_type();
      var YAML_FLOAT_PATTERN = new RegExp("^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$");
      function resolveYamlFloat(data) {
        if (data === null)
          return false;
        if (!YAML_FLOAT_PATTERN.test(data) || data[data.length - 1] === "_") {
          return false;
        }
        return true;
      }
      function constructYamlFloat(data) {
        var value, sign, base, digits;
        value = data.replace(/_/g, "").toLowerCase();
        sign = value[0] === "-" ? -1 : 1;
        digits = [];
        if ("+-".indexOf(value[0]) >= 0) {
          value = value.slice(1);
        }
        if (value === ".inf") {
          return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
        } else if (value === ".nan") {
          return NaN;
        } else if (value.indexOf(":") >= 0) {
          value.split(":").forEach(function(v) {
            digits.unshift(parseFloat(v, 10));
          });
          value = 0;
          base = 1;
          digits.forEach(function(d) {
            value += d * base;
            base *= 60;
          });
          return sign * value;
        }
        return sign * parseFloat(value, 10);
      }
      var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
      function representYamlFloat(object, style) {
        var res;
        if (isNaN(object)) {
          switch (style) {
            case "lowercase":
              return ".nan";
            case "uppercase":
              return ".NAN";
            case "camelcase":
              return ".NaN";
          }
        } else if (Number.POSITIVE_INFINITY === object) {
          switch (style) {
            case "lowercase":
              return ".inf";
            case "uppercase":
              return ".INF";
            case "camelcase":
              return ".Inf";
          }
        } else if (Number.NEGATIVE_INFINITY === object) {
          switch (style) {
            case "lowercase":
              return "-.inf";
            case "uppercase":
              return "-.INF";
            case "camelcase":
              return "-.Inf";
          }
        } else if (common.isNegativeZero(object)) {
          return "-0.0";
        }
        res = object.toString(10);
        return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace("e", ".e") : res;
      }
      function isFloat(object) {
        return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 !== 0 || common.isNegativeZero(object));
      }
      module.exports = new Type2("tag:yaml.org,2002:float", {
        kind: "scalar",
        resolve: resolveYamlFloat,
        construct: constructYamlFloat,
        predicate: isFloat,
        represent: representYamlFloat,
        defaultStyle: "lowercase"
      });
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/schema/json.js
  var require_json = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/schema/json.js"(exports, module) {
      "use strict";
      var Schema = require_schema();
      module.exports = new Schema({
        include: [
          require_failsafe()
        ],
        implicit: [
          require_null(),
          require_bool(),
          require_int(),
          require_float()
        ]
      });
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/schema/core.js
  var require_core2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/schema/core.js"(exports, module) {
      "use strict";
      var Schema = require_schema();
      module.exports = new Schema({
        include: [
          require_json()
        ]
      });
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/type/timestamp.js
  var require_timestamp = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/type/timestamp.js"(exports, module) {
      "use strict";
      var Type2 = require_type();
      var YAML_DATE_REGEXP = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$");
      var YAML_TIMESTAMP_REGEXP = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$");
      function resolveYamlTimestamp(data) {
        if (data === null)
          return false;
        if (YAML_DATE_REGEXP.exec(data) !== null)
          return true;
        if (YAML_TIMESTAMP_REGEXP.exec(data) !== null)
          return true;
        return false;
      }
      function constructYamlTimestamp(data) {
        var match2, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date;
        match2 = YAML_DATE_REGEXP.exec(data);
        if (match2 === null)
          match2 = YAML_TIMESTAMP_REGEXP.exec(data);
        if (match2 === null)
          throw new Error("Date resolve error");
        year = +match2[1];
        month = +match2[2] - 1;
        day = +match2[3];
        if (!match2[4]) {
          return new Date(Date.UTC(year, month, day));
        }
        hour = +match2[4];
        minute = +match2[5];
        second = +match2[6];
        if (match2[7]) {
          fraction = match2[7].slice(0, 3);
          while (fraction.length < 3) {
            fraction += "0";
          }
          fraction = +fraction;
        }
        if (match2[9]) {
          tz_hour = +match2[10];
          tz_minute = +(match2[11] || 0);
          delta = (tz_hour * 60 + tz_minute) * 6e4;
          if (match2[9] === "-")
            delta = -delta;
        }
        date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
        if (delta)
          date.setTime(date.getTime() - delta);
        return date;
      }
      function representYamlTimestamp(object) {
        return object.toISOString();
      }
      module.exports = new Type2("tag:yaml.org,2002:timestamp", {
        kind: "scalar",
        resolve: resolveYamlTimestamp,
        construct: constructYamlTimestamp,
        instanceOf: Date,
        represent: representYamlTimestamp
      });
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/type/merge.js
  var require_merge = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/type/merge.js"(exports, module) {
      "use strict";
      var Type2 = require_type();
      function resolveYamlMerge(data) {
        return data === "<<" || data === null;
      }
      module.exports = new Type2("tag:yaml.org,2002:merge", {
        kind: "scalar",
        resolve: resolveYamlMerge
      });
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/type/binary.js
  var require_binary = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/type/binary.js"(exports, module) {
      "use strict";
      var NodeBuffer;
      try {
        _require = require;
        NodeBuffer = _require("buffer").Buffer;
      } catch (__) {
      }
      var _require;
      var Type2 = require_type();
      var BASE64_MAP = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";
      function resolveYamlBinary(data) {
        if (data === null)
          return false;
        var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;
        for (idx = 0; idx < max; idx++) {
          code = map.indexOf(data.charAt(idx));
          if (code > 64)
            continue;
          if (code < 0)
            return false;
          bitlen += 6;
        }
        return bitlen % 8 === 0;
      }
      function constructYamlBinary(data) {
        var idx, tailbits, input = data.replace(/[\r\n=]/g, ""), max = input.length, map = BASE64_MAP, bits = 0, result = [];
        for (idx = 0; idx < max; idx++) {
          if (idx % 4 === 0 && idx) {
            result.push(bits >> 16 & 255);
            result.push(bits >> 8 & 255);
            result.push(bits & 255);
          }
          bits = bits << 6 | map.indexOf(input.charAt(idx));
        }
        tailbits = max % 4 * 6;
        if (tailbits === 0) {
          result.push(bits >> 16 & 255);
          result.push(bits >> 8 & 255);
          result.push(bits & 255);
        } else if (tailbits === 18) {
          result.push(bits >> 10 & 255);
          result.push(bits >> 2 & 255);
        } else if (tailbits === 12) {
          result.push(bits >> 4 & 255);
        }
        if (NodeBuffer) {
          return NodeBuffer.from ? NodeBuffer.from(result) : new NodeBuffer(result);
        }
        return result;
      }
      function representYamlBinary(object) {
        var result = "", bits = 0, idx, tail, max = object.length, map = BASE64_MAP;
        for (idx = 0; idx < max; idx++) {
          if (idx % 3 === 0 && idx) {
            result += map[bits >> 18 & 63];
            result += map[bits >> 12 & 63];
            result += map[bits >> 6 & 63];
            result += map[bits & 63];
          }
          bits = (bits << 8) + object[idx];
        }
        tail = max % 3;
        if (tail === 0) {
          result += map[bits >> 18 & 63];
          result += map[bits >> 12 & 63];
          result += map[bits >> 6 & 63];
          result += map[bits & 63];
        } else if (tail === 2) {
          result += map[bits >> 10 & 63];
          result += map[bits >> 4 & 63];
          result += map[bits << 2 & 63];
          result += map[64];
        } else if (tail === 1) {
          result += map[bits >> 2 & 63];
          result += map[bits << 4 & 63];
          result += map[64];
          result += map[64];
        }
        return result;
      }
      function isBinary(object) {
        return NodeBuffer && NodeBuffer.isBuffer(object);
      }
      module.exports = new Type2("tag:yaml.org,2002:binary", {
        kind: "scalar",
        resolve: resolveYamlBinary,
        construct: constructYamlBinary,
        predicate: isBinary,
        represent: representYamlBinary
      });
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/type/omap.js
  var require_omap = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/type/omap.js"(exports, module) {
      "use strict";
      var Type2 = require_type();
      var _hasOwnProperty = Object.prototype.hasOwnProperty;
      var _toString = Object.prototype.toString;
      function resolveYamlOmap(data) {
        if (data === null)
          return true;
        var objectKeys = [], index, length, pair, pairKey, pairHasKey, object = data;
        for (index = 0, length = object.length; index < length; index += 1) {
          pair = object[index];
          pairHasKey = false;
          if (_toString.call(pair) !== "[object Object]")
            return false;
          for (pairKey in pair) {
            if (_hasOwnProperty.call(pair, pairKey)) {
              if (!pairHasKey)
                pairHasKey = true;
              else
                return false;
            }
          }
          if (!pairHasKey)
            return false;
          if (objectKeys.indexOf(pairKey) === -1)
            objectKeys.push(pairKey);
          else
            return false;
        }
        return true;
      }
      function constructYamlOmap(data) {
        return data !== null ? data : [];
      }
      module.exports = new Type2("tag:yaml.org,2002:omap", {
        kind: "sequence",
        resolve: resolveYamlOmap,
        construct: constructYamlOmap
      });
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/type/pairs.js
  var require_pairs = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/type/pairs.js"(exports, module) {
      "use strict";
      var Type2 = require_type();
      var _toString = Object.prototype.toString;
      function resolveYamlPairs(data) {
        if (data === null)
          return true;
        var index, length, pair, keys, result, object = data;
        result = new Array(object.length);
        for (index = 0, length = object.length; index < length; index += 1) {
          pair = object[index];
          if (_toString.call(pair) !== "[object Object]")
            return false;
          keys = Object.keys(pair);
          if (keys.length !== 1)
            return false;
          result[index] = [keys[0], pair[keys[0]]];
        }
        return true;
      }
      function constructYamlPairs(data) {
        if (data === null)
          return [];
        var index, length, pair, keys, result, object = data;
        result = new Array(object.length);
        for (index = 0, length = object.length; index < length; index += 1) {
          pair = object[index];
          keys = Object.keys(pair);
          result[index] = [keys[0], pair[keys[0]]];
        }
        return result;
      }
      module.exports = new Type2("tag:yaml.org,2002:pairs", {
        kind: "sequence",
        resolve: resolveYamlPairs,
        construct: constructYamlPairs
      });
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/type/set.js
  var require_set = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/type/set.js"(exports, module) {
      "use strict";
      var Type2 = require_type();
      var _hasOwnProperty = Object.prototype.hasOwnProperty;
      function resolveYamlSet(data) {
        if (data === null)
          return true;
        var key, object = data;
        for (key in object) {
          if (_hasOwnProperty.call(object, key)) {
            if (object[key] !== null)
              return false;
          }
        }
        return true;
      }
      function constructYamlSet(data) {
        return data !== null ? data : {};
      }
      module.exports = new Type2("tag:yaml.org,2002:set", {
        kind: "mapping",
        resolve: resolveYamlSet,
        construct: constructYamlSet
      });
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js
  var require_default_safe = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js"(exports, module) {
      "use strict";
      var Schema = require_schema();
      module.exports = new Schema({
        include: [
          require_core2()
        ],
        implicit: [
          require_timestamp(),
          require_merge()
        ],
        explicit: [
          require_binary(),
          require_omap(),
          require_pairs(),
          require_set()
        ]
      });
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/type/js/undefined.js
  var require_undefined = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/type/js/undefined.js"(exports, module) {
      "use strict";
      var Type2 = require_type();
      function resolveJavascriptUndefined() {
        return true;
      }
      function constructJavascriptUndefined() {
        return void 0;
      }
      function representJavascriptUndefined() {
        return "";
      }
      function isUndefined(object) {
        return typeof object === "undefined";
      }
      module.exports = new Type2("tag:yaml.org,2002:js/undefined", {
        kind: "scalar",
        resolve: resolveJavascriptUndefined,
        construct: constructJavascriptUndefined,
        predicate: isUndefined,
        represent: representJavascriptUndefined
      });
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/type/js/regexp.js
  var require_regexp = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/type/js/regexp.js"(exports, module) {
      "use strict";
      var Type2 = require_type();
      function resolveJavascriptRegExp(data) {
        if (data === null)
          return false;
        if (data.length === 0)
          return false;
        var regexp = data, tail = /\/([gim]*)$/.exec(data), modifiers = "";
        if (regexp[0] === "/") {
          if (tail)
            modifiers = tail[1];
          if (modifiers.length > 3)
            return false;
          if (regexp[regexp.length - modifiers.length - 1] !== "/")
            return false;
        }
        return true;
      }
      function constructJavascriptRegExp(data) {
        var regexp = data, tail = /\/([gim]*)$/.exec(data), modifiers = "";
        if (regexp[0] === "/") {
          if (tail)
            modifiers = tail[1];
          regexp = regexp.slice(1, regexp.length - modifiers.length - 1);
        }
        return new RegExp(regexp, modifiers);
      }
      function representJavascriptRegExp(object) {
        var result = "/" + object.source + "/";
        if (object.global)
          result += "g";
        if (object.multiline)
          result += "m";
        if (object.ignoreCase)
          result += "i";
        return result;
      }
      function isRegExp(object) {
        return Object.prototype.toString.call(object) === "[object RegExp]";
      }
      module.exports = new Type2("tag:yaml.org,2002:js/regexp", {
        kind: "scalar",
        resolve: resolveJavascriptRegExp,
        construct: constructJavascriptRegExp,
        predicate: isRegExp,
        represent: representJavascriptRegExp
      });
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/type/js/function.js
  var require_function = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/type/js/function.js"(exports, module) {
      "use strict";
      var esprima;
      try {
        _require = require;
        esprima = _require("esprima");
      } catch (_) {
        if (typeof window !== "undefined")
          esprima = window.esprima;
      }
      var _require;
      var Type2 = require_type();
      function resolveJavascriptFunction(data) {
        if (data === null)
          return false;
        try {
          var source = "(" + data + ")", ast = esprima.parse(source, {range: true});
          if (ast.type !== "Program" || ast.body.length !== 1 || ast.body[0].type !== "ExpressionStatement" || ast.body[0].expression.type !== "ArrowFunctionExpression" && ast.body[0].expression.type !== "FunctionExpression") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      function constructJavascriptFunction(data) {
        var source = "(" + data + ")", ast = esprima.parse(source, {range: true}), params = [], body;
        if (ast.type !== "Program" || ast.body.length !== 1 || ast.body[0].type !== "ExpressionStatement" || ast.body[0].expression.type !== "ArrowFunctionExpression" && ast.body[0].expression.type !== "FunctionExpression") {
          throw new Error("Failed to resolve function");
        }
        ast.body[0].expression.params.forEach(function(param) {
          params.push(param.name);
        });
        body = ast.body[0].expression.body.range;
        if (ast.body[0].expression.body.type === "BlockStatement") {
          return new Function(params, source.slice(body[0] + 1, body[1] - 1));
        }
        return new Function(params, "return " + source.slice(body[0], body[1]));
      }
      function representJavascriptFunction(object) {
        return object.toString();
      }
      function isFunction(object) {
        return Object.prototype.toString.call(object) === "[object Function]";
      }
      module.exports = new Type2("tag:yaml.org,2002:js/function", {
        kind: "scalar",
        resolve: resolveJavascriptFunction,
        construct: constructJavascriptFunction,
        predicate: isFunction,
        represent: representJavascriptFunction
      });
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/schema/default_full.js
  var require_default_full = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/schema/default_full.js"(exports, module) {
      "use strict";
      var Schema = require_schema();
      module.exports = Schema.DEFAULT = new Schema({
        include: [
          require_default_safe()
        ],
        explicit: [
          require_undefined(),
          require_regexp(),
          require_function()
        ]
      });
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/loader.js
  var require_loader = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/loader.js"(exports, module) {
      "use strict";
      var common = require_common2();
      var YAMLException = require_exception();
      var Mark = require_mark();
      var DEFAULT_SAFE_SCHEMA = require_default_safe();
      var DEFAULT_FULL_SCHEMA = require_default_full();
      var _hasOwnProperty = Object.prototype.hasOwnProperty;
      var CONTEXT_FLOW_IN = 1;
      var CONTEXT_FLOW_OUT = 2;
      var CONTEXT_BLOCK_IN = 3;
      var CONTEXT_BLOCK_OUT = 4;
      var CHOMPING_CLIP = 1;
      var CHOMPING_STRIP = 2;
      var CHOMPING_KEEP = 3;
      var PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
      var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
      var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
      var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
      var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
      function _class(obj) {
        return Object.prototype.toString.call(obj);
      }
      function is_EOL(c) {
        return c === 10 || c === 13;
      }
      function is_WHITE_SPACE(c) {
        return c === 9 || c === 32;
      }
      function is_WS_OR_EOL(c) {
        return c === 9 || c === 32 || c === 10 || c === 13;
      }
      function is_FLOW_INDICATOR(c) {
        return c === 44 || c === 91 || c === 93 || c === 123 || c === 125;
      }
      function fromHexCode(c) {
        var lc;
        if (48 <= c && c <= 57) {
          return c - 48;
        }
        lc = c | 32;
        if (97 <= lc && lc <= 102) {
          return lc - 97 + 10;
        }
        return -1;
      }
      function escapedHexLen(c) {
        if (c === 120) {
          return 2;
        }
        if (c === 117) {
          return 4;
        }
        if (c === 85) {
          return 8;
        }
        return 0;
      }
      function fromDecimalCode(c) {
        if (48 <= c && c <= 57) {
          return c - 48;
        }
        return -1;
      }
      function simpleEscapeSequence(c) {
        return c === 48 ? "\0" : c === 97 ? "\x07" : c === 98 ? "\b" : c === 116 ? "	" : c === 9 ? "	" : c === 110 ? "\n" : c === 118 ? "\v" : c === 102 ? "\f" : c === 114 ? "\r" : c === 101 ? "" : c === 32 ? " " : c === 34 ? '"' : c === 47 ? "/" : c === 92 ? "\\" : c === 78 ? "\x85" : c === 95 ? "\xA0" : c === 76 ? "\u2028" : c === 80 ? "\u2029" : "";
      }
      function charFromCodepoint(c) {
        if (c <= 65535) {
          return String.fromCharCode(c);
        }
        return String.fromCharCode((c - 65536 >> 10) + 55296, (c - 65536 & 1023) + 56320);
      }
      var simpleEscapeCheck = new Array(256);
      var simpleEscapeMap = new Array(256);
      for (var i = 0; i < 256; i++) {
        simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
        simpleEscapeMap[i] = simpleEscapeSequence(i);
      }
      function State(input, options) {
        this.input = input;
        this.filename = options["filename"] || null;
        this.schema = options["schema"] || DEFAULT_FULL_SCHEMA;
        this.onWarning = options["onWarning"] || null;
        this.legacy = options["legacy"] || false;
        this.json = options["json"] || false;
        this.listener = options["listener"] || null;
        this.implicitTypes = this.schema.compiledImplicit;
        this.typeMap = this.schema.compiledTypeMap;
        this.length = input.length;
        this.position = 0;
        this.line = 0;
        this.lineStart = 0;
        this.lineIndent = 0;
        this.documents = [];
      }
      function generateError(state, message) {
        return new YAMLException(message, new Mark(state.filename, state.input, state.position, state.line, state.position - state.lineStart));
      }
      function throwError(state, message) {
        throw generateError(state, message);
      }
      function throwWarning(state, message) {
        if (state.onWarning) {
          state.onWarning.call(null, generateError(state, message));
        }
      }
      var directiveHandlers = {
        YAML: function handleYamlDirective(state, name, args) {
          var match2, major, minor;
          if (state.version !== null) {
            throwError(state, "duplication of %YAML directive");
          }
          if (args.length !== 1) {
            throwError(state, "YAML directive accepts exactly one argument");
          }
          match2 = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
          if (match2 === null) {
            throwError(state, "ill-formed argument of the YAML directive");
          }
          major = parseInt(match2[1], 10);
          minor = parseInt(match2[2], 10);
          if (major !== 1) {
            throwError(state, "unacceptable YAML version of the document");
          }
          state.version = args[0];
          state.checkLineBreaks = minor < 2;
          if (minor !== 1 && minor !== 2) {
            throwWarning(state, "unsupported YAML version of the document");
          }
        },
        TAG: function handleTagDirective(state, name, args) {
          var handle, prefix;
          if (args.length !== 2) {
            throwError(state, "TAG directive accepts exactly two arguments");
          }
          handle = args[0];
          prefix = args[1];
          if (!PATTERN_TAG_HANDLE.test(handle)) {
            throwError(state, "ill-formed tag handle (first argument) of the TAG directive");
          }
          if (_hasOwnProperty.call(state.tagMap, handle)) {
            throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
          }
          if (!PATTERN_TAG_URI.test(prefix)) {
            throwError(state, "ill-formed tag prefix (second argument) of the TAG directive");
          }
          state.tagMap[handle] = prefix;
        }
      };
      function captureSegment(state, start2, end, checkJson) {
        var _position, _length, _character, _result;
        if (start2 < end) {
          _result = state.input.slice(start2, end);
          if (checkJson) {
            for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
              _character = _result.charCodeAt(_position);
              if (!(_character === 9 || 32 <= _character && _character <= 1114111)) {
                throwError(state, "expected valid JSON character");
              }
            }
          } else if (PATTERN_NON_PRINTABLE.test(_result)) {
            throwError(state, "the stream contains non-printable characters");
          }
          state.result += _result;
        }
      }
      function mergeMappings(state, destination, source, overridableKeys) {
        var sourceKeys, key, index, quantity;
        if (!common.isObject(source)) {
          throwError(state, "cannot merge mappings; the provided source object is unacceptable");
        }
        sourceKeys = Object.keys(source);
        for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
          key = sourceKeys[index];
          if (!_hasOwnProperty.call(destination, key)) {
            destination[key] = source[key];
            overridableKeys[key] = true;
          }
        }
      }
      function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startPos) {
        var index, quantity;
        if (Array.isArray(keyNode)) {
          keyNode = Array.prototype.slice.call(keyNode);
          for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {
            if (Array.isArray(keyNode[index])) {
              throwError(state, "nested arrays are not supported inside keys");
            }
            if (typeof keyNode === "object" && _class(keyNode[index]) === "[object Object]") {
              keyNode[index] = "[object Object]";
            }
          }
        }
        if (typeof keyNode === "object" && _class(keyNode) === "[object Object]") {
          keyNode = "[object Object]";
        }
        keyNode = String(keyNode);
        if (_result === null) {
          _result = {};
        }
        if (keyTag === "tag:yaml.org,2002:merge") {
          if (Array.isArray(valueNode)) {
            for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {
              mergeMappings(state, _result, valueNode[index], overridableKeys);
            }
          } else {
            mergeMappings(state, _result, valueNode, overridableKeys);
          }
        } else {
          if (!state.json && !_hasOwnProperty.call(overridableKeys, keyNode) && _hasOwnProperty.call(_result, keyNode)) {
            state.line = startLine || state.line;
            state.position = startPos || state.position;
            throwError(state, "duplicated mapping key");
          }
          _result[keyNode] = valueNode;
          delete overridableKeys[keyNode];
        }
        return _result;
      }
      function readLineBreak(state) {
        var ch;
        ch = state.input.charCodeAt(state.position);
        if (ch === 10) {
          state.position++;
        } else if (ch === 13) {
          state.position++;
          if (state.input.charCodeAt(state.position) === 10) {
            state.position++;
          }
        } else {
          throwError(state, "a line break is expected");
        }
        state.line += 1;
        state.lineStart = state.position;
      }
      function skipSeparationSpace(state, allowComments, checkIndent) {
        var lineBreaks = 0, ch = state.input.charCodeAt(state.position);
        while (ch !== 0) {
          while (is_WHITE_SPACE(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }
          if (allowComments && ch === 35) {
            do {
              ch = state.input.charCodeAt(++state.position);
            } while (ch !== 10 && ch !== 13 && ch !== 0);
          }
          if (is_EOL(ch)) {
            readLineBreak(state);
            ch = state.input.charCodeAt(state.position);
            lineBreaks++;
            state.lineIndent = 0;
            while (ch === 32) {
              state.lineIndent++;
              ch = state.input.charCodeAt(++state.position);
            }
          } else {
            break;
          }
        }
        if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
          throwWarning(state, "deficient indentation");
        }
        return lineBreaks;
      }
      function testDocumentSeparator(state) {
        var _position = state.position, ch;
        ch = state.input.charCodeAt(_position);
        if ((ch === 45 || ch === 46) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
          _position += 3;
          ch = state.input.charCodeAt(_position);
          if (ch === 0 || is_WS_OR_EOL(ch)) {
            return true;
          }
        }
        return false;
      }
      function writeFoldedLines(state, count) {
        if (count === 1) {
          state.result += " ";
        } else if (count > 1) {
          state.result += common.repeat("\n", count - 1);
        }
      }
      function readPlainScalar(state, nodeIndent, withinFlowCollection) {
        var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;
        ch = state.input.charCodeAt(state.position);
        if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 35 || ch === 38 || ch === 42 || ch === 33 || ch === 124 || ch === 62 || ch === 39 || ch === 34 || ch === 37 || ch === 64 || ch === 96) {
          return false;
        }
        if (ch === 63 || ch === 45) {
          following = state.input.charCodeAt(state.position + 1);
          if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
            return false;
          }
        }
        state.kind = "scalar";
        state.result = "";
        captureStart = captureEnd = state.position;
        hasPendingContent = false;
        while (ch !== 0) {
          if (ch === 58) {
            following = state.input.charCodeAt(state.position + 1);
            if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
              break;
            }
          } else if (ch === 35) {
            preceding = state.input.charCodeAt(state.position - 1);
            if (is_WS_OR_EOL(preceding)) {
              break;
            }
          } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {
            break;
          } else if (is_EOL(ch)) {
            _line = state.line;
            _lineStart = state.lineStart;
            _lineIndent = state.lineIndent;
            skipSeparationSpace(state, false, -1);
            if (state.lineIndent >= nodeIndent) {
              hasPendingContent = true;
              ch = state.input.charCodeAt(state.position);
              continue;
            } else {
              state.position = captureEnd;
              state.line = _line;
              state.lineStart = _lineStart;
              state.lineIndent = _lineIndent;
              break;
            }
          }
          if (hasPendingContent) {
            captureSegment(state, captureStart, captureEnd, false);
            writeFoldedLines(state, state.line - _line);
            captureStart = captureEnd = state.position;
            hasPendingContent = false;
          }
          if (!is_WHITE_SPACE(ch)) {
            captureEnd = state.position + 1;
          }
          ch = state.input.charCodeAt(++state.position);
        }
        captureSegment(state, captureStart, captureEnd, false);
        if (state.result) {
          return true;
        }
        state.kind = _kind;
        state.result = _result;
        return false;
      }
      function readSingleQuotedScalar(state, nodeIndent) {
        var ch, captureStart, captureEnd;
        ch = state.input.charCodeAt(state.position);
        if (ch !== 39) {
          return false;
        }
        state.kind = "scalar";
        state.result = "";
        state.position++;
        captureStart = captureEnd = state.position;
        while ((ch = state.input.charCodeAt(state.position)) !== 0) {
          if (ch === 39) {
            captureSegment(state, captureStart, state.position, true);
            ch = state.input.charCodeAt(++state.position);
            if (ch === 39) {
              captureStart = state.position;
              state.position++;
              captureEnd = state.position;
            } else {
              return true;
            }
          } else if (is_EOL(ch)) {
            captureSegment(state, captureStart, captureEnd, true);
            writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
            captureStart = captureEnd = state.position;
          } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
            throwError(state, "unexpected end of the document within a single quoted scalar");
          } else {
            state.position++;
            captureEnd = state.position;
          }
        }
        throwError(state, "unexpected end of the stream within a single quoted scalar");
      }
      function readDoubleQuotedScalar(state, nodeIndent) {
        var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
        ch = state.input.charCodeAt(state.position);
        if (ch !== 34) {
          return false;
        }
        state.kind = "scalar";
        state.result = "";
        state.position++;
        captureStart = captureEnd = state.position;
        while ((ch = state.input.charCodeAt(state.position)) !== 0) {
          if (ch === 34) {
            captureSegment(state, captureStart, state.position, true);
            state.position++;
            return true;
          } else if (ch === 92) {
            captureSegment(state, captureStart, state.position, true);
            ch = state.input.charCodeAt(++state.position);
            if (is_EOL(ch)) {
              skipSeparationSpace(state, false, nodeIndent);
            } else if (ch < 256 && simpleEscapeCheck[ch]) {
              state.result += simpleEscapeMap[ch];
              state.position++;
            } else if ((tmp = escapedHexLen(ch)) > 0) {
              hexLength = tmp;
              hexResult = 0;
              for (; hexLength > 0; hexLength--) {
                ch = state.input.charCodeAt(++state.position);
                if ((tmp = fromHexCode(ch)) >= 0) {
                  hexResult = (hexResult << 4) + tmp;
                } else {
                  throwError(state, "expected hexadecimal character");
                }
              }
              state.result += charFromCodepoint(hexResult);
              state.position++;
            } else {
              throwError(state, "unknown escape sequence");
            }
            captureStart = captureEnd = state.position;
          } else if (is_EOL(ch)) {
            captureSegment(state, captureStart, captureEnd, true);
            writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
            captureStart = captureEnd = state.position;
          } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
            throwError(state, "unexpected end of the document within a double quoted scalar");
          } else {
            state.position++;
            captureEnd = state.position;
          }
        }
        throwError(state, "unexpected end of the stream within a double quoted scalar");
      }
      function readFlowCollection(state, nodeIndent) {
        var readNext = true, _line, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, overridableKeys = {}, keyNode, keyTag, valueNode, ch;
        ch = state.input.charCodeAt(state.position);
        if (ch === 91) {
          terminator = 93;
          isMapping = false;
          _result = [];
        } else if (ch === 123) {
          terminator = 125;
          isMapping = true;
          _result = {};
        } else {
          return false;
        }
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = _result;
        }
        ch = state.input.charCodeAt(++state.position);
        while (ch !== 0) {
          skipSeparationSpace(state, true, nodeIndent);
          ch = state.input.charCodeAt(state.position);
          if (ch === terminator) {
            state.position++;
            state.tag = _tag;
            state.anchor = _anchor;
            state.kind = isMapping ? "mapping" : "sequence";
            state.result = _result;
            return true;
          } else if (!readNext) {
            throwError(state, "missed comma between flow collection entries");
          }
          keyTag = keyNode = valueNode = null;
          isPair = isExplicitPair = false;
          if (ch === 63) {
            following = state.input.charCodeAt(state.position + 1);
            if (is_WS_OR_EOL(following)) {
              isPair = isExplicitPair = true;
              state.position++;
              skipSeparationSpace(state, true, nodeIndent);
            }
          }
          _line = state.line;
          composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
          keyTag = state.tag;
          keyNode = state.result;
          skipSeparationSpace(state, true, nodeIndent);
          ch = state.input.charCodeAt(state.position);
          if ((isExplicitPair || state.line === _line) && ch === 58) {
            isPair = true;
            ch = state.input.charCodeAt(++state.position);
            skipSeparationSpace(state, true, nodeIndent);
            composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
            valueNode = state.result;
          }
          if (isMapping) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode);
          } else if (isPair) {
            _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode));
          } else {
            _result.push(keyNode);
          }
          skipSeparationSpace(state, true, nodeIndent);
          ch = state.input.charCodeAt(state.position);
          if (ch === 44) {
            readNext = true;
            ch = state.input.charCodeAt(++state.position);
          } else {
            readNext = false;
          }
        }
        throwError(state, "unexpected end of the stream within a flow collection");
      }
      function readBlockScalar(state, nodeIndent) {
        var captureStart, folding, chomping = CHOMPING_CLIP, didReadContent = false, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;
        ch = state.input.charCodeAt(state.position);
        if (ch === 124) {
          folding = false;
        } else if (ch === 62) {
          folding = true;
        } else {
          return false;
        }
        state.kind = "scalar";
        state.result = "";
        while (ch !== 0) {
          ch = state.input.charCodeAt(++state.position);
          if (ch === 43 || ch === 45) {
            if (CHOMPING_CLIP === chomping) {
              chomping = ch === 43 ? CHOMPING_KEEP : CHOMPING_STRIP;
            } else {
              throwError(state, "repeat of a chomping mode identifier");
            }
          } else if ((tmp = fromDecimalCode(ch)) >= 0) {
            if (tmp === 0) {
              throwError(state, "bad explicit indentation width of a block scalar; it cannot be less than one");
            } else if (!detectedIndent) {
              textIndent = nodeIndent + tmp - 1;
              detectedIndent = true;
            } else {
              throwError(state, "repeat of an indentation width identifier");
            }
          } else {
            break;
          }
        }
        if (is_WHITE_SPACE(ch)) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (is_WHITE_SPACE(ch));
          if (ch === 35) {
            do {
              ch = state.input.charCodeAt(++state.position);
            } while (!is_EOL(ch) && ch !== 0);
          }
        }
        while (ch !== 0) {
          readLineBreak(state);
          state.lineIndent = 0;
          ch = state.input.charCodeAt(state.position);
          while ((!detectedIndent || state.lineIndent < textIndent) && ch === 32) {
            state.lineIndent++;
            ch = state.input.charCodeAt(++state.position);
          }
          if (!detectedIndent && state.lineIndent > textIndent) {
            textIndent = state.lineIndent;
          }
          if (is_EOL(ch)) {
            emptyLines++;
            continue;
          }
          if (state.lineIndent < textIndent) {
            if (chomping === CHOMPING_KEEP) {
              state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
            } else if (chomping === CHOMPING_CLIP) {
              if (didReadContent) {
                state.result += "\n";
              }
            }
            break;
          }
          if (folding) {
            if (is_WHITE_SPACE(ch)) {
              atMoreIndented = true;
              state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
            } else if (atMoreIndented) {
              atMoreIndented = false;
              state.result += common.repeat("\n", emptyLines + 1);
            } else if (emptyLines === 0) {
              if (didReadContent) {
                state.result += " ";
              }
            } else {
              state.result += common.repeat("\n", emptyLines);
            }
          } else {
            state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
          }
          didReadContent = true;
          detectedIndent = true;
          emptyLines = 0;
          captureStart = state.position;
          while (!is_EOL(ch) && ch !== 0) {
            ch = state.input.charCodeAt(++state.position);
          }
          captureSegment(state, captureStart, state.position, false);
        }
        return true;
      }
      function readBlockSequence(state, nodeIndent) {
        var _line, _tag = state.tag, _anchor = state.anchor, _result = [], following, detected = false, ch;
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = _result;
        }
        ch = state.input.charCodeAt(state.position);
        while (ch !== 0) {
          if (ch !== 45) {
            break;
          }
          following = state.input.charCodeAt(state.position + 1);
          if (!is_WS_OR_EOL(following)) {
            break;
          }
          detected = true;
          state.position++;
          if (skipSeparationSpace(state, true, -1)) {
            if (state.lineIndent <= nodeIndent) {
              _result.push(null);
              ch = state.input.charCodeAt(state.position);
              continue;
            }
          }
          _line = state.line;
          composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
          _result.push(state.result);
          skipSeparationSpace(state, true, -1);
          ch = state.input.charCodeAt(state.position);
          if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
            throwError(state, "bad indentation of a sequence entry");
          } else if (state.lineIndent < nodeIndent) {
            break;
          }
        }
        if (detected) {
          state.tag = _tag;
          state.anchor = _anchor;
          state.kind = "sequence";
          state.result = _result;
          return true;
        }
        return false;
      }
      function readBlockMapping(state, nodeIndent, flowIndent) {
        var following, allowCompact, _line, _pos, _tag = state.tag, _anchor = state.anchor, _result = {}, overridableKeys = {}, keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = _result;
        }
        ch = state.input.charCodeAt(state.position);
        while (ch !== 0) {
          following = state.input.charCodeAt(state.position + 1);
          _line = state.line;
          _pos = state.position;
          if ((ch === 63 || ch === 58) && is_WS_OR_EOL(following)) {
            if (ch === 63) {
              if (atExplicitKey) {
                storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
                keyTag = keyNode = valueNode = null;
              }
              detected = true;
              atExplicitKey = true;
              allowCompact = true;
            } else if (atExplicitKey) {
              atExplicitKey = false;
              allowCompact = true;
            } else {
              throwError(state, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line");
            }
            state.position += 1;
            ch = following;
          } else if (composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
            if (state.line === _line) {
              ch = state.input.charCodeAt(state.position);
              while (is_WHITE_SPACE(ch)) {
                ch = state.input.charCodeAt(++state.position);
              }
              if (ch === 58) {
                ch = state.input.charCodeAt(++state.position);
                if (!is_WS_OR_EOL(ch)) {
                  throwError(state, "a whitespace character is expected after the key-value separator within a block mapping");
                }
                if (atExplicitKey) {
                  storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
                  keyTag = keyNode = valueNode = null;
                }
                detected = true;
                atExplicitKey = false;
                allowCompact = false;
                keyTag = state.tag;
                keyNode = state.result;
              } else if (detected) {
                throwError(state, "can not read an implicit mapping pair; a colon is missed");
              } else {
                state.tag = _tag;
                state.anchor = _anchor;
                return true;
              }
            } else if (detected) {
              throwError(state, "can not read a block mapping entry; a multiline key may not be an implicit key");
            } else {
              state.tag = _tag;
              state.anchor = _anchor;
              return true;
            }
          } else {
            break;
          }
          if (state.line === _line || state.lineIndent > nodeIndent) {
            if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
              if (atExplicitKey) {
                keyNode = state.result;
              } else {
                valueNode = state.result;
              }
            }
            if (!atExplicitKey) {
              storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _pos);
              keyTag = keyNode = valueNode = null;
            }
            skipSeparationSpace(state, true, -1);
            ch = state.input.charCodeAt(state.position);
          }
          if (state.lineIndent > nodeIndent && ch !== 0) {
            throwError(state, "bad indentation of a mapping entry");
          } else if (state.lineIndent < nodeIndent) {
            break;
          }
        }
        if (atExplicitKey) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
        }
        if (detected) {
          state.tag = _tag;
          state.anchor = _anchor;
          state.kind = "mapping";
          state.result = _result;
        }
        return detected;
      }
      function readTagProperty(state) {
        var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;
        ch = state.input.charCodeAt(state.position);
        if (ch !== 33)
          return false;
        if (state.tag !== null) {
          throwError(state, "duplication of a tag property");
        }
        ch = state.input.charCodeAt(++state.position);
        if (ch === 60) {
          isVerbatim = true;
          ch = state.input.charCodeAt(++state.position);
        } else if (ch === 33) {
          isNamed = true;
          tagHandle = "!!";
          ch = state.input.charCodeAt(++state.position);
        } else {
          tagHandle = "!";
        }
        _position = state.position;
        if (isVerbatim) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (ch !== 0 && ch !== 62);
          if (state.position < state.length) {
            tagName = state.input.slice(_position, state.position);
            ch = state.input.charCodeAt(++state.position);
          } else {
            throwError(state, "unexpected end of the stream within a verbatim tag");
          }
        } else {
          while (ch !== 0 && !is_WS_OR_EOL(ch)) {
            if (ch === 33) {
              if (!isNamed) {
                tagHandle = state.input.slice(_position - 1, state.position + 1);
                if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
                  throwError(state, "named tag handle cannot contain such characters");
                }
                isNamed = true;
                _position = state.position + 1;
              } else {
                throwError(state, "tag suffix cannot contain exclamation marks");
              }
            }
            ch = state.input.charCodeAt(++state.position);
          }
          tagName = state.input.slice(_position, state.position);
          if (PATTERN_FLOW_INDICATORS.test(tagName)) {
            throwError(state, "tag suffix cannot contain flow indicator characters");
          }
        }
        if (tagName && !PATTERN_TAG_URI.test(tagName)) {
          throwError(state, "tag name cannot contain such characters: " + tagName);
        }
        if (isVerbatim) {
          state.tag = tagName;
        } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {
          state.tag = state.tagMap[tagHandle] + tagName;
        } else if (tagHandle === "!") {
          state.tag = "!" + tagName;
        } else if (tagHandle === "!!") {
          state.tag = "tag:yaml.org,2002:" + tagName;
        } else {
          throwError(state, 'undeclared tag handle "' + tagHandle + '"');
        }
        return true;
      }
      function readAnchorProperty(state) {
        var _position, ch;
        ch = state.input.charCodeAt(state.position);
        if (ch !== 38)
          return false;
        if (state.anchor !== null) {
          throwError(state, "duplication of an anchor property");
        }
        ch = state.input.charCodeAt(++state.position);
        _position = state.position;
        while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        if (state.position === _position) {
          throwError(state, "name of an anchor node must contain at least one character");
        }
        state.anchor = state.input.slice(_position, state.position);
        return true;
      }
      function readAlias(state) {
        var _position, alias, ch;
        ch = state.input.charCodeAt(state.position);
        if (ch !== 42)
          return false;
        ch = state.input.charCodeAt(++state.position);
        _position = state.position;
        while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        if (state.position === _position) {
          throwError(state, "name of an alias node must contain at least one character");
        }
        alias = state.input.slice(_position, state.position);
        if (!state.anchorMap.hasOwnProperty(alias)) {
          throwError(state, 'unidentified alias "' + alias + '"');
        }
        state.result = state.anchorMap[alias];
        skipSeparationSpace(state, true, -1);
        return true;
      }
      function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
        var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, type, flowIndent, blockIndent;
        if (state.listener !== null) {
          state.listener("open", state);
        }
        state.tag = null;
        state.anchor = null;
        state.kind = null;
        state.result = null;
        allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;
        if (allowToSeek) {
          if (skipSeparationSpace(state, true, -1)) {
            atNewLine = true;
            if (state.lineIndent > parentIndent) {
              indentStatus = 1;
            } else if (state.lineIndent === parentIndent) {
              indentStatus = 0;
            } else if (state.lineIndent < parentIndent) {
              indentStatus = -1;
            }
          }
        }
        if (indentStatus === 1) {
          while (readTagProperty(state) || readAnchorProperty(state)) {
            if (skipSeparationSpace(state, true, -1)) {
              atNewLine = true;
              allowBlockCollections = allowBlockStyles;
              if (state.lineIndent > parentIndent) {
                indentStatus = 1;
              } else if (state.lineIndent === parentIndent) {
                indentStatus = 0;
              } else if (state.lineIndent < parentIndent) {
                indentStatus = -1;
              }
            } else {
              allowBlockCollections = false;
            }
          }
        }
        if (allowBlockCollections) {
          allowBlockCollections = atNewLine || allowCompact;
        }
        if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
          if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
            flowIndent = parentIndent;
          } else {
            flowIndent = parentIndent + 1;
          }
          blockIndent = state.position - state.lineStart;
          if (indentStatus === 1) {
            if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {
              hasContent = true;
            } else {
              if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {
                hasContent = true;
              } else if (readAlias(state)) {
                hasContent = true;
                if (state.tag !== null || state.anchor !== null) {
                  throwError(state, "alias node should not have any properties");
                }
              } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
                hasContent = true;
                if (state.tag === null) {
                  state.tag = "?";
                }
              }
              if (state.anchor !== null) {
                state.anchorMap[state.anchor] = state.result;
              }
            }
          } else if (indentStatus === 0) {
            hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
          }
        }
        if (state.tag !== null && state.tag !== "!") {
          if (state.tag === "?") {
            for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
              type = state.implicitTypes[typeIndex];
              if (type.resolve(state.result)) {
                state.result = type.construct(state.result);
                state.tag = type.tag;
                if (state.anchor !== null) {
                  state.anchorMap[state.anchor] = state.result;
                }
                break;
              }
            }
          } else if (_hasOwnProperty.call(state.typeMap[state.kind || "fallback"], state.tag)) {
            type = state.typeMap[state.kind || "fallback"][state.tag];
            if (state.result !== null && type.kind !== state.kind) {
              throwError(state, "unacceptable node kind for !<" + state.tag + '> tag; it should be "' + type.kind + '", not "' + state.kind + '"');
            }
            if (!type.resolve(state.result)) {
              throwError(state, "cannot resolve a node with !<" + state.tag + "> explicit tag");
            } else {
              state.result = type.construct(state.result);
              if (state.anchor !== null) {
                state.anchorMap[state.anchor] = state.result;
              }
            }
          } else {
            throwError(state, "unknown tag !<" + state.tag + ">");
          }
        }
        if (state.listener !== null) {
          state.listener("close", state);
        }
        return state.tag !== null || state.anchor !== null || hasContent;
      }
      function readDocument(state) {
        var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;
        state.version = null;
        state.checkLineBreaks = state.legacy;
        state.tagMap = {};
        state.anchorMap = {};
        while ((ch = state.input.charCodeAt(state.position)) !== 0) {
          skipSeparationSpace(state, true, -1);
          ch = state.input.charCodeAt(state.position);
          if (state.lineIndent > 0 || ch !== 37) {
            break;
          }
          hasDirectives = true;
          ch = state.input.charCodeAt(++state.position);
          _position = state.position;
          while (ch !== 0 && !is_WS_OR_EOL(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }
          directiveName = state.input.slice(_position, state.position);
          directiveArgs = [];
          if (directiveName.length < 1) {
            throwError(state, "directive name must not be less than one character in length");
          }
          while (ch !== 0) {
            while (is_WHITE_SPACE(ch)) {
              ch = state.input.charCodeAt(++state.position);
            }
            if (ch === 35) {
              do {
                ch = state.input.charCodeAt(++state.position);
              } while (ch !== 0 && !is_EOL(ch));
              break;
            }
            if (is_EOL(ch))
              break;
            _position = state.position;
            while (ch !== 0 && !is_WS_OR_EOL(ch)) {
              ch = state.input.charCodeAt(++state.position);
            }
            directiveArgs.push(state.input.slice(_position, state.position));
          }
          if (ch !== 0)
            readLineBreak(state);
          if (_hasOwnProperty.call(directiveHandlers, directiveName)) {
            directiveHandlers[directiveName](state, directiveName, directiveArgs);
          } else {
            throwWarning(state, 'unknown document directive "' + directiveName + '"');
          }
        }
        skipSeparationSpace(state, true, -1);
        if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 45 && state.input.charCodeAt(state.position + 1) === 45 && state.input.charCodeAt(state.position + 2) === 45) {
          state.position += 3;
          skipSeparationSpace(state, true, -1);
        } else if (hasDirectives) {
          throwError(state, "directives end mark is expected");
        }
        composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
        skipSeparationSpace(state, true, -1);
        if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
          throwWarning(state, "non-ASCII line breaks are interpreted as content");
        }
        state.documents.push(state.result);
        if (state.position === state.lineStart && testDocumentSeparator(state)) {
          if (state.input.charCodeAt(state.position) === 46) {
            state.position += 3;
            skipSeparationSpace(state, true, -1);
          }
          return;
        }
        if (state.position < state.length - 1) {
          throwError(state, "end of the stream or a document separator is expected");
        } else {
          return;
        }
      }
      function loadDocuments(input, options) {
        input = String(input);
        options = options || {};
        if (input.length !== 0) {
          if (input.charCodeAt(input.length - 1) !== 10 && input.charCodeAt(input.length - 1) !== 13) {
            input += "\n";
          }
          if (input.charCodeAt(0) === 65279) {
            input = input.slice(1);
          }
        }
        var state = new State(input, options);
        state.input += "\0";
        while (state.input.charCodeAt(state.position) === 32) {
          state.lineIndent += 1;
          state.position += 1;
        }
        while (state.position < state.length - 1) {
          readDocument(state);
        }
        return state.documents;
      }
      function loadAll(input, iterator, options) {
        var documents = loadDocuments(input, options), index, length;
        if (typeof iterator !== "function") {
          return documents;
        }
        for (index = 0, length = documents.length; index < length; index += 1) {
          iterator(documents[index]);
        }
      }
      function load(input, options) {
        var documents = loadDocuments(input, options);
        if (documents.length === 0) {
          return void 0;
        } else if (documents.length === 1) {
          return documents[0];
        }
        throw new YAMLException("expected a single document in the stream, but found more");
      }
      function safeLoadAll(input, output, options) {
        if (typeof output === "function") {
          loadAll(input, output, common.extend({schema: DEFAULT_SAFE_SCHEMA}, options));
        } else {
          return loadAll(input, common.extend({schema: DEFAULT_SAFE_SCHEMA}, options));
        }
      }
      function safeLoad2(input, options) {
        return load(input, common.extend({schema: DEFAULT_SAFE_SCHEMA}, options));
      }
      module.exports.loadAll = loadAll;
      module.exports.load = load;
      module.exports.safeLoadAll = safeLoadAll;
      module.exports.safeLoad = safeLoad2;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/dumper.js
  var require_dumper = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml/dumper.js"(exports, module) {
      "use strict";
      var common = require_common2();
      var YAMLException = require_exception();
      var DEFAULT_FULL_SCHEMA = require_default_full();
      var DEFAULT_SAFE_SCHEMA = require_default_safe();
      var _toString = Object.prototype.toString;
      var _hasOwnProperty = Object.prototype.hasOwnProperty;
      var CHAR_TAB = 9;
      var CHAR_LINE_FEED = 10;
      var CHAR_SPACE = 32;
      var CHAR_EXCLAMATION = 33;
      var CHAR_DOUBLE_QUOTE = 34;
      var CHAR_SHARP = 35;
      var CHAR_PERCENT = 37;
      var CHAR_AMPERSAND = 38;
      var CHAR_SINGLE_QUOTE = 39;
      var CHAR_ASTERISK = 42;
      var CHAR_COMMA = 44;
      var CHAR_MINUS = 45;
      var CHAR_COLON = 58;
      var CHAR_GREATER_THAN = 62;
      var CHAR_QUESTION = 63;
      var CHAR_COMMERCIAL_AT = 64;
      var CHAR_LEFT_SQUARE_BRACKET = 91;
      var CHAR_RIGHT_SQUARE_BRACKET = 93;
      var CHAR_GRAVE_ACCENT = 96;
      var CHAR_LEFT_CURLY_BRACKET = 123;
      var CHAR_VERTICAL_LINE = 124;
      var CHAR_RIGHT_CURLY_BRACKET = 125;
      var ESCAPE_SEQUENCES = {};
      ESCAPE_SEQUENCES[0] = "\\0";
      ESCAPE_SEQUENCES[7] = "\\a";
      ESCAPE_SEQUENCES[8] = "\\b";
      ESCAPE_SEQUENCES[9] = "\\t";
      ESCAPE_SEQUENCES[10] = "\\n";
      ESCAPE_SEQUENCES[11] = "\\v";
      ESCAPE_SEQUENCES[12] = "\\f";
      ESCAPE_SEQUENCES[13] = "\\r";
      ESCAPE_SEQUENCES[27] = "\\e";
      ESCAPE_SEQUENCES[34] = '\\"';
      ESCAPE_SEQUENCES[92] = "\\\\";
      ESCAPE_SEQUENCES[133] = "\\N";
      ESCAPE_SEQUENCES[160] = "\\_";
      ESCAPE_SEQUENCES[8232] = "\\L";
      ESCAPE_SEQUENCES[8233] = "\\P";
      var DEPRECATED_BOOLEANS_SYNTAX = [
        "y",
        "Y",
        "yes",
        "Yes",
        "YES",
        "on",
        "On",
        "ON",
        "n",
        "N",
        "no",
        "No",
        "NO",
        "off",
        "Off",
        "OFF"
      ];
      function compileStyleMap(schema, map) {
        var result, keys, index, length, tag, style, type;
        if (map === null)
          return {};
        result = {};
        keys = Object.keys(map);
        for (index = 0, length = keys.length; index < length; index += 1) {
          tag = keys[index];
          style = String(map[tag]);
          if (tag.slice(0, 2) === "!!") {
            tag = "tag:yaml.org,2002:" + tag.slice(2);
          }
          type = schema.compiledTypeMap["fallback"][tag];
          if (type && _hasOwnProperty.call(type.styleAliases, style)) {
            style = type.styleAliases[style];
          }
          result[tag] = style;
        }
        return result;
      }
      function encodeHex(character) {
        var string, handle, length;
        string = character.toString(16).toUpperCase();
        if (character <= 255) {
          handle = "x";
          length = 2;
        } else if (character <= 65535) {
          handle = "u";
          length = 4;
        } else if (character <= 4294967295) {
          handle = "U";
          length = 8;
        } else {
          throw new YAMLException("code point within a string may not be greater than 0xFFFFFFFF");
        }
        return "\\" + handle + common.repeat("0", length - string.length) + string;
      }
      function State(options) {
        this.schema = options["schema"] || DEFAULT_FULL_SCHEMA;
        this.indent = Math.max(1, options["indent"] || 2);
        this.noArrayIndent = options["noArrayIndent"] || false;
        this.skipInvalid = options["skipInvalid"] || false;
        this.flowLevel = common.isNothing(options["flowLevel"]) ? -1 : options["flowLevel"];
        this.styleMap = compileStyleMap(this.schema, options["styles"] || null);
        this.sortKeys = options["sortKeys"] || false;
        this.lineWidth = options["lineWidth"] || 80;
        this.noRefs = options["noRefs"] || false;
        this.noCompatMode = options["noCompatMode"] || false;
        this.condenseFlow = options["condenseFlow"] || false;
        this.implicitTypes = this.schema.compiledImplicit;
        this.explicitTypes = this.schema.compiledExplicit;
        this.tag = null;
        this.result = "";
        this.duplicates = [];
        this.usedDuplicates = null;
      }
      function indentString(string, spaces) {
        var ind = common.repeat(" ", spaces), position = 0, next = -1, result = "", line, length = string.length;
        while (position < length) {
          next = string.indexOf("\n", position);
          if (next === -1) {
            line = string.slice(position);
            position = length;
          } else {
            line = string.slice(position, next + 1);
            position = next + 1;
          }
          if (line.length && line !== "\n")
            result += ind;
          result += line;
        }
        return result;
      }
      function generateNextLine(state, level) {
        return "\n" + common.repeat(" ", state.indent * level);
      }
      function testImplicitResolving(state, str) {
        var index, length, type;
        for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {
          type = state.implicitTypes[index];
          if (type.resolve(str)) {
            return true;
          }
        }
        return false;
      }
      function isWhitespace(c) {
        return c === CHAR_SPACE || c === CHAR_TAB;
      }
      function isPrintable(c) {
        return 32 <= c && c <= 126 || 161 <= c && c <= 55295 && c !== 8232 && c !== 8233 || 57344 <= c && c <= 65533 && c !== 65279 || 65536 <= c && c <= 1114111;
      }
      function isPlainSafe(c) {
        return isPrintable(c) && c !== 65279 && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_COLON && c !== CHAR_SHARP;
      }
      function isPlainSafeFirst(c) {
        return isPrintable(c) && c !== 65279 && !isWhitespace(c) && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;
      }
      function needIndentIndicator(string) {
        var leadingSpaceRe = /^\n* /;
        return leadingSpaceRe.test(string);
      }
      var STYLE_PLAIN = 1;
      var STYLE_SINGLE = 2;
      var STYLE_LITERAL = 3;
      var STYLE_FOLDED = 4;
      var STYLE_DOUBLE = 5;
      function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType) {
        var i;
        var char;
        var hasLineBreak = false;
        var hasFoldableLine = false;
        var shouldTrackWidth = lineWidth !== -1;
        var previousLineBreak = -1;
        var plain = isPlainSafeFirst(string.charCodeAt(0)) && !isWhitespace(string.charCodeAt(string.length - 1));
        if (singleLineOnly) {
          for (i = 0; i < string.length; i++) {
            char = string.charCodeAt(i);
            if (!isPrintable(char)) {
              return STYLE_DOUBLE;
            }
            plain = plain && isPlainSafe(char);
          }
        } else {
          for (i = 0; i < string.length; i++) {
            char = string.charCodeAt(i);
            if (char === CHAR_LINE_FEED) {
              hasLineBreak = true;
              if (shouldTrackWidth) {
                hasFoldableLine = hasFoldableLine || i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ";
                previousLineBreak = i;
              }
            } else if (!isPrintable(char)) {
              return STYLE_DOUBLE;
            }
            plain = plain && isPlainSafe(char);
          }
          hasFoldableLine = hasFoldableLine || shouldTrackWidth && (i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ");
        }
        if (!hasLineBreak && !hasFoldableLine) {
          return plain && !testAmbiguousType(string) ? STYLE_PLAIN : STYLE_SINGLE;
        }
        if (indentPerLevel > 9 && needIndentIndicator(string)) {
          return STYLE_DOUBLE;
        }
        return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
      }
      function writeScalar(state, string, level, iskey) {
        state.dump = function() {
          if (string.length === 0) {
            return "''";
          }
          if (!state.noCompatMode && DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1) {
            return "'" + string + "'";
          }
          var indent = state.indent * Math.max(1, level);
          var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);
          var singleLineOnly = iskey || state.flowLevel > -1 && level >= state.flowLevel;
          function testAmbiguity(string2) {
            return testImplicitResolving(state, string2);
          }
          switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth, testAmbiguity)) {
            case STYLE_PLAIN:
              return string;
            case STYLE_SINGLE:
              return "'" + string.replace(/'/g, "''") + "'";
            case STYLE_LITERAL:
              return "|" + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));
            case STYLE_FOLDED:
              return ">" + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));
            case STYLE_DOUBLE:
              return '"' + escapeString(string, lineWidth) + '"';
            default:
              throw new YAMLException("impossible error: invalid scalar style");
          }
        }();
      }
      function blockHeader(string, indentPerLevel) {
        var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : "";
        var clip = string[string.length - 1] === "\n";
        var keep = clip && (string[string.length - 2] === "\n" || string === "\n");
        var chomp = keep ? "+" : clip ? "" : "-";
        return indentIndicator + chomp + "\n";
      }
      function dropEndingNewline(string) {
        return string[string.length - 1] === "\n" ? string.slice(0, -1) : string;
      }
      function foldString(string, width) {
        var lineRe = /(\n+)([^\n]*)/g;
        var result = function() {
          var nextLF = string.indexOf("\n");
          nextLF = nextLF !== -1 ? nextLF : string.length;
          lineRe.lastIndex = nextLF;
          return foldLine(string.slice(0, nextLF), width);
        }();
        var prevMoreIndented = string[0] === "\n" || string[0] === " ";
        var moreIndented;
        var match2;
        while (match2 = lineRe.exec(string)) {
          var prefix = match2[1], line = match2[2];
          moreIndented = line[0] === " ";
          result += prefix + (!prevMoreIndented && !moreIndented && line !== "" ? "\n" : "") + foldLine(line, width);
          prevMoreIndented = moreIndented;
        }
        return result;
      }
      function foldLine(line, width) {
        if (line === "" || line[0] === " ")
          return line;
        var breakRe = / [^ ]/g;
        var match2;
        var start2 = 0, end, curr = 0, next = 0;
        var result = "";
        while (match2 = breakRe.exec(line)) {
          next = match2.index;
          if (next - start2 > width) {
            end = curr > start2 ? curr : next;
            result += "\n" + line.slice(start2, end);
            start2 = end + 1;
          }
          curr = next;
        }
        result += "\n";
        if (line.length - start2 > width && curr > start2) {
          result += line.slice(start2, curr) + "\n" + line.slice(curr + 1);
        } else {
          result += line.slice(start2);
        }
        return result.slice(1);
      }
      function escapeString(string) {
        var result = "";
        var char, nextChar;
        var escapeSeq;
        for (var i = 0; i < string.length; i++) {
          char = string.charCodeAt(i);
          if (char >= 55296 && char <= 56319) {
            nextChar = string.charCodeAt(i + 1);
            if (nextChar >= 56320 && nextChar <= 57343) {
              result += encodeHex((char - 55296) * 1024 + nextChar - 56320 + 65536);
              i++;
              continue;
            }
          }
          escapeSeq = ESCAPE_SEQUENCES[char];
          result += !escapeSeq && isPrintable(char) ? string[i] : escapeSeq || encodeHex(char);
        }
        return result;
      }
      function writeFlowSequence(state, level, object) {
        var _result = "", _tag = state.tag, index, length;
        for (index = 0, length = object.length; index < length; index += 1) {
          if (writeNode(state, level, object[index], false, false)) {
            if (index !== 0)
              _result += "," + (!state.condenseFlow ? " " : "");
            _result += state.dump;
          }
        }
        state.tag = _tag;
        state.dump = "[" + _result + "]";
      }
      function writeBlockSequence(state, level, object, compact) {
        var _result = "", _tag = state.tag, index, length;
        for (index = 0, length = object.length; index < length; index += 1) {
          if (writeNode(state, level + 1, object[index], true, true)) {
            if (!compact || index !== 0) {
              _result += generateNextLine(state, level);
            }
            if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
              _result += "-";
            } else {
              _result += "- ";
            }
            _result += state.dump;
          }
        }
        state.tag = _tag;
        state.dump = _result || "[]";
      }
      function writeFlowMapping(state, level, object) {
        var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, pairBuffer;
        for (index = 0, length = objectKeyList.length; index < length; index += 1) {
          pairBuffer = state.condenseFlow ? '"' : "";
          if (index !== 0)
            pairBuffer += ", ";
          objectKey = objectKeyList[index];
          objectValue = object[objectKey];
          if (!writeNode(state, level, objectKey, false, false)) {
            continue;
          }
          if (state.dump.length > 1024)
            pairBuffer += "? ";
          pairBuffer += state.dump + (state.condenseFlow ? '"' : "") + ":" + (state.condenseFlow ? "" : " ");
          if (!writeNode(state, level, objectValue, false, false)) {
            continue;
          }
          pairBuffer += state.dump;
          _result += pairBuffer;
        }
        state.tag = _tag;
        state.dump = "{" + _result + "}";
      }
      function writeBlockMapping(state, level, object, compact) {
        var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, explicitPair, pairBuffer;
        if (state.sortKeys === true) {
          objectKeyList.sort();
        } else if (typeof state.sortKeys === "function") {
          objectKeyList.sort(state.sortKeys);
        } else if (state.sortKeys) {
          throw new YAMLException("sortKeys must be a boolean or a function");
        }
        for (index = 0, length = objectKeyList.length; index < length; index += 1) {
          pairBuffer = "";
          if (!compact || index !== 0) {
            pairBuffer += generateNextLine(state, level);
          }
          objectKey = objectKeyList[index];
          objectValue = object[objectKey];
          if (!writeNode(state, level + 1, objectKey, true, true, true)) {
            continue;
          }
          explicitPair = state.tag !== null && state.tag !== "?" || state.dump && state.dump.length > 1024;
          if (explicitPair) {
            if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
              pairBuffer += "?";
            } else {
              pairBuffer += "? ";
            }
          }
          pairBuffer += state.dump;
          if (explicitPair) {
            pairBuffer += generateNextLine(state, level);
          }
          if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
            continue;
          }
          if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
            pairBuffer += ":";
          } else {
            pairBuffer += ": ";
          }
          pairBuffer += state.dump;
          _result += pairBuffer;
        }
        state.tag = _tag;
        state.dump = _result || "{}";
      }
      function detectType(state, object, explicit) {
        var _result, typeList, index, length, type, style;
        typeList = explicit ? state.explicitTypes : state.implicitTypes;
        for (index = 0, length = typeList.length; index < length; index += 1) {
          type = typeList[index];
          if ((type.instanceOf || type.predicate) && (!type.instanceOf || typeof object === "object" && object instanceof type.instanceOf) && (!type.predicate || type.predicate(object))) {
            state.tag = explicit ? type.tag : "?";
            if (type.represent) {
              style = state.styleMap[type.tag] || type.defaultStyle;
              if (_toString.call(type.represent) === "[object Function]") {
                _result = type.represent(object, style);
              } else if (_hasOwnProperty.call(type.represent, style)) {
                _result = type.represent[style](object, style);
              } else {
                throw new YAMLException("!<" + type.tag + '> tag resolver accepts not "' + style + '" style');
              }
              state.dump = _result;
            }
            return true;
          }
        }
        return false;
      }
      function writeNode(state, level, object, block, compact, iskey) {
        state.tag = null;
        state.dump = object;
        if (!detectType(state, object, false)) {
          detectType(state, object, true);
        }
        var type = _toString.call(state.dump);
        if (block) {
          block = state.flowLevel < 0 || state.flowLevel > level;
        }
        var objectOrArray = type === "[object Object]" || type === "[object Array]", duplicateIndex, duplicate;
        if (objectOrArray) {
          duplicateIndex = state.duplicates.indexOf(object);
          duplicate = duplicateIndex !== -1;
        }
        if (state.tag !== null && state.tag !== "?" || duplicate || state.indent !== 2 && level > 0) {
          compact = false;
        }
        if (duplicate && state.usedDuplicates[duplicateIndex]) {
          state.dump = "*ref_" + duplicateIndex;
        } else {
          if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
            state.usedDuplicates[duplicateIndex] = true;
          }
          if (type === "[object Object]") {
            if (block && Object.keys(state.dump).length !== 0) {
              writeBlockMapping(state, level, state.dump, compact);
              if (duplicate) {
                state.dump = "&ref_" + duplicateIndex + state.dump;
              }
            } else {
              writeFlowMapping(state, level, state.dump);
              if (duplicate) {
                state.dump = "&ref_" + duplicateIndex + " " + state.dump;
              }
            }
          } else if (type === "[object Array]") {
            var arrayLevel = state.noArrayIndent && level > 0 ? level - 1 : level;
            if (block && state.dump.length !== 0) {
              writeBlockSequence(state, arrayLevel, state.dump, compact);
              if (duplicate) {
                state.dump = "&ref_" + duplicateIndex + state.dump;
              }
            } else {
              writeFlowSequence(state, arrayLevel, state.dump);
              if (duplicate) {
                state.dump = "&ref_" + duplicateIndex + " " + state.dump;
              }
            }
          } else if (type === "[object String]") {
            if (state.tag !== "?") {
              writeScalar(state, state.dump, level, iskey);
            }
          } else {
            if (state.skipInvalid)
              return false;
            throw new YAMLException("unacceptable kind of an object to dump " + type);
          }
          if (state.tag !== null && state.tag !== "?") {
            state.dump = "!<" + state.tag + "> " + state.dump;
          }
        }
        return true;
      }
      function getDuplicateReferences(object, state) {
        var objects = [], duplicatesIndexes = [], index, length;
        inspectNode(object, objects, duplicatesIndexes);
        for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {
          state.duplicates.push(objects[duplicatesIndexes[index]]);
        }
        state.usedDuplicates = new Array(length);
      }
      function inspectNode(object, objects, duplicatesIndexes) {
        var objectKeyList, index, length;
        if (object !== null && typeof object === "object") {
          index = objects.indexOf(object);
          if (index !== -1) {
            if (duplicatesIndexes.indexOf(index) === -1) {
              duplicatesIndexes.push(index);
            }
          } else {
            objects.push(object);
            if (Array.isArray(object)) {
              for (index = 0, length = object.length; index < length; index += 1) {
                inspectNode(object[index], objects, duplicatesIndexes);
              }
            } else {
              objectKeyList = Object.keys(object);
              for (index = 0, length = objectKeyList.length; index < length; index += 1) {
                inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
              }
            }
          }
        }
      }
      function dump(input, options) {
        options = options || {};
        var state = new State(options);
        if (!state.noRefs)
          getDuplicateReferences(input, state);
        if (writeNode(state, 0, input, true, true))
          return state.dump + "\n";
        return "";
      }
      function safeDump(input, options) {
        return dump(input, common.extend({schema: DEFAULT_SAFE_SCHEMA}, options));
      }
      module.exports.dump = dump;
      module.exports.safeDump = safeDump;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml.js
  var require_js_yaml = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/lib/js-yaml.js"(exports, module) {
      "use strict";
      var loader = require_loader();
      var dumper = require_dumper();
      function deprecated(name) {
        return function() {
          throw new Error("Function " + name + " is deprecated and cannot be used.");
        };
      }
      module.exports.Type = require_type();
      module.exports.Schema = require_schema();
      module.exports.FAILSAFE_SCHEMA = require_failsafe();
      module.exports.JSON_SCHEMA = require_json();
      module.exports.CORE_SCHEMA = require_core2();
      module.exports.DEFAULT_SAFE_SCHEMA = require_default_safe();
      module.exports.DEFAULT_FULL_SCHEMA = require_default_full();
      module.exports.load = loader.load;
      module.exports.loadAll = loader.loadAll;
      module.exports.safeLoad = loader.safeLoad;
      module.exports.safeLoadAll = loader.safeLoadAll;
      module.exports.dump = dumper.dump;
      module.exports.safeDump = dumper.safeDump;
      module.exports.YAMLException = require_exception();
      module.exports.MINIMAL_SCHEMA = require_failsafe();
      module.exports.SAFE_SCHEMA = require_default_safe();
      module.exports.DEFAULT_SCHEMA = require_default_full();
      module.exports.scan = deprecated("scan");
      module.exports.parse = deprecated("parse");
      module.exports.compose = deprecated("compose");
      module.exports.addConstructor = deprecated("addConstructor");
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/index.js
  var require_js_yaml2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/js-yaml-npm-3.13.1-3a28ff3b75-7511b764ab.zip/node_modules/js-yaml/index.js"(exports, module) {
      "use strict";
      var yaml = require_js_yaml();
      module.exports = yaml;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-parsers/sources/grammars/syml.js
  var require_syml = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-parsers/sources/grammars/syml.js"(exports, module) {
      "use strict";
      function peg$subclass(child, parent) {
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
      }
      function peg$SyntaxError(message, expected, found, location) {
        this.message = message;
        this.expected = expected;
        this.found = found;
        this.location = location;
        this.name = "SyntaxError";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, peg$SyntaxError);
        }
      }
      peg$subclass(peg$SyntaxError, Error);
      peg$SyntaxError.buildMessage = function(expected, found) {
        var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return `"${literalEscape(expectation.text)}"`;
          },
          "class": function(expectation) {
            var escapedParts = "", i;
            for (i = 0; i < expectation.parts.length; i++)
              escapedParts += expectation.parts[i] instanceof Array ? `${classEscape(expectation.parts[i][0])}-${classEscape(expectation.parts[i][1])}` : classEscape(expectation.parts[i]);
            return `[${expectation.inverted ? "^" : ""}${escapedParts}]`;
          },
          any: function(expectation) {
            return "any character";
          },
          end: function(expectation) {
            return "end of input";
          },
          other: function(expectation) {
            return expectation.description;
          }
        };
        function hex(ch) {
          return ch.charCodeAt(0).toString(16).toUpperCase();
        }
        function literalEscape(s) {
          return s.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
            return `\\x0${hex(ch)}`;
          }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
            return `\\x${hex(ch)}`;
          });
        }
        function classEscape(s) {
          return s.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
            return `\\x0${hex(ch)}`;
          }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
            return `\\x${hex(ch)}`;
          });
        }
        function describeExpectation(expectation) {
          return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
        }
        function describeExpected(expected2) {
          var descriptions = new Array(expected2.length), i, j;
          for (i = 0; i < expected2.length; i++)
            descriptions[i] = describeExpectation(expected2[i]);
          descriptions.sort();
          if (descriptions.length > 0) {
            for (i = 1, j = 1; i < descriptions.length; i++) {
              if (descriptions[i - 1] !== descriptions[i]) {
                descriptions[j] = descriptions[i];
                j++;
              }
            }
            descriptions.length = j;
          }
          switch (descriptions.length) {
            case 1:
              return descriptions[0];
            case 2:
              return `${descriptions[0]} or ${descriptions[1]}`;
            default:
              return `${descriptions.slice(0, -1).join(", ")}, or ${descriptions[descriptions.length - 1]}`;
          }
        }
        function describeFound(found2) {
          return found2 ? `"${literalEscape(found2)}"` : "end of input";
        }
        return `Expected ${describeExpected(expected)} but ${describeFound(found)} found.`;
      };
      function peg$parse(input, options) {
        options = options !== void 0 ? options : {};
        var peg$FAILED = {}, peg$startRuleFunctions = {Start: peg$parseStart}, peg$startRuleFunction = peg$parseStart, peg$c0 = function(statements) {
          return [].concat(...statements);
        }, peg$c1 = "-", peg$c2 = peg$literalExpectation("-", false), peg$c3 = function(value) {
          return value;
        }, peg$c4 = function(statements) {
          return Object.assign({}, ...statements);
        }, peg$c5 = "#", peg$c6 = peg$literalExpectation("#", false), peg$c7 = peg$anyExpectation(), peg$c8 = function() {
          return {};
        }, peg$c9 = ":", peg$c10 = peg$literalExpectation(":", false), peg$c11 = function(property, value) {
          return {[property]: value};
        }, peg$c12 = ",", peg$c13 = peg$literalExpectation(",", false), peg$c14 = function(property, other) {
          return other;
        }, peg$c15 = function(property, others, value) {
          return Object.assign({}, ...[property].concat(others).map((property2) => ({[property2]: value})));
        }, peg$c16 = function(statements) {
          return statements;
        }, peg$c17 = function(expression) {
          return expression;
        }, peg$c18 = peg$otherExpectation("correct indentation"), peg$c19 = " ", peg$c20 = peg$literalExpectation(" ", false), peg$c21 = function(spaces) {
          return spaces.length === indentLevel * INDENT_STEP;
        }, peg$c22 = function(spaces) {
          return spaces.length === (indentLevel + 1) * INDENT_STEP;
        }, peg$c23 = function() {
          indentLevel++;
          return true;
        }, peg$c24 = function() {
          indentLevel--;
          return true;
        }, peg$c25 = function() {
          return text();
        }, peg$c26 = peg$otherExpectation("pseudostring"), peg$c27 = /^[^\r\n\t ?:,\][{}#&*!|>'"%@`\-]/, peg$c28 = peg$classExpectation(["\r", "\n", "	", " ", "?", ":", ",", "]", "[", "{", "}", "#", "&", "*", "!", "|", ">", "'", '"', "%", "@", "`", "-"], true, false), peg$c29 = /^[^\r\n\t ,\][{}:#"']/, peg$c30 = peg$classExpectation(["\r", "\n", "	", " ", ",", "]", "[", "{", "}", ":", "#", '"', "'"], true, false), peg$c31 = function() {
          return text().replace(/^ *| *$/g, "");
        }, peg$c32 = "--", peg$c33 = peg$literalExpectation("--", false), peg$c34 = /^[a-zA-Z\/0-9]/, peg$c35 = peg$classExpectation([["a", "z"], ["A", "Z"], "/", ["0", "9"]], false, false), peg$c36 = /^[^\r\n\t :,]/, peg$c37 = peg$classExpectation(["\r", "\n", "	", " ", ":", ","], true, false), peg$c38 = "null", peg$c39 = peg$literalExpectation("null", false), peg$c40 = function() {
          return null;
        }, peg$c41 = "true", peg$c42 = peg$literalExpectation("true", false), peg$c43 = function() {
          return true;
        }, peg$c44 = "false", peg$c45 = peg$literalExpectation("false", false), peg$c46 = function() {
          return false;
        }, peg$c47 = peg$otherExpectation("string"), peg$c48 = '"', peg$c49 = peg$literalExpectation('"', false), peg$c50 = function() {
          return "";
        }, peg$c51 = function(chars) {
          return chars;
        }, peg$c52 = function(chars) {
          return chars.join(``);
        }, peg$c53 = /^[^"\\\0-\x1F\x7F]/, peg$c54 = peg$classExpectation(['"', "\\", ["\0", ""], "\x7F"], true, false), peg$c55 = '\\"', peg$c56 = peg$literalExpectation('\\"', false), peg$c57 = function() {
          return `"`;
        }, peg$c58 = "\\\\", peg$c59 = peg$literalExpectation("\\\\", false), peg$c60 = function() {
          return `\\`;
        }, peg$c61 = "\\/", peg$c62 = peg$literalExpectation("\\/", false), peg$c63 = function() {
          return `/`;
        }, peg$c64 = "\\b", peg$c65 = peg$literalExpectation("\\b", false), peg$c66 = function() {
          return `\b`;
        }, peg$c67 = "\\f", peg$c68 = peg$literalExpectation("\\f", false), peg$c69 = function() {
          return `\f`;
        }, peg$c70 = "\\n", peg$c71 = peg$literalExpectation("\\n", false), peg$c72 = function() {
          return `
`;
        }, peg$c73 = "\\r", peg$c74 = peg$literalExpectation("\\r", false), peg$c75 = function() {
          return `\r`;
        }, peg$c76 = "\\t", peg$c77 = peg$literalExpectation("\\t", false), peg$c78 = function() {
          return `	`;
        }, peg$c79 = "\\u", peg$c80 = peg$literalExpectation("\\u", false), peg$c81 = function(h1, h2, h3, h4) {
          return String.fromCharCode(parseInt(`0x${h1}${h2}${h3}${h4}`));
        }, peg$c82 = /^[0-9a-fA-F]/, peg$c83 = peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false), peg$c84 = peg$otherExpectation("blank space"), peg$c85 = /^[ \t]/, peg$c86 = peg$classExpectation([" ", "	"], false, false), peg$c87 = peg$otherExpectation("white space"), peg$c88 = /^[ \t\n\r]/, peg$c89 = peg$classExpectation([" ", "	", "\n", "\r"], false, false), peg$c90 = "\r\n", peg$c91 = peg$literalExpectation("\r\n", false), peg$c92 = "\n", peg$c93 = peg$literalExpectation("\n", false), peg$c94 = "\r", peg$c95 = peg$literalExpectation("\r", false), peg$currPos = 0, peg$savedPos = 0, peg$posDetailsCache = [{line: 1, column: 1}], peg$maxFailPos = 0, peg$maxFailExpected = [], peg$silentFails = 0, peg$result;
        if ("startRule" in options) {
          if (!(options.startRule in peg$startRuleFunctions))
            throw new Error(`Can't start parsing from rule "${options.startRule}".`);
          peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
        }
        function text() {
          return input.substring(peg$savedPos, peg$currPos);
        }
        function location() {
          return peg$computeLocation(peg$savedPos, peg$currPos);
        }
        function expected(description, location2) {
          location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
          throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location2);
        }
        function error(message, location2) {
          location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
          throw peg$buildSimpleError(message, location2);
        }
        function peg$literalExpectation(text2, ignoreCase) {
          return {type: "literal", text: text2, ignoreCase};
        }
        function peg$classExpectation(parts, inverted, ignoreCase) {
          return {type: "class", parts, inverted, ignoreCase};
        }
        function peg$anyExpectation() {
          return {type: "any"};
        }
        function peg$endExpectation() {
          return {type: "end"};
        }
        function peg$otherExpectation(description) {
          return {type: "other", description};
        }
        function peg$computePosDetails(pos) {
          var details = peg$posDetailsCache[pos], p;
          if (details) {
            return details;
          } else {
            p = pos - 1;
            while (!peg$posDetailsCache[p])
              p--;
            details = peg$posDetailsCache[p];
            details = {
              line: details.line,
              column: details.column
            };
            while (p < pos) {
              if (input.charCodeAt(p) === 10) {
                details.line++;
                details.column = 1;
              } else {
                details.column++;
              }
              p++;
            }
            peg$posDetailsCache[pos] = details;
            return details;
          }
        }
        function peg$computeLocation(startPos, endPos) {
          var startPosDetails = peg$computePosDetails(startPos), endPosDetails = peg$computePosDetails(endPos);
          return {
            start: {
              offset: startPos,
              line: startPosDetails.line,
              column: startPosDetails.column
            },
            end: {
              offset: endPos,
              line: endPosDetails.line,
              column: endPosDetails.column
            }
          };
        }
        function peg$fail(expected2) {
          if (peg$currPos < peg$maxFailPos)
            return;
          if (peg$currPos > peg$maxFailPos) {
            peg$maxFailPos = peg$currPos;
            peg$maxFailExpected = [];
          }
          peg$maxFailExpected.push(expected2);
        }
        function peg$buildSimpleError(message, location2) {
          return new peg$SyntaxError(message, null, null, location2);
        }
        function peg$buildStructuredError(expected2, found, location2) {
          return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected2, found), expected2, found, location2);
        }
        function peg$parseStart() {
          var s0;
          s0 = peg$parsePropertyStatements();
          return s0;
        }
        function peg$parseItemStatements() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseItemStatement();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseItemStatement();
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c0(s1);
          }
          s0 = s1;
          return s0;
        }
        function peg$parseItemStatement() {
          var s0, s1, s2, s3, s4;
          s0 = peg$currPos;
          s1 = peg$parseSamedent();
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s2 = peg$c1;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c2);
              }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseB();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseExpression();
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c3(s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parsePropertyStatements() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parsePropertyStatement();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsePropertyStatement();
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c4(s1);
          }
          s0 = s1;
          return s0;
        }
        function peg$parsePropertyStatement() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8;
          s0 = peg$currPos;
          s1 = peg$parseB();
          if (s1 === peg$FAILED)
            s1 = null;
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 35) {
              s3 = peg$c5;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c6);
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$currPos;
              s6 = peg$currPos;
              peg$silentFails++;
              s7 = peg$parseEOL();
              peg$silentFails--;
              if (s7 === peg$FAILED) {
                s6 = void 0;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s7 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c7);
                  }
                }
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$currPos;
                  s6 = peg$currPos;
                  peg$silentFails++;
                  s7 = peg$parseEOL();
                  peg$silentFails--;
                  if (s7 === peg$FAILED) {
                    s6 = void 0;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                  if (s6 !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                      s7 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c7);
                      }
                    }
                    if (s7 !== peg$FAILED) {
                      s6 = [s6, s7];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                }
              } else {
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED)
              s2 = null;
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parseEOL_ANY();
              if (s4 !== peg$FAILED) {
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$parseEOL_ANY();
                }
              } else {
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c8();
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseSamedent();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseName();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseB();
                if (s3 === peg$FAILED)
                  s3 = null;
                if (s3 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 58) {
                    s4 = peg$c9;
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c10);
                    }
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseB();
                    if (s5 === peg$FAILED)
                      s5 = null;
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parseExpression();
                      if (s6 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c11(s2, s6);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseSamedent();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseLegacyName();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseB();
                  if (s3 === peg$FAILED)
                    s3 = null;
                  if (s3 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                      s4 = peg$c9;
                      peg$currPos++;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c10);
                      }
                    }
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parseB();
                      if (s5 === peg$FAILED)
                        s5 = null;
                      if (s5 !== peg$FAILED) {
                        s6 = peg$parseExpression();
                        if (s6 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c11(s2, s6);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseSamedent();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseLegacyName();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseB();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parseLegacyLiteral();
                      if (s4 !== peg$FAILED) {
                        s5 = [];
                        s6 = peg$parseEOL_ANY();
                        if (s6 !== peg$FAILED) {
                          while (s6 !== peg$FAILED) {
                            s5.push(s6);
                            s6 = peg$parseEOL_ANY();
                          }
                        } else {
                          s5 = peg$FAILED;
                        }
                        if (s5 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c11(s2, s4);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseSamedent();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseLegacyName();
                    if (s2 !== peg$FAILED) {
                      s3 = [];
                      s4 = peg$currPos;
                      s5 = peg$parseB();
                      if (s5 === peg$FAILED)
                        s5 = null;
                      if (s5 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 44) {
                          s6 = peg$c12;
                          peg$currPos++;
                        } else {
                          s6 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c13);
                          }
                        }
                        if (s6 !== peg$FAILED) {
                          s7 = peg$parseB();
                          if (s7 === peg$FAILED)
                            s7 = null;
                          if (s7 !== peg$FAILED) {
                            s8 = peg$parseLegacyName();
                            if (s8 !== peg$FAILED) {
                              peg$savedPos = s4;
                              s5 = peg$c14(s2, s8);
                              s4 = s5;
                            } else {
                              peg$currPos = s4;
                              s4 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                      if (s4 !== peg$FAILED) {
                        while (s4 !== peg$FAILED) {
                          s3.push(s4);
                          s4 = peg$currPos;
                          s5 = peg$parseB();
                          if (s5 === peg$FAILED)
                            s5 = null;
                          if (s5 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 44) {
                              s6 = peg$c12;
                              peg$currPos++;
                            } else {
                              s6 = peg$FAILED;
                              if (peg$silentFails === 0) {
                                peg$fail(peg$c13);
                              }
                            }
                            if (s6 !== peg$FAILED) {
                              s7 = peg$parseB();
                              if (s7 === peg$FAILED)
                                s7 = null;
                              if (s7 !== peg$FAILED) {
                                s8 = peg$parseLegacyName();
                                if (s8 !== peg$FAILED) {
                                  peg$savedPos = s4;
                                  s5 = peg$c14(s2, s8);
                                  s4 = s5;
                                } else {
                                  peg$currPos = s4;
                                  s4 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s4;
                              s4 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                        }
                      } else {
                        s3 = peg$FAILED;
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parseB();
                        if (s4 === peg$FAILED)
                          s4 = null;
                        if (s4 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 58) {
                            s5 = peg$c9;
                            peg$currPos++;
                          } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c10);
                            }
                          }
                          if (s5 !== peg$FAILED) {
                            s6 = peg$parseB();
                            if (s6 === peg$FAILED)
                              s6 = null;
                            if (s6 !== peg$FAILED) {
                              s7 = peg$parseExpression();
                              if (s7 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c15(s2, s3, s7);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                }
              }
            }
          }
          return s0;
        }
        function peg$parseExpression() {
          var s0, s1, s2, s3, s4, s5, s6;
          s0 = peg$currPos;
          s1 = peg$currPos;
          peg$silentFails++;
          s2 = peg$currPos;
          s3 = peg$parseEOL();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseExtradent();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 45) {
                s5 = peg$c1;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c2);
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseB();
                if (s6 !== peg$FAILED) {
                  s3 = [s3, s4, s5, s6];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          peg$silentFails--;
          if (s2 !== peg$FAILED) {
            peg$currPos = s1;
            s1 = void 0;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseEOL_ANY();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseIndent();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseItemStatements();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseDedent();
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c16(s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseEOL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseIndent();
              if (s2 !== peg$FAILED) {
                s3 = peg$parsePropertyStatements();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseDedent();
                  if (s4 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c16(s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseLiteral();
              if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseEOL_ANY();
                if (s3 !== peg$FAILED) {
                  while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parseEOL_ANY();
                  }
                } else {
                  s2 = peg$FAILED;
                }
                if (s2 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c17(s1);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
          return s0;
        }
        function peg$parseSamedent() {
          var s0, s1, s2;
          peg$silentFails++;
          s0 = peg$currPos;
          s1 = [];
          if (input.charCodeAt(peg$currPos) === 32) {
            s2 = peg$c19;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c20);
            }
          }
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (input.charCodeAt(peg$currPos) === 32) {
              s2 = peg$c19;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c20);
              }
            }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s2 = peg$c21(s1);
            if (s2)
              s2 = void 0;
            else
              s2 = peg$FAILED;
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          peg$silentFails--;
          if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c18);
            }
          }
          return s0;
        }
        function peg$parseExtradent() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = [];
          if (input.charCodeAt(peg$currPos) === 32) {
            s2 = peg$c19;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c20);
            }
          }
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (input.charCodeAt(peg$currPos) === 32) {
              s2 = peg$c19;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c20);
              }
            }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s2 = peg$c22(s1);
            if (s2)
              s2 = void 0;
            else
              s2 = peg$FAILED;
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseIndent() {
          var s0;
          peg$savedPos = peg$currPos;
          s0 = peg$c23();
          if (s0)
            s0 = void 0;
          else
            s0 = peg$FAILED;
          return s0;
        }
        function peg$parseDedent() {
          var s0;
          peg$savedPos = peg$currPos;
          s0 = peg$c24();
          if (s0)
            s0 = void 0;
          else
            s0 = peg$FAILED;
          return s0;
        }
        function peg$parseName() {
          var s0;
          s0 = peg$parsestring();
          if (s0 === peg$FAILED)
            s0 = peg$parsepseudostring();
          return s0;
        }
        function peg$parseLegacyName() {
          var s0, s1, s2;
          s0 = peg$parsestring();
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsepseudostringLegacy();
            if (s2 !== peg$FAILED) {
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parsepseudostringLegacy();
              }
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c25();
            }
            s0 = s1;
          }
          return s0;
        }
        function peg$parseLiteral() {
          var s0;
          s0 = peg$parsenull();
          if (s0 === peg$FAILED) {
            s0 = peg$parseboolean();
            if (s0 === peg$FAILED) {
              s0 = peg$parsestring();
              if (s0 === peg$FAILED) {
                s0 = peg$parsepseudostring();
              }
            }
          }
          return s0;
        }
        function peg$parseLegacyLiteral() {
          var s0;
          s0 = peg$parsenull();
          if (s0 === peg$FAILED) {
            s0 = peg$parsestring();
            if (s0 === peg$FAILED) {
              s0 = peg$parsepseudostringLegacy();
            }
          }
          return s0;
        }
        function peg$parsepseudostring() {
          var s0, s1, s2, s3, s4, s5;
          peg$silentFails++;
          s0 = peg$currPos;
          if (peg$c27.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c28);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parseB();
            if (s4 === peg$FAILED)
              s4 = null;
            if (s4 !== peg$FAILED) {
              if (peg$c29.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c30);
                }
              }
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$currPos;
              s4 = peg$parseB();
              if (s4 === peg$FAILED)
                s4 = null;
              if (s4 !== peg$FAILED) {
                if (peg$c29.test(input.charAt(peg$currPos))) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c30);
                  }
                }
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c31();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          peg$silentFails--;
          if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c26);
            }
          }
          return s0;
        }
        function peg$parsepseudostringLegacy() {
          var s0, s1, s2, s3, s4;
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c32) {
            s1 = peg$c32;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c33);
            }
          }
          if (s1 === peg$FAILED)
            s1 = null;
          if (s1 !== peg$FAILED) {
            if (peg$c34.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c35);
              }
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              if (peg$c36.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c37);
                }
              }
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                if (peg$c36.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c37);
                  }
                }
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c31();
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parsenull() {
          var s0, s1;
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 4) === peg$c38) {
            s1 = peg$c38;
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c39);
            }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c40();
          }
          s0 = s1;
          return s0;
        }
        function peg$parseboolean() {
          var s0, s1;
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 4) === peg$c41) {
            s1 = peg$c41;
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c42);
            }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c43();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 5) === peg$c44) {
              s1 = peg$c44;
              peg$currPos += 5;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c45);
              }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c46();
            }
            s0 = s1;
          }
          return s0;
        }
        function peg$parsestring() {
          var s0, s1, s2, s3;
          peg$silentFails++;
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 34) {
            s1 = peg$c48;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c49);
            }
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s2 = peg$c48;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c49);
              }
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c50();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 34) {
              s1 = peg$c48;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c49);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsechars();
              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 34) {
                  s3 = peg$c48;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c49);
                  }
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c51(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
          peg$silentFails--;
          if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c47);
            }
          }
          return s0;
        }
        function peg$parsechars() {
          var s0, s1, s2;
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parsechar();
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parsechar();
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c52(s1);
          }
          s0 = s1;
          return s0;
        }
        function peg$parsechar() {
          var s0, s1, s2, s3, s4, s5;
          if (peg$c53.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c54);
            }
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c55) {
              s1 = peg$c55;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c56);
              }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c57();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c58) {
                s1 = peg$c58;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c59);
                }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c60();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c61) {
                  s1 = peg$c61;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c62);
                  }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c63();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 2) === peg$c64) {
                    s1 = peg$c64;
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c65);
                    }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c66();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c67) {
                      s1 = peg$c67;
                      peg$currPos += 2;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c68);
                      }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c69();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 2) === peg$c70) {
                        s1 = peg$c70;
                        peg$currPos += 2;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c71);
                        }
                      }
                      if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c72();
                      }
                      s0 = s1;
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 2) === peg$c73) {
                          s1 = peg$c73;
                          peg$currPos += 2;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c74);
                          }
                        }
                        if (s1 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c75();
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.substr(peg$currPos, 2) === peg$c76) {
                            s1 = peg$c76;
                            peg$currPos += 2;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c77);
                            }
                          }
                          if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c78();
                          }
                          s0 = s1;
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 2) === peg$c79) {
                              s1 = peg$c79;
                              peg$currPos += 2;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) {
                                peg$fail(peg$c80);
                              }
                            }
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parsehexDigit();
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parsehexDigit();
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parsehexDigit();
                                  if (s4 !== peg$FAILED) {
                                    s5 = peg$parsehexDigit();
                                    if (s5 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s1 = peg$c81(s2, s3, s4, s5);
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          return s0;
        }
        function peg$parsehexDigit() {
          var s0;
          if (peg$c82.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c83);
            }
          }
          return s0;
        }
        function peg$parseB() {
          var s0, s1;
          peg$silentFails++;
          s0 = [];
          if (peg$c85.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c86);
            }
          }
          if (s1 !== peg$FAILED) {
            while (s1 !== peg$FAILED) {
              s0.push(s1);
              if (peg$c85.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c86);
                }
              }
            }
          } else {
            s0 = peg$FAILED;
          }
          peg$silentFails--;
          if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c84);
            }
          }
          return s0;
        }
        function peg$parseS() {
          var s0, s1;
          peg$silentFails++;
          s0 = [];
          if (peg$c88.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c89);
            }
          }
          if (s1 !== peg$FAILED) {
            while (s1 !== peg$FAILED) {
              s0.push(s1);
              if (peg$c88.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c89);
                }
              }
            }
          } else {
            s0 = peg$FAILED;
          }
          peg$silentFails--;
          if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c87);
            }
          }
          return s0;
        }
        function peg$parseEOL_ANY() {
          var s0, s1, s2, s3, s4, s5;
          s0 = peg$currPos;
          s1 = peg$parseEOL();
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parseB();
            if (s4 === peg$FAILED)
              s4 = null;
            if (s4 !== peg$FAILED) {
              s5 = peg$parseEOL();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$currPos;
              s4 = peg$parseB();
              if (s4 === peg$FAILED)
                s4 = null;
              if (s4 !== peg$FAILED) {
                s5 = peg$parseEOL();
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          return s0;
        }
        function peg$parseEOL() {
          var s0;
          if (input.substr(peg$currPos, 2) === peg$c90) {
            s0 = peg$c90;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c91);
            }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 10) {
              s0 = peg$c92;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c93);
              }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 13) {
                s0 = peg$c94;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c95);
                }
              }
            }
          }
          return s0;
        }
        const INDENT_STEP = 2;
        let indentLevel = 0;
        peg$result = peg$startRuleFunction();
        if (peg$result !== peg$FAILED && peg$currPos === input.length) {
          return peg$result;
        } else {
          if (peg$result !== peg$FAILED && peg$currPos < input.length)
            peg$fail(peg$endExpectation());
          throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
        }
      }
      module.exports = {
        SyntaxError: peg$SyntaxError,
        parse: peg$parse
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_freeGlobal.js
  var require_freeGlobal = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_freeGlobal.js"(exports, module) {
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      module.exports = freeGlobal;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_root.js
  var require_root = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_root.js"(exports, module) {
      var freeGlobal = require_freeGlobal();
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      module.exports = root;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_Symbol.js
  var require_Symbol = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_Symbol.js"(exports, module) {
      var root = require_root();
      var Symbol2 = root.Symbol;
      module.exports = Symbol2;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_arrayMap.js
  var require_arrayMap = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_arrayMap.js"(exports, module) {
      function arrayMap(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length, result = Array(length);
        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }
        return result;
      }
      module.exports = arrayMap;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/isArray.js
  var require_isArray = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/isArray.js"(exports, module) {
      var isArray2 = Array.isArray;
      module.exports = isArray2;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_getRawTag.js
  var require_getRawTag = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_getRawTag.js"(exports, module) {
      var Symbol2 = require_Symbol();
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var nativeObjectToString = objectProto.toString;
      var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
      function getRawTag(value) {
        var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
        try {
          value[symToStringTag] = void 0;
          var unmasked = true;
        } catch (e) {
        }
        var result = nativeObjectToString.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }
        return result;
      }
      module.exports = getRawTag;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_objectToString.js
  var require_objectToString = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_objectToString.js"(exports, module) {
      var objectProto = Object.prototype;
      var nativeObjectToString = objectProto.toString;
      function objectToString(value) {
        return nativeObjectToString.call(value);
      }
      module.exports = objectToString;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseGetTag.js
  var require_baseGetTag = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseGetTag.js"(exports, module) {
      var Symbol2 = require_Symbol();
      var getRawTag = require_getRawTag();
      var objectToString = require_objectToString();
      var nullTag = "[object Null]";
      var undefinedTag = "[object Undefined]";
      var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
      function baseGetTag(value) {
        if (value == null) {
          return value === void 0 ? undefinedTag : nullTag;
        }
        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
      }
      module.exports = baseGetTag;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/isObjectLike.js
  var require_isObjectLike = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/isObjectLike.js"(exports, module) {
      function isObjectLike(value) {
        return value != null && typeof value == "object";
      }
      module.exports = isObjectLike;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/isSymbol.js
  var require_isSymbol = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/isSymbol.js"(exports, module) {
      var baseGetTag = require_baseGetTag();
      var isObjectLike = require_isObjectLike();
      var symbolTag = "[object Symbol]";
      function isSymbol(value) {
        return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
      }
      module.exports = isSymbol;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseToString.js
  var require_baseToString = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseToString.js"(exports, module) {
      var Symbol2 = require_Symbol();
      var arrayMap = require_arrayMap();
      var isArray2 = require_isArray();
      var isSymbol = require_isSymbol();
      var INFINITY = 1 / 0;
      var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
      var symbolToString = symbolProto ? symbolProto.toString : void 0;
      function baseToString(value) {
        if (typeof value == "string") {
          return value;
        }
        if (isArray2(value)) {
          return arrayMap(value, baseToString) + "";
        }
        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : "";
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY ? "-0" : result;
      }
      module.exports = baseToString;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/toString.js
  var require_toString = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/toString.js"(exports, module) {
      var baseToString = require_baseToString();
      function toString(value) {
        return value == null ? "" : baseToString(value);
      }
      module.exports = toString;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseSlice.js
  var require_baseSlice = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseSlice.js"(exports, module) {
      function baseSlice(array, start2, end) {
        var index = -1, length = array.length;
        if (start2 < 0) {
          start2 = -start2 > length ? 0 : length + start2;
        }
        end = end > length ? length : end;
        if (end < 0) {
          end += length;
        }
        length = start2 > end ? 0 : end - start2 >>> 0;
        start2 >>>= 0;
        var result = Array(length);
        while (++index < length) {
          result[index] = array[index + start2];
        }
        return result;
      }
      module.exports = baseSlice;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_castSlice.js
  var require_castSlice = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_castSlice.js"(exports, module) {
      var baseSlice = require_baseSlice();
      function castSlice(array, start2, end) {
        var length = array.length;
        end = end === void 0 ? length : end;
        return !start2 && end >= length ? array : baseSlice(array, start2, end);
      }
      module.exports = castSlice;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_hasUnicode.js
  var require_hasUnicode = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_hasUnicode.js"(exports, module) {
      var rsAstralRange = "\\ud800-\\udfff";
      var rsComboMarksRange = "\\u0300-\\u036f";
      var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
      var rsComboSymbolsRange = "\\u20d0-\\u20ff";
      var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
      var rsVarRange = "\\ufe0e\\ufe0f";
      var rsZWJ = "\\u200d";
      var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
      function hasUnicode(string) {
        return reHasUnicode.test(string);
      }
      module.exports = hasUnicode;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_asciiToArray.js
  var require_asciiToArray = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_asciiToArray.js"(exports, module) {
      function asciiToArray(string) {
        return string.split("");
      }
      module.exports = asciiToArray;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_unicodeToArray.js
  var require_unicodeToArray = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_unicodeToArray.js"(exports, module) {
      var rsAstralRange = "\\ud800-\\udfff";
      var rsComboMarksRange = "\\u0300-\\u036f";
      var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
      var rsComboSymbolsRange = "\\u20d0-\\u20ff";
      var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
      var rsVarRange = "\\ufe0e\\ufe0f";
      var rsAstral = "[" + rsAstralRange + "]";
      var rsCombo = "[" + rsComboRange + "]";
      var rsFitz = "\\ud83c[\\udffb-\\udfff]";
      var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
      var rsNonAstral = "[^" + rsAstralRange + "]";
      var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
      var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
      var rsZWJ = "\\u200d";
      var reOptMod = rsModifier + "?";
      var rsOptVar = "[" + rsVarRange + "]?";
      var rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
      var rsSeq = rsOptVar + reOptMod + rsOptJoin;
      var rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
      var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
      function unicodeToArray(string) {
        return string.match(reUnicode) || [];
      }
      module.exports = unicodeToArray;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_stringToArray.js
  var require_stringToArray = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_stringToArray.js"(exports, module) {
      var asciiToArray = require_asciiToArray();
      var hasUnicode = require_hasUnicode();
      var unicodeToArray = require_unicodeToArray();
      function stringToArray(string) {
        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
      }
      module.exports = stringToArray;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_createCaseFirst.js
  var require_createCaseFirst = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_createCaseFirst.js"(exports, module) {
      var castSlice = require_castSlice();
      var hasUnicode = require_hasUnicode();
      var stringToArray = require_stringToArray();
      var toString = require_toString();
      function createCaseFirst(methodName) {
        return function(string) {
          string = toString(string);
          var strSymbols = hasUnicode(string) ? stringToArray(string) : void 0;
          var chr = strSymbols ? strSymbols[0] : string.charAt(0);
          var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
          return chr[methodName]() + trailing;
        };
      }
      module.exports = createCaseFirst;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/upperFirst.js
  var require_upperFirst = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/upperFirst.js"(exports, module) {
      var createCaseFirst = require_createCaseFirst();
      var upperFirst = createCaseFirst("toUpperCase");
      module.exports = upperFirst;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/capitalize.js
  var require_capitalize = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/capitalize.js"(exports, module) {
      var toString = require_toString();
      var upperFirst = require_upperFirst();
      function capitalize2(string) {
        return upperFirst(toString(string).toLowerCase());
      }
      module.exports = capitalize2;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/p-try-npm-2.0.0-1f8d030b63-5afa1a7fd2.zip/node_modules/p-try/index.js
  var require_p_try = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/p-try-npm-2.0.0-1f8d030b63-5afa1a7fd2.zip/node_modules/p-try/index.js"(exports, module) {
      "use strict";
      module.exports = (callback, ...args) => new Promise((resolve) => {
        resolve(callback(...args));
      });
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/p-limit-npm-2.2.0-d458ce1c4b-e92ec3025f.zip/node_modules/p-limit/index.js
  var require_p_limit = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/p-limit-npm-2.2.0-d458ce1c4b-e92ec3025f.zip/node_modules/p-limit/index.js"(exports, module) {
      "use strict";
      var pTry = require_p_try();
      var pLimit4 = (concurrency) => {
        if (concurrency < 1) {
          throw new TypeError("Expected `concurrency` to be a number from 1 and up");
        }
        const queue = [];
        let activeCount = 0;
        const next = () => {
          activeCount--;
          if (queue.length > 0) {
            queue.shift()();
          }
        };
        const run = (fn, resolve, ...args) => {
          activeCount++;
          const result = pTry(fn, ...args);
          resolve(result);
          result.then(next, next);
        };
        const enqueue = (fn, resolve, ...args) => {
          if (activeCount < concurrency) {
            run(fn, resolve, ...args);
          } else {
            queue.push(run.bind(null, fn, resolve, ...args));
          }
        };
        const generator = (fn, ...args) => new Promise((resolve) => enqueue(fn, resolve, ...args));
        Object.defineProperties(generator, {
          activeCount: {
            get: () => activeCount
          },
          pendingCount: {
            get: () => queue.length
          }
        });
        return generator;
      };
      module.exports = pLimit4;
      module.exports.default = pLimit4;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/grapheme-splitter-npm-1.0.4-648f2bf509-0c22ec54de.zip/node_modules/grapheme-splitter/index.js
  var require_grapheme_splitter = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/grapheme-splitter-npm-1.0.4-648f2bf509-0c22ec54de.zip/node_modules/grapheme-splitter/index.js"(exports, module) {
      function GraphemeSplitter() {
        var CR = 0, LF = 1, Control = 2, Extend = 3, Regional_Indicator = 4, SpacingMark = 5, L = 6, V = 7, T = 8, LV = 9, LVT = 10, Other = 11, Prepend = 12, E_Base = 13, E_Modifier = 14, ZWJ = 15, Glue_After_Zwj = 16, E_Base_GAZ = 17;
        var NotBreak = 0, BreakStart = 1, Break = 2, BreakLastRegional = 3, BreakPenultimateRegional = 4;
        function isSurrogate(str, pos) {
          return 55296 <= str.charCodeAt(pos) && str.charCodeAt(pos) <= 56319 && 56320 <= str.charCodeAt(pos + 1) && str.charCodeAt(pos + 1) <= 57343;
        }
        function codePointAt(str, idx) {
          if (idx === void 0) {
            idx = 0;
          }
          var code = str.charCodeAt(idx);
          if (55296 <= code && code <= 56319 && idx < str.length - 1) {
            var hi = code;
            var low = str.charCodeAt(idx + 1);
            if (56320 <= low && low <= 57343) {
              return (hi - 55296) * 1024 + (low - 56320) + 65536;
            }
            return hi;
          }
          if (56320 <= code && code <= 57343 && idx >= 1) {
            var hi = str.charCodeAt(idx - 1);
            var low = code;
            if (55296 <= hi && hi <= 56319) {
              return (hi - 55296) * 1024 + (low - 56320) + 65536;
            }
            return low;
          }
          return code;
        }
        function shouldBreak(start2, mid, end) {
          var all = [start2].concat(mid).concat([end]);
          var previous = all[all.length - 2];
          var next = end;
          var eModifierIndex = all.lastIndexOf(E_Modifier);
          if (eModifierIndex > 1 && all.slice(1, eModifierIndex).every(function(c) {
            return c == Extend;
          }) && [Extend, E_Base, E_Base_GAZ].indexOf(start2) == -1) {
            return Break;
          }
          var rIIndex = all.lastIndexOf(Regional_Indicator);
          if (rIIndex > 0 && all.slice(1, rIIndex).every(function(c) {
            return c == Regional_Indicator;
          }) && [Prepend, Regional_Indicator].indexOf(previous) == -1) {
            if (all.filter(function(c) {
              return c == Regional_Indicator;
            }).length % 2 == 1) {
              return BreakLastRegional;
            } else {
              return BreakPenultimateRegional;
            }
          }
          if (previous == CR && next == LF) {
            return NotBreak;
          } else if (previous == Control || previous == CR || previous == LF) {
            if (next == E_Modifier && mid.every(function(c) {
              return c == Extend;
            })) {
              return Break;
            } else {
              return BreakStart;
            }
          } else if (next == Control || next == CR || next == LF) {
            return BreakStart;
          } else if (previous == L && (next == L || next == V || next == LV || next == LVT)) {
            return NotBreak;
          } else if ((previous == LV || previous == V) && (next == V || next == T)) {
            return NotBreak;
          } else if ((previous == LVT || previous == T) && next == T) {
            return NotBreak;
          } else if (next == Extend || next == ZWJ) {
            return NotBreak;
          } else if (next == SpacingMark) {
            return NotBreak;
          } else if (previous == Prepend) {
            return NotBreak;
          }
          var previousNonExtendIndex = all.indexOf(Extend) != -1 ? all.lastIndexOf(Extend) - 1 : all.length - 2;
          if ([E_Base, E_Base_GAZ].indexOf(all[previousNonExtendIndex]) != -1 && all.slice(previousNonExtendIndex + 1, -1).every(function(c) {
            return c == Extend;
          }) && next == E_Modifier) {
            return NotBreak;
          }
          if (previous == ZWJ && [Glue_After_Zwj, E_Base_GAZ].indexOf(next) != -1) {
            return NotBreak;
          }
          if (mid.indexOf(Regional_Indicator) != -1) {
            return Break;
          }
          if (previous == Regional_Indicator && next == Regional_Indicator) {
            return NotBreak;
          }
          return BreakStart;
        }
        this.nextBreak = function(string, index) {
          if (index === void 0) {
            index = 0;
          }
          if (index < 0) {
            return 0;
          }
          if (index >= string.length - 1) {
            return string.length;
          }
          var prev = getGraphemeBreakProperty(codePointAt(string, index));
          var mid = [];
          for (var i = index + 1; i < string.length; i++) {
            if (isSurrogate(string, i - 1)) {
              continue;
            }
            var next = getGraphemeBreakProperty(codePointAt(string, i));
            if (shouldBreak(prev, mid, next)) {
              return i;
            }
            mid.push(next);
          }
          return string.length;
        };
        this.splitGraphemes = function(str) {
          var res = [];
          var index = 0;
          var brk;
          while ((brk = this.nextBreak(str, index)) < str.length) {
            res.push(str.slice(index, brk));
            index = brk;
          }
          if (index < str.length) {
            res.push(str.slice(index));
          }
          return res;
        };
        this.iterateGraphemes = function(str) {
          var index = 0;
          var res = {
            next: function() {
              var value;
              var brk;
              if ((brk = this.nextBreak(str, index)) < str.length) {
                value = str.slice(index, brk);
                index = brk;
                return {value, done: false};
              }
              if (index < str.length) {
                value = str.slice(index);
                index = str.length;
                return {value, done: false};
              }
              return {value: void 0, done: true};
            }.bind(this)
          };
          if (typeof Symbol !== "undefined" && Symbol.iterator) {
            res[Symbol.iterator] = function() {
              return res;
            };
          }
          return res;
        };
        this.countGraphemes = function(str) {
          var count = 0;
          var index = 0;
          var brk;
          while ((brk = this.nextBreak(str, index)) < str.length) {
            index = brk;
            count++;
          }
          if (index < str.length) {
            count++;
          }
          return count;
        };
        function getGraphemeBreakProperty(code) {
          if (1536 <= code && code <= 1541 || code == 1757 || code == 1807 || code == 2274 || code == 3406 || code == 69821 || 70082 <= code && code <= 70083 || code == 72250 || 72326 <= code && code <= 72329 || code == 73030) {
            return Prepend;
          }
          if (code == 13) {
            return CR;
          }
          if (code == 10) {
            return LF;
          }
          if (0 <= code && code <= 9 || 11 <= code && code <= 12 || 14 <= code && code <= 31 || 127 <= code && code <= 159 || code == 173 || code == 1564 || code == 6158 || code == 8203 || 8206 <= code && code <= 8207 || code == 8232 || code == 8233 || 8234 <= code && code <= 8238 || 8288 <= code && code <= 8292 || code == 8293 || 8294 <= code && code <= 8303 || 55296 <= code && code <= 57343 || code == 65279 || 65520 <= code && code <= 65528 || 65529 <= code && code <= 65531 || 113824 <= code && code <= 113827 || 119155 <= code && code <= 119162 || code == 917504 || code == 917505 || 917506 <= code && code <= 917535 || 917632 <= code && code <= 917759 || 918e3 <= code && code <= 921599) {
            return Control;
          }
          if (768 <= code && code <= 879 || 1155 <= code && code <= 1159 || 1160 <= code && code <= 1161 || 1425 <= code && code <= 1469 || code == 1471 || 1473 <= code && code <= 1474 || 1476 <= code && code <= 1477 || code == 1479 || 1552 <= code && code <= 1562 || 1611 <= code && code <= 1631 || code == 1648 || 1750 <= code && code <= 1756 || 1759 <= code && code <= 1764 || 1767 <= code && code <= 1768 || 1770 <= code && code <= 1773 || code == 1809 || 1840 <= code && code <= 1866 || 1958 <= code && code <= 1968 || 2027 <= code && code <= 2035 || 2070 <= code && code <= 2073 || 2075 <= code && code <= 2083 || 2085 <= code && code <= 2087 || 2089 <= code && code <= 2093 || 2137 <= code && code <= 2139 || 2260 <= code && code <= 2273 || 2275 <= code && code <= 2306 || code == 2362 || code == 2364 || 2369 <= code && code <= 2376 || code == 2381 || 2385 <= code && code <= 2391 || 2402 <= code && code <= 2403 || code == 2433 || code == 2492 || code == 2494 || 2497 <= code && code <= 2500 || code == 2509 || code == 2519 || 2530 <= code && code <= 2531 || 2561 <= code && code <= 2562 || code == 2620 || 2625 <= code && code <= 2626 || 2631 <= code && code <= 2632 || 2635 <= code && code <= 2637 || code == 2641 || 2672 <= code && code <= 2673 || code == 2677 || 2689 <= code && code <= 2690 || code == 2748 || 2753 <= code && code <= 2757 || 2759 <= code && code <= 2760 || code == 2765 || 2786 <= code && code <= 2787 || 2810 <= code && code <= 2815 || code == 2817 || code == 2876 || code == 2878 || code == 2879 || 2881 <= code && code <= 2884 || code == 2893 || code == 2902 || code == 2903 || 2914 <= code && code <= 2915 || code == 2946 || code == 3006 || code == 3008 || code == 3021 || code == 3031 || code == 3072 || 3134 <= code && code <= 3136 || 3142 <= code && code <= 3144 || 3146 <= code && code <= 3149 || 3157 <= code && code <= 3158 || 3170 <= code && code <= 3171 || code == 3201 || code == 3260 || code == 3263 || code == 3266 || code == 3270 || 3276 <= code && code <= 3277 || 3285 <= code && code <= 3286 || 3298 <= code && code <= 3299 || 3328 <= code && code <= 3329 || 3387 <= code && code <= 3388 || code == 3390 || 3393 <= code && code <= 3396 || code == 3405 || code == 3415 || 3426 <= code && code <= 3427 || code == 3530 || code == 3535 || 3538 <= code && code <= 3540 || code == 3542 || code == 3551 || code == 3633 || 3636 <= code && code <= 3642 || 3655 <= code && code <= 3662 || code == 3761 || 3764 <= code && code <= 3769 || 3771 <= code && code <= 3772 || 3784 <= code && code <= 3789 || 3864 <= code && code <= 3865 || code == 3893 || code == 3895 || code == 3897 || 3953 <= code && code <= 3966 || 3968 <= code && code <= 3972 || 3974 <= code && code <= 3975 || 3981 <= code && code <= 3991 || 3993 <= code && code <= 4028 || code == 4038 || 4141 <= code && code <= 4144 || 4146 <= code && code <= 4151 || 4153 <= code && code <= 4154 || 4157 <= code && code <= 4158 || 4184 <= code && code <= 4185 || 4190 <= code && code <= 4192 || 4209 <= code && code <= 4212 || code == 4226 || 4229 <= code && code <= 4230 || code == 4237 || code == 4253 || 4957 <= code && code <= 4959 || 5906 <= code && code <= 5908 || 5938 <= code && code <= 5940 || 5970 <= code && code <= 5971 || 6002 <= code && code <= 6003 || 6068 <= code && code <= 6069 || 6071 <= code && code <= 6077 || code == 6086 || 6089 <= code && code <= 6099 || code == 6109 || 6155 <= code && code <= 6157 || 6277 <= code && code <= 6278 || code == 6313 || 6432 <= code && code <= 6434 || 6439 <= code && code <= 6440 || code == 6450 || 6457 <= code && code <= 6459 || 6679 <= code && code <= 6680 || code == 6683 || code == 6742 || 6744 <= code && code <= 6750 || code == 6752 || code == 6754 || 6757 <= code && code <= 6764 || 6771 <= code && code <= 6780 || code == 6783 || 6832 <= code && code <= 6845 || code == 6846 || 6912 <= code && code <= 6915 || code == 6964 || 6966 <= code && code <= 6970 || code == 6972 || code == 6978 || 7019 <= code && code <= 7027 || 7040 <= code && code <= 7041 || 7074 <= code && code <= 7077 || 7080 <= code && code <= 7081 || 7083 <= code && code <= 7085 || code == 7142 || 7144 <= code && code <= 7145 || code == 7149 || 7151 <= code && code <= 7153 || 7212 <= code && code <= 7219 || 7222 <= code && code <= 7223 || 7376 <= code && code <= 7378 || 7380 <= code && code <= 7392 || 7394 <= code && code <= 7400 || code == 7405 || code == 7412 || 7416 <= code && code <= 7417 || 7616 <= code && code <= 7673 || 7675 <= code && code <= 7679 || code == 8204 || 8400 <= code && code <= 8412 || 8413 <= code && code <= 8416 || code == 8417 || 8418 <= code && code <= 8420 || 8421 <= code && code <= 8432 || 11503 <= code && code <= 11505 || code == 11647 || 11744 <= code && code <= 11775 || 12330 <= code && code <= 12333 || 12334 <= code && code <= 12335 || 12441 <= code && code <= 12442 || code == 42607 || 42608 <= code && code <= 42610 || 42612 <= code && code <= 42621 || 42654 <= code && code <= 42655 || 42736 <= code && code <= 42737 || code == 43010 || code == 43014 || code == 43019 || 43045 <= code && code <= 43046 || 43204 <= code && code <= 43205 || 43232 <= code && code <= 43249 || 43302 <= code && code <= 43309 || 43335 <= code && code <= 43345 || 43392 <= code && code <= 43394 || code == 43443 || 43446 <= code && code <= 43449 || code == 43452 || code == 43493 || 43561 <= code && code <= 43566 || 43569 <= code && code <= 43570 || 43573 <= code && code <= 43574 || code == 43587 || code == 43596 || code == 43644 || code == 43696 || 43698 <= code && code <= 43700 || 43703 <= code && code <= 43704 || 43710 <= code && code <= 43711 || code == 43713 || 43756 <= code && code <= 43757 || code == 43766 || code == 44005 || code == 44008 || code == 44013 || code == 64286 || 65024 <= code && code <= 65039 || 65056 <= code && code <= 65071 || 65438 <= code && code <= 65439 || code == 66045 || code == 66272 || 66422 <= code && code <= 66426 || 68097 <= code && code <= 68099 || 68101 <= code && code <= 68102 || 68108 <= code && code <= 68111 || 68152 <= code && code <= 68154 || code == 68159 || 68325 <= code && code <= 68326 || code == 69633 || 69688 <= code && code <= 69702 || 69759 <= code && code <= 69761 || 69811 <= code && code <= 69814 || 69817 <= code && code <= 69818 || 69888 <= code && code <= 69890 || 69927 <= code && code <= 69931 || 69933 <= code && code <= 69940 || code == 70003 || 70016 <= code && code <= 70017 || 70070 <= code && code <= 70078 || 70090 <= code && code <= 70092 || 70191 <= code && code <= 70193 || code == 70196 || 70198 <= code && code <= 70199 || code == 70206 || code == 70367 || 70371 <= code && code <= 70378 || 70400 <= code && code <= 70401 || code == 70460 || code == 70462 || code == 70464 || code == 70487 || 70502 <= code && code <= 70508 || 70512 <= code && code <= 70516 || 70712 <= code && code <= 70719 || 70722 <= code && code <= 70724 || code == 70726 || code == 70832 || 70835 <= code && code <= 70840 || code == 70842 || code == 70845 || 70847 <= code && code <= 70848 || 70850 <= code && code <= 70851 || code == 71087 || 71090 <= code && code <= 71093 || 71100 <= code && code <= 71101 || 71103 <= code && code <= 71104 || 71132 <= code && code <= 71133 || 71219 <= code && code <= 71226 || code == 71229 || 71231 <= code && code <= 71232 || code == 71339 || code == 71341 || 71344 <= code && code <= 71349 || code == 71351 || 71453 <= code && code <= 71455 || 71458 <= code && code <= 71461 || 71463 <= code && code <= 71467 || 72193 <= code && code <= 72198 || 72201 <= code && code <= 72202 || 72243 <= code && code <= 72248 || 72251 <= code && code <= 72254 || code == 72263 || 72273 <= code && code <= 72278 || 72281 <= code && code <= 72283 || 72330 <= code && code <= 72342 || 72344 <= code && code <= 72345 || 72752 <= code && code <= 72758 || 72760 <= code && code <= 72765 || code == 72767 || 72850 <= code && code <= 72871 || 72874 <= code && code <= 72880 || 72882 <= code && code <= 72883 || 72885 <= code && code <= 72886 || 73009 <= code && code <= 73014 || code == 73018 || 73020 <= code && code <= 73021 || 73023 <= code && code <= 73029 || code == 73031 || 92912 <= code && code <= 92916 || 92976 <= code && code <= 92982 || 94095 <= code && code <= 94098 || 113821 <= code && code <= 113822 || code == 119141 || 119143 <= code && code <= 119145 || 119150 <= code && code <= 119154 || 119163 <= code && code <= 119170 || 119173 <= code && code <= 119179 || 119210 <= code && code <= 119213 || 119362 <= code && code <= 119364 || 121344 <= code && code <= 121398 || 121403 <= code && code <= 121452 || code == 121461 || code == 121476 || 121499 <= code && code <= 121503 || 121505 <= code && code <= 121519 || 122880 <= code && code <= 122886 || 122888 <= code && code <= 122904 || 122907 <= code && code <= 122913 || 122915 <= code && code <= 122916 || 122918 <= code && code <= 122922 || 125136 <= code && code <= 125142 || 125252 <= code && code <= 125258 || 917536 <= code && code <= 917631 || 917760 <= code && code <= 917999) {
            return Extend;
          }
          if (127462 <= code && code <= 127487) {
            return Regional_Indicator;
          }
          if (code == 2307 || code == 2363 || 2366 <= code && code <= 2368 || 2377 <= code && code <= 2380 || 2382 <= code && code <= 2383 || 2434 <= code && code <= 2435 || 2495 <= code && code <= 2496 || 2503 <= code && code <= 2504 || 2507 <= code && code <= 2508 || code == 2563 || 2622 <= code && code <= 2624 || code == 2691 || 2750 <= code && code <= 2752 || code == 2761 || 2763 <= code && code <= 2764 || 2818 <= code && code <= 2819 || code == 2880 || 2887 <= code && code <= 2888 || 2891 <= code && code <= 2892 || code == 3007 || 3009 <= code && code <= 3010 || 3014 <= code && code <= 3016 || 3018 <= code && code <= 3020 || 3073 <= code && code <= 3075 || 3137 <= code && code <= 3140 || 3202 <= code && code <= 3203 || code == 3262 || 3264 <= code && code <= 3265 || 3267 <= code && code <= 3268 || 3271 <= code && code <= 3272 || 3274 <= code && code <= 3275 || 3330 <= code && code <= 3331 || 3391 <= code && code <= 3392 || 3398 <= code && code <= 3400 || 3402 <= code && code <= 3404 || 3458 <= code && code <= 3459 || 3536 <= code && code <= 3537 || 3544 <= code && code <= 3550 || 3570 <= code && code <= 3571 || code == 3635 || code == 3763 || 3902 <= code && code <= 3903 || code == 3967 || code == 4145 || 4155 <= code && code <= 4156 || 4182 <= code && code <= 4183 || code == 4228 || code == 6070 || 6078 <= code && code <= 6085 || 6087 <= code && code <= 6088 || 6435 <= code && code <= 6438 || 6441 <= code && code <= 6443 || 6448 <= code && code <= 6449 || 6451 <= code && code <= 6456 || 6681 <= code && code <= 6682 || code == 6741 || code == 6743 || 6765 <= code && code <= 6770 || code == 6916 || code == 6965 || code == 6971 || 6973 <= code && code <= 6977 || 6979 <= code && code <= 6980 || code == 7042 || code == 7073 || 7078 <= code && code <= 7079 || code == 7082 || code == 7143 || 7146 <= code && code <= 7148 || code == 7150 || 7154 <= code && code <= 7155 || 7204 <= code && code <= 7211 || 7220 <= code && code <= 7221 || code == 7393 || 7410 <= code && code <= 7411 || code == 7415 || 43043 <= code && code <= 43044 || code == 43047 || 43136 <= code && code <= 43137 || 43188 <= code && code <= 43203 || 43346 <= code && code <= 43347 || code == 43395 || 43444 <= code && code <= 43445 || 43450 <= code && code <= 43451 || 43453 <= code && code <= 43456 || 43567 <= code && code <= 43568 || 43571 <= code && code <= 43572 || code == 43597 || code == 43755 || 43758 <= code && code <= 43759 || code == 43765 || 44003 <= code && code <= 44004 || 44006 <= code && code <= 44007 || 44009 <= code && code <= 44010 || code == 44012 || code == 69632 || code == 69634 || code == 69762 || 69808 <= code && code <= 69810 || 69815 <= code && code <= 69816 || code == 69932 || code == 70018 || 70067 <= code && code <= 70069 || 70079 <= code && code <= 70080 || 70188 <= code && code <= 70190 || 70194 <= code && code <= 70195 || code == 70197 || 70368 <= code && code <= 70370 || 70402 <= code && code <= 70403 || code == 70463 || 70465 <= code && code <= 70468 || 70471 <= code && code <= 70472 || 70475 <= code && code <= 70477 || 70498 <= code && code <= 70499 || 70709 <= code && code <= 70711 || 70720 <= code && code <= 70721 || code == 70725 || 70833 <= code && code <= 70834 || code == 70841 || 70843 <= code && code <= 70844 || code == 70846 || code == 70849 || 71088 <= code && code <= 71089 || 71096 <= code && code <= 71099 || code == 71102 || 71216 <= code && code <= 71218 || 71227 <= code && code <= 71228 || code == 71230 || code == 71340 || 71342 <= code && code <= 71343 || code == 71350 || 71456 <= code && code <= 71457 || code == 71462 || 72199 <= code && code <= 72200 || code == 72249 || 72279 <= code && code <= 72280 || code == 72343 || code == 72751 || code == 72766 || code == 72873 || code == 72881 || code == 72884 || 94033 <= code && code <= 94078 || code == 119142 || code == 119149) {
            return SpacingMark;
          }
          if (4352 <= code && code <= 4447 || 43360 <= code && code <= 43388) {
            return L;
          }
          if (4448 <= code && code <= 4519 || 55216 <= code && code <= 55238) {
            return V;
          }
          if (4520 <= code && code <= 4607 || 55243 <= code && code <= 55291) {
            return T;
          }
          if (code == 44032 || code == 44060 || code == 44088 || code == 44116 || code == 44144 || code == 44172 || code == 44200 || code == 44228 || code == 44256 || code == 44284 || code == 44312 || code == 44340 || code == 44368 || code == 44396 || code == 44424 || code == 44452 || code == 44480 || code == 44508 || code == 44536 || code == 44564 || code == 44592 || code == 44620 || code == 44648 || code == 44676 || code == 44704 || code == 44732 || code == 44760 || code == 44788 || code == 44816 || code == 44844 || code == 44872 || code == 44900 || code == 44928 || code == 44956 || code == 44984 || code == 45012 || code == 45040 || code == 45068 || code == 45096 || code == 45124 || code == 45152 || code == 45180 || code == 45208 || code == 45236 || code == 45264 || code == 45292 || code == 45320 || code == 45348 || code == 45376 || code == 45404 || code == 45432 || code == 45460 || code == 45488 || code == 45516 || code == 45544 || code == 45572 || code == 45600 || code == 45628 || code == 45656 || code == 45684 || code == 45712 || code == 45740 || code == 45768 || code == 45796 || code == 45824 || code == 45852 || code == 45880 || code == 45908 || code == 45936 || code == 45964 || code == 45992 || code == 46020 || code == 46048 || code == 46076 || code == 46104 || code == 46132 || code == 46160 || code == 46188 || code == 46216 || code == 46244 || code == 46272 || code == 46300 || code == 46328 || code == 46356 || code == 46384 || code == 46412 || code == 46440 || code == 46468 || code == 46496 || code == 46524 || code == 46552 || code == 46580 || code == 46608 || code == 46636 || code == 46664 || code == 46692 || code == 46720 || code == 46748 || code == 46776 || code == 46804 || code == 46832 || code == 46860 || code == 46888 || code == 46916 || code == 46944 || code == 46972 || code == 47e3 || code == 47028 || code == 47056 || code == 47084 || code == 47112 || code == 47140 || code == 47168 || code == 47196 || code == 47224 || code == 47252 || code == 47280 || code == 47308 || code == 47336 || code == 47364 || code == 47392 || code == 47420 || code == 47448 || code == 47476 || code == 47504 || code == 47532 || code == 47560 || code == 47588 || code == 47616 || code == 47644 || code == 47672 || code == 47700 || code == 47728 || code == 47756 || code == 47784 || code == 47812 || code == 47840 || code == 47868 || code == 47896 || code == 47924 || code == 47952 || code == 47980 || code == 48008 || code == 48036 || code == 48064 || code == 48092 || code == 48120 || code == 48148 || code == 48176 || code == 48204 || code == 48232 || code == 48260 || code == 48288 || code == 48316 || code == 48344 || code == 48372 || code == 48400 || code == 48428 || code == 48456 || code == 48484 || code == 48512 || code == 48540 || code == 48568 || code == 48596 || code == 48624 || code == 48652 || code == 48680 || code == 48708 || code == 48736 || code == 48764 || code == 48792 || code == 48820 || code == 48848 || code == 48876 || code == 48904 || code == 48932 || code == 48960 || code == 48988 || code == 49016 || code == 49044 || code == 49072 || code == 49100 || code == 49128 || code == 49156 || code == 49184 || code == 49212 || code == 49240 || code == 49268 || code == 49296 || code == 49324 || code == 49352 || code == 49380 || code == 49408 || code == 49436 || code == 49464 || code == 49492 || code == 49520 || code == 49548 || code == 49576 || code == 49604 || code == 49632 || code == 49660 || code == 49688 || code == 49716 || code == 49744 || code == 49772 || code == 49800 || code == 49828 || code == 49856 || code == 49884 || code == 49912 || code == 49940 || code == 49968 || code == 49996 || code == 50024 || code == 50052 || code == 50080 || code == 50108 || code == 50136 || code == 50164 || code == 50192 || code == 50220 || code == 50248 || code == 50276 || code == 50304 || code == 50332 || code == 50360 || code == 50388 || code == 50416 || code == 50444 || code == 50472 || code == 50500 || code == 50528 || code == 50556 || code == 50584 || code == 50612 || code == 50640 || code == 50668 || code == 50696 || code == 50724 || code == 50752 || code == 50780 || code == 50808 || code == 50836 || code == 50864 || code == 50892 || code == 50920 || code == 50948 || code == 50976 || code == 51004 || code == 51032 || code == 51060 || code == 51088 || code == 51116 || code == 51144 || code == 51172 || code == 51200 || code == 51228 || code == 51256 || code == 51284 || code == 51312 || code == 51340 || code == 51368 || code == 51396 || code == 51424 || code == 51452 || code == 51480 || code == 51508 || code == 51536 || code == 51564 || code == 51592 || code == 51620 || code == 51648 || code == 51676 || code == 51704 || code == 51732 || code == 51760 || code == 51788 || code == 51816 || code == 51844 || code == 51872 || code == 51900 || code == 51928 || code == 51956 || code == 51984 || code == 52012 || code == 52040 || code == 52068 || code == 52096 || code == 52124 || code == 52152 || code == 52180 || code == 52208 || code == 52236 || code == 52264 || code == 52292 || code == 52320 || code == 52348 || code == 52376 || code == 52404 || code == 52432 || code == 52460 || code == 52488 || code == 52516 || code == 52544 || code == 52572 || code == 52600 || code == 52628 || code == 52656 || code == 52684 || code == 52712 || code == 52740 || code == 52768 || code == 52796 || code == 52824 || code == 52852 || code == 52880 || code == 52908 || code == 52936 || code == 52964 || code == 52992 || code == 53020 || code == 53048 || code == 53076 || code == 53104 || code == 53132 || code == 53160 || code == 53188 || code == 53216 || code == 53244 || code == 53272 || code == 53300 || code == 53328 || code == 53356 || code == 53384 || code == 53412 || code == 53440 || code == 53468 || code == 53496 || code == 53524 || code == 53552 || code == 53580 || code == 53608 || code == 53636 || code == 53664 || code == 53692 || code == 53720 || code == 53748 || code == 53776 || code == 53804 || code == 53832 || code == 53860 || code == 53888 || code == 53916 || code == 53944 || code == 53972 || code == 54e3 || code == 54028 || code == 54056 || code == 54084 || code == 54112 || code == 54140 || code == 54168 || code == 54196 || code == 54224 || code == 54252 || code == 54280 || code == 54308 || code == 54336 || code == 54364 || code == 54392 || code == 54420 || code == 54448 || code == 54476 || code == 54504 || code == 54532 || code == 54560 || code == 54588 || code == 54616 || code == 54644 || code == 54672 || code == 54700 || code == 54728 || code == 54756 || code == 54784 || code == 54812 || code == 54840 || code == 54868 || code == 54896 || code == 54924 || code == 54952 || code == 54980 || code == 55008 || code == 55036 || code == 55064 || code == 55092 || code == 55120 || code == 55148 || code == 55176) {
            return LV;
          }
          if (44033 <= code && code <= 44059 || 44061 <= code && code <= 44087 || 44089 <= code && code <= 44115 || 44117 <= code && code <= 44143 || 44145 <= code && code <= 44171 || 44173 <= code && code <= 44199 || 44201 <= code && code <= 44227 || 44229 <= code && code <= 44255 || 44257 <= code && code <= 44283 || 44285 <= code && code <= 44311 || 44313 <= code && code <= 44339 || 44341 <= code && code <= 44367 || 44369 <= code && code <= 44395 || 44397 <= code && code <= 44423 || 44425 <= code && code <= 44451 || 44453 <= code && code <= 44479 || 44481 <= code && code <= 44507 || 44509 <= code && code <= 44535 || 44537 <= code && code <= 44563 || 44565 <= code && code <= 44591 || 44593 <= code && code <= 44619 || 44621 <= code && code <= 44647 || 44649 <= code && code <= 44675 || 44677 <= code && code <= 44703 || 44705 <= code && code <= 44731 || 44733 <= code && code <= 44759 || 44761 <= code && code <= 44787 || 44789 <= code && code <= 44815 || 44817 <= code && code <= 44843 || 44845 <= code && code <= 44871 || 44873 <= code && code <= 44899 || 44901 <= code && code <= 44927 || 44929 <= code && code <= 44955 || 44957 <= code && code <= 44983 || 44985 <= code && code <= 45011 || 45013 <= code && code <= 45039 || 45041 <= code && code <= 45067 || 45069 <= code && code <= 45095 || 45097 <= code && code <= 45123 || 45125 <= code && code <= 45151 || 45153 <= code && code <= 45179 || 45181 <= code && code <= 45207 || 45209 <= code && code <= 45235 || 45237 <= code && code <= 45263 || 45265 <= code && code <= 45291 || 45293 <= code && code <= 45319 || 45321 <= code && code <= 45347 || 45349 <= code && code <= 45375 || 45377 <= code && code <= 45403 || 45405 <= code && code <= 45431 || 45433 <= code && code <= 45459 || 45461 <= code && code <= 45487 || 45489 <= code && code <= 45515 || 45517 <= code && code <= 45543 || 45545 <= code && code <= 45571 || 45573 <= code && code <= 45599 || 45601 <= code && code <= 45627 || 45629 <= code && code <= 45655 || 45657 <= code && code <= 45683 || 45685 <= code && code <= 45711 || 45713 <= code && code <= 45739 || 45741 <= code && code <= 45767 || 45769 <= code && code <= 45795 || 45797 <= code && code <= 45823 || 45825 <= code && code <= 45851 || 45853 <= code && code <= 45879 || 45881 <= code && code <= 45907 || 45909 <= code && code <= 45935 || 45937 <= code && code <= 45963 || 45965 <= code && code <= 45991 || 45993 <= code && code <= 46019 || 46021 <= code && code <= 46047 || 46049 <= code && code <= 46075 || 46077 <= code && code <= 46103 || 46105 <= code && code <= 46131 || 46133 <= code && code <= 46159 || 46161 <= code && code <= 46187 || 46189 <= code && code <= 46215 || 46217 <= code && code <= 46243 || 46245 <= code && code <= 46271 || 46273 <= code && code <= 46299 || 46301 <= code && code <= 46327 || 46329 <= code && code <= 46355 || 46357 <= code && code <= 46383 || 46385 <= code && code <= 46411 || 46413 <= code && code <= 46439 || 46441 <= code && code <= 46467 || 46469 <= code && code <= 46495 || 46497 <= code && code <= 46523 || 46525 <= code && code <= 46551 || 46553 <= code && code <= 46579 || 46581 <= code && code <= 46607 || 46609 <= code && code <= 46635 || 46637 <= code && code <= 46663 || 46665 <= code && code <= 46691 || 46693 <= code && code <= 46719 || 46721 <= code && code <= 46747 || 46749 <= code && code <= 46775 || 46777 <= code && code <= 46803 || 46805 <= code && code <= 46831 || 46833 <= code && code <= 46859 || 46861 <= code && code <= 46887 || 46889 <= code && code <= 46915 || 46917 <= code && code <= 46943 || 46945 <= code && code <= 46971 || 46973 <= code && code <= 46999 || 47001 <= code && code <= 47027 || 47029 <= code && code <= 47055 || 47057 <= code && code <= 47083 || 47085 <= code && code <= 47111 || 47113 <= code && code <= 47139 || 47141 <= code && code <= 47167 || 47169 <= code && code <= 47195 || 47197 <= code && code <= 47223 || 47225 <= code && code <= 47251 || 47253 <= code && code <= 47279 || 47281 <= code && code <= 47307 || 47309 <= code && code <= 47335 || 47337 <= code && code <= 47363 || 47365 <= code && code <= 47391 || 47393 <= code && code <= 47419 || 47421 <= code && code <= 47447 || 47449 <= code && code <= 47475 || 47477 <= code && code <= 47503 || 47505 <= code && code <= 47531 || 47533 <= code && code <= 47559 || 47561 <= code && code <= 47587 || 47589 <= code && code <= 47615 || 47617 <= code && code <= 47643 || 47645 <= code && code <= 47671 || 47673 <= code && code <= 47699 || 47701 <= code && code <= 47727 || 47729 <= code && code <= 47755 || 47757 <= code && code <= 47783 || 47785 <= code && code <= 47811 || 47813 <= code && code <= 47839 || 47841 <= code && code <= 47867 || 47869 <= code && code <= 47895 || 47897 <= code && code <= 47923 || 47925 <= code && code <= 47951 || 47953 <= code && code <= 47979 || 47981 <= code && code <= 48007 || 48009 <= code && code <= 48035 || 48037 <= code && code <= 48063 || 48065 <= code && code <= 48091 || 48093 <= code && code <= 48119 || 48121 <= code && code <= 48147 || 48149 <= code && code <= 48175 || 48177 <= code && code <= 48203 || 48205 <= code && code <= 48231 || 48233 <= code && code <= 48259 || 48261 <= code && code <= 48287 || 48289 <= code && code <= 48315 || 48317 <= code && code <= 48343 || 48345 <= code && code <= 48371 || 48373 <= code && code <= 48399 || 48401 <= code && code <= 48427 || 48429 <= code && code <= 48455 || 48457 <= code && code <= 48483 || 48485 <= code && code <= 48511 || 48513 <= code && code <= 48539 || 48541 <= code && code <= 48567 || 48569 <= code && code <= 48595 || 48597 <= code && code <= 48623 || 48625 <= code && code <= 48651 || 48653 <= code && code <= 48679 || 48681 <= code && code <= 48707 || 48709 <= code && code <= 48735 || 48737 <= code && code <= 48763 || 48765 <= code && code <= 48791 || 48793 <= code && code <= 48819 || 48821 <= code && code <= 48847 || 48849 <= code && code <= 48875 || 48877 <= code && code <= 48903 || 48905 <= code && code <= 48931 || 48933 <= code && code <= 48959 || 48961 <= code && code <= 48987 || 48989 <= code && code <= 49015 || 49017 <= code && code <= 49043 || 49045 <= code && code <= 49071 || 49073 <= code && code <= 49099 || 49101 <= code && code <= 49127 || 49129 <= code && code <= 49155 || 49157 <= code && code <= 49183 || 49185 <= code && code <= 49211 || 49213 <= code && code <= 49239 || 49241 <= code && code <= 49267 || 49269 <= code && code <= 49295 || 49297 <= code && code <= 49323 || 49325 <= code && code <= 49351 || 49353 <= code && code <= 49379 || 49381 <= code && code <= 49407 || 49409 <= code && code <= 49435 || 49437 <= code && code <= 49463 || 49465 <= code && code <= 49491 || 49493 <= code && code <= 49519 || 49521 <= code && code <= 49547 || 49549 <= code && code <= 49575 || 49577 <= code && code <= 49603 || 49605 <= code && code <= 49631 || 49633 <= code && code <= 49659 || 49661 <= code && code <= 49687 || 49689 <= code && code <= 49715 || 49717 <= code && code <= 49743 || 49745 <= code && code <= 49771 || 49773 <= code && code <= 49799 || 49801 <= code && code <= 49827 || 49829 <= code && code <= 49855 || 49857 <= code && code <= 49883 || 49885 <= code && code <= 49911 || 49913 <= code && code <= 49939 || 49941 <= code && code <= 49967 || 49969 <= code && code <= 49995 || 49997 <= code && code <= 50023 || 50025 <= code && code <= 50051 || 50053 <= code && code <= 50079 || 50081 <= code && code <= 50107 || 50109 <= code && code <= 50135 || 50137 <= code && code <= 50163 || 50165 <= code && code <= 50191 || 50193 <= code && code <= 50219 || 50221 <= code && code <= 50247 || 50249 <= code && code <= 50275 || 50277 <= code && code <= 50303 || 50305 <= code && code <= 50331 || 50333 <= code && code <= 50359 || 50361 <= code && code <= 50387 || 50389 <= code && code <= 50415 || 50417 <= code && code <= 50443 || 50445 <= code && code <= 50471 || 50473 <= code && code <= 50499 || 50501 <= code && code <= 50527 || 50529 <= code && code <= 50555 || 50557 <= code && code <= 50583 || 50585 <= code && code <= 50611 || 50613 <= code && code <= 50639 || 50641 <= code && code <= 50667 || 50669 <= code && code <= 50695 || 50697 <= code && code <= 50723 || 50725 <= code && code <= 50751 || 50753 <= code && code <= 50779 || 50781 <= code && code <= 50807 || 50809 <= code && code <= 50835 || 50837 <= code && code <= 50863 || 50865 <= code && code <= 50891 || 50893 <= code && code <= 50919 || 50921 <= code && code <= 50947 || 50949 <= code && code <= 50975 || 50977 <= code && code <= 51003 || 51005 <= code && code <= 51031 || 51033 <= code && code <= 51059 || 51061 <= code && code <= 51087 || 51089 <= code && code <= 51115 || 51117 <= code && code <= 51143 || 51145 <= code && code <= 51171 || 51173 <= code && code <= 51199 || 51201 <= code && code <= 51227 || 51229 <= code && code <= 51255 || 51257 <= code && code <= 51283 || 51285 <= code && code <= 51311 || 51313 <= code && code <= 51339 || 51341 <= code && code <= 51367 || 51369 <= code && code <= 51395 || 51397 <= code && code <= 51423 || 51425 <= code && code <= 51451 || 51453 <= code && code <= 51479 || 51481 <= code && code <= 51507 || 51509 <= code && code <= 51535 || 51537 <= code && code <= 51563 || 51565 <= code && code <= 51591 || 51593 <= code && code <= 51619 || 51621 <= code && code <= 51647 || 51649 <= code && code <= 51675 || 51677 <= code && code <= 51703 || 51705 <= code && code <= 51731 || 51733 <= code && code <= 51759 || 51761 <= code && code <= 51787 || 51789 <= code && code <= 51815 || 51817 <= code && code <= 51843 || 51845 <= code && code <= 51871 || 51873 <= code && code <= 51899 || 51901 <= code && code <= 51927 || 51929 <= code && code <= 51955 || 51957 <= code && code <= 51983 || 51985 <= code && code <= 52011 || 52013 <= code && code <= 52039 || 52041 <= code && code <= 52067 || 52069 <= code && code <= 52095 || 52097 <= code && code <= 52123 || 52125 <= code && code <= 52151 || 52153 <= code && code <= 52179 || 52181 <= code && code <= 52207 || 52209 <= code && code <= 52235 || 52237 <= code && code <= 52263 || 52265 <= code && code <= 52291 || 52293 <= code && code <= 52319 || 52321 <= code && code <= 52347 || 52349 <= code && code <= 52375 || 52377 <= code && code <= 52403 || 52405 <= code && code <= 52431 || 52433 <= code && code <= 52459 || 52461 <= code && code <= 52487 || 52489 <= code && code <= 52515 || 52517 <= code && code <= 52543 || 52545 <= code && code <= 52571 || 52573 <= code && code <= 52599 || 52601 <= code && code <= 52627 || 52629 <= code && code <= 52655 || 52657 <= code && code <= 52683 || 52685 <= code && code <= 52711 || 52713 <= code && code <= 52739 || 52741 <= code && code <= 52767 || 52769 <= code && code <= 52795 || 52797 <= code && code <= 52823 || 52825 <= code && code <= 52851 || 52853 <= code && code <= 52879 || 52881 <= code && code <= 52907 || 52909 <= code && code <= 52935 || 52937 <= code && code <= 52963 || 52965 <= code && code <= 52991 || 52993 <= code && code <= 53019 || 53021 <= code && code <= 53047 || 53049 <= code && code <= 53075 || 53077 <= code && code <= 53103 || 53105 <= code && code <= 53131 || 53133 <= code && code <= 53159 || 53161 <= code && code <= 53187 || 53189 <= code && code <= 53215 || 53217 <= code && code <= 53243 || 53245 <= code && code <= 53271 || 53273 <= code && code <= 53299 || 53301 <= code && code <= 53327 || 53329 <= code && code <= 53355 || 53357 <= code && code <= 53383 || 53385 <= code && code <= 53411 || 53413 <= code && code <= 53439 || 53441 <= code && code <= 53467 || 53469 <= code && code <= 53495 || 53497 <= code && code <= 53523 || 53525 <= code && code <= 53551 || 53553 <= code && code <= 53579 || 53581 <= code && code <= 53607 || 53609 <= code && code <= 53635 || 53637 <= code && code <= 53663 || 53665 <= code && code <= 53691 || 53693 <= code && code <= 53719 || 53721 <= code && code <= 53747 || 53749 <= code && code <= 53775 || 53777 <= code && code <= 53803 || 53805 <= code && code <= 53831 || 53833 <= code && code <= 53859 || 53861 <= code && code <= 53887 || 53889 <= code && code <= 53915 || 53917 <= code && code <= 53943 || 53945 <= code && code <= 53971 || 53973 <= code && code <= 53999 || 54001 <= code && code <= 54027 || 54029 <= code && code <= 54055 || 54057 <= code && code <= 54083 || 54085 <= code && code <= 54111 || 54113 <= code && code <= 54139 || 54141 <= code && code <= 54167 || 54169 <= code && code <= 54195 || 54197 <= code && code <= 54223 || 54225 <= code && code <= 54251 || 54253 <= code && code <= 54279 || 54281 <= code && code <= 54307 || 54309 <= code && code <= 54335 || 54337 <= code && code <= 54363 || 54365 <= code && code <= 54391 || 54393 <= code && code <= 54419 || 54421 <= code && code <= 54447 || 54449 <= code && code <= 54475 || 54477 <= code && code <= 54503 || 54505 <= code && code <= 54531 || 54533 <= code && code <= 54559 || 54561 <= code && code <= 54587 || 54589 <= code && code <= 54615 || 54617 <= code && code <= 54643 || 54645 <= code && code <= 54671 || 54673 <= code && code <= 54699 || 54701 <= code && code <= 54727 || 54729 <= code && code <= 54755 || 54757 <= code && code <= 54783 || 54785 <= code && code <= 54811 || 54813 <= code && code <= 54839 || 54841 <= code && code <= 54867 || 54869 <= code && code <= 54895 || 54897 <= code && code <= 54923 || 54925 <= code && code <= 54951 || 54953 <= code && code <= 54979 || 54981 <= code && code <= 55007 || 55009 <= code && code <= 55035 || 55037 <= code && code <= 55063 || 55065 <= code && code <= 55091 || 55093 <= code && code <= 55119 || 55121 <= code && code <= 55147 || 55149 <= code && code <= 55175 || 55177 <= code && code <= 55203) {
            return LVT;
          }
          if (code == 9757 || code == 9977 || 9994 <= code && code <= 9997 || code == 127877 || 127938 <= code && code <= 127940 || code == 127943 || 127946 <= code && code <= 127948 || 128066 <= code && code <= 128067 || 128070 <= code && code <= 128080 || code == 128110 || 128112 <= code && code <= 128120 || code == 128124 || 128129 <= code && code <= 128131 || 128133 <= code && code <= 128135 || code == 128170 || 128372 <= code && code <= 128373 || code == 128378 || code == 128400 || 128405 <= code && code <= 128406 || 128581 <= code && code <= 128583 || 128587 <= code && code <= 128591 || code == 128675 || 128692 <= code && code <= 128694 || code == 128704 || code == 128716 || 129304 <= code && code <= 129308 || 129310 <= code && code <= 129311 || code == 129318 || 129328 <= code && code <= 129337 || 129341 <= code && code <= 129342 || 129489 <= code && code <= 129501) {
            return E_Base;
          }
          if (127995 <= code && code <= 127999) {
            return E_Modifier;
          }
          if (code == 8205) {
            return ZWJ;
          }
          if (code == 9792 || code == 9794 || 9877 <= code && code <= 9878 || code == 9992 || code == 10084 || code == 127752 || code == 127806 || code == 127859 || code == 127891 || code == 127908 || code == 127912 || code == 127979 || code == 127981 || code == 128139 || 128187 <= code && code <= 128188 || code == 128295 || code == 128300 || code == 128488 || code == 128640 || code == 128658) {
            return Glue_After_Zwj;
          }
          if (128102 <= code && code <= 128105) {
            return E_Base_GAZ;
          }
          return Other;
        }
        return this;
      }
      if (typeof module != "undefined" && module.exports) {
        module.exports = GraphemeSplitter;
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@arcanis-slice-ansi-npm-1.0.2-f258a50730-b66e05fa25.zip/node_modules/@arcanis/slice-ansi/index.js
  var require_slice_ansi = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@arcanis-slice-ansi-npm-1.0.2-f258a50730-b66e05fa25.zip/node_modules/@arcanis/slice-ansi/index.js"(exports, module) {
      var GraphemeSplitter = require_grapheme_splitter();
      var ANSI_SEQUENCE = /^(.*?)(\x1b\[[^m]+m|\x1b\]8;;.*?(\x1b\\|\u0007))/;
      var splitter = new GraphemeSplitter();
      module.exports = (orig, at = 0, until = orig.length) => {
        if (at < 0 || until < 0)
          throw new RangeError(`Negative indices aren't supported by this implementation`);
        const length = until - at;
        let output = ``;
        let skipped = 0;
        let visible = 0;
        while (orig.length > 0) {
          const lookup = orig.match(ANSI_SEQUENCE) || [orig, orig, void 0];
          let graphemes = splitter.splitGraphemes(lookup[1]);
          const skipping = Math.min(at - skipped, graphemes.length);
          graphemes = graphemes.slice(skipping);
          const displaying = Math.min(length - visible, graphemes.length);
          output += graphemes.slice(0, displaying).join(``);
          skipped += skipping;
          visible += displaying;
          if (typeof lookup[2] !== `undefined`)
            output += lookup[2];
          orig = orig.slice(lookup[0].length);
        }
        return output;
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/high-level-opt.js
  var require_high_level_opt = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/high-level-opt.js"(exports, module) {
      "use strict";
      var argmap = new Map([
        ["C", "cwd"],
        ["f", "file"],
        ["z", "gzip"],
        ["P", "preservePaths"],
        ["U", "unlink"],
        ["strip-components", "strip"],
        ["stripComponents", "strip"],
        ["keep-newer", "newer"],
        ["keepNewer", "newer"],
        ["keep-newer-files", "newer"],
        ["keepNewerFiles", "newer"],
        ["k", "keep"],
        ["keep-existing", "keep"],
        ["keepExisting", "keep"],
        ["m", "noMtime"],
        ["no-mtime", "noMtime"],
        ["p", "preserveOwner"],
        ["L", "follow"],
        ["h", "follow"]
      ]);
      var parse4 = module.exports = (opt) => opt ? Object.keys(opt).map((k) => [
        argmap.has(k) ? argmap.get(k) : k,
        opt[k]
      ]).reduce((set, kv) => (set[kv[0]] = kv[1], set), Object.create(null)) : {};
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/minipass-npm-3.1.3-af723e33f3-74b623c1f9.zip/node_modules/minipass/index.js
  var require_minipass = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/minipass-npm-3.1.3-af723e33f3-74b623c1f9.zip/node_modules/minipass/index.js"(exports, module) {
      "use strict";
      var EE = require("events");
      var Stream = require("stream");
      var Yallist = require_yallist();
      var SD = require("string_decoder").StringDecoder;
      var EOF = Symbol("EOF");
      var MAYBE_EMIT_END = Symbol("maybeEmitEnd");
      var EMITTED_END = Symbol("emittedEnd");
      var EMITTING_END = Symbol("emittingEnd");
      var CLOSED = Symbol("closed");
      var READ = Symbol("read");
      var FLUSH = Symbol("flush");
      var FLUSHCHUNK = Symbol("flushChunk");
      var ENCODING = Symbol("encoding");
      var DECODER = Symbol("decoder");
      var FLOWING = Symbol("flowing");
      var PAUSED = Symbol("paused");
      var RESUME = Symbol("resume");
      var BUFFERLENGTH = Symbol("bufferLength");
      var BUFFERPUSH = Symbol("bufferPush");
      var BUFFERSHIFT = Symbol("bufferShift");
      var OBJECTMODE = Symbol("objectMode");
      var DESTROYED = Symbol("destroyed");
      var doIter = global._MP_NO_ITERATOR_SYMBOLS_ !== "1";
      var ASYNCITERATOR = doIter && Symbol.asyncIterator || Symbol("asyncIterator not implemented");
      var ITERATOR = doIter && Symbol.iterator || Symbol("iterator not implemented");
      var isEndish = (ev) => ev === "end" || ev === "finish" || ev === "prefinish";
      var isArrayBuffer = (b) => b instanceof ArrayBuffer || typeof b === "object" && b.constructor && b.constructor.name === "ArrayBuffer" && b.byteLength >= 0;
      var isArrayBufferView = (b) => !Buffer.isBuffer(b) && ArrayBuffer.isView(b);
      module.exports = class Minipass extends Stream {
        constructor(options) {
          super();
          this[FLOWING] = false;
          this[PAUSED] = false;
          this.pipes = new Yallist();
          this.buffer = new Yallist();
          this[OBJECTMODE] = options && options.objectMode || false;
          if (this[OBJECTMODE])
            this[ENCODING] = null;
          else
            this[ENCODING] = options && options.encoding || null;
          if (this[ENCODING] === "buffer")
            this[ENCODING] = null;
          this[DECODER] = this[ENCODING] ? new SD(this[ENCODING]) : null;
          this[EOF] = false;
          this[EMITTED_END] = false;
          this[EMITTING_END] = false;
          this[CLOSED] = false;
          this.writable = true;
          this.readable = true;
          this[BUFFERLENGTH] = 0;
          this[DESTROYED] = false;
        }
        get bufferLength() {
          return this[BUFFERLENGTH];
        }
        get encoding() {
          return this[ENCODING];
        }
        set encoding(enc) {
          if (this[OBJECTMODE])
            throw new Error("cannot set encoding in objectMode");
          if (this[ENCODING] && enc !== this[ENCODING] && (this[DECODER] && this[DECODER].lastNeed || this[BUFFERLENGTH]))
            throw new Error("cannot change encoding");
          if (this[ENCODING] !== enc) {
            this[DECODER] = enc ? new SD(enc) : null;
            if (this.buffer.length)
              this.buffer = this.buffer.map((chunk) => this[DECODER].write(chunk));
          }
          this[ENCODING] = enc;
        }
        setEncoding(enc) {
          this.encoding = enc;
        }
        get objectMode() {
          return this[OBJECTMODE];
        }
        set objectMode(om) {
          this[OBJECTMODE] = this[OBJECTMODE] || !!om;
        }
        write(chunk, encoding, cb) {
          if (this[EOF])
            throw new Error("write after end");
          if (this[DESTROYED]) {
            this.emit("error", Object.assign(new Error("Cannot call write after a stream was destroyed"), {code: "ERR_STREAM_DESTROYED"}));
            return true;
          }
          if (typeof encoding === "function")
            cb = encoding, encoding = "utf8";
          if (!encoding)
            encoding = "utf8";
          if (!this[OBJECTMODE] && !Buffer.isBuffer(chunk)) {
            if (isArrayBufferView(chunk))
              chunk = Buffer.from(chunk.buffer, chunk.byteOffset, chunk.byteLength);
            else if (isArrayBuffer(chunk))
              chunk = Buffer.from(chunk);
            else if (typeof chunk !== "string")
              this.objectMode = true;
          }
          if (!this.objectMode && !chunk.length) {
            if (this[BUFFERLENGTH] !== 0)
              this.emit("readable");
            if (cb)
              cb();
            return this.flowing;
          }
          if (typeof chunk === "string" && !this[OBJECTMODE] && !(encoding === this[ENCODING] && !this[DECODER].lastNeed)) {
            chunk = Buffer.from(chunk, encoding);
          }
          if (Buffer.isBuffer(chunk) && this[ENCODING])
            chunk = this[DECODER].write(chunk);
          if (this.flowing) {
            if (this[BUFFERLENGTH] !== 0)
              this[FLUSH](true);
            this.emit("data", chunk);
          } else
            this[BUFFERPUSH](chunk);
          if (this[BUFFERLENGTH] !== 0)
            this.emit("readable");
          if (cb)
            cb();
          return this.flowing;
        }
        read(n) {
          if (this[DESTROYED])
            return null;
          try {
            if (this[BUFFERLENGTH] === 0 || n === 0 || n > this[BUFFERLENGTH])
              return null;
            if (this[OBJECTMODE])
              n = null;
            if (this.buffer.length > 1 && !this[OBJECTMODE]) {
              if (this.encoding)
                this.buffer = new Yallist([
                  Array.from(this.buffer).join("")
                ]);
              else
                this.buffer = new Yallist([
                  Buffer.concat(Array.from(this.buffer), this[BUFFERLENGTH])
                ]);
            }
            return this[READ](n || null, this.buffer.head.value);
          } finally {
            this[MAYBE_EMIT_END]();
          }
        }
        [READ](n, chunk) {
          if (n === chunk.length || n === null)
            this[BUFFERSHIFT]();
          else {
            this.buffer.head.value = chunk.slice(n);
            chunk = chunk.slice(0, n);
            this[BUFFERLENGTH] -= n;
          }
          this.emit("data", chunk);
          if (!this.buffer.length && !this[EOF])
            this.emit("drain");
          return chunk;
        }
        end(chunk, encoding, cb) {
          if (typeof chunk === "function")
            cb = chunk, chunk = null;
          if (typeof encoding === "function")
            cb = encoding, encoding = "utf8";
          if (chunk)
            this.write(chunk, encoding);
          if (cb)
            this.once("end", cb);
          this[EOF] = true;
          this.writable = false;
          if (this.flowing || !this[PAUSED])
            this[MAYBE_EMIT_END]();
          return this;
        }
        [RESUME]() {
          if (this[DESTROYED])
            return;
          this[PAUSED] = false;
          this[FLOWING] = true;
          this.emit("resume");
          if (this.buffer.length)
            this[FLUSH]();
          else if (this[EOF])
            this[MAYBE_EMIT_END]();
          else
            this.emit("drain");
        }
        resume() {
          return this[RESUME]();
        }
        pause() {
          this[FLOWING] = false;
          this[PAUSED] = true;
        }
        get destroyed() {
          return this[DESTROYED];
        }
        get flowing() {
          return this[FLOWING];
        }
        get paused() {
          return this[PAUSED];
        }
        [BUFFERPUSH](chunk) {
          if (this[OBJECTMODE])
            this[BUFFERLENGTH] += 1;
          else
            this[BUFFERLENGTH] += chunk.length;
          return this.buffer.push(chunk);
        }
        [BUFFERSHIFT]() {
          if (this.buffer.length) {
            if (this[OBJECTMODE])
              this[BUFFERLENGTH] -= 1;
            else
              this[BUFFERLENGTH] -= this.buffer.head.value.length;
          }
          return this.buffer.shift();
        }
        [FLUSH](noDrain) {
          do {
          } while (this[FLUSHCHUNK](this[BUFFERSHIFT]()));
          if (!noDrain && !this.buffer.length && !this[EOF])
            this.emit("drain");
        }
        [FLUSHCHUNK](chunk) {
          return chunk ? (this.emit("data", chunk), this.flowing) : false;
        }
        pipe(dest, opts) {
          if (this[DESTROYED])
            return;
          const ended = this[EMITTED_END];
          opts = opts || {};
          if (dest === process.stdout || dest === process.stderr)
            opts.end = false;
          else
            opts.end = opts.end !== false;
          const p = {dest, opts, ondrain: (_) => this[RESUME]()};
          this.pipes.push(p);
          dest.on("drain", p.ondrain);
          this[RESUME]();
          if (ended && p.opts.end)
            p.dest.end();
          return dest;
        }
        addListener(ev, fn) {
          return this.on(ev, fn);
        }
        on(ev, fn) {
          try {
            return super.on(ev, fn);
          } finally {
            if (ev === "data" && !this.pipes.length && !this.flowing)
              this[RESUME]();
            else if (isEndish(ev) && this[EMITTED_END]) {
              super.emit(ev);
              this.removeAllListeners(ev);
            }
          }
        }
        get emittedEnd() {
          return this[EMITTED_END];
        }
        [MAYBE_EMIT_END]() {
          if (!this[EMITTING_END] && !this[EMITTED_END] && !this[DESTROYED] && this.buffer.length === 0 && this[EOF]) {
            this[EMITTING_END] = true;
            this.emit("end");
            this.emit("prefinish");
            this.emit("finish");
            if (this[CLOSED])
              this.emit("close");
            this[EMITTING_END] = false;
          }
        }
        emit(ev, data) {
          if (ev !== "error" && ev !== "close" && ev !== DESTROYED && this[DESTROYED])
            return;
          else if (ev === "data") {
            if (!data)
              return;
            if (this.pipes.length)
              this.pipes.forEach((p) => p.dest.write(data) === false && this.pause());
          } else if (ev === "end") {
            if (this[EMITTED_END] === true)
              return;
            this[EMITTED_END] = true;
            this.readable = false;
            if (this[DECODER]) {
              data = this[DECODER].end();
              if (data) {
                this.pipes.forEach((p) => p.dest.write(data));
                super.emit("data", data);
              }
            }
            this.pipes.forEach((p) => {
              p.dest.removeListener("drain", p.ondrain);
              if (p.opts.end)
                p.dest.end();
            });
          } else if (ev === "close") {
            this[CLOSED] = true;
            if (!this[EMITTED_END] && !this[DESTROYED])
              return;
          }
          const args = new Array(arguments.length);
          args[0] = ev;
          args[1] = data;
          if (arguments.length > 2) {
            for (let i = 2; i < arguments.length; i++) {
              args[i] = arguments[i];
            }
          }
          try {
            return super.emit.apply(this, args);
          } finally {
            if (!isEndish(ev))
              this[MAYBE_EMIT_END]();
            else
              this.removeAllListeners(ev);
          }
        }
        collect() {
          const buf = [];
          if (!this[OBJECTMODE])
            buf.dataLength = 0;
          const p = this.promise();
          this.on("data", (c) => {
            buf.push(c);
            if (!this[OBJECTMODE])
              buf.dataLength += c.length;
          });
          return p.then(() => buf);
        }
        concat() {
          return this[OBJECTMODE] ? Promise.reject(new Error("cannot concat in objectMode")) : this.collect().then((buf) => this[OBJECTMODE] ? Promise.reject(new Error("cannot concat in objectMode")) : this[ENCODING] ? buf.join("") : Buffer.concat(buf, buf.dataLength));
        }
        promise() {
          return new Promise((resolve, reject) => {
            this.on(DESTROYED, () => reject(new Error("stream destroyed")));
            this.on("end", () => resolve());
            this.on("error", (er) => reject(er));
          });
        }
        [ASYNCITERATOR]() {
          const next = () => {
            const res = this.read();
            if (res !== null)
              return Promise.resolve({done: false, value: res});
            if (this[EOF])
              return Promise.resolve({done: true});
            let resolve = null;
            let reject = null;
            const onerr = (er) => {
              this.removeListener("data", ondata);
              this.removeListener("end", onend);
              reject(er);
            };
            const ondata = (value) => {
              this.removeListener("error", onerr);
              this.removeListener("end", onend);
              this.pause();
              resolve({value, done: !!this[EOF]});
            };
            const onend = () => {
              this.removeListener("error", onerr);
              this.removeListener("data", ondata);
              resolve({done: true});
            };
            const ondestroy = () => onerr(new Error("stream destroyed"));
            return new Promise((res2, rej) => {
              reject = rej;
              resolve = res2;
              this.once(DESTROYED, ondestroy);
              this.once("error", onerr);
              this.once("end", onend);
              this.once("data", ondata);
            });
          };
          return {next};
        }
        [ITERATOR]() {
          const next = () => {
            const value = this.read();
            const done = value === null;
            return {value, done};
          };
          return {next};
        }
        destroy(er) {
          if (this[DESTROYED]) {
            if (er)
              this.emit("error", er);
            else
              this.emit(DESTROYED);
            return this;
          }
          this[DESTROYED] = true;
          this.buffer = new Yallist();
          this[BUFFERLENGTH] = 0;
          if (typeof this.close === "function" && !this[CLOSED])
            this.close();
          if (er)
            this.emit("error", er);
          else
            this.emit(DESTROYED);
          return this;
        }
        static isStream(s) {
          return !!s && (s instanceof Minipass || s instanceof Stream || s instanceof EE && (typeof s.pipe === "function" || typeof s.write === "function" && typeof s.end === "function"));
        }
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/minizlib-npm-2.1.2-ea89cd0cfb-f1fdeac0b0.zip/node_modules/minizlib/constants.js
  var require_constants5 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/minizlib-npm-2.1.2-ea89cd0cfb-f1fdeac0b0.zip/node_modules/minizlib/constants.js"(exports, module) {
      var realZlibConstants = require("zlib").constants || {ZLIB_VERNUM: 4736};
      module.exports = Object.freeze(Object.assign(Object.create(null), {
        Z_NO_FLUSH: 0,
        Z_PARTIAL_FLUSH: 1,
        Z_SYNC_FLUSH: 2,
        Z_FULL_FLUSH: 3,
        Z_FINISH: 4,
        Z_BLOCK: 5,
        Z_OK: 0,
        Z_STREAM_END: 1,
        Z_NEED_DICT: 2,
        Z_ERRNO: -1,
        Z_STREAM_ERROR: -2,
        Z_DATA_ERROR: -3,
        Z_MEM_ERROR: -4,
        Z_BUF_ERROR: -5,
        Z_VERSION_ERROR: -6,
        Z_NO_COMPRESSION: 0,
        Z_BEST_SPEED: 1,
        Z_BEST_COMPRESSION: 9,
        Z_DEFAULT_COMPRESSION: -1,
        Z_FILTERED: 1,
        Z_HUFFMAN_ONLY: 2,
        Z_RLE: 3,
        Z_FIXED: 4,
        Z_DEFAULT_STRATEGY: 0,
        DEFLATE: 1,
        INFLATE: 2,
        GZIP: 3,
        GUNZIP: 4,
        DEFLATERAW: 5,
        INFLATERAW: 6,
        UNZIP: 7,
        BROTLI_DECODE: 8,
        BROTLI_ENCODE: 9,
        Z_MIN_WINDOWBITS: 8,
        Z_MAX_WINDOWBITS: 15,
        Z_DEFAULT_WINDOWBITS: 15,
        Z_MIN_CHUNK: 64,
        Z_MAX_CHUNK: Infinity,
        Z_DEFAULT_CHUNK: 16384,
        Z_MIN_MEMLEVEL: 1,
        Z_MAX_MEMLEVEL: 9,
        Z_DEFAULT_MEMLEVEL: 8,
        Z_MIN_LEVEL: -1,
        Z_MAX_LEVEL: 9,
        Z_DEFAULT_LEVEL: -1,
        BROTLI_OPERATION_PROCESS: 0,
        BROTLI_OPERATION_FLUSH: 1,
        BROTLI_OPERATION_FINISH: 2,
        BROTLI_OPERATION_EMIT_METADATA: 3,
        BROTLI_MODE_GENERIC: 0,
        BROTLI_MODE_TEXT: 1,
        BROTLI_MODE_FONT: 2,
        BROTLI_DEFAULT_MODE: 0,
        BROTLI_MIN_QUALITY: 0,
        BROTLI_MAX_QUALITY: 11,
        BROTLI_DEFAULT_QUALITY: 11,
        BROTLI_MIN_WINDOW_BITS: 10,
        BROTLI_MAX_WINDOW_BITS: 24,
        BROTLI_LARGE_MAX_WINDOW_BITS: 30,
        BROTLI_DEFAULT_WINDOW: 22,
        BROTLI_MIN_INPUT_BLOCK_BITS: 16,
        BROTLI_MAX_INPUT_BLOCK_BITS: 24,
        BROTLI_PARAM_MODE: 0,
        BROTLI_PARAM_QUALITY: 1,
        BROTLI_PARAM_LGWIN: 2,
        BROTLI_PARAM_LGBLOCK: 3,
        BROTLI_PARAM_DISABLE_LITERAL_CONTEXT_MODELING: 4,
        BROTLI_PARAM_SIZE_HINT: 5,
        BROTLI_PARAM_LARGE_WINDOW: 6,
        BROTLI_PARAM_NPOSTFIX: 7,
        BROTLI_PARAM_NDIRECT: 8,
        BROTLI_DECODER_RESULT_ERROR: 0,
        BROTLI_DECODER_RESULT_SUCCESS: 1,
        BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT: 2,
        BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT: 3,
        BROTLI_DECODER_PARAM_DISABLE_RING_BUFFER_REALLOCATION: 0,
        BROTLI_DECODER_PARAM_LARGE_WINDOW: 1,
        BROTLI_DECODER_NO_ERROR: 0,
        BROTLI_DECODER_SUCCESS: 1,
        BROTLI_DECODER_NEEDS_MORE_INPUT: 2,
        BROTLI_DECODER_NEEDS_MORE_OUTPUT: 3,
        BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE: -1,
        BROTLI_DECODER_ERROR_FORMAT_RESERVED: -2,
        BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE: -3,
        BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET: -4,
        BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME: -5,
        BROTLI_DECODER_ERROR_FORMAT_CL_SPACE: -6,
        BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE: -7,
        BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT: -8,
        BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1: -9,
        BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2: -10,
        BROTLI_DECODER_ERROR_FORMAT_TRANSFORM: -11,
        BROTLI_DECODER_ERROR_FORMAT_DICTIONARY: -12,
        BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS: -13,
        BROTLI_DECODER_ERROR_FORMAT_PADDING_1: -14,
        BROTLI_DECODER_ERROR_FORMAT_PADDING_2: -15,
        BROTLI_DECODER_ERROR_FORMAT_DISTANCE: -16,
        BROTLI_DECODER_ERROR_DICTIONARY_NOT_SET: -19,
        BROTLI_DECODER_ERROR_INVALID_ARGUMENTS: -20,
        BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES: -21,
        BROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS: -22,
        BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP: -25,
        BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1: -26,
        BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2: -27,
        BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES: -30,
        BROTLI_DECODER_ERROR_UNREACHABLE: -31
      }, realZlibConstants));
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/minizlib-npm-2.1.2-ea89cd0cfb-f1fdeac0b0.zip/node_modules/minizlib/index.js
  var require_minizlib = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/minizlib-npm-2.1.2-ea89cd0cfb-f1fdeac0b0.zip/node_modules/minizlib/index.js"(exports) {
      "use strict";
      var assert = require("assert");
      var Buffer2 = require("buffer").Buffer;
      var realZlib = require("zlib");
      var constants3 = exports.constants = require_constants5();
      var Minipass = require_minipass();
      var OriginalBufferConcat = Buffer2.concat;
      var _superWrite = Symbol("_superWrite");
      var ZlibError = class extends Error {
        constructor(err) {
          super("zlib: " + err.message);
          this.code = err.code;
          this.errno = err.errno;
          if (!this.code)
            this.code = "ZLIB_ERROR";
          this.message = "zlib: " + err.message;
          Error.captureStackTrace(this, this.constructor);
        }
        get name() {
          return "ZlibError";
        }
      };
      var _opts = Symbol("opts");
      var _flushFlag = Symbol("flushFlag");
      var _finishFlushFlag = Symbol("finishFlushFlag");
      var _fullFlushFlag = Symbol("fullFlushFlag");
      var _handle = Symbol("handle");
      var _onError = Symbol("onError");
      var _sawError = Symbol("sawError");
      var _level = Symbol("level");
      var _strategy = Symbol("strategy");
      var _ended = Symbol("ended");
      var _defaultFullFlush = Symbol("_defaultFullFlush");
      var ZlibBase = class extends Minipass {
        constructor(opts, mode) {
          if (!opts || typeof opts !== "object")
            throw new TypeError("invalid options for ZlibBase constructor");
          super(opts);
          this[_sawError] = false;
          this[_ended] = false;
          this[_opts] = opts;
          this[_flushFlag] = opts.flush;
          this[_finishFlushFlag] = opts.finishFlush;
          try {
            this[_handle] = new realZlib[mode](opts);
          } catch (er) {
            throw new ZlibError(er);
          }
          this[_onError] = (err) => {
            if (this[_sawError])
              return;
            this[_sawError] = true;
            this.close();
            this.emit("error", err);
          };
          this[_handle].on("error", (er) => this[_onError](new ZlibError(er)));
          this.once("end", () => this.close);
        }
        close() {
          if (this[_handle]) {
            this[_handle].close();
            this[_handle] = null;
            this.emit("close");
          }
        }
        reset() {
          if (!this[_sawError]) {
            assert(this[_handle], "zlib binding closed");
            return this[_handle].reset();
          }
        }
        flush(flushFlag) {
          if (this.ended)
            return;
          if (typeof flushFlag !== "number")
            flushFlag = this[_fullFlushFlag];
          this.write(Object.assign(Buffer2.alloc(0), {[_flushFlag]: flushFlag}));
        }
        end(chunk, encoding, cb) {
          if (chunk)
            this.write(chunk, encoding);
          this.flush(this[_finishFlushFlag]);
          this[_ended] = true;
          return super.end(null, null, cb);
        }
        get ended() {
          return this[_ended];
        }
        write(chunk, encoding, cb) {
          if (typeof encoding === "function")
            cb = encoding, encoding = "utf8";
          if (typeof chunk === "string")
            chunk = Buffer2.from(chunk, encoding);
          if (this[_sawError])
            return;
          assert(this[_handle], "zlib binding closed");
          const nativeHandle = this[_handle]._handle;
          const originalNativeClose = nativeHandle.close;
          nativeHandle.close = () => {
          };
          const originalClose = this[_handle].close;
          this[_handle].close = () => {
          };
          Buffer2.concat = (args) => args;
          let result;
          try {
            const flushFlag = typeof chunk[_flushFlag] === "number" ? chunk[_flushFlag] : this[_flushFlag];
            result = this[_handle]._processChunk(chunk, flushFlag);
            Buffer2.concat = OriginalBufferConcat;
          } catch (err) {
            Buffer2.concat = OriginalBufferConcat;
            this[_onError](new ZlibError(err));
          } finally {
            if (this[_handle]) {
              this[_handle]._handle = nativeHandle;
              nativeHandle.close = originalNativeClose;
              this[_handle].close = originalClose;
              this[_handle].removeAllListeners("error");
            }
          }
          if (this[_handle])
            this[_handle].on("error", (er) => this[_onError](new ZlibError(er)));
          let writeReturn;
          if (result) {
            if (Array.isArray(result) && result.length > 0) {
              writeReturn = this[_superWrite](Buffer2.from(result[0]));
              for (let i = 1; i < result.length; i++) {
                writeReturn = this[_superWrite](result[i]);
              }
            } else {
              writeReturn = this[_superWrite](Buffer2.from(result));
            }
          }
          if (cb)
            cb();
          return writeReturn;
        }
        [_superWrite](data) {
          return super.write(data);
        }
      };
      var Zlib = class extends ZlibBase {
        constructor(opts, mode) {
          opts = opts || {};
          opts.flush = opts.flush || constants3.Z_NO_FLUSH;
          opts.finishFlush = opts.finishFlush || constants3.Z_FINISH;
          super(opts, mode);
          this[_fullFlushFlag] = constants3.Z_FULL_FLUSH;
          this[_level] = opts.level;
          this[_strategy] = opts.strategy;
        }
        params(level, strategy) {
          if (this[_sawError])
            return;
          if (!this[_handle])
            throw new Error("cannot switch params when binding is closed");
          if (!this[_handle].params)
            throw new Error("not supported in this implementation");
          if (this[_level] !== level || this[_strategy] !== strategy) {
            this.flush(constants3.Z_SYNC_FLUSH);
            assert(this[_handle], "zlib binding closed");
            const origFlush = this[_handle].flush;
            this[_handle].flush = (flushFlag, cb) => {
              this.flush(flushFlag);
              cb();
            };
            try {
              this[_handle].params(level, strategy);
            } finally {
              this[_handle].flush = origFlush;
            }
            if (this[_handle]) {
              this[_level] = level;
              this[_strategy] = strategy;
            }
          }
        }
      };
      var Deflate = class extends Zlib {
        constructor(opts) {
          super(opts, "Deflate");
        }
      };
      var Inflate = class extends Zlib {
        constructor(opts) {
          super(opts, "Inflate");
        }
      };
      var _portable = Symbol("_portable");
      var Gzip = class extends Zlib {
        constructor(opts) {
          super(opts, "Gzip");
          this[_portable] = opts && !!opts.portable;
        }
        [_superWrite](data) {
          if (!this[_portable])
            return super[_superWrite](data);
          this[_portable] = false;
          data[9] = 255;
          return super[_superWrite](data);
        }
      };
      var Gunzip = class extends Zlib {
        constructor(opts) {
          super(opts, "Gunzip");
        }
      };
      var DeflateRaw = class extends Zlib {
        constructor(opts) {
          super(opts, "DeflateRaw");
        }
      };
      var InflateRaw = class extends Zlib {
        constructor(opts) {
          super(opts, "InflateRaw");
        }
      };
      var Unzip = class extends Zlib {
        constructor(opts) {
          super(opts, "Unzip");
        }
      };
      var Brotli = class extends ZlibBase {
        constructor(opts, mode) {
          opts = opts || {};
          opts.flush = opts.flush || constants3.BROTLI_OPERATION_PROCESS;
          opts.finishFlush = opts.finishFlush || constants3.BROTLI_OPERATION_FINISH;
          super(opts, mode);
          this[_fullFlushFlag] = constants3.BROTLI_OPERATION_FLUSH;
        }
      };
      var BrotliCompress = class extends Brotli {
        constructor(opts) {
          super(opts, "BrotliCompress");
        }
      };
      var BrotliDecompress = class extends Brotli {
        constructor(opts) {
          super(opts, "BrotliDecompress");
        }
      };
      exports.Deflate = Deflate;
      exports.Inflate = Inflate;
      exports.Gzip = Gzip;
      exports.Gunzip = Gunzip;
      exports.DeflateRaw = DeflateRaw;
      exports.InflateRaw = InflateRaw;
      exports.Unzip = Unzip;
      if (typeof realZlib.BrotliCompress === "function") {
        exports.BrotliCompress = BrotliCompress;
        exports.BrotliDecompress = BrotliDecompress;
      } else {
        exports.BrotliCompress = exports.BrotliDecompress = class {
          constructor() {
            throw new Error("Brotli is not supported in this version of Node.js");
          }
        };
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/types.js
  var require_types3 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/types.js"(exports) {
      "use strict";
      exports.name = new Map([
        ["0", "File"],
        ["", "OldFile"],
        ["1", "Link"],
        ["2", "SymbolicLink"],
        ["3", "CharacterDevice"],
        ["4", "BlockDevice"],
        ["5", "Directory"],
        ["6", "FIFO"],
        ["7", "ContiguousFile"],
        ["g", "GlobalExtendedHeader"],
        ["x", "ExtendedHeader"],
        ["A", "SolarisACL"],
        ["D", "GNUDumpDir"],
        ["I", "Inode"],
        ["K", "NextFileHasLongLinkpath"],
        ["L", "NextFileHasLongPath"],
        ["M", "ContinuationFile"],
        ["N", "OldGnuLongPath"],
        ["S", "SparseFile"],
        ["V", "TapeVolumeHeader"],
        ["X", "OldExtendedHeader"]
      ]);
      exports.code = new Map(Array.from(exports.name).map((kv) => [kv[1], kv[0]]));
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/read-entry.js
  var require_read_entry = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/read-entry.js"(exports, module) {
      "use strict";
      var types2 = require_types3();
      var MiniPass = require_minipass();
      var SLURP = Symbol("slurp");
      module.exports = class ReadEntry extends MiniPass {
        constructor(header, ex, gex) {
          super();
          this.pause();
          this.extended = ex;
          this.globalExtended = gex;
          this.header = header;
          this.startBlockSize = 512 * Math.ceil(header.size / 512);
          this.blockRemain = this.startBlockSize;
          this.remain = header.size;
          this.type = header.type;
          this.meta = false;
          this.ignore = false;
          switch (this.type) {
            case "File":
            case "OldFile":
            case "Link":
            case "SymbolicLink":
            case "CharacterDevice":
            case "BlockDevice":
            case "Directory":
            case "FIFO":
            case "ContiguousFile":
            case "GNUDumpDir":
              break;
            case "NextFileHasLongLinkpath":
            case "NextFileHasLongPath":
            case "OldGnuLongPath":
            case "GlobalExtendedHeader":
            case "ExtendedHeader":
            case "OldExtendedHeader":
              this.meta = true;
              break;
            default:
              this.ignore = true;
          }
          this.path = header.path;
          this.mode = header.mode;
          if (this.mode)
            this.mode = this.mode & 4095;
          this.uid = header.uid;
          this.gid = header.gid;
          this.uname = header.uname;
          this.gname = header.gname;
          this.size = header.size;
          this.mtime = header.mtime;
          this.atime = header.atime;
          this.ctime = header.ctime;
          this.linkpath = header.linkpath;
          this.uname = header.uname;
          this.gname = header.gname;
          if (ex)
            this[SLURP](ex);
          if (gex)
            this[SLURP](gex, true);
        }
        write(data) {
          const writeLen = data.length;
          if (writeLen > this.blockRemain)
            throw new Error("writing more to entry than is appropriate");
          const r = this.remain;
          const br = this.blockRemain;
          this.remain = Math.max(0, r - writeLen);
          this.blockRemain = Math.max(0, br - writeLen);
          if (this.ignore)
            return true;
          if (r >= writeLen)
            return super.write(data);
          return super.write(data.slice(0, r));
        }
        [SLURP](ex, global2) {
          for (let k in ex) {
            if (ex[k] !== null && ex[k] !== void 0 && !(global2 && k === "path"))
              this[k] = ex[k];
          }
        }
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/large-numbers.js
  var require_large_numbers = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/large-numbers.js"(exports) {
      "use strict";
      var encode = exports.encode = (num, buf) => {
        if (!Number.isSafeInteger(num))
          throw Error("cannot encode number outside of javascript safe integer range");
        else if (num < 0)
          encodeNegative(num, buf);
        else
          encodePositive(num, buf);
        return buf;
      };
      var encodePositive = (num, buf) => {
        buf[0] = 128;
        for (var i = buf.length; i > 1; i--) {
          buf[i - 1] = num & 255;
          num = Math.floor(num / 256);
        }
      };
      var encodeNegative = (num, buf) => {
        buf[0] = 255;
        var flipped = false;
        num = num * -1;
        for (var i = buf.length; i > 1; i--) {
          var byte = num & 255;
          num = Math.floor(num / 256);
          if (flipped)
            buf[i - 1] = onesComp(byte);
          else if (byte === 0)
            buf[i - 1] = 0;
          else {
            flipped = true;
            buf[i - 1] = twosComp(byte);
          }
        }
      };
      var parse4 = exports.parse = (buf) => {
        var post3 = buf[buf.length - 1];
        var pre = buf[0];
        var value;
        if (pre === 128)
          value = pos(buf.slice(1, buf.length));
        else if (pre === 255)
          value = twos(buf);
        else
          throw Error("invalid base256 encoding");
        if (!Number.isSafeInteger(value))
          throw Error("parsed number outside of javascript safe integer range");
        return value;
      };
      var twos = (buf) => {
        var len = buf.length;
        var sum = 0;
        var flipped = false;
        for (var i = len - 1; i > -1; i--) {
          var byte = buf[i];
          var f;
          if (flipped)
            f = onesComp(byte);
          else if (byte === 0)
            f = byte;
          else {
            flipped = true;
            f = twosComp(byte);
          }
          if (f !== 0)
            sum -= f * Math.pow(256, len - i - 1);
        }
        return sum;
      };
      var pos = (buf) => {
        var len = buf.length;
        var sum = 0;
        for (var i = len - 1; i > -1; i--) {
          var byte = buf[i];
          if (byte !== 0)
            sum += byte * Math.pow(256, len - i - 1);
        }
        return sum;
      };
      var onesComp = (byte) => (255 ^ byte) & 255;
      var twosComp = (byte) => (255 ^ byte) + 1 & 255;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/header.js
  var require_header = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/header.js"(exports, module) {
      "use strict";
      var types2 = require_types3();
      var pathModule = require("path").posix;
      var large = require_large_numbers();
      var SLURP = Symbol("slurp");
      var TYPE = Symbol("type");
      var Header = class {
        constructor(data, off, ex, gex) {
          this.cksumValid = false;
          this.needPax = false;
          this.nullBlock = false;
          this.block = null;
          this.path = null;
          this.mode = null;
          this.uid = null;
          this.gid = null;
          this.size = null;
          this.mtime = null;
          this.cksum = null;
          this[TYPE] = "0";
          this.linkpath = null;
          this.uname = null;
          this.gname = null;
          this.devmaj = 0;
          this.devmin = 0;
          this.atime = null;
          this.ctime = null;
          if (Buffer.isBuffer(data))
            this.decode(data, off || 0, ex, gex);
          else if (data)
            this.set(data);
        }
        decode(buf, off, ex, gex) {
          if (!off)
            off = 0;
          if (!buf || !(buf.length >= off + 512))
            throw new Error("need 512 bytes for header");
          this.path = decString(buf, off, 100);
          this.mode = decNumber(buf, off + 100, 8);
          this.uid = decNumber(buf, off + 108, 8);
          this.gid = decNumber(buf, off + 116, 8);
          this.size = decNumber(buf, off + 124, 12);
          this.mtime = decDate(buf, off + 136, 12);
          this.cksum = decNumber(buf, off + 148, 12);
          this[SLURP](ex);
          this[SLURP](gex, true);
          this[TYPE] = decString(buf, off + 156, 1);
          if (this[TYPE] === "")
            this[TYPE] = "0";
          if (this[TYPE] === "0" && this.path.substr(-1) === "/")
            this[TYPE] = "5";
          if (this[TYPE] === "5")
            this.size = 0;
          this.linkpath = decString(buf, off + 157, 100);
          if (buf.slice(off + 257, off + 265).toString() === "ustar\x0000") {
            this.uname = decString(buf, off + 265, 32);
            this.gname = decString(buf, off + 297, 32);
            this.devmaj = decNumber(buf, off + 329, 8);
            this.devmin = decNumber(buf, off + 337, 8);
            if (buf[off + 475] !== 0) {
              const prefix = decString(buf, off + 345, 155);
              this.path = prefix + "/" + this.path;
            } else {
              const prefix = decString(buf, off + 345, 130);
              if (prefix)
                this.path = prefix + "/" + this.path;
              this.atime = decDate(buf, off + 476, 12);
              this.ctime = decDate(buf, off + 488, 12);
            }
          }
          let sum = 8 * 32;
          for (let i = off; i < off + 148; i++) {
            sum += buf[i];
          }
          for (let i = off + 156; i < off + 512; i++) {
            sum += buf[i];
          }
          this.cksumValid = sum === this.cksum;
          if (this.cksum === null && sum === 8 * 32)
            this.nullBlock = true;
        }
        [SLURP](ex, global2) {
          for (let k in ex) {
            if (ex[k] !== null && ex[k] !== void 0 && !(global2 && k === "path"))
              this[k] = ex[k];
          }
        }
        encode(buf, off) {
          if (!buf) {
            buf = this.block = Buffer.alloc(512);
            off = 0;
          }
          if (!off)
            off = 0;
          if (!(buf.length >= off + 512))
            throw new Error("need 512 bytes for header");
          const prefixSize = this.ctime || this.atime ? 130 : 155;
          const split2 = splitPrefix(this.path || "", prefixSize);
          const path3 = split2[0];
          const prefix = split2[1];
          this.needPax = split2[2];
          this.needPax = encString(buf, off, 100, path3) || this.needPax;
          this.needPax = encNumber(buf, off + 100, 8, this.mode) || this.needPax;
          this.needPax = encNumber(buf, off + 108, 8, this.uid) || this.needPax;
          this.needPax = encNumber(buf, off + 116, 8, this.gid) || this.needPax;
          this.needPax = encNumber(buf, off + 124, 12, this.size) || this.needPax;
          this.needPax = encDate(buf, off + 136, 12, this.mtime) || this.needPax;
          buf[off + 156] = this[TYPE].charCodeAt(0);
          this.needPax = encString(buf, off + 157, 100, this.linkpath) || this.needPax;
          buf.write("ustar\x0000", off + 257, 8);
          this.needPax = encString(buf, off + 265, 32, this.uname) || this.needPax;
          this.needPax = encString(buf, off + 297, 32, this.gname) || this.needPax;
          this.needPax = encNumber(buf, off + 329, 8, this.devmaj) || this.needPax;
          this.needPax = encNumber(buf, off + 337, 8, this.devmin) || this.needPax;
          this.needPax = encString(buf, off + 345, prefixSize, prefix) || this.needPax;
          if (buf[off + 475] !== 0)
            this.needPax = encString(buf, off + 345, 155, prefix) || this.needPax;
          else {
            this.needPax = encString(buf, off + 345, 130, prefix) || this.needPax;
            this.needPax = encDate(buf, off + 476, 12, this.atime) || this.needPax;
            this.needPax = encDate(buf, off + 488, 12, this.ctime) || this.needPax;
          }
          let sum = 8 * 32;
          for (let i = off; i < off + 148; i++) {
            sum += buf[i];
          }
          for (let i = off + 156; i < off + 512; i++) {
            sum += buf[i];
          }
          this.cksum = sum;
          encNumber(buf, off + 148, 8, this.cksum);
          this.cksumValid = true;
          return this.needPax;
        }
        set(data) {
          for (let i in data) {
            if (data[i] !== null && data[i] !== void 0)
              this[i] = data[i];
          }
        }
        get type() {
          return types2.name.get(this[TYPE]) || this[TYPE];
        }
        get typeKey() {
          return this[TYPE];
        }
        set type(type) {
          if (types2.code.has(type))
            this[TYPE] = types2.code.get(type);
          else
            this[TYPE] = type;
        }
      };
      var splitPrefix = (p, prefixSize) => {
        const pathSize = 100;
        let pp = p;
        let prefix = "";
        let ret;
        const root = pathModule.parse(p).root || ".";
        if (Buffer.byteLength(pp) < pathSize)
          ret = [pp, prefix, false];
        else {
          prefix = pathModule.dirname(pp);
          pp = pathModule.basename(pp);
          do {
            if (Buffer.byteLength(pp) <= pathSize && Buffer.byteLength(prefix) <= prefixSize)
              ret = [pp, prefix, false];
            else if (Buffer.byteLength(pp) > pathSize && Buffer.byteLength(prefix) <= prefixSize)
              ret = [pp.substr(0, pathSize - 1), prefix, true];
            else {
              pp = pathModule.join(pathModule.basename(prefix), pp);
              prefix = pathModule.dirname(prefix);
            }
          } while (prefix !== root && !ret);
          if (!ret)
            ret = [p.substr(0, pathSize - 1), "", true];
        }
        return ret;
      };
      var decString = (buf, off, size) => buf.slice(off, off + size).toString("utf8").replace(/\0.*/, "");
      var decDate = (buf, off, size) => numToDate(decNumber(buf, off, size));
      var numToDate = (num) => num === null ? null : new Date(num * 1e3);
      var decNumber = (buf, off, size) => buf[off] & 128 ? large.parse(buf.slice(off, off + size)) : decSmallNumber(buf, off, size);
      var nanNull = (value) => isNaN(value) ? null : value;
      var decSmallNumber = (buf, off, size) => nanNull(parseInt(buf.slice(off, off + size).toString("utf8").replace(/\0.*$/, "").trim(), 8));
      var MAXNUM = {
        12: 8589934591,
        8: 2097151
      };
      var encNumber = (buf, off, size, number) => number === null ? false : number > MAXNUM[size] || number < 0 ? (large.encode(number, buf.slice(off, off + size)), true) : (encSmallNumber(buf, off, size, number), false);
      var encSmallNumber = (buf, off, size, number) => buf.write(octalString(number, size), off, size, "ascii");
      var octalString = (number, size) => padOctal(Math.floor(number).toString(8), size);
      var padOctal = (string, size) => (string.length === size - 1 ? string : new Array(size - string.length - 1).join("0") + string + " ") + "\0";
      var encDate = (buf, off, size, date) => date === null ? false : encNumber(buf, off, size, date.getTime() / 1e3);
      var NULLS = new Array(156).join("\0");
      var encString = (buf, off, size, string) => string === null ? false : (buf.write(string + NULLS, off, size, "utf8"), string.length !== Buffer.byteLength(string) || string.length > size);
      module.exports = Header;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/pax.js
  var require_pax = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/pax.js"(exports, module) {
      "use strict";
      var Header = require_header();
      var path3 = require("path");
      var Pax = class {
        constructor(obj, global2) {
          this.atime = obj.atime || null;
          this.charset = obj.charset || null;
          this.comment = obj.comment || null;
          this.ctime = obj.ctime || null;
          this.gid = obj.gid || null;
          this.gname = obj.gname || null;
          this.linkpath = obj.linkpath || null;
          this.mtime = obj.mtime || null;
          this.path = obj.path || null;
          this.size = obj.size || null;
          this.uid = obj.uid || null;
          this.uname = obj.uname || null;
          this.dev = obj.dev || null;
          this.ino = obj.ino || null;
          this.nlink = obj.nlink || null;
          this.global = global2 || false;
        }
        encode() {
          const body = this.encodeBody();
          if (body === "")
            return null;
          const bodyLen = Buffer.byteLength(body);
          const bufLen = 512 * Math.ceil(1 + bodyLen / 512);
          const buf = Buffer.allocUnsafe(bufLen);
          for (let i = 0; i < 512; i++) {
            buf[i] = 0;
          }
          new Header({
            path: ("PaxHeader/" + path3.basename(this.path)).slice(0, 99),
            mode: this.mode || 420,
            uid: this.uid || null,
            gid: this.gid || null,
            size: bodyLen,
            mtime: this.mtime || null,
            type: this.global ? "GlobalExtendedHeader" : "ExtendedHeader",
            linkpath: "",
            uname: this.uname || "",
            gname: this.gname || "",
            devmaj: 0,
            devmin: 0,
            atime: this.atime || null,
            ctime: this.ctime || null
          }).encode(buf);
          buf.write(body, 512, bodyLen, "utf8");
          for (let i = bodyLen + 512; i < buf.length; i++) {
            buf[i] = 0;
          }
          return buf;
        }
        encodeBody() {
          return this.encodeField("path") + this.encodeField("ctime") + this.encodeField("atime") + this.encodeField("dev") + this.encodeField("ino") + this.encodeField("nlink") + this.encodeField("charset") + this.encodeField("comment") + this.encodeField("gid") + this.encodeField("gname") + this.encodeField("linkpath") + this.encodeField("mtime") + this.encodeField("size") + this.encodeField("uid") + this.encodeField("uname");
        }
        encodeField(field) {
          if (this[field] === null || this[field] === void 0)
            return "";
          const v = this[field] instanceof Date ? this[field].getTime() / 1e3 : this[field];
          const s = " " + (field === "dev" || field === "ino" || field === "nlink" ? "SCHILY." : "") + field + "=" + v + "\n";
          const byteLen = Buffer.byteLength(s);
          let digits = Math.floor(Math.log(byteLen) / Math.log(10)) + 1;
          if (byteLen + digits >= Math.pow(10, digits))
            digits += 1;
          const len = digits + byteLen;
          return len + s;
        }
      };
      Pax.parse = (string, ex, g) => new Pax(merge2(parseKV(string), ex), g);
      var merge2 = (a, b) => b ? Object.keys(a).reduce((s, k) => (s[k] = a[k], s), b) : a;
      var parseKV = (string) => string.replace(/\n$/, "").split("\n").reduce(parseKVLine, Object.create(null));
      var parseKVLine = (set, line) => {
        const n = parseInt(line, 10);
        if (n !== Buffer.byteLength(line) + 1)
          return set;
        line = line.substr((n + " ").length);
        const kv = line.split("=");
        const k = kv.shift().replace(/^SCHILY\.(dev|ino|nlink)/, "$1");
        if (!k)
          return set;
        const v = kv.join("=");
        set[k] = /^([A-Z]+\.)?([mac]|birth|creation)time$/.test(k) ? new Date(v * 1e3) : /^[0-9]+$/.test(v) ? +v : v;
        return set;
      };
      module.exports = Pax;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/warn-mixin.js
  var require_warn_mixin = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/warn-mixin.js"(exports, module) {
      "use strict";
      module.exports = (Base) => class extends Base {
        warn(code, message, data = {}) {
          if (this.file)
            data.file = this.file;
          if (this.cwd)
            data.cwd = this.cwd;
          data.code = message instanceof Error && message.code || code;
          data.tarCode = code;
          if (!this.strict && data.recoverable !== false) {
            if (message instanceof Error) {
              data = Object.assign(message, data);
              message = message.message;
            }
            this.emit("warn", data.tarCode, message, data);
          } else if (message instanceof Error) {
            this.emit("error", Object.assign(message, data));
          } else
            this.emit("error", Object.assign(new Error(`${code}: ${message}`), data));
        }
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/winchars.js
  var require_winchars = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/winchars.js"(exports, module) {
      "use strict";
      var raw = [
        "|",
        "<",
        ">",
        "?",
        ":"
      ];
      var win = raw.map((char) => String.fromCharCode(61440 + char.charCodeAt(0)));
      var toWin = new Map(raw.map((char, i) => [char, win[i]]));
      var toRaw = new Map(win.map((char, i) => [char, raw[i]]));
      module.exports = {
        encode: (s) => raw.reduce((s2, c) => s2.split(c).join(toWin.get(c)), s),
        decode: (s) => win.reduce((s2, c) => s2.split(c).join(toRaw.get(c)), s)
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/mode-fix.js
  var require_mode_fix = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/mode-fix.js"(exports, module) {
      "use strict";
      module.exports = (mode, isDir, portable) => {
        mode &= 4095;
        if (portable) {
          mode = (mode | 384) & ~18;
        }
        if (isDir) {
          if (mode & 256)
            mode |= 64;
          if (mode & 32)
            mode |= 8;
          if (mode & 4)
            mode |= 1;
        }
        return mode;
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/write-entry.js
  var require_write_entry = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/write-entry.js"(exports, module) {
      "use strict";
      var MiniPass = require_minipass();
      var Pax = require_pax();
      var Header = require_header();
      var ReadEntry = require_read_entry();
      var fs8 = require("fs");
      var path3 = require("path");
      var types2 = require_types3();
      var maxReadSize = 16 * 1024 * 1024;
      var PROCESS = Symbol("process");
      var FILE = Symbol("file");
      var DIRECTORY = Symbol("directory");
      var SYMLINK = Symbol("symlink");
      var HARDLINK = Symbol("hardlink");
      var HEADER = Symbol("header");
      var READ = Symbol("read");
      var LSTAT = Symbol("lstat");
      var ONLSTAT = Symbol("onlstat");
      var ONREAD = Symbol("onread");
      var ONREADLINK = Symbol("onreadlink");
      var OPENFILE = Symbol("openfile");
      var ONOPENFILE = Symbol("onopenfile");
      var CLOSE = Symbol("close");
      var MODE = Symbol("mode");
      var warner = require_warn_mixin();
      var winchars = require_winchars();
      var modeFix = require_mode_fix();
      var WriteEntry = warner(class WriteEntry extends MiniPass {
        constructor(p, opt) {
          opt = opt || {};
          super(opt);
          if (typeof p !== "string")
            throw new TypeError("path is required");
          this.path = p;
          this.portable = !!opt.portable;
          this.myuid = process.getuid && process.getuid();
          this.myuser = process.env.USER || "";
          this.maxReadSize = opt.maxReadSize || maxReadSize;
          this.linkCache = opt.linkCache || new Map();
          this.statCache = opt.statCache || new Map();
          this.preservePaths = !!opt.preservePaths;
          this.cwd = opt.cwd || process.cwd();
          this.strict = !!opt.strict;
          this.noPax = !!opt.noPax;
          this.noMtime = !!opt.noMtime;
          this.mtime = opt.mtime || null;
          if (typeof opt.onwarn === "function")
            this.on("warn", opt.onwarn);
          let pathWarn = false;
          if (!this.preservePaths && path3.win32.isAbsolute(p)) {
            const parsed = path3.win32.parse(p);
            this.path = p.substr(parsed.root.length);
            pathWarn = parsed.root;
          }
          this.win32 = !!opt.win32 || process.platform === "win32";
          if (this.win32) {
            this.path = winchars.decode(this.path.replace(/\\/g, "/"));
            p = p.replace(/\\/g, "/");
          }
          this.absolute = opt.absolute || path3.resolve(this.cwd, p);
          if (this.path === "")
            this.path = "./";
          if (pathWarn) {
            this.warn("TAR_ENTRY_INFO", `stripping ${pathWarn} from absolute path`, {
              entry: this,
              path: pathWarn + this.path
            });
          }
          if (this.statCache.has(this.absolute))
            this[ONLSTAT](this.statCache.get(this.absolute));
          else
            this[LSTAT]();
        }
        [LSTAT]() {
          fs8.lstat(this.absolute, (er, stat) => {
            if (er)
              return this.emit("error", er);
            this[ONLSTAT](stat);
          });
        }
        [ONLSTAT](stat) {
          this.statCache.set(this.absolute, stat);
          this.stat = stat;
          if (!stat.isFile())
            stat.size = 0;
          this.type = getType(stat);
          this.emit("stat", stat);
          this[PROCESS]();
        }
        [PROCESS]() {
          switch (this.type) {
            case "File":
              return this[FILE]();
            case "Directory":
              return this[DIRECTORY]();
            case "SymbolicLink":
              return this[SYMLINK]();
            default:
              return this.end();
          }
        }
        [MODE](mode) {
          return modeFix(mode, this.type === "Directory", this.portable);
        }
        [HEADER]() {
          if (this.type === "Directory" && this.portable)
            this.noMtime = true;
          this.header = new Header({
            path: this.path,
            linkpath: this.linkpath,
            mode: this[MODE](this.stat.mode),
            uid: this.portable ? null : this.stat.uid,
            gid: this.portable ? null : this.stat.gid,
            size: this.stat.size,
            mtime: this.noMtime ? null : this.mtime || this.stat.mtime,
            type: this.type,
            uname: this.portable ? null : this.stat.uid === this.myuid ? this.myuser : "",
            atime: this.portable ? null : this.stat.atime,
            ctime: this.portable ? null : this.stat.ctime
          });
          if (this.header.encode() && !this.noPax)
            this.write(new Pax({
              atime: this.portable ? null : this.header.atime,
              ctime: this.portable ? null : this.header.ctime,
              gid: this.portable ? null : this.header.gid,
              mtime: this.noMtime ? null : this.mtime || this.header.mtime,
              path: this.path,
              linkpath: this.linkpath,
              size: this.header.size,
              uid: this.portable ? null : this.header.uid,
              uname: this.portable ? null : this.header.uname,
              dev: this.portable ? null : this.stat.dev,
              ino: this.portable ? null : this.stat.ino,
              nlink: this.portable ? null : this.stat.nlink
            }).encode());
          this.write(this.header.block);
        }
        [DIRECTORY]() {
          if (this.path.substr(-1) !== "/")
            this.path += "/";
          this.stat.size = 0;
          this[HEADER]();
          this.end();
        }
        [SYMLINK]() {
          fs8.readlink(this.absolute, (er, linkpath) => {
            if (er)
              return this.emit("error", er);
            this[ONREADLINK](linkpath);
          });
        }
        [ONREADLINK](linkpath) {
          this.linkpath = linkpath.replace(/\\/g, "/");
          this[HEADER]();
          this.end();
        }
        [HARDLINK](linkpath) {
          this.type = "Link";
          this.linkpath = path3.relative(this.cwd, linkpath).replace(/\\/g, "/");
          this.stat.size = 0;
          this[HEADER]();
          this.end();
        }
        [FILE]() {
          if (this.stat.nlink > 1) {
            const linkKey = this.stat.dev + ":" + this.stat.ino;
            if (this.linkCache.has(linkKey)) {
              const linkpath = this.linkCache.get(linkKey);
              if (linkpath.indexOf(this.cwd) === 0)
                return this[HARDLINK](linkpath);
            }
            this.linkCache.set(linkKey, this.absolute);
          }
          this[HEADER]();
          if (this.stat.size === 0)
            return this.end();
          this[OPENFILE]();
        }
        [OPENFILE]() {
          fs8.open(this.absolute, "r", (er, fd) => {
            if (er)
              return this.emit("error", er);
            this[ONOPENFILE](fd);
          });
        }
        [ONOPENFILE](fd) {
          const blockLen = 512 * Math.ceil(this.stat.size / 512);
          const bufLen = Math.min(blockLen, this.maxReadSize);
          const buf = Buffer.allocUnsafe(bufLen);
          this[READ](fd, buf, 0, buf.length, 0, this.stat.size, blockLen);
        }
        [READ](fd, buf, offset, length, pos, remain, blockRemain) {
          fs8.read(fd, buf, offset, length, pos, (er, bytesRead) => {
            if (er) {
              return this[CLOSE](fd, () => this.emit("error", er));
            }
            this[ONREAD](fd, buf, offset, length, pos, remain, blockRemain, bytesRead);
          });
        }
        [CLOSE](fd, cb) {
          fs8.close(fd, cb);
        }
        [ONREAD](fd, buf, offset, length, pos, remain, blockRemain, bytesRead) {
          if (bytesRead <= 0 && remain > 0) {
            const er = new Error("encountered unexpected EOF");
            er.path = this.absolute;
            er.syscall = "read";
            er.code = "EOF";
            return this[CLOSE](fd, () => this.emit("error", er));
          }
          if (bytesRead > remain) {
            const er = new Error("did not encounter expected EOF");
            er.path = this.absolute;
            er.syscall = "read";
            er.code = "EOF";
            return this[CLOSE](fd, () => this.emit("error", er));
          }
          if (bytesRead === remain) {
            for (let i = bytesRead; i < length && bytesRead < blockRemain; i++) {
              buf[i + offset] = 0;
              bytesRead++;
              remain++;
            }
          }
          const writeBuf = offset === 0 && bytesRead === buf.length ? buf : buf.slice(offset, offset + bytesRead);
          remain -= bytesRead;
          blockRemain -= bytesRead;
          pos += bytesRead;
          offset += bytesRead;
          this.write(writeBuf);
          if (!remain) {
            if (blockRemain)
              this.write(Buffer.alloc(blockRemain));
            return this[CLOSE](fd, (er) => er ? this.emit("error", er) : this.end());
          }
          if (offset >= length) {
            buf = Buffer.allocUnsafe(length);
            offset = 0;
          }
          length = buf.length - offset;
          this[READ](fd, buf, offset, length, pos, remain, blockRemain);
        }
      });
      var WriteEntrySync = class extends WriteEntry {
        constructor(path4, opt) {
          super(path4, opt);
        }
        [LSTAT]() {
          this[ONLSTAT](fs8.lstatSync(this.absolute));
        }
        [SYMLINK]() {
          this[ONREADLINK](fs8.readlinkSync(this.absolute));
        }
        [OPENFILE]() {
          this[ONOPENFILE](fs8.openSync(this.absolute, "r"));
        }
        [READ](fd, buf, offset, length, pos, remain, blockRemain) {
          let threw = true;
          try {
            const bytesRead = fs8.readSync(fd, buf, offset, length, pos);
            this[ONREAD](fd, buf, offset, length, pos, remain, blockRemain, bytesRead);
            threw = false;
          } finally {
            if (threw)
              try {
                this[CLOSE](fd, () => {
                });
              } catch (er) {
              }
          }
        }
        [CLOSE](fd, cb) {
          fs8.closeSync(fd);
          cb();
        }
      };
      var WriteEntryTar = warner(class WriteEntryTar extends MiniPass {
        constructor(readEntry, opt) {
          opt = opt || {};
          super(opt);
          this.preservePaths = !!opt.preservePaths;
          this.portable = !!opt.portable;
          this.strict = !!opt.strict;
          this.noPax = !!opt.noPax;
          this.noMtime = !!opt.noMtime;
          this.readEntry = readEntry;
          this.type = readEntry.type;
          if (this.type === "Directory" && this.portable)
            this.noMtime = true;
          this.path = readEntry.path;
          this.mode = this[MODE](readEntry.mode);
          this.uid = this.portable ? null : readEntry.uid;
          this.gid = this.portable ? null : readEntry.gid;
          this.uname = this.portable ? null : readEntry.uname;
          this.gname = this.portable ? null : readEntry.gname;
          this.size = readEntry.size;
          this.mtime = this.noMtime ? null : opt.mtime || readEntry.mtime;
          this.atime = this.portable ? null : readEntry.atime;
          this.ctime = this.portable ? null : readEntry.ctime;
          this.linkpath = readEntry.linkpath;
          if (typeof opt.onwarn === "function")
            this.on("warn", opt.onwarn);
          let pathWarn = false;
          if (path3.isAbsolute(this.path) && !this.preservePaths) {
            const parsed = path3.parse(this.path);
            pathWarn = parsed.root;
            this.path = this.path.substr(parsed.root.length);
          }
          this.remain = readEntry.size;
          this.blockRemain = readEntry.startBlockSize;
          this.header = new Header({
            path: this.path,
            linkpath: this.linkpath,
            mode: this.mode,
            uid: this.portable ? null : this.uid,
            gid: this.portable ? null : this.gid,
            size: this.size,
            mtime: this.noMtime ? null : this.mtime,
            type: this.type,
            uname: this.portable ? null : this.uname,
            atime: this.portable ? null : this.atime,
            ctime: this.portable ? null : this.ctime
          });
          if (pathWarn) {
            this.warn("TAR_ENTRY_INFO", `stripping ${pathWarn} from absolute path`, {
              entry: this,
              path: pathWarn + this.path
            });
          }
          if (this.header.encode() && !this.noPax)
            super.write(new Pax({
              atime: this.portable ? null : this.atime,
              ctime: this.portable ? null : this.ctime,
              gid: this.portable ? null : this.gid,
              mtime: this.noMtime ? null : this.mtime,
              path: this.path,
              linkpath: this.linkpath,
              size: this.size,
              uid: this.portable ? null : this.uid,
              uname: this.portable ? null : this.uname,
              dev: this.portable ? null : this.readEntry.dev,
              ino: this.portable ? null : this.readEntry.ino,
              nlink: this.portable ? null : this.readEntry.nlink
            }).encode());
          super.write(this.header.block);
          readEntry.pipe(this);
        }
        [MODE](mode) {
          return modeFix(mode, this.type === "Directory", this.portable);
        }
        write(data) {
          const writeLen = data.length;
          if (writeLen > this.blockRemain)
            throw new Error("writing more to entry than is appropriate");
          this.blockRemain -= writeLen;
          return super.write(data);
        }
        end() {
          if (this.blockRemain)
            this.write(Buffer.alloc(this.blockRemain));
          return super.end();
        }
      });
      WriteEntry.Sync = WriteEntrySync;
      WriteEntry.Tar = WriteEntryTar;
      var getType = (stat) => stat.isFile() ? "File" : stat.isDirectory() ? "Directory" : stat.isSymbolicLink() ? "SymbolicLink" : "Unsupported";
      module.exports = WriteEntry;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/pack.js
  var require_pack = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/pack.js"(exports, module) {
      "use strict";
      var PackJob = class {
        constructor(path4, absolute) {
          this.path = path4 || "./";
          this.absolute = absolute;
          this.entry = null;
          this.stat = null;
          this.readdir = null;
          this.pending = false;
          this.ignore = false;
          this.piped = false;
        }
      };
      var MiniPass = require_minipass();
      var zlib3 = require_minizlib();
      var ReadEntry = require_read_entry();
      var WriteEntry = require_write_entry();
      var WriteEntrySync = WriteEntry.Sync;
      var WriteEntryTar = WriteEntry.Tar;
      var Yallist = require_yallist();
      var EOF = Buffer.alloc(1024);
      var ONSTAT = Symbol("onStat");
      var ENDED = Symbol("ended");
      var QUEUE = Symbol("queue");
      var CURRENT = Symbol("current");
      var PROCESS = Symbol("process");
      var PROCESSING = Symbol("processing");
      var PROCESSJOB = Symbol("processJob");
      var JOBS = Symbol("jobs");
      var JOBDONE = Symbol("jobDone");
      var ADDFSENTRY = Symbol("addFSEntry");
      var ADDTARENTRY = Symbol("addTarEntry");
      var STAT = Symbol("stat");
      var READDIR = Symbol("readdir");
      var ONREADDIR = Symbol("onreaddir");
      var PIPE = Symbol("pipe");
      var ENTRY = Symbol("entry");
      var ENTRYOPT = Symbol("entryOpt");
      var WRITEENTRYCLASS = Symbol("writeEntryClass");
      var WRITE = Symbol("write");
      var ONDRAIN = Symbol("ondrain");
      var fs8 = require("fs");
      var path3 = require("path");
      var warner = require_warn_mixin();
      var Pack = warner(class Pack extends MiniPass {
        constructor(opt) {
          super(opt);
          opt = opt || Object.create(null);
          this.opt = opt;
          this.file = opt.file || "";
          this.cwd = opt.cwd || process.cwd();
          this.maxReadSize = opt.maxReadSize;
          this.preservePaths = !!opt.preservePaths;
          this.strict = !!opt.strict;
          this.noPax = !!opt.noPax;
          this.prefix = (opt.prefix || "").replace(/(\\|\/)+$/, "");
          this.linkCache = opt.linkCache || new Map();
          this.statCache = opt.statCache || new Map();
          this.readdirCache = opt.readdirCache || new Map();
          this[WRITEENTRYCLASS] = WriteEntry;
          if (typeof opt.onwarn === "function")
            this.on("warn", opt.onwarn);
          this.portable = !!opt.portable;
          this.zip = null;
          if (opt.gzip) {
            if (typeof opt.gzip !== "object")
              opt.gzip = {};
            if (this.portable)
              opt.gzip.portable = true;
            this.zip = new zlib3.Gzip(opt.gzip);
            this.zip.on("data", (chunk) => super.write(chunk));
            this.zip.on("end", (_) => super.end());
            this.zip.on("drain", (_) => this[ONDRAIN]());
            this.on("resume", (_) => this.zip.resume());
          } else
            this.on("drain", this[ONDRAIN]);
          this.noDirRecurse = !!opt.noDirRecurse;
          this.follow = !!opt.follow;
          this.noMtime = !!opt.noMtime;
          this.mtime = opt.mtime || null;
          this.filter = typeof opt.filter === "function" ? opt.filter : (_) => true;
          this[QUEUE] = new Yallist();
          this[JOBS] = 0;
          this.jobs = +opt.jobs || 4;
          this[PROCESSING] = false;
          this[ENDED] = false;
        }
        [WRITE](chunk) {
          return super.write(chunk);
        }
        add(path4) {
          this.write(path4);
          return this;
        }
        end(path4) {
          if (path4)
            this.write(path4);
          this[ENDED] = true;
          this[PROCESS]();
          return this;
        }
        write(path4) {
          if (this[ENDED])
            throw new Error("write after end");
          if (path4 instanceof ReadEntry)
            this[ADDTARENTRY](path4);
          else
            this[ADDFSENTRY](path4);
          return this.flowing;
        }
        [ADDTARENTRY](p) {
          const absolute = path3.resolve(this.cwd, p.path);
          if (this.prefix)
            p.path = this.prefix + "/" + p.path.replace(/^\.(\/+|$)/, "");
          if (!this.filter(p.path, p))
            p.resume();
          else {
            const job = new PackJob(p.path, absolute, false);
            job.entry = new WriteEntryTar(p, this[ENTRYOPT](job));
            job.entry.on("end", (_) => this[JOBDONE](job));
            this[JOBS] += 1;
            this[QUEUE].push(job);
          }
          this[PROCESS]();
        }
        [ADDFSENTRY](p) {
          const absolute = path3.resolve(this.cwd, p);
          if (this.prefix)
            p = this.prefix + "/" + p.replace(/^\.(\/+|$)/, "");
          this[QUEUE].push(new PackJob(p, absolute));
          this[PROCESS]();
        }
        [STAT](job) {
          job.pending = true;
          this[JOBS] += 1;
          const stat = this.follow ? "stat" : "lstat";
          fs8[stat](job.absolute, (er, stat2) => {
            job.pending = false;
            this[JOBS] -= 1;
            if (er)
              this.emit("error", er);
            else
              this[ONSTAT](job, stat2);
          });
        }
        [ONSTAT](job, stat) {
          this.statCache.set(job.absolute, stat);
          job.stat = stat;
          if (!this.filter(job.path, stat))
            job.ignore = true;
          this[PROCESS]();
        }
        [READDIR](job) {
          job.pending = true;
          this[JOBS] += 1;
          fs8.readdir(job.absolute, (er, entries) => {
            job.pending = false;
            this[JOBS] -= 1;
            if (er)
              return this.emit("error", er);
            this[ONREADDIR](job, entries);
          });
        }
        [ONREADDIR](job, entries) {
          this.readdirCache.set(job.absolute, entries);
          job.readdir = entries;
          this[PROCESS]();
        }
        [PROCESS]() {
          if (this[PROCESSING])
            return;
          this[PROCESSING] = true;
          for (let w = this[QUEUE].head; w !== null && this[JOBS] < this.jobs; w = w.next) {
            this[PROCESSJOB](w.value);
            if (w.value.ignore) {
              const p = w.next;
              this[QUEUE].removeNode(w);
              w.next = p;
            }
          }
          this[PROCESSING] = false;
          if (this[ENDED] && !this[QUEUE].length && this[JOBS] === 0) {
            if (this.zip)
              this.zip.end(EOF);
            else {
              super.write(EOF);
              super.end();
            }
          }
        }
        get [CURRENT]() {
          return this[QUEUE] && this[QUEUE].head && this[QUEUE].head.value;
        }
        [JOBDONE](job) {
          this[QUEUE].shift();
          this[JOBS] -= 1;
          this[PROCESS]();
        }
        [PROCESSJOB](job) {
          if (job.pending)
            return;
          if (job.entry) {
            if (job === this[CURRENT] && !job.piped)
              this[PIPE](job);
            return;
          }
          if (!job.stat) {
            if (this.statCache.has(job.absolute))
              this[ONSTAT](job, this.statCache.get(job.absolute));
            else
              this[STAT](job);
          }
          if (!job.stat)
            return;
          if (job.ignore)
            return;
          if (!this.noDirRecurse && job.stat.isDirectory() && !job.readdir) {
            if (this.readdirCache.has(job.absolute))
              this[ONREADDIR](job, this.readdirCache.get(job.absolute));
            else
              this[READDIR](job);
            if (!job.readdir)
              return;
          }
          job.entry = this[ENTRY](job);
          if (!job.entry) {
            job.ignore = true;
            return;
          }
          if (job === this[CURRENT] && !job.piped)
            this[PIPE](job);
        }
        [ENTRYOPT](job) {
          return {
            onwarn: (code, msg, data) => this.warn(code, msg, data),
            noPax: this.noPax,
            cwd: this.cwd,
            absolute: job.absolute,
            preservePaths: this.preservePaths,
            maxReadSize: this.maxReadSize,
            strict: this.strict,
            portable: this.portable,
            linkCache: this.linkCache,
            statCache: this.statCache,
            noMtime: this.noMtime,
            mtime: this.mtime
          };
        }
        [ENTRY](job) {
          this[JOBS] += 1;
          try {
            return new this[WRITEENTRYCLASS](job.path, this[ENTRYOPT](job)).on("end", () => this[JOBDONE](job)).on("error", (er) => this.emit("error", er));
          } catch (er) {
            this.emit("error", er);
          }
        }
        [ONDRAIN]() {
          if (this[CURRENT] && this[CURRENT].entry)
            this[CURRENT].entry.resume();
        }
        [PIPE](job) {
          job.piped = true;
          if (job.readdir)
            job.readdir.forEach((entry) => {
              const p = this.prefix ? job.path.slice(this.prefix.length + 1) || "./" : job.path;
              const base = p === "./" ? "" : p.replace(/\/*$/, "/");
              this[ADDFSENTRY](base + entry);
            });
          const source = job.entry;
          const zip = this.zip;
          if (zip)
            source.on("data", (chunk) => {
              if (!zip.write(chunk))
                source.pause();
            });
          else
            source.on("data", (chunk) => {
              if (!super.write(chunk))
                source.pause();
            });
        }
        pause() {
          if (this.zip)
            this.zip.pause();
          return super.pause();
        }
      });
      var PackSync = class extends Pack {
        constructor(opt) {
          super(opt);
          this[WRITEENTRYCLASS] = WriteEntrySync;
        }
        pause() {
        }
        resume() {
        }
        [STAT](job) {
          const stat = this.follow ? "statSync" : "lstatSync";
          this[ONSTAT](job, fs8[stat](job.absolute));
        }
        [READDIR](job, stat) {
          this[ONREADDIR](job, fs8.readdirSync(job.absolute));
        }
        [PIPE](job) {
          const source = job.entry;
          const zip = this.zip;
          if (job.readdir)
            job.readdir.forEach((entry) => {
              const p = this.prefix ? job.path.slice(this.prefix.length + 1) || "./" : job.path;
              const base = p === "./" ? "" : p.replace(/\/*$/, "/");
              this[ADDFSENTRY](base + entry);
            });
          if (zip)
            source.on("data", (chunk) => {
              zip.write(chunk);
            });
          else
            source.on("data", (chunk) => {
              super[WRITE](chunk);
            });
        }
      };
      Pack.Sync = PackSync;
      module.exports = Pack;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fs-minipass-npm-2.0.0-e6ab6b5c13-d87225aecd.zip/node_modules/fs-minipass/index.js
  var require_fs_minipass = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fs-minipass-npm-2.0.0-e6ab6b5c13-d87225aecd.zip/node_modules/fs-minipass/index.js"(exports) {
      "use strict";
      var MiniPass = require_minipass();
      var EE = require("events").EventEmitter;
      var fs8 = require("fs");
      var binding = process.binding("fs");
      var writeBuffers = binding.writeBuffers;
      var FSReqWrap = binding.FSReqWrap || binding.FSReqCallback;
      var _autoClose = Symbol("_autoClose");
      var _close = Symbol("_close");
      var _ended = Symbol("_ended");
      var _fd = Symbol("_fd");
      var _finished = Symbol("_finished");
      var _flags = Symbol("_flags");
      var _flush = Symbol("_flush");
      var _handleChunk = Symbol("_handleChunk");
      var _makeBuf = Symbol("_makeBuf");
      var _mode = Symbol("_mode");
      var _needDrain = Symbol("_needDrain");
      var _onerror = Symbol("_onerror");
      var _onopen = Symbol("_onopen");
      var _onread = Symbol("_onread");
      var _onwrite = Symbol("_onwrite");
      var _open = Symbol("_open");
      var _path = Symbol("_path");
      var _pos = Symbol("_pos");
      var _queue = Symbol("_queue");
      var _read = Symbol("_read");
      var _readSize = Symbol("_readSize");
      var _reading = Symbol("_reading");
      var _remain = Symbol("_remain");
      var _size = Symbol("_size");
      var _write = Symbol("_write");
      var _writing = Symbol("_writing");
      var _defaultFlag = Symbol("_defaultFlag");
      var ReadStream2 = class extends MiniPass {
        constructor(path3, opt) {
          opt = opt || {};
          super(opt);
          this.writable = false;
          if (typeof path3 !== "string")
            throw new TypeError("path must be a string");
          this[_fd] = typeof opt.fd === "number" ? opt.fd : null;
          this[_path] = path3;
          this[_readSize] = opt.readSize || 16 * 1024 * 1024;
          this[_reading] = false;
          this[_size] = typeof opt.size === "number" ? opt.size : Infinity;
          this[_remain] = this[_size];
          this[_autoClose] = typeof opt.autoClose === "boolean" ? opt.autoClose : true;
          if (typeof this[_fd] === "number")
            this[_read]();
          else
            this[_open]();
        }
        get fd() {
          return this[_fd];
        }
        get path() {
          return this[_path];
        }
        write() {
          throw new TypeError("this is a readable stream");
        }
        end() {
          throw new TypeError("this is a readable stream");
        }
        [_open]() {
          fs8.open(this[_path], "r", (er, fd) => this[_onopen](er, fd));
        }
        [_onopen](er, fd) {
          if (er)
            this[_onerror](er);
          else {
            this[_fd] = fd;
            this.emit("open", fd);
            this[_read]();
          }
        }
        [_makeBuf]() {
          return Buffer.allocUnsafe(Math.min(this[_readSize], this[_remain]));
        }
        [_read]() {
          if (!this[_reading]) {
            this[_reading] = true;
            const buf = this[_makeBuf]();
            if (buf.length === 0)
              return process.nextTick(() => this[_onread](null, 0, buf));
            fs8.read(this[_fd], buf, 0, buf.length, null, (er, br, buf2) => this[_onread](er, br, buf2));
          }
        }
        [_onread](er, br, buf) {
          this[_reading] = false;
          if (er)
            this[_onerror](er);
          else if (this[_handleChunk](br, buf))
            this[_read]();
        }
        [_close]() {
          if (this[_autoClose] && typeof this[_fd] === "number") {
            fs8.close(this[_fd], (_) => this.emit("close"));
            this[_fd] = null;
          }
        }
        [_onerror](er) {
          this[_reading] = true;
          this[_close]();
          this.emit("error", er);
        }
        [_handleChunk](br, buf) {
          let ret = false;
          this[_remain] -= br;
          if (br > 0)
            ret = super.write(br < buf.length ? buf.slice(0, br) : buf);
          if (br === 0 || this[_remain] <= 0) {
            ret = false;
            this[_close]();
            super.end();
          }
          return ret;
        }
        emit(ev, data) {
          switch (ev) {
            case "prefinish":
            case "finish":
              break;
            case "drain":
              if (typeof this[_fd] === "number")
                this[_read]();
              break;
            default:
              return super.emit(ev, data);
          }
        }
      };
      var ReadStreamSync = class extends ReadStream2 {
        [_open]() {
          let threw = true;
          try {
            this[_onopen](null, fs8.openSync(this[_path], "r"));
            threw = false;
          } finally {
            if (threw)
              this[_close]();
          }
        }
        [_read]() {
          let threw = true;
          try {
            if (!this[_reading]) {
              this[_reading] = true;
              do {
                const buf = this[_makeBuf]();
                const br = buf.length === 0 ? 0 : fs8.readSync(this[_fd], buf, 0, buf.length, null);
                if (!this[_handleChunk](br, buf))
                  break;
              } while (true);
              this[_reading] = false;
            }
            threw = false;
          } finally {
            if (threw)
              this[_close]();
          }
        }
        [_close]() {
          if (this[_autoClose] && typeof this[_fd] === "number") {
            try {
              fs8.closeSync(this[_fd]);
            } catch (er) {
            }
            this[_fd] = null;
            this.emit("close");
          }
        }
      };
      var WriteStream2 = class extends EE {
        constructor(path3, opt) {
          opt = opt || {};
          super(opt);
          this.readable = false;
          this[_writing] = false;
          this[_ended] = false;
          this[_needDrain] = false;
          this[_queue] = [];
          this[_path] = path3;
          this[_fd] = typeof opt.fd === "number" ? opt.fd : null;
          this[_mode] = opt.mode === void 0 ? 438 : opt.mode;
          this[_pos] = typeof opt.start === "number" ? opt.start : null;
          this[_autoClose] = typeof opt.autoClose === "boolean" ? opt.autoClose : true;
          const defaultFlag = this[_pos] !== null ? "r+" : "w";
          this[_defaultFlag] = opt.flags === void 0;
          this[_flags] = this[_defaultFlag] ? defaultFlag : opt.flags;
          if (this[_fd] === null)
            this[_open]();
        }
        get fd() {
          return this[_fd];
        }
        get path() {
          return this[_path];
        }
        [_onerror](er) {
          this[_close]();
          this[_writing] = true;
          this.emit("error", er);
        }
        [_open]() {
          fs8.open(this[_path], this[_flags], this[_mode], (er, fd) => this[_onopen](er, fd));
        }
        [_onopen](er, fd) {
          if (this[_defaultFlag] && this[_flags] === "r+" && er && er.code === "ENOENT") {
            this[_flags] = "w";
            this[_open]();
          } else if (er)
            this[_onerror](er);
          else {
            this[_fd] = fd;
            this.emit("open", fd);
            this[_flush]();
          }
        }
        end(buf, enc) {
          if (buf)
            this.write(buf, enc);
          this[_ended] = true;
          if (!this[_writing] && !this[_queue].length && typeof this[_fd] === "number")
            this[_onwrite](null, 0);
        }
        write(buf, enc) {
          if (typeof buf === "string")
            buf = new Buffer(buf, enc);
          if (this[_ended]) {
            this.emit("error", new Error("write() after end()"));
            return false;
          }
          if (this[_fd] === null || this[_writing] || this[_queue].length) {
            this[_queue].push(buf);
            this[_needDrain] = true;
            return false;
          }
          this[_writing] = true;
          this[_write](buf);
          return true;
        }
        [_write](buf) {
          fs8.write(this[_fd], buf, 0, buf.length, this[_pos], (er, bw) => this[_onwrite](er, bw));
        }
        [_onwrite](er, bw) {
          if (er)
            this[_onerror](er);
          else {
            if (this[_pos] !== null)
              this[_pos] += bw;
            if (this[_queue].length)
              this[_flush]();
            else {
              this[_writing] = false;
              if (this[_ended] && !this[_finished]) {
                this[_finished] = true;
                this[_close]();
                this.emit("finish");
              } else if (this[_needDrain]) {
                this[_needDrain] = false;
                this.emit("drain");
              }
            }
          }
        }
        [_flush]() {
          if (this[_queue].length === 0) {
            if (this[_ended])
              this[_onwrite](null, 0);
          } else if (this[_queue].length === 1)
            this[_write](this[_queue].pop());
          else {
            const iovec = this[_queue];
            this[_queue] = [];
            writev(this[_fd], iovec, this[_pos], (er, bw) => this[_onwrite](er, bw));
          }
        }
        [_close]() {
          if (this[_autoClose] && typeof this[_fd] === "number") {
            fs8.close(this[_fd], (_) => this.emit("close"));
            this[_fd] = null;
          }
        }
      };
      var WriteStreamSync = class extends WriteStream2 {
        [_open]() {
          let fd;
          try {
            fd = fs8.openSync(this[_path], this[_flags], this[_mode]);
          } catch (er) {
            if (this[_defaultFlag] && this[_flags] === "r+" && er && er.code === "ENOENT") {
              this[_flags] = "w";
              return this[_open]();
            } else
              throw er;
          }
          this[_onopen](null, fd);
        }
        [_close]() {
          if (this[_autoClose] && typeof this[_fd] === "number") {
            try {
              fs8.closeSync(this[_fd]);
            } catch (er) {
            }
            this[_fd] = null;
            this.emit("close");
          }
        }
        [_write](buf) {
          try {
            this[_onwrite](null, fs8.writeSync(this[_fd], buf, 0, buf.length, this[_pos]));
          } catch (er) {
            this[_onwrite](er, 0);
          }
        }
      };
      var writev = (fd, iovec, pos, cb) => {
        const done = (er, bw) => cb(er, bw, iovec);
        const req = new FSReqWrap();
        req.oncomplete = done;
        binding.writeBuffers(fd, iovec, pos, req);
      };
      exports.ReadStream = ReadStream2;
      exports.ReadStreamSync = ReadStreamSync;
      exports.WriteStream = WriteStream2;
      exports.WriteStreamSync = WriteStreamSync;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/parse.js
  var require_parse5 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/parse.js"(exports, module) {
      "use strict";
      var warner = require_warn_mixin();
      var path3 = require("path");
      var Header = require_header();
      var EE = require("events");
      var Yallist = require_yallist();
      var maxMetaEntrySize = 1024 * 1024;
      var Entry = require_read_entry();
      var Pax = require_pax();
      var zlib3 = require_minizlib();
      var gzipHeader = Buffer.from([31, 139]);
      var STATE = Symbol("state");
      var WRITEENTRY = Symbol("writeEntry");
      var READENTRY = Symbol("readEntry");
      var NEXTENTRY = Symbol("nextEntry");
      var PROCESSENTRY = Symbol("processEntry");
      var EX = Symbol("extendedHeader");
      var GEX = Symbol("globalExtendedHeader");
      var META = Symbol("meta");
      var EMITMETA = Symbol("emitMeta");
      var BUFFER = Symbol("buffer");
      var QUEUE = Symbol("queue");
      var ENDED = Symbol("ended");
      var EMITTEDEND = Symbol("emittedEnd");
      var EMIT = Symbol("emit");
      var UNZIP = Symbol("unzip");
      var CONSUMECHUNK = Symbol("consumeChunk");
      var CONSUMECHUNKSUB = Symbol("consumeChunkSub");
      var CONSUMEBODY = Symbol("consumeBody");
      var CONSUMEMETA = Symbol("consumeMeta");
      var CONSUMEHEADER = Symbol("consumeHeader");
      var CONSUMING = Symbol("consuming");
      var BUFFERCONCAT = Symbol("bufferConcat");
      var MAYBEEND = Symbol("maybeEnd");
      var WRITING = Symbol("writing");
      var ABORTED = Symbol("aborted");
      var DONE = Symbol("onDone");
      var SAW_VALID_ENTRY = Symbol("sawValidEntry");
      var SAW_NULL_BLOCK = Symbol("sawNullBlock");
      var SAW_EOF = Symbol("sawEOF");
      var noop = (_) => true;
      module.exports = warner(class Parser extends EE {
        constructor(opt) {
          opt = opt || {};
          super(opt);
          this.file = opt.file || "";
          this[SAW_VALID_ENTRY] = null;
          this.on(DONE, (_) => {
            if (this[STATE] === "begin" || this[SAW_VALID_ENTRY] === false) {
              this.warn("TAR_BAD_ARCHIVE", "Unrecognized archive format");
            }
          });
          if (opt.ondone)
            this.on(DONE, opt.ondone);
          else
            this.on(DONE, (_) => {
              this.emit("prefinish");
              this.emit("finish");
              this.emit("end");
              this.emit("close");
            });
          this.strict = !!opt.strict;
          this.maxMetaEntrySize = opt.maxMetaEntrySize || maxMetaEntrySize;
          this.filter = typeof opt.filter === "function" ? opt.filter : noop;
          this.writable = true;
          this.readable = false;
          this[QUEUE] = new Yallist();
          this[BUFFER] = null;
          this[READENTRY] = null;
          this[WRITEENTRY] = null;
          this[STATE] = "begin";
          this[META] = "";
          this[EX] = null;
          this[GEX] = null;
          this[ENDED] = false;
          this[UNZIP] = null;
          this[ABORTED] = false;
          this[SAW_NULL_BLOCK] = false;
          this[SAW_EOF] = false;
          if (typeof opt.onwarn === "function")
            this.on("warn", opt.onwarn);
          if (typeof opt.onentry === "function")
            this.on("entry", opt.onentry);
        }
        [CONSUMEHEADER](chunk, position) {
          if (this[SAW_VALID_ENTRY] === null)
            this[SAW_VALID_ENTRY] = false;
          let header;
          try {
            header = new Header(chunk, position, this[EX], this[GEX]);
          } catch (er) {
            return this.warn("TAR_ENTRY_INVALID", er);
          }
          if (header.nullBlock) {
            if (this[SAW_NULL_BLOCK]) {
              this[SAW_EOF] = true;
              if (this[STATE] === "begin")
                this[STATE] = "header";
              this[EMIT]("eof");
            } else {
              this[SAW_NULL_BLOCK] = true;
              this[EMIT]("nullBlock");
            }
          } else {
            this[SAW_NULL_BLOCK] = false;
            if (!header.cksumValid)
              this.warn("TAR_ENTRY_INVALID", "checksum failure", {header});
            else if (!header.path)
              this.warn("TAR_ENTRY_INVALID", "path is required", {header});
            else {
              const type = header.type;
              if (/^(Symbolic)?Link$/.test(type) && !header.linkpath)
                this.warn("TAR_ENTRY_INVALID", "linkpath required", {header});
              else if (!/^(Symbolic)?Link$/.test(type) && header.linkpath)
                this.warn("TAR_ENTRY_INVALID", "linkpath forbidden", {header});
              else {
                const entry = this[WRITEENTRY] = new Entry(header, this[EX], this[GEX]);
                if (!this[SAW_VALID_ENTRY]) {
                  if (entry.remain) {
                    const onend = () => {
                      if (!entry.invalid)
                        this[SAW_VALID_ENTRY] = true;
                    };
                    entry.on("end", onend);
                  } else {
                    this[SAW_VALID_ENTRY] = true;
                  }
                }
                if (entry.meta) {
                  if (entry.size > this.maxMetaEntrySize) {
                    entry.ignore = true;
                    this[EMIT]("ignoredEntry", entry);
                    this[STATE] = "ignore";
                    entry.resume();
                  } else if (entry.size > 0) {
                    this[META] = "";
                    entry.on("data", (c) => this[META] += c);
                    this[STATE] = "meta";
                  }
                } else {
                  this[EX] = null;
                  entry.ignore = entry.ignore || !this.filter(entry.path, entry);
                  if (entry.ignore) {
                    this[EMIT]("ignoredEntry", entry);
                    this[STATE] = entry.remain ? "ignore" : "header";
                    entry.resume();
                  } else {
                    if (entry.remain)
                      this[STATE] = "body";
                    else {
                      this[STATE] = "header";
                      entry.end();
                    }
                    if (!this[READENTRY]) {
                      this[QUEUE].push(entry);
                      this[NEXTENTRY]();
                    } else
                      this[QUEUE].push(entry);
                  }
                }
              }
            }
          }
        }
        [PROCESSENTRY](entry) {
          let go = true;
          if (!entry) {
            this[READENTRY] = null;
            go = false;
          } else if (Array.isArray(entry))
            this.emit.apply(this, entry);
          else {
            this[READENTRY] = entry;
            this.emit("entry", entry);
            if (!entry.emittedEnd) {
              entry.on("end", (_) => this[NEXTENTRY]());
              go = false;
            }
          }
          return go;
        }
        [NEXTENTRY]() {
          do {
          } while (this[PROCESSENTRY](this[QUEUE].shift()));
          if (!this[QUEUE].length) {
            const re = this[READENTRY];
            const drainNow = !re || re.flowing || re.size === re.remain;
            if (drainNow) {
              if (!this[WRITING])
                this.emit("drain");
            } else
              re.once("drain", (_) => this.emit("drain"));
          }
        }
        [CONSUMEBODY](chunk, position) {
          const entry = this[WRITEENTRY];
          const br = entry.blockRemain;
          const c = br >= chunk.length && position === 0 ? chunk : chunk.slice(position, position + br);
          entry.write(c);
          if (!entry.blockRemain) {
            this[STATE] = "header";
            this[WRITEENTRY] = null;
            entry.end();
          }
          return c.length;
        }
        [CONSUMEMETA](chunk, position) {
          const entry = this[WRITEENTRY];
          const ret = this[CONSUMEBODY](chunk, position);
          if (!this[WRITEENTRY])
            this[EMITMETA](entry);
          return ret;
        }
        [EMIT](ev, data, extra) {
          if (!this[QUEUE].length && !this[READENTRY])
            this.emit(ev, data, extra);
          else
            this[QUEUE].push([ev, data, extra]);
        }
        [EMITMETA](entry) {
          this[EMIT]("meta", this[META]);
          switch (entry.type) {
            case "ExtendedHeader":
            case "OldExtendedHeader":
              this[EX] = Pax.parse(this[META], this[EX], false);
              break;
            case "GlobalExtendedHeader":
              this[GEX] = Pax.parse(this[META], this[GEX], true);
              break;
            case "NextFileHasLongPath":
            case "OldGnuLongPath":
              this[EX] = this[EX] || Object.create(null);
              this[EX].path = this[META].replace(/\0.*/, "");
              break;
            case "NextFileHasLongLinkpath":
              this[EX] = this[EX] || Object.create(null);
              this[EX].linkpath = this[META].replace(/\0.*/, "");
              break;
            default:
              throw new Error("unknown meta: " + entry.type);
          }
        }
        abort(error) {
          this[ABORTED] = true;
          this.emit("abort", error);
          this.warn("TAR_ABORT", error, {recoverable: false});
        }
        write(chunk) {
          if (this[ABORTED])
            return;
          if (this[UNZIP] === null && chunk) {
            if (this[BUFFER]) {
              chunk = Buffer.concat([this[BUFFER], chunk]);
              this[BUFFER] = null;
            }
            if (chunk.length < gzipHeader.length) {
              this[BUFFER] = chunk;
              return true;
            }
            for (let i = 0; this[UNZIP] === null && i < gzipHeader.length; i++) {
              if (chunk[i] !== gzipHeader[i])
                this[UNZIP] = false;
            }
            if (this[UNZIP] === null) {
              const ended = this[ENDED];
              this[ENDED] = false;
              this[UNZIP] = new zlib3.Unzip();
              this[UNZIP].on("data", (chunk2) => this[CONSUMECHUNK](chunk2));
              this[UNZIP].on("error", (er) => this.abort(er));
              this[UNZIP].on("end", (_) => {
                this[ENDED] = true;
                this[CONSUMECHUNK]();
              });
              this[WRITING] = true;
              const ret2 = this[UNZIP][ended ? "end" : "write"](chunk);
              this[WRITING] = false;
              return ret2;
            }
          }
          this[WRITING] = true;
          if (this[UNZIP])
            this[UNZIP].write(chunk);
          else
            this[CONSUMECHUNK](chunk);
          this[WRITING] = false;
          const ret = this[QUEUE].length ? false : this[READENTRY] ? this[READENTRY].flowing : true;
          if (!ret && !this[QUEUE].length)
            this[READENTRY].once("drain", (_) => this.emit("drain"));
          return ret;
        }
        [BUFFERCONCAT](c) {
          if (c && !this[ABORTED])
            this[BUFFER] = this[BUFFER] ? Buffer.concat([this[BUFFER], c]) : c;
        }
        [MAYBEEND]() {
          if (this[ENDED] && !this[EMITTEDEND] && !this[ABORTED] && !this[CONSUMING]) {
            this[EMITTEDEND] = true;
            const entry = this[WRITEENTRY];
            if (entry && entry.blockRemain) {
              const have = this[BUFFER] ? this[BUFFER].length : 0;
              this.warn("TAR_BAD_ARCHIVE", `Truncated input (needed ${entry.blockRemain} more bytes, only ${have} available)`, {entry});
              if (this[BUFFER])
                entry.write(this[BUFFER]);
              entry.end();
            }
            this[EMIT](DONE);
          }
        }
        [CONSUMECHUNK](chunk) {
          if (this[CONSUMING])
            this[BUFFERCONCAT](chunk);
          else if (!chunk && !this[BUFFER])
            this[MAYBEEND]();
          else {
            this[CONSUMING] = true;
            if (this[BUFFER]) {
              this[BUFFERCONCAT](chunk);
              const c = this[BUFFER];
              this[BUFFER] = null;
              this[CONSUMECHUNKSUB](c);
            } else {
              this[CONSUMECHUNKSUB](chunk);
            }
            while (this[BUFFER] && this[BUFFER].length >= 512 && !this[ABORTED] && !this[SAW_EOF]) {
              const c = this[BUFFER];
              this[BUFFER] = null;
              this[CONSUMECHUNKSUB](c);
            }
            this[CONSUMING] = false;
          }
          if (!this[BUFFER] || this[ENDED])
            this[MAYBEEND]();
        }
        [CONSUMECHUNKSUB](chunk) {
          let position = 0;
          let length = chunk.length;
          while (position + 512 <= length && !this[ABORTED] && !this[SAW_EOF]) {
            switch (this[STATE]) {
              case "begin":
              case "header":
                this[CONSUMEHEADER](chunk, position);
                position += 512;
                break;
              case "ignore":
              case "body":
                position += this[CONSUMEBODY](chunk, position);
                break;
              case "meta":
                position += this[CONSUMEMETA](chunk, position);
                break;
              default:
                throw new Error("invalid state: " + this[STATE]);
            }
          }
          if (position < length) {
            if (this[BUFFER])
              this[BUFFER] = Buffer.concat([chunk.slice(position), this[BUFFER]]);
            else
              this[BUFFER] = chunk.slice(position);
          }
        }
        end(chunk) {
          if (!this[ABORTED]) {
            if (this[UNZIP])
              this[UNZIP].end(chunk);
            else {
              this[ENDED] = true;
              this.write(chunk);
            }
          }
        }
      });
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/list.js
  var require_list = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/list.js"(exports, module) {
      "use strict";
      var hlo = require_high_level_opt();
      var Parser = require_parse5();
      var fs8 = require("fs");
      var fsm = require_fs_minipass();
      var path3 = require("path");
      var t5 = module.exports = (opt_, files, cb) => {
        if (typeof opt_ === "function")
          cb = opt_, files = null, opt_ = {};
        else if (Array.isArray(opt_))
          files = opt_, opt_ = {};
        if (typeof files === "function")
          cb = files, files = null;
        if (!files)
          files = [];
        else
          files = Array.from(files);
        const opt = hlo(opt_);
        if (opt.sync && typeof cb === "function")
          throw new TypeError("callback not supported for sync tar functions");
        if (!opt.file && typeof cb === "function")
          throw new TypeError("callback only supported with file option");
        if (files.length)
          filesFilter(opt, files);
        if (!opt.noResume)
          onentryFunction(opt);
        return opt.file && opt.sync ? listFileSync(opt) : opt.file ? listFile(opt, cb) : list(opt);
      };
      var onentryFunction = (opt) => {
        const onentry = opt.onentry;
        opt.onentry = onentry ? (e) => {
          onentry(e);
          e.resume();
        } : (e) => e.resume();
      };
      var filesFilter = (opt, files) => {
        const map = new Map(files.map((f) => [f.replace(/\/+$/, ""), true]));
        const filter = opt.filter;
        const mapHas = (file, r) => {
          const root = r || path3.parse(file).root || ".";
          const ret = file === root ? false : map.has(file) ? map.get(file) : mapHas(path3.dirname(file), root);
          map.set(file, ret);
          return ret;
        };
        opt.filter = filter ? (file, entry) => filter(file, entry) && mapHas(file.replace(/\/+$/, "")) : (file) => mapHas(file.replace(/\/+$/, ""));
      };
      var listFileSync = (opt) => {
        const p = list(opt);
        const file = opt.file;
        let threw = true;
        let fd;
        try {
          const stat = fs8.statSync(file);
          const readSize = opt.maxReadSize || 16 * 1024 * 1024;
          if (stat.size < readSize) {
            p.end(fs8.readFileSync(file));
          } else {
            let pos = 0;
            const buf = Buffer.allocUnsafe(readSize);
            fd = fs8.openSync(file, "r");
            while (pos < stat.size) {
              let bytesRead = fs8.readSync(fd, buf, 0, readSize, pos);
              pos += bytesRead;
              p.write(buf.slice(0, bytesRead));
            }
            p.end();
          }
          threw = false;
        } finally {
          if (threw && fd)
            try {
              fs8.closeSync(fd);
            } catch (er) {
            }
        }
      };
      var listFile = (opt, cb) => {
        const parse4 = new Parser(opt);
        const readSize = opt.maxReadSize || 16 * 1024 * 1024;
        const file = opt.file;
        const p = new Promise((resolve, reject) => {
          parse4.on("error", reject);
          parse4.on("end", resolve);
          fs8.stat(file, (er, stat) => {
            if (er)
              reject(er);
            else {
              const stream = new fsm.ReadStream(file, {
                readSize,
                size: stat.size
              });
              stream.on("error", reject);
              stream.pipe(parse4);
            }
          });
        });
        return cb ? p.then(cb, cb) : p;
      };
      var list = (opt) => new Parser(opt);
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/create.js
  var require_create2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/create.js"(exports, module) {
      "use strict";
      var hlo = require_high_level_opt();
      var Pack = require_pack();
      var fs8 = require("fs");
      var fsm = require_fs_minipass();
      var t5 = require_list();
      var path3 = require("path");
      var c = module.exports = (opt_, files, cb) => {
        if (typeof files === "function")
          cb = files;
        if (Array.isArray(opt_))
          files = opt_, opt_ = {};
        if (!files || !Array.isArray(files) || !files.length)
          throw new TypeError("no files or directories specified");
        files = Array.from(files);
        const opt = hlo(opt_);
        if (opt.sync && typeof cb === "function")
          throw new TypeError("callback not supported for sync tar functions");
        if (!opt.file && typeof cb === "function")
          throw new TypeError("callback only supported with file option");
        return opt.file && opt.sync ? createFileSync(opt, files) : opt.file ? createFile(opt, files, cb) : opt.sync ? createSync(opt, files) : create(opt, files);
      };
      var createFileSync = (opt, files) => {
        const p = new Pack.Sync(opt);
        const stream = new fsm.WriteStreamSync(opt.file, {
          mode: opt.mode || 438
        });
        p.pipe(stream);
        addFilesSync(p, files);
      };
      var createFile = (opt, files, cb) => {
        const p = new Pack(opt);
        const stream = new fsm.WriteStream(opt.file, {
          mode: opt.mode || 438
        });
        p.pipe(stream);
        const promise = new Promise((res, rej) => {
          stream.on("error", rej);
          stream.on("close", res);
          p.on("error", rej);
        });
        addFilesAsync(p, files);
        return cb ? promise.then(cb, cb) : promise;
      };
      var addFilesSync = (p, files) => {
        files.forEach((file) => {
          if (file.charAt(0) === "@")
            t5({
              file: path3.resolve(p.cwd, file.substr(1)),
              sync: true,
              noResume: true,
              onentry: (entry) => p.add(entry)
            });
          else
            p.add(file);
        });
        p.end();
      };
      var addFilesAsync = (p, files) => {
        while (files.length) {
          const file = files.shift();
          if (file.charAt(0) === "@")
            return t5({
              file: path3.resolve(p.cwd, file.substr(1)),
              noResume: true,
              onentry: (entry) => p.add(entry)
            }).then((_) => addFilesAsync(p, files));
          else
            p.add(file);
        }
        p.end();
      };
      var createSync = (opt, files) => {
        const p = new Pack.Sync(opt);
        addFilesSync(p, files);
        return p;
      };
      var create = (opt, files) => {
        const p = new Pack(opt);
        addFilesAsync(p, files);
        return p;
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/replace.js
  var require_replace = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/replace.js"(exports, module) {
      "use strict";
      var hlo = require_high_level_opt();
      var Pack = require_pack();
      var Parse = require_parse5();
      var fs8 = require("fs");
      var fsm = require_fs_minipass();
      var t5 = require_list();
      var path3 = require("path");
      var Header = require_header();
      var r = module.exports = (opt_, files, cb) => {
        const opt = hlo(opt_);
        if (!opt.file)
          throw new TypeError("file is required");
        if (opt.gzip)
          throw new TypeError("cannot append to compressed archives");
        if (!files || !Array.isArray(files) || !files.length)
          throw new TypeError("no files or directories specified");
        files = Array.from(files);
        return opt.sync ? replaceSync(opt, files) : replace(opt, files, cb);
      };
      var replaceSync = (opt, files) => {
        const p = new Pack.Sync(opt);
        let threw = true;
        let fd;
        let position;
        try {
          try {
            fd = fs8.openSync(opt.file, "r+");
          } catch (er) {
            if (er.code === "ENOENT")
              fd = fs8.openSync(opt.file, "w+");
            else
              throw er;
          }
          const st = fs8.fstatSync(fd);
          const headBuf = Buffer.alloc(512);
          POSITION:
            for (position = 0; position < st.size; position += 512) {
              for (let bufPos = 0, bytes = 0; bufPos < 512; bufPos += bytes) {
                bytes = fs8.readSync(fd, headBuf, bufPos, headBuf.length - bufPos, position + bufPos);
                if (position === 0 && headBuf[0] === 31 && headBuf[1] === 139)
                  throw new Error("cannot append to compressed archives");
                if (!bytes)
                  break POSITION;
              }
              let h = new Header(headBuf);
              if (!h.cksumValid)
                break;
              let entryBlockSize = 512 * Math.ceil(h.size / 512);
              if (position + entryBlockSize + 512 > st.size)
                break;
              position += entryBlockSize;
              if (opt.mtimeCache)
                opt.mtimeCache.set(h.path, h.mtime);
            }
          threw = false;
          streamSync(opt, p, position, fd, files);
        } finally {
          if (threw)
            try {
              fs8.closeSync(fd);
            } catch (er) {
            }
        }
      };
      var streamSync = (opt, p, position, fd, files) => {
        const stream = new fsm.WriteStreamSync(opt.file, {
          fd,
          start: position
        });
        p.pipe(stream);
        addFilesSync(p, files);
      };
      var replace = (opt, files, cb) => {
        files = Array.from(files);
        const p = new Pack(opt);
        const getPos = (fd, size, cb_) => {
          const cb2 = (er, pos) => {
            if (er)
              fs8.close(fd, (_) => cb_(er));
            else
              cb_(null, pos);
          };
          let position = 0;
          if (size === 0)
            return cb2(null, 0);
          let bufPos = 0;
          const headBuf = Buffer.alloc(512);
          const onread = (er, bytes) => {
            if (er)
              return cb2(er);
            bufPos += bytes;
            if (bufPos < 512 && bytes)
              return fs8.read(fd, headBuf, bufPos, headBuf.length - bufPos, position + bufPos, onread);
            if (position === 0 && headBuf[0] === 31 && headBuf[1] === 139)
              return cb2(new Error("cannot append to compressed archives"));
            if (bufPos < 512)
              return cb2(null, position);
            const h = new Header(headBuf);
            if (!h.cksumValid)
              return cb2(null, position);
            const entryBlockSize = 512 * Math.ceil(h.size / 512);
            if (position + entryBlockSize + 512 > size)
              return cb2(null, position);
            position += entryBlockSize + 512;
            if (position >= size)
              return cb2(null, position);
            if (opt.mtimeCache)
              opt.mtimeCache.set(h.path, h.mtime);
            bufPos = 0;
            fs8.read(fd, headBuf, 0, 512, position, onread);
          };
          fs8.read(fd, headBuf, 0, 512, position, onread);
        };
        const promise = new Promise((resolve, reject) => {
          p.on("error", reject);
          let flag = "r+";
          const onopen = (er, fd) => {
            if (er && er.code === "ENOENT" && flag === "r+") {
              flag = "w+";
              return fs8.open(opt.file, flag, onopen);
            }
            if (er)
              return reject(er);
            fs8.fstat(fd, (er2, st) => {
              if (er2)
                return reject(er2);
              getPos(fd, st.size, (er3, position) => {
                if (er3)
                  return reject(er3);
                const stream = new fsm.WriteStream(opt.file, {
                  fd,
                  start: position
                });
                p.pipe(stream);
                stream.on("error", reject);
                stream.on("close", resolve);
                addFilesAsync(p, files);
              });
            });
          };
          fs8.open(opt.file, flag, onopen);
        });
        return cb ? promise.then(cb, cb) : promise;
      };
      var addFilesSync = (p, files) => {
        files.forEach((file) => {
          if (file.charAt(0) === "@")
            t5({
              file: path3.resolve(p.cwd, file.substr(1)),
              sync: true,
              noResume: true,
              onentry: (entry) => p.add(entry)
            });
          else
            p.add(file);
        });
        p.end();
      };
      var addFilesAsync = (p, files) => {
        while (files.length) {
          const file = files.shift();
          if (file.charAt(0) === "@")
            return t5({
              file: path3.resolve(p.cwd, file.substr(1)),
              noResume: true,
              onentry: (entry) => p.add(entry)
            }).then((_) => addFilesAsync(p, files));
          else
            p.add(file);
        }
        p.end();
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/update.js
  var require_update = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/update.js"(exports, module) {
      "use strict";
      var hlo = require_high_level_opt();
      var r = require_replace();
      var u = module.exports = (opt_, files, cb) => {
        const opt = hlo(opt_);
        if (!opt.file)
          throw new TypeError("file is required");
        if (opt.gzip)
          throw new TypeError("cannot append to compressed archives");
        if (!files || !Array.isArray(files) || !files.length)
          throw new TypeError("no files or directories specified");
        files = Array.from(files);
        mtimeFilter(opt);
        return r(opt, files, cb);
      };
      var mtimeFilter = (opt) => {
        const filter = opt.filter;
        if (!opt.mtimeCache)
          opt.mtimeCache = new Map();
        opt.filter = filter ? (path3, stat) => filter(path3, stat) && !(opt.mtimeCache.get(path3) > stat.mtime) : (path3, stat) => !(opt.mtimeCache.get(path3) > stat.mtime);
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/mkdirp-npm-1.0.4-37f6ef56b9-a96865108c.zip/node_modules/mkdirp/lib/opts-arg.js
  var require_opts_arg = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/mkdirp-npm-1.0.4-37f6ef56b9-a96865108c.zip/node_modules/mkdirp/lib/opts-arg.js"(exports, module) {
      var {promisify: promisify5} = require("util");
      var fs8 = require("fs");
      var optsArg = (opts) => {
        if (!opts)
          opts = {mode: 511, fs: fs8};
        else if (typeof opts === "object")
          opts = __spreadValues({mode: 511, fs: fs8}, opts);
        else if (typeof opts === "number")
          opts = {mode: opts, fs: fs8};
        else if (typeof opts === "string")
          opts = {mode: parseInt(opts, 8), fs: fs8};
        else
          throw new TypeError("invalid options argument");
        opts.mkdir = opts.mkdir || opts.fs.mkdir || fs8.mkdir;
        opts.mkdirAsync = promisify5(opts.mkdir);
        opts.stat = opts.stat || opts.fs.stat || fs8.stat;
        opts.statAsync = promisify5(opts.stat);
        opts.statSync = opts.statSync || opts.fs.statSync || fs8.statSync;
        opts.mkdirSync = opts.mkdirSync || opts.fs.mkdirSync || fs8.mkdirSync;
        return opts;
      };
      module.exports = optsArg;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/mkdirp-npm-1.0.4-37f6ef56b9-a96865108c.zip/node_modules/mkdirp/lib/path-arg.js
  var require_path_arg = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/mkdirp-npm-1.0.4-37f6ef56b9-a96865108c.zip/node_modules/mkdirp/lib/path-arg.js"(exports, module) {
      var platform = process.env.__TESTING_MKDIRP_PLATFORM__ || process.platform;
      var {resolve, parse: parse4} = require("path");
      var pathArg = (path3) => {
        if (/\0/.test(path3)) {
          throw Object.assign(new TypeError("path must be a string without null bytes"), {
            path: path3,
            code: "ERR_INVALID_ARG_VALUE"
          });
        }
        path3 = resolve(path3);
        if (platform === "win32") {
          const badWinChars = /[*|"<>?:]/;
          const {root} = parse4(path3);
          if (badWinChars.test(path3.substr(root.length))) {
            throw Object.assign(new Error("Illegal characters in path."), {
              path: path3,
              code: "EINVAL"
            });
          }
        }
        return path3;
      };
      module.exports = pathArg;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/mkdirp-npm-1.0.4-37f6ef56b9-a96865108c.zip/node_modules/mkdirp/lib/find-made.js
  var require_find_made = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/mkdirp-npm-1.0.4-37f6ef56b9-a96865108c.zip/node_modules/mkdirp/lib/find-made.js"(exports, module) {
      var {dirname: dirname2} = require("path");
      var findMade = (opts, parent, path3 = void 0) => {
        if (path3 === parent)
          return Promise.resolve();
        return opts.statAsync(parent).then((st) => st.isDirectory() ? path3 : void 0, (er) => er.code === "ENOENT" ? findMade(opts, dirname2(parent), parent) : void 0);
      };
      var findMadeSync = (opts, parent, path3 = void 0) => {
        if (path3 === parent)
          return void 0;
        try {
          return opts.statSync(parent).isDirectory() ? path3 : void 0;
        } catch (er) {
          return er.code === "ENOENT" ? findMadeSync(opts, dirname2(parent), parent) : void 0;
        }
      };
      module.exports = {findMade, findMadeSync};
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/mkdirp-npm-1.0.4-37f6ef56b9-a96865108c.zip/node_modules/mkdirp/lib/mkdirp-manual.js
  var require_mkdirp_manual = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/mkdirp-npm-1.0.4-37f6ef56b9-a96865108c.zip/node_modules/mkdirp/lib/mkdirp-manual.js"(exports, module) {
      var {dirname: dirname2} = require("path");
      var mkdirpManual = (path3, opts, made) => {
        opts.recursive = false;
        const parent = dirname2(path3);
        if (parent === path3) {
          return opts.mkdirAsync(path3, opts).catch((er) => {
            if (er.code !== "EISDIR")
              throw er;
          });
        }
        return opts.mkdirAsync(path3, opts).then(() => made || path3, (er) => {
          if (er.code === "ENOENT")
            return mkdirpManual(parent, opts).then((made2) => mkdirpManual(path3, opts, made2));
          if (er.code !== "EEXIST" && er.code !== "EROFS")
            throw er;
          return opts.statAsync(path3).then((st) => {
            if (st.isDirectory())
              return made;
            else
              throw er;
          }, () => {
            throw er;
          });
        });
      };
      var mkdirpManualSync = (path3, opts, made) => {
        const parent = dirname2(path3);
        opts.recursive = false;
        if (parent === path3) {
          try {
            return opts.mkdirSync(path3, opts);
          } catch (er) {
            if (er.code !== "EISDIR")
              throw er;
            else
              return;
          }
        }
        try {
          opts.mkdirSync(path3, opts);
          return made || path3;
        } catch (er) {
          if (er.code === "ENOENT")
            return mkdirpManualSync(path3, opts, mkdirpManualSync(parent, opts, made));
          if (er.code !== "EEXIST" && er.code !== "EROFS")
            throw er;
          try {
            if (!opts.statSync(path3).isDirectory())
              throw er;
          } catch (_) {
            throw er;
          }
        }
      };
      module.exports = {mkdirpManual, mkdirpManualSync};
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/mkdirp-npm-1.0.4-37f6ef56b9-a96865108c.zip/node_modules/mkdirp/lib/mkdirp-native.js
  var require_mkdirp_native = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/mkdirp-npm-1.0.4-37f6ef56b9-a96865108c.zip/node_modules/mkdirp/lib/mkdirp-native.js"(exports, module) {
      var {dirname: dirname2} = require("path");
      var {findMade, findMadeSync} = require_find_made();
      var {mkdirpManual, mkdirpManualSync} = require_mkdirp_manual();
      var mkdirpNative = (path3, opts) => {
        opts.recursive = true;
        const parent = dirname2(path3);
        if (parent === path3)
          return opts.mkdirAsync(path3, opts);
        return findMade(opts, path3).then((made) => opts.mkdirAsync(path3, opts).then(() => made).catch((er) => {
          if (er.code === "ENOENT")
            return mkdirpManual(path3, opts);
          else
            throw er;
        }));
      };
      var mkdirpNativeSync = (path3, opts) => {
        opts.recursive = true;
        const parent = dirname2(path3);
        if (parent === path3)
          return opts.mkdirSync(path3, opts);
        const made = findMadeSync(opts, path3);
        try {
          opts.mkdirSync(path3, opts);
          return made;
        } catch (er) {
          if (er.code === "ENOENT")
            return mkdirpManualSync(path3, opts);
          else
            throw er;
        }
      };
      module.exports = {mkdirpNative, mkdirpNativeSync};
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/mkdirp-npm-1.0.4-37f6ef56b9-a96865108c.zip/node_modules/mkdirp/lib/use-native.js
  var require_use_native = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/mkdirp-npm-1.0.4-37f6ef56b9-a96865108c.zip/node_modules/mkdirp/lib/use-native.js"(exports, module) {
      var fs8 = require("fs");
      var version = process.env.__TESTING_MKDIRP_NODE_VERSION__ || process.version;
      var versArr = version.replace(/^v/, "").split(".");
      var hasNative = +versArr[0] > 10 || +versArr[0] === 10 && +versArr[1] >= 12;
      var useNative = !hasNative ? () => false : (opts) => opts.mkdir === fs8.mkdir;
      var useNativeSync = !hasNative ? () => false : (opts) => opts.mkdirSync === fs8.mkdirSync;
      module.exports = {useNative, useNativeSync};
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/mkdirp-npm-1.0.4-37f6ef56b9-a96865108c.zip/node_modules/mkdirp/index.js
  var require_mkdirp = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/mkdirp-npm-1.0.4-37f6ef56b9-a96865108c.zip/node_modules/mkdirp/index.js"(exports, module) {
      var optsArg = require_opts_arg();
      var pathArg = require_path_arg();
      var {mkdirpNative, mkdirpNativeSync} = require_mkdirp_native();
      var {mkdirpManual, mkdirpManualSync} = require_mkdirp_manual();
      var {useNative, useNativeSync} = require_use_native();
      var mkdirp = (path3, opts) => {
        path3 = pathArg(path3);
        opts = optsArg(opts);
        return useNative(opts) ? mkdirpNative(path3, opts) : mkdirpManual(path3, opts);
      };
      var mkdirpSync = (path3, opts) => {
        path3 = pathArg(path3);
        opts = optsArg(opts);
        return useNativeSync(opts) ? mkdirpNativeSync(path3, opts) : mkdirpManualSync(path3, opts);
      };
      mkdirp.sync = mkdirpSync;
      mkdirp.native = (path3, opts) => mkdirpNative(pathArg(path3), optsArg(opts));
      mkdirp.manual = (path3, opts) => mkdirpManual(pathArg(path3), optsArg(opts));
      mkdirp.nativeSync = (path3, opts) => mkdirpNativeSync(pathArg(path3), optsArg(opts));
      mkdirp.manualSync = (path3, opts) => mkdirpManualSync(pathArg(path3), optsArg(opts));
      module.exports = mkdirp;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/chownr-npm-2.0.0-638f1c9c61-c57cf9dd07.zip/node_modules/chownr/chownr.js
  var require_chownr = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/chownr-npm-2.0.0-638f1c9c61-c57cf9dd07.zip/node_modules/chownr/chownr.js"(exports, module) {
      "use strict";
      var fs8 = require("fs");
      var path3 = require("path");
      var LCHOWN = fs8.lchown ? "lchown" : "chown";
      var LCHOWNSYNC = fs8.lchownSync ? "lchownSync" : "chownSync";
      var needEISDIRHandled = fs8.lchown && !process.version.match(/v1[1-9]+\./) && !process.version.match(/v10\.[6-9]/);
      var lchownSync = (path4, uid, gid) => {
        try {
          return fs8[LCHOWNSYNC](path4, uid, gid);
        } catch (er) {
          if (er.code !== "ENOENT")
            throw er;
        }
      };
      var chownSync = (path4, uid, gid) => {
        try {
          return fs8.chownSync(path4, uid, gid);
        } catch (er) {
          if (er.code !== "ENOENT")
            throw er;
        }
      };
      var handleEISDIR = needEISDIRHandled ? (path4, uid, gid, cb) => (er) => {
        if (!er || er.code !== "EISDIR")
          cb(er);
        else
          fs8.chown(path4, uid, gid, cb);
      } : (_, __, ___, cb) => cb;
      var handleEISDirSync = needEISDIRHandled ? (path4, uid, gid) => {
        try {
          return lchownSync(path4, uid, gid);
        } catch (er) {
          if (er.code !== "EISDIR")
            throw er;
          chownSync(path4, uid, gid);
        }
      } : (path4, uid, gid) => lchownSync(path4, uid, gid);
      var nodeVersion = process.version;
      var readdir = (path4, options, cb) => fs8.readdir(path4, options, cb);
      var readdirSync = (path4, options) => fs8.readdirSync(path4, options);
      if (/^v4\./.test(nodeVersion))
        readdir = (path4, options, cb) => fs8.readdir(path4, cb);
      var chown = (cpath, uid, gid, cb) => {
        fs8[LCHOWN](cpath, uid, gid, handleEISDIR(cpath, uid, gid, (er) => {
          cb(er && er.code !== "ENOENT" ? er : null);
        }));
      };
      var chownrKid = (p, child, uid, gid, cb) => {
        if (typeof child === "string")
          return fs8.lstat(path3.resolve(p, child), (er, stats) => {
            if (er)
              return cb(er.code !== "ENOENT" ? er : null);
            stats.name = child;
            chownrKid(p, stats, uid, gid, cb);
          });
        if (child.isDirectory()) {
          chownr(path3.resolve(p, child.name), uid, gid, (er) => {
            if (er)
              return cb(er);
            const cpath = path3.resolve(p, child.name);
            chown(cpath, uid, gid, cb);
          });
        } else {
          const cpath = path3.resolve(p, child.name);
          chown(cpath, uid, gid, cb);
        }
      };
      var chownr = (p, uid, gid, cb) => {
        readdir(p, {withFileTypes: true}, (er, children) => {
          if (er) {
            if (er.code === "ENOENT")
              return cb();
            else if (er.code !== "ENOTDIR" && er.code !== "ENOTSUP")
              return cb(er);
          }
          if (er || !children.length)
            return chown(p, uid, gid, cb);
          let len = children.length;
          let errState = null;
          const then = (er2) => {
            if (errState)
              return;
            if (er2)
              return cb(errState = er2);
            if (--len === 0)
              return chown(p, uid, gid, cb);
          };
          children.forEach((child) => chownrKid(p, child, uid, gid, then));
        });
      };
      var chownrKidSync = (p, child, uid, gid) => {
        if (typeof child === "string") {
          try {
            const stats = fs8.lstatSync(path3.resolve(p, child));
            stats.name = child;
            child = stats;
          } catch (er) {
            if (er.code === "ENOENT")
              return;
            else
              throw er;
          }
        }
        if (child.isDirectory())
          chownrSync(path3.resolve(p, child.name), uid, gid);
        handleEISDirSync(path3.resolve(p, child.name), uid, gid);
      };
      var chownrSync = (p, uid, gid) => {
        let children;
        try {
          children = readdirSync(p, {withFileTypes: true});
        } catch (er) {
          if (er.code === "ENOENT")
            return;
          else if (er.code === "ENOTDIR" || er.code === "ENOTSUP")
            return handleEISDirSync(p, uid, gid);
          else
            throw er;
        }
        if (children && children.length)
          children.forEach((child) => chownrKidSync(p, child, uid, gid));
        return handleEISDirSync(p, uid, gid);
      };
      module.exports = chownr;
      chownr.sync = chownrSync;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/mkdir.js
  var require_mkdir = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/mkdir.js"(exports, module) {
      "use strict";
      var mkdirp = require_mkdirp();
      var fs8 = require("fs");
      var path3 = require("path");
      var chownr = require_chownr();
      var SymlinkError = class extends Error {
        constructor(symlink, path4) {
          super("Cannot extract through symbolic link");
          this.path = path4;
          this.symlink = symlink;
        }
        get name() {
          return "SylinkError";
        }
      };
      var CwdError = class extends Error {
        constructor(path4, code) {
          super(code + ": Cannot cd into '" + path4 + "'");
          this.path = path4;
          this.code = code;
        }
        get name() {
          return "CwdError";
        }
      };
      var mkdir = module.exports = (dir, opt, cb) => {
        const umask = opt.umask;
        const mode = opt.mode | 448;
        const needChmod = (mode & umask) !== 0;
        const uid = opt.uid;
        const gid = opt.gid;
        const doChown = typeof uid === "number" && typeof gid === "number" && (uid !== opt.processUid || gid !== opt.processGid);
        const preserve = opt.preserve;
        const unlink = opt.unlink;
        const cache2 = opt.cache;
        const cwd = opt.cwd;
        const done = (er, created) => {
          if (er)
            cb(er);
          else {
            cache2.set(dir, true);
            if (created && doChown)
              chownr(created, uid, gid, (er2) => done(er2));
            else if (needChmod)
              fs8.chmod(dir, mode, cb);
            else
              cb();
          }
        };
        if (cache2 && cache2.get(dir) === true)
          return done();
        if (dir === cwd)
          return fs8.stat(dir, (er, st) => {
            if (er || !st.isDirectory())
              er = new CwdError(dir, er && er.code || "ENOTDIR");
            done(er);
          });
        if (preserve)
          return mkdirp(dir, {mode}).then((made) => done(null, made), done);
        const sub = path3.relative(cwd, dir);
        const parts = sub.split(/\/|\\/);
        mkdir_(cwd, parts, mode, cache2, unlink, cwd, null, done);
      };
      var mkdir_ = (base, parts, mode, cache2, unlink, cwd, created, cb) => {
        if (!parts.length)
          return cb(null, created);
        const p = parts.shift();
        const part = base + "/" + p;
        if (cache2.get(part))
          return mkdir_(part, parts, mode, cache2, unlink, cwd, created, cb);
        fs8.mkdir(part, mode, onmkdir(part, parts, mode, cache2, unlink, cwd, created, cb));
      };
      var onmkdir = (part, parts, mode, cache2, unlink, cwd, created, cb) => (er) => {
        if (er) {
          if (er.path && path3.dirname(er.path) === cwd && (er.code === "ENOTDIR" || er.code === "ENOENT"))
            return cb(new CwdError(cwd, er.code));
          fs8.lstat(part, (statEr, st) => {
            if (statEr)
              cb(statEr);
            else if (st.isDirectory())
              mkdir_(part, parts, mode, cache2, unlink, cwd, created, cb);
            else if (unlink)
              fs8.unlink(part, (er2) => {
                if (er2)
                  return cb(er2);
                fs8.mkdir(part, mode, onmkdir(part, parts, mode, cache2, unlink, cwd, created, cb));
              });
            else if (st.isSymbolicLink())
              return cb(new SymlinkError(part, part + "/" + parts.join("/")));
            else
              cb(er);
          });
        } else {
          created = created || part;
          mkdir_(part, parts, mode, cache2, unlink, cwd, created, cb);
        }
      };
      var mkdirSync = module.exports.sync = (dir, opt) => {
        const umask = opt.umask;
        const mode = opt.mode | 448;
        const needChmod = (mode & umask) !== 0;
        const uid = opt.uid;
        const gid = opt.gid;
        const doChown = typeof uid === "number" && typeof gid === "number" && (uid !== opt.processUid || gid !== opt.processGid);
        const preserve = opt.preserve;
        const unlink = opt.unlink;
        const cache2 = opt.cache;
        const cwd = opt.cwd;
        const done = (created2) => {
          cache2.set(dir, true);
          if (created2 && doChown)
            chownr.sync(created2, uid, gid);
          if (needChmod)
            fs8.chmodSync(dir, mode);
        };
        if (cache2 && cache2.get(dir) === true)
          return done();
        if (dir === cwd) {
          let ok = false;
          let code = "ENOTDIR";
          try {
            ok = fs8.statSync(dir).isDirectory();
          } catch (er) {
            code = er.code;
          } finally {
            if (!ok)
              throw new CwdError(dir, code);
          }
          done();
          return;
        }
        if (preserve)
          return done(mkdirp.sync(dir, mode));
        const sub = path3.relative(cwd, dir);
        const parts = sub.split(/\/|\\/);
        let created = null;
        for (let p = parts.shift(), part = cwd; p && (part += "/" + p); p = parts.shift()) {
          if (cache2.get(part))
            continue;
          try {
            fs8.mkdirSync(part, mode);
            created = created || part;
            cache2.set(part, true);
          } catch (er) {
            if (er.path && path3.dirname(er.path) === cwd && (er.code === "ENOTDIR" || er.code === "ENOENT"))
              return new CwdError(cwd, er.code);
            const st = fs8.lstatSync(part);
            if (st.isDirectory()) {
              cache2.set(part, true);
              continue;
            } else if (unlink) {
              fs8.unlinkSync(part);
              fs8.mkdirSync(part, mode);
              created = created || part;
              cache2.set(part, true);
              continue;
            } else if (st.isSymbolicLink())
              return new SymlinkError(part, part + "/" + parts.join("/"));
          }
        }
        return done(created);
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/path-reservations.js
  var require_path_reservations = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/path-reservations.js"(exports, module) {
      var assert = require("assert");
      module.exports = () => {
        const queues = new Map();
        const reservations = new Map();
        const {join} = require("path");
        const getDirs = (path3) => join(path3).split(/[\\\/]/).slice(0, -1).reduce((set, path4) => set.length ? set.concat(join(set[set.length - 1], path4)) : [path4], []);
        const running = new Set();
        const getQueues = (fn) => {
          const res = reservations.get(fn);
          if (!res)
            throw new Error("function does not have any path reservations");
          return {
            paths: res.paths.map((path3) => queues.get(path3)),
            dirs: [...res.dirs].map((path3) => queues.get(path3))
          };
        };
        const check = (fn) => {
          const {paths, dirs} = getQueues(fn);
          return paths.every((q) => q[0] === fn) && dirs.every((q) => q[0] instanceof Set && q[0].has(fn));
        };
        const run = (fn) => {
          if (running.has(fn) || !check(fn))
            return false;
          running.add(fn);
          fn(() => clear(fn));
          return true;
        };
        const clear = (fn) => {
          if (!running.has(fn))
            return false;
          const {paths, dirs} = reservations.get(fn);
          const next = new Set();
          paths.forEach((path3) => {
            const q = queues.get(path3);
            assert.equal(q[0], fn);
            if (q.length === 1)
              queues.delete(path3);
            else {
              q.shift();
              if (typeof q[0] === "function")
                next.add(q[0]);
              else
                q[0].forEach((fn2) => next.add(fn2));
            }
          });
          dirs.forEach((dir) => {
            const q = queues.get(dir);
            assert(q[0] instanceof Set);
            if (q[0].size === 1 && q.length === 1) {
              queues.delete(dir);
            } else if (q[0].size === 1) {
              q.shift();
              next.add(q[0]);
            } else
              q[0].delete(fn);
          });
          running.delete(fn);
          next.forEach((fn2) => run(fn2));
          return true;
        };
        const reserve = (paths, fn) => {
          const dirs = new Set(paths.map((path3) => getDirs(path3)).reduce((a, b) => a.concat(b)));
          reservations.set(fn, {dirs, paths});
          paths.forEach((path3) => {
            const q = queues.get(path3);
            if (!q)
              queues.set(path3, [fn]);
            else
              q.push(fn);
          });
          dirs.forEach((dir) => {
            const q = queues.get(dir);
            if (!q)
              queues.set(dir, [new Set([fn])]);
            else if (q[q.length - 1] instanceof Set)
              q[q.length - 1].add(fn);
            else
              q.push(new Set([fn]));
          });
          return run(fn);
        };
        return {check, reserve};
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/get-write-flag.js
  var require_get_write_flag = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/get-write-flag.js"(exports, module) {
      var platform = process.env.__FAKE_PLATFORM__ || process.platform;
      var isWindows = platform === "win32";
      var fs8 = global.__FAKE_TESTING_FS__ || require("fs");
      var {O_CREAT, O_TRUNC, O_WRONLY, UV_FS_O_FILEMAP = 0} = fs8.constants;
      var fMapEnabled = isWindows && !!UV_FS_O_FILEMAP;
      var fMapLimit = 512 * 1024;
      var fMapFlag = UV_FS_O_FILEMAP | O_TRUNC | O_CREAT | O_WRONLY;
      module.exports = !fMapEnabled ? () => "w" : (size) => size < fMapLimit ? fMapFlag : "w";
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/unpack.js
  var require_unpack = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/unpack.js"(exports, module) {
      "use strict";
      var assert = require("assert");
      var EE = require("events").EventEmitter;
      var Parser = require_parse5();
      var fs8 = require("fs");
      var fsm = require_fs_minipass();
      var path3 = require("path");
      var mkdir = require_mkdir();
      var mkdirSync = mkdir.sync;
      var wc = require_winchars();
      var pathReservations = require_path_reservations();
      var ONENTRY = Symbol("onEntry");
      var CHECKFS = Symbol("checkFs");
      var CHECKFS2 = Symbol("checkFs2");
      var ISREUSABLE = Symbol("isReusable");
      var MAKEFS = Symbol("makeFs");
      var FILE = Symbol("file");
      var DIRECTORY = Symbol("directory");
      var LINK = Symbol("link");
      var SYMLINK = Symbol("symlink");
      var HARDLINK = Symbol("hardlink");
      var UNSUPPORTED = Symbol("unsupported");
      var UNKNOWN = Symbol("unknown");
      var CHECKPATH = Symbol("checkPath");
      var MKDIR = Symbol("mkdir");
      var ONERROR = Symbol("onError");
      var PENDING = Symbol("pending");
      var PEND = Symbol("pend");
      var UNPEND = Symbol("unpend");
      var ENDED = Symbol("ended");
      var MAYBECLOSE = Symbol("maybeClose");
      var SKIP = Symbol("skip");
      var DOCHOWN = Symbol("doChown");
      var UID = Symbol("uid");
      var GID = Symbol("gid");
      var crypto3 = require("crypto");
      var getFlag = require_get_write_flag();
      var neverCalled = () => {
        throw new Error("sync function called cb somehow?!?");
      };
      var unlinkFile = (path4, cb) => {
        if (process.platform !== "win32")
          return fs8.unlink(path4, cb);
        const name = path4 + ".DELETE." + crypto3.randomBytes(16).toString("hex");
        fs8.rename(path4, name, (er) => {
          if (er)
            return cb(er);
          fs8.unlink(name, cb);
        });
      };
      var unlinkFileSync = (path4) => {
        if (process.platform !== "win32")
          return fs8.unlinkSync(path4);
        const name = path4 + ".DELETE." + crypto3.randomBytes(16).toString("hex");
        fs8.renameSync(path4, name);
        fs8.unlinkSync(name);
      };
      var uint32 = (a, b, c) => a === a >>> 0 ? a : b === b >>> 0 ? b : c;
      var Unpack = class extends Parser {
        constructor(opt) {
          if (!opt)
            opt = {};
          opt.ondone = (_) => {
            this[ENDED] = true;
            this[MAYBECLOSE]();
          };
          super(opt);
          this.reservations = pathReservations();
          this.transform = typeof opt.transform === "function" ? opt.transform : null;
          this.writable = true;
          this.readable = false;
          this[PENDING] = 0;
          this[ENDED] = false;
          this.dirCache = opt.dirCache || new Map();
          if (typeof opt.uid === "number" || typeof opt.gid === "number") {
            if (typeof opt.uid !== "number" || typeof opt.gid !== "number")
              throw new TypeError("cannot set owner without number uid and gid");
            if (opt.preserveOwner)
              throw new TypeError("cannot preserve owner in archive and also set owner explicitly");
            this.uid = opt.uid;
            this.gid = opt.gid;
            this.setOwner = true;
          } else {
            this.uid = null;
            this.gid = null;
            this.setOwner = false;
          }
          if (opt.preserveOwner === void 0 && typeof opt.uid !== "number")
            this.preserveOwner = process.getuid && process.getuid() === 0;
          else
            this.preserveOwner = !!opt.preserveOwner;
          this.processUid = (this.preserveOwner || this.setOwner) && process.getuid ? process.getuid() : null;
          this.processGid = (this.preserveOwner || this.setOwner) && process.getgid ? process.getgid() : null;
          this.forceChown = opt.forceChown === true;
          this.win32 = !!opt.win32 || process.platform === "win32";
          this.newer = !!opt.newer;
          this.keep = !!opt.keep;
          this.noMtime = !!opt.noMtime;
          this.preservePaths = !!opt.preservePaths;
          this.unlink = !!opt.unlink;
          this.cwd = path3.resolve(opt.cwd || process.cwd());
          this.strip = +opt.strip || 0;
          this.processUmask = process.umask();
          this.umask = typeof opt.umask === "number" ? opt.umask : this.processUmask;
          this.dmode = opt.dmode || 511 & ~this.umask;
          this.fmode = opt.fmode || 438 & ~this.umask;
          this.on("entry", (entry) => this[ONENTRY](entry));
        }
        warn(code, msg, data = {}) {
          if (code === "TAR_BAD_ARCHIVE" || code === "TAR_ABORT")
            data.recoverable = false;
          return super.warn(code, msg, data);
        }
        [MAYBECLOSE]() {
          if (this[ENDED] && this[PENDING] === 0) {
            this.emit("prefinish");
            this.emit("finish");
            this.emit("end");
            this.emit("close");
          }
        }
        [CHECKPATH](entry) {
          if (this.strip) {
            const parts = entry.path.split(/\/|\\/);
            if (parts.length < this.strip)
              return false;
            entry.path = parts.slice(this.strip).join("/");
            if (entry.type === "Link") {
              const linkparts = entry.linkpath.split(/\/|\\/);
              if (linkparts.length >= this.strip)
                entry.linkpath = linkparts.slice(this.strip).join("/");
            }
          }
          if (!this.preservePaths) {
            const p = entry.path;
            if (p.match(/(^|\/|\\)\.\.(\\|\/|$)/)) {
              this.warn("TAR_ENTRY_ERROR", `path contains '..'`, {
                entry,
                path: p
              });
              return false;
            }
            if (path3.win32.isAbsolute(p)) {
              const parsed = path3.win32.parse(p);
              entry.path = p.substr(parsed.root.length);
              const r = parsed.root;
              this.warn("TAR_ENTRY_INFO", `stripping ${r} from absolute path`, {
                entry,
                path: p
              });
            }
          }
          if (this.win32) {
            const parsed = path3.win32.parse(entry.path);
            entry.path = parsed.root === "" ? wc.encode(entry.path) : parsed.root + wc.encode(entry.path.substr(parsed.root.length));
          }
          if (path3.isAbsolute(entry.path))
            entry.absolute = entry.path;
          else
            entry.absolute = path3.resolve(this.cwd, entry.path);
          return true;
        }
        [ONENTRY](entry) {
          if (!this[CHECKPATH](entry))
            return entry.resume();
          assert.equal(typeof entry.absolute, "string");
          switch (entry.type) {
            case "Directory":
            case "GNUDumpDir":
              if (entry.mode)
                entry.mode = entry.mode | 448;
            case "File":
            case "OldFile":
            case "ContiguousFile":
            case "Link":
            case "SymbolicLink":
              return this[CHECKFS](entry);
            case "CharacterDevice":
            case "BlockDevice":
            case "FIFO":
              return this[UNSUPPORTED](entry);
          }
        }
        [ONERROR](er, entry) {
          if (er.name === "CwdError")
            this.emit("error", er);
          else {
            this.warn("TAR_ENTRY_ERROR", er, {entry});
            this[UNPEND]();
            entry.resume();
          }
        }
        [MKDIR](dir, mode, cb) {
          mkdir(dir, {
            uid: this.uid,
            gid: this.gid,
            processUid: this.processUid,
            processGid: this.processGid,
            umask: this.processUmask,
            preserve: this.preservePaths,
            unlink: this.unlink,
            cache: this.dirCache,
            cwd: this.cwd,
            mode
          }, cb);
        }
        [DOCHOWN](entry) {
          return this.forceChown || this.preserveOwner && (typeof entry.uid === "number" && entry.uid !== this.processUid || typeof entry.gid === "number" && entry.gid !== this.processGid) || (typeof this.uid === "number" && this.uid !== this.processUid || typeof this.gid === "number" && this.gid !== this.processGid);
        }
        [UID](entry) {
          return uint32(this.uid, entry.uid, this.processUid);
        }
        [GID](entry) {
          return uint32(this.gid, entry.gid, this.processGid);
        }
        [FILE](entry, fullyDone) {
          const mode = entry.mode & 4095 || this.fmode;
          const stream = new fsm.WriteStream(entry.absolute, {
            flags: getFlag(entry.size),
            mode,
            autoClose: false
          });
          stream.on("error", (er) => this[ONERROR](er, entry));
          let actions = 1;
          const done = (er) => {
            if (er)
              return this[ONERROR](er, entry);
            if (--actions === 0) {
              fs8.close(stream.fd, (er2) => {
                fullyDone();
                er2 ? this[ONERROR](er2, entry) : this[UNPEND]();
              });
            }
          };
          stream.on("finish", (_) => {
            const abs = entry.absolute;
            const fd = stream.fd;
            if (entry.mtime && !this.noMtime) {
              actions++;
              const atime = entry.atime || new Date();
              const mtime = entry.mtime;
              fs8.futimes(fd, atime, mtime, (er) => er ? fs8.utimes(abs, atime, mtime, (er2) => done(er2 && er)) : done());
            }
            if (this[DOCHOWN](entry)) {
              actions++;
              const uid = this[UID](entry);
              const gid = this[GID](entry);
              fs8.fchown(fd, uid, gid, (er) => er ? fs8.chown(abs, uid, gid, (er2) => done(er2 && er)) : done());
            }
            done();
          });
          const tx = this.transform ? this.transform(entry) || entry : entry;
          if (tx !== entry) {
            tx.on("error", (er) => this[ONERROR](er, entry));
            entry.pipe(tx);
          }
          tx.pipe(stream);
        }
        [DIRECTORY](entry, fullyDone) {
          const mode = entry.mode & 4095 || this.dmode;
          this[MKDIR](entry.absolute, mode, (er) => {
            if (er) {
              fullyDone();
              return this[ONERROR](er, entry);
            }
            let actions = 1;
            const done = (_) => {
              if (--actions === 0) {
                fullyDone();
                this[UNPEND]();
                entry.resume();
              }
            };
            if (entry.mtime && !this.noMtime) {
              actions++;
              fs8.utimes(entry.absolute, entry.atime || new Date(), entry.mtime, done);
            }
            if (this[DOCHOWN](entry)) {
              actions++;
              fs8.chown(entry.absolute, this[UID](entry), this[GID](entry), done);
            }
            done();
          });
        }
        [UNSUPPORTED](entry) {
          entry.unsupported = true;
          this.warn("TAR_ENTRY_UNSUPPORTED", `unsupported entry type: ${entry.type}`, {entry});
          entry.resume();
        }
        [SYMLINK](entry, done) {
          this[LINK](entry, entry.linkpath, "symlink", done);
        }
        [HARDLINK](entry, done) {
          this[LINK](entry, path3.resolve(this.cwd, entry.linkpath), "link", done);
        }
        [PEND]() {
          this[PENDING]++;
        }
        [UNPEND]() {
          this[PENDING]--;
          this[MAYBECLOSE]();
        }
        [SKIP](entry) {
          this[UNPEND]();
          entry.resume();
        }
        [ISREUSABLE](entry, st) {
          return entry.type === "File" && !this.unlink && st.isFile() && st.nlink <= 1 && process.platform !== "win32";
        }
        [CHECKFS](entry) {
          this[PEND]();
          const paths = [entry.path];
          if (entry.linkpath)
            paths.push(entry.linkpath);
          this.reservations.reserve(paths, (done) => this[CHECKFS2](entry, done));
        }
        [CHECKFS2](entry, done) {
          this[MKDIR](path3.dirname(entry.absolute), this.dmode, (er) => {
            if (er) {
              done();
              return this[ONERROR](er, entry);
            }
            fs8.lstat(entry.absolute, (er2, st) => {
              if (st && (this.keep || this.newer && st.mtime > entry.mtime)) {
                this[SKIP](entry);
                done();
              } else if (er2 || this[ISREUSABLE](entry, st)) {
                this[MAKEFS](null, entry, done);
              } else if (st.isDirectory()) {
                if (entry.type === "Directory") {
                  if (!entry.mode || (st.mode & 4095) === entry.mode)
                    this[MAKEFS](null, entry, done);
                  else
                    fs8.chmod(entry.absolute, entry.mode, (er3) => this[MAKEFS](er3, entry, done));
                } else
                  fs8.rmdir(entry.absolute, (er3) => this[MAKEFS](er3, entry, done));
              } else
                unlinkFile(entry.absolute, (er3) => this[MAKEFS](er3, entry, done));
            });
          });
        }
        [MAKEFS](er, entry, done) {
          if (er)
            return this[ONERROR](er, entry);
          switch (entry.type) {
            case "File":
            case "OldFile":
            case "ContiguousFile":
              return this[FILE](entry, done);
            case "Link":
              return this[HARDLINK](entry, done);
            case "SymbolicLink":
              return this[SYMLINK](entry, done);
            case "Directory":
            case "GNUDumpDir":
              return this[DIRECTORY](entry, done);
          }
        }
        [LINK](entry, linkpath, link, done) {
          fs8[link](linkpath, entry.absolute, (er) => {
            if (er)
              return this[ONERROR](er, entry);
            done();
            this[UNPEND]();
            entry.resume();
          });
        }
      };
      var UnpackSync = class extends Unpack {
        constructor(opt) {
          super(opt);
        }
        [CHECKFS](entry) {
          const er = this[MKDIR](path3.dirname(entry.absolute), this.dmode, neverCalled);
          if (er)
            return this[ONERROR](er, entry);
          try {
            const st = fs8.lstatSync(entry.absolute);
            if (this.keep || this.newer && st.mtime > entry.mtime)
              return this[SKIP](entry);
            else if (this[ISREUSABLE](entry, st))
              return this[MAKEFS](null, entry, neverCalled);
            else {
              try {
                if (st.isDirectory()) {
                  if (entry.type === "Directory") {
                    if (entry.mode && (st.mode & 4095) !== entry.mode)
                      fs8.chmodSync(entry.absolute, entry.mode);
                  } else
                    fs8.rmdirSync(entry.absolute);
                } else
                  unlinkFileSync(entry.absolute);
                return this[MAKEFS](null, entry, neverCalled);
              } catch (er2) {
                return this[ONERROR](er2, entry);
              }
            }
          } catch (er2) {
            return this[MAKEFS](null, entry, neverCalled);
          }
        }
        [FILE](entry, _) {
          const mode = entry.mode & 4095 || this.fmode;
          const oner = (er) => {
            let closeError;
            try {
              fs8.closeSync(fd);
            } catch (e) {
              closeError = e;
            }
            if (er || closeError)
              this[ONERROR](er || closeError, entry);
          };
          let stream;
          let fd;
          try {
            fd = fs8.openSync(entry.absolute, getFlag(entry.size), mode);
          } catch (er) {
            return oner(er);
          }
          const tx = this.transform ? this.transform(entry) || entry : entry;
          if (tx !== entry) {
            tx.on("error", (er) => this[ONERROR](er, entry));
            entry.pipe(tx);
          }
          tx.on("data", (chunk) => {
            try {
              fs8.writeSync(fd, chunk, 0, chunk.length);
            } catch (er) {
              oner(er);
            }
          });
          tx.on("end", (_2) => {
            let er = null;
            if (entry.mtime && !this.noMtime) {
              const atime = entry.atime || new Date();
              const mtime = entry.mtime;
              try {
                fs8.futimesSync(fd, atime, mtime);
              } catch (futimeser) {
                try {
                  fs8.utimesSync(entry.absolute, atime, mtime);
                } catch (utimeser) {
                  er = futimeser;
                }
              }
            }
            if (this[DOCHOWN](entry)) {
              const uid = this[UID](entry);
              const gid = this[GID](entry);
              try {
                fs8.fchownSync(fd, uid, gid);
              } catch (fchowner) {
                try {
                  fs8.chownSync(entry.absolute, uid, gid);
                } catch (chowner) {
                  er = er || fchowner;
                }
              }
            }
            oner(er);
          });
        }
        [DIRECTORY](entry, _) {
          const mode = entry.mode & 4095 || this.dmode;
          const er = this[MKDIR](entry.absolute, mode);
          if (er)
            return this[ONERROR](er, entry);
          if (entry.mtime && !this.noMtime) {
            try {
              fs8.utimesSync(entry.absolute, entry.atime || new Date(), entry.mtime);
            } catch (er2) {
            }
          }
          if (this[DOCHOWN](entry)) {
            try {
              fs8.chownSync(entry.absolute, this[UID](entry), this[GID](entry));
            } catch (er2) {
            }
          }
          entry.resume();
        }
        [MKDIR](dir, mode) {
          try {
            return mkdir.sync(dir, {
              uid: this.uid,
              gid: this.gid,
              processUid: this.processUid,
              processGid: this.processGid,
              umask: this.processUmask,
              preserve: this.preservePaths,
              unlink: this.unlink,
              cache: this.dirCache,
              cwd: this.cwd,
              mode
            });
          } catch (er) {
            return er;
          }
        }
        [LINK](entry, linkpath, link, _) {
          try {
            fs8[link + "Sync"](linkpath, entry.absolute);
            entry.resume();
          } catch (er) {
            return this[ONERROR](er, entry);
          }
        }
      };
      Unpack.Sync = UnpackSync;
      module.exports = Unpack;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/extract.js
  var require_extract = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/lib/extract.js"(exports, module) {
      "use strict";
      var hlo = require_high_level_opt();
      var Unpack = require_unpack();
      var fs8 = require("fs");
      var fsm = require_fs_minipass();
      var path3 = require("path");
      var x = module.exports = (opt_, files, cb) => {
        if (typeof opt_ === "function")
          cb = opt_, files = null, opt_ = {};
        else if (Array.isArray(opt_))
          files = opt_, opt_ = {};
        if (typeof files === "function")
          cb = files, files = null;
        if (!files)
          files = [];
        else
          files = Array.from(files);
        const opt = hlo(opt_);
        if (opt.sync && typeof cb === "function")
          throw new TypeError("callback not supported for sync tar functions");
        if (!opt.file && typeof cb === "function")
          throw new TypeError("callback only supported with file option");
        if (files.length)
          filesFilter(opt, files);
        return opt.file && opt.sync ? extractFileSync(opt) : opt.file ? extractFile(opt, cb) : opt.sync ? extractSync(opt) : extract(opt);
      };
      var filesFilter = (opt, files) => {
        const map = new Map(files.map((f) => [f.replace(/\/+$/, ""), true]));
        const filter = opt.filter;
        const mapHas = (file, r) => {
          const root = r || path3.parse(file).root || ".";
          const ret = file === root ? false : map.has(file) ? map.get(file) : mapHas(path3.dirname(file), root);
          map.set(file, ret);
          return ret;
        };
        opt.filter = filter ? (file, entry) => filter(file, entry) && mapHas(file.replace(/\/+$/, "")) : (file) => mapHas(file.replace(/\/+$/, ""));
      };
      var extractFileSync = (opt) => {
        const u = new Unpack.Sync(opt);
        const file = opt.file;
        let threw = true;
        let fd;
        const stat = fs8.statSync(file);
        const readSize = opt.maxReadSize || 16 * 1024 * 1024;
        const stream = new fsm.ReadStreamSync(file, {
          readSize,
          size: stat.size
        });
        stream.pipe(u);
      };
      var extractFile = (opt, cb) => {
        const u = new Unpack(opt);
        const readSize = opt.maxReadSize || 16 * 1024 * 1024;
        const file = opt.file;
        const p = new Promise((resolve, reject) => {
          u.on("error", reject);
          u.on("close", resolve);
          fs8.stat(file, (er, stat) => {
            if (er)
              reject(er);
            else {
              const stream = new fsm.ReadStream(file, {
                readSize,
                size: stat.size
              });
              stream.on("error", reject);
              stream.pipe(u);
            }
          });
        });
        return cb ? p.then(cb, cb) : p;
      };
      var extractSync = (opt) => {
        return new Unpack.Sync(opt);
      };
      var extract = (opt) => {
        return new Unpack(opt);
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/index.js
  var require_tar = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-npm-6.0.5-a5360f3389-e1bdfbf5cc.zip/node_modules/tar/index.js"(exports) {
      "use strict";
      exports.c = exports.create = require_create2();
      exports.r = exports.replace = require_replace();
      exports.t = exports.list = require_list();
      exports.u = exports.update = require_update();
      exports.x = exports.extract = require_extract();
      exports.Pack = require_pack();
      exports.Unpack = require_unpack();
      exports.Parse = require_parse5();
      exports.ReadEntry = require_read_entry();
      exports.WriteEntry = require_write_entry();
      exports.Header = require_header();
      exports.Pax = require_pax();
      exports.types = require_types3();
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/eventemitter3-npm-4.0.7-7afcdd74ae-1875311c42.zip/node_modules/eventemitter3/index.js
  var require_eventemitter3 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/eventemitter3-npm-4.0.7-7afcdd74ae-1875311c42.zip/node_modules/eventemitter3/index.js"(exports, module) {
      "use strict";
      var has = Object.prototype.hasOwnProperty;
      var prefix = "~";
      function Events() {
      }
      if (Object.create) {
        Events.prototype = Object.create(null);
        if (!new Events().__proto__)
          prefix = false;
      }
      function EE(fn, context, once) {
        this.fn = fn;
        this.context = context;
        this.once = once || false;
      }
      function addListener(emitter, event, fn, context, once) {
        if (typeof fn !== "function") {
          throw new TypeError("The listener must be a function");
        }
        var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;
        if (!emitter._events[evt])
          emitter._events[evt] = listener, emitter._eventsCount++;
        else if (!emitter._events[evt].fn)
          emitter._events[evt].push(listener);
        else
          emitter._events[evt] = [emitter._events[evt], listener];
        return emitter;
      }
      function clearEvent(emitter, evt) {
        if (--emitter._eventsCount === 0)
          emitter._events = new Events();
        else
          delete emitter._events[evt];
      }
      function EventEmitter3() {
        this._events = new Events();
        this._eventsCount = 0;
      }
      EventEmitter3.prototype.eventNames = function eventNames() {
        var names = [], events, name;
        if (this._eventsCount === 0)
          return names;
        for (name in events = this._events) {
          if (has.call(events, name))
            names.push(prefix ? name.slice(1) : name);
        }
        if (Object.getOwnPropertySymbols) {
          return names.concat(Object.getOwnPropertySymbols(events));
        }
        return names;
      };
      EventEmitter3.prototype.listeners = function listeners(event) {
        var evt = prefix ? prefix + event : event, handlers = this._events[evt];
        if (!handlers)
          return [];
        if (handlers.fn)
          return [handlers.fn];
        for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
          ee[i] = handlers[i].fn;
        }
        return ee;
      };
      EventEmitter3.prototype.listenerCount = function listenerCount(event) {
        var evt = prefix ? prefix + event : event, listeners = this._events[evt];
        if (!listeners)
          return 0;
        if (listeners.fn)
          return 1;
        return listeners.length;
      };
      EventEmitter3.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
        var evt = prefix ? prefix + event : event;
        if (!this._events[evt])
          return false;
        var listeners = this._events[evt], len = arguments.length, args, i;
        if (listeners.fn) {
          if (listeners.once)
            this.removeListener(event, listeners.fn, void 0, true);
          switch (len) {
            case 1:
              return listeners.fn.call(listeners.context), true;
            case 2:
              return listeners.fn.call(listeners.context, a1), true;
            case 3:
              return listeners.fn.call(listeners.context, a1, a2), true;
            case 4:
              return listeners.fn.call(listeners.context, a1, a2, a3), true;
            case 5:
              return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
            case 6:
              return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
          }
          for (i = 1, args = new Array(len - 1); i < len; i++) {
            args[i - 1] = arguments[i];
          }
          listeners.fn.apply(listeners.context, args);
        } else {
          var length = listeners.length, j;
          for (i = 0; i < length; i++) {
            if (listeners[i].once)
              this.removeListener(event, listeners[i].fn, void 0, true);
            switch (len) {
              case 1:
                listeners[i].fn.call(listeners[i].context);
                break;
              case 2:
                listeners[i].fn.call(listeners[i].context, a1);
                break;
              case 3:
                listeners[i].fn.call(listeners[i].context, a1, a2);
                break;
              case 4:
                listeners[i].fn.call(listeners[i].context, a1, a2, a3);
                break;
              default:
                if (!args)
                  for (j = 1, args = new Array(len - 1); j < len; j++) {
                    args[j - 1] = arguments[j];
                  }
                listeners[i].fn.apply(listeners[i].context, args);
            }
          }
        }
        return true;
      };
      EventEmitter3.prototype.on = function on(event, fn, context) {
        return addListener(this, event, fn, context, false);
      };
      EventEmitter3.prototype.once = function once(event, fn, context) {
        return addListener(this, event, fn, context, true);
      };
      EventEmitter3.prototype.removeListener = function removeListener(event, fn, context, once) {
        var evt = prefix ? prefix + event : event;
        if (!this._events[evt])
          return this;
        if (!fn) {
          clearEvent(this, evt);
          return this;
        }
        var listeners = this._events[evt];
        if (listeners.fn) {
          if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
            clearEvent(this, evt);
          }
        } else {
          for (var i = 0, events = [], length = listeners.length; i < length; i++) {
            if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
              events.push(listeners[i]);
            }
          }
          if (events.length)
            this._events[evt] = events.length === 1 ? events[0] : events;
          else
            clearEvent(this, evt);
        }
        return this;
      };
      EventEmitter3.prototype.removeAllListeners = function removeAllListeners(event) {
        var evt;
        if (event) {
          evt = prefix ? prefix + event : event;
          if (this._events[evt])
            clearEvent(this, evt);
        } else {
          this._events = new Events();
          this._eventsCount = 0;
        }
        return this;
      };
      EventEmitter3.prototype.off = EventEmitter3.prototype.removeListener;
      EventEmitter3.prototype.addListener = EventEmitter3.prototype.on;
      EventEmitter3.prefixed = prefix;
      EventEmitter3.EventEmitter = EventEmitter3;
      if (typeof module !== "undefined") {
        module.exports = EventEmitter3;
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/p-finally-npm-1.0.0-35fbaa57c6-93a654c53d.zip/node_modules/p-finally/index.js
  var require_p_finally = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/p-finally-npm-1.0.0-35fbaa57c6-93a654c53d.zip/node_modules/p-finally/index.js"(exports, module) {
      "use strict";
      module.exports = (promise, onFinally) => {
        onFinally = onFinally || (() => {
        });
        return promise.then((val) => new Promise((resolve) => {
          resolve(onFinally());
        }).then(() => val), (err) => new Promise((resolve) => {
          resolve(onFinally());
        }).then(() => {
          throw err;
        }));
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/p-timeout-npm-3.2.0-7fdb33f733-3dd0eaa048.zip/node_modules/p-timeout/index.js
  var require_p_timeout = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/p-timeout-npm-3.2.0-7fdb33f733-3dd0eaa048.zip/node_modules/p-timeout/index.js"(exports, module) {
      "use strict";
      var pFinally = require_p_finally();
      var TimeoutError2 = class extends Error {
        constructor(message) {
          super(message);
          this.name = "TimeoutError";
        }
      };
      var pTimeout = (promise, milliseconds, fallback) => new Promise((resolve, reject) => {
        if (typeof milliseconds !== "number" || milliseconds < 0) {
          throw new TypeError("Expected `milliseconds` to be a positive number");
        }
        if (milliseconds === Infinity) {
          resolve(promise);
          return;
        }
        const timer = setTimeout(() => {
          if (typeof fallback === "function") {
            try {
              resolve(fallback());
            } catch (error) {
              reject(error);
            }
            return;
          }
          const message = typeof fallback === "string" ? fallback : `Promise timed out after ${milliseconds} milliseconds`;
          const timeoutError = fallback instanceof Error ? fallback : new TimeoutError2(message);
          if (typeof promise.cancel === "function") {
            promise.cancel();
          }
          reject(timeoutError);
        }, milliseconds);
        pFinally(promise.then(resolve, reject), () => {
          clearTimeout(timer);
        });
      });
      module.exports = pTimeout;
      module.exports.default = pTimeout;
      module.exports.TimeoutError = TimeoutError2;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/p-queue-npm-6.6.2-b173c5bfa8-832642fcc4.zip/node_modules/p-queue/dist/lower-bound.js
  var require_lower_bound = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/p-queue-npm-6.6.2-b173c5bfa8-832642fcc4.zip/node_modules/p-queue/dist/lower-bound.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      function lowerBound(array, value, comparator) {
        let first = 0;
        let count = array.length;
        while (count > 0) {
          const step = count / 2 | 0;
          let it = first + step;
          if (comparator(array[it], value) <= 0) {
            first = ++it;
            count -= step + 1;
          } else {
            count = step;
          }
        }
        return first;
      }
      exports.default = lowerBound;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/p-queue-npm-6.6.2-b173c5bfa8-832642fcc4.zip/node_modules/p-queue/dist/priority-queue.js
  var require_priority_queue = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/p-queue-npm-6.6.2-b173c5bfa8-832642fcc4.zip/node_modules/p-queue/dist/priority-queue.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var lower_bound_1 = require_lower_bound();
      var PriorityQueue = class {
        constructor() {
          this._queue = [];
        }
        enqueue(run, options) {
          options = Object.assign({priority: 0}, options);
          const element = {
            priority: options.priority,
            run
          };
          if (this.size && this._queue[this.size - 1].priority >= options.priority) {
            this._queue.push(element);
            return;
          }
          const index = lower_bound_1.default(this._queue, element, (a, b) => b.priority - a.priority);
          this._queue.splice(index, 0, element);
        }
        dequeue() {
          const item = this._queue.shift();
          return item === null || item === void 0 ? void 0 : item.run;
        }
        filter(options) {
          return this._queue.filter((element) => element.priority === options.priority).map((element) => element.run);
        }
        get size() {
          return this._queue.length;
        }
      };
      exports.default = PriorityQueue;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/p-queue-npm-6.6.2-b173c5bfa8-832642fcc4.zip/node_modules/p-queue/dist/index.js
  var require_dist2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/p-queue-npm-6.6.2-b173c5bfa8-832642fcc4.zip/node_modules/p-queue/dist/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var EventEmitter3 = require_eventemitter3();
      var p_timeout_1 = require_p_timeout();
      var priority_queue_1 = require_priority_queue();
      var empty = () => {
      };
      var timeoutError = new p_timeout_1.TimeoutError();
      var PQueue2 = class extends EventEmitter3 {
        constructor(options) {
          var _a2, _b, _c, _d;
          super();
          this._intervalCount = 0;
          this._intervalEnd = 0;
          this._pendingCount = 0;
          this._resolveEmpty = empty;
          this._resolveIdle = empty;
          options = Object.assign({carryoverConcurrencyCount: false, intervalCap: Infinity, interval: 0, concurrency: Infinity, autoStart: true, queueClass: priority_queue_1.default}, options);
          if (!(typeof options.intervalCap === "number" && options.intervalCap >= 1)) {
            throw new TypeError(`Expected \`intervalCap\` to be a number from 1 and up, got \`${(_b = (_a2 = options.intervalCap) === null || _a2 === void 0 ? void 0 : _a2.toString()) !== null && _b !== void 0 ? _b : ""}\` (${typeof options.intervalCap})`);
          }
          if (options.interval === void 0 || !(Number.isFinite(options.interval) && options.interval >= 0)) {
            throw new TypeError(`Expected \`interval\` to be a finite number >= 0, got \`${(_d = (_c = options.interval) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : ""}\` (${typeof options.interval})`);
          }
          this._carryoverConcurrencyCount = options.carryoverConcurrencyCount;
          this._isIntervalIgnored = options.intervalCap === Infinity || options.interval === 0;
          this._intervalCap = options.intervalCap;
          this._interval = options.interval;
          this._queue = new options.queueClass();
          this._queueClass = options.queueClass;
          this.concurrency = options.concurrency;
          this._timeout = options.timeout;
          this._throwOnTimeout = options.throwOnTimeout === true;
          this._isPaused = options.autoStart === false;
        }
        get _doesIntervalAllowAnother() {
          return this._isIntervalIgnored || this._intervalCount < this._intervalCap;
        }
        get _doesConcurrentAllowAnother() {
          return this._pendingCount < this._concurrency;
        }
        _next() {
          this._pendingCount--;
          this._tryToStartAnother();
          this.emit("next");
        }
        _resolvePromises() {
          this._resolveEmpty();
          this._resolveEmpty = empty;
          if (this._pendingCount === 0) {
            this._resolveIdle();
            this._resolveIdle = empty;
            this.emit("idle");
          }
        }
        _onResumeInterval() {
          this._onInterval();
          this._initializeIntervalIfNeeded();
          this._timeoutId = void 0;
        }
        _isIntervalPaused() {
          const now2 = Date.now();
          if (this._intervalId === void 0) {
            const delay = this._intervalEnd - now2;
            if (delay < 0) {
              this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;
            } else {
              if (this._timeoutId === void 0) {
                this._timeoutId = setTimeout(() => {
                  this._onResumeInterval();
                }, delay);
              }
              return true;
            }
          }
          return false;
        }
        _tryToStartAnother() {
          if (this._queue.size === 0) {
            if (this._intervalId) {
              clearInterval(this._intervalId);
            }
            this._intervalId = void 0;
            this._resolvePromises();
            return false;
          }
          if (!this._isPaused) {
            const canInitializeInterval = !this._isIntervalPaused();
            if (this._doesIntervalAllowAnother && this._doesConcurrentAllowAnother) {
              const job = this._queue.dequeue();
              if (!job) {
                return false;
              }
              this.emit("active");
              job();
              if (canInitializeInterval) {
                this._initializeIntervalIfNeeded();
              }
              return true;
            }
          }
          return false;
        }
        _initializeIntervalIfNeeded() {
          if (this._isIntervalIgnored || this._intervalId !== void 0) {
            return;
          }
          this._intervalId = setInterval(() => {
            this._onInterval();
          }, this._interval);
          this._intervalEnd = Date.now() + this._interval;
        }
        _onInterval() {
          if (this._intervalCount === 0 && this._pendingCount === 0 && this._intervalId) {
            clearInterval(this._intervalId);
            this._intervalId = void 0;
          }
          this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;
          this._processQueue();
        }
        _processQueue() {
          while (this._tryToStartAnother()) {
          }
        }
        get concurrency() {
          return this._concurrency;
        }
        set concurrency(newConcurrency) {
          if (!(typeof newConcurrency === "number" && newConcurrency >= 1)) {
            throw new TypeError(`Expected \`concurrency\` to be a number from 1 and up, got \`${newConcurrency}\` (${typeof newConcurrency})`);
          }
          this._concurrency = newConcurrency;
          this._processQueue();
        }
        async add(fn, options = {}) {
          return new Promise((resolve, reject) => {
            const run = async () => {
              this._pendingCount++;
              this._intervalCount++;
              try {
                const operation = this._timeout === void 0 && options.timeout === void 0 ? fn() : p_timeout_1.default(Promise.resolve(fn()), options.timeout === void 0 ? this._timeout : options.timeout, () => {
                  if (options.throwOnTimeout === void 0 ? this._throwOnTimeout : options.throwOnTimeout) {
                    reject(timeoutError);
                  }
                  return void 0;
                });
                resolve(await operation);
              } catch (error) {
                reject(error);
              }
              this._next();
            };
            this._queue.enqueue(run, options);
            this._tryToStartAnother();
            this.emit("add");
          });
        }
        async addAll(functions, options) {
          return Promise.all(functions.map(async (function_) => this.add(function_, options)));
        }
        start() {
          if (!this._isPaused) {
            return this;
          }
          this._isPaused = false;
          this._processQueue();
          return this;
        }
        pause() {
          this._isPaused = true;
        }
        clear() {
          this._queue = new this._queueClass();
        }
        async onEmpty() {
          if (this._queue.size === 0) {
            return;
          }
          return new Promise((resolve) => {
            const existingResolve = this._resolveEmpty;
            this._resolveEmpty = () => {
              existingResolve();
              resolve();
            };
          });
        }
        async onIdle() {
          if (this._pendingCount === 0 && this._queue.size === 0) {
            return;
          }
          return new Promise((resolve) => {
            const existingResolve = this._resolveIdle;
            this._resolveIdle = () => {
              existingResolve();
              resolve();
            };
          });
        }
        get size() {
          return this._queue.size;
        }
        sizeBy(options) {
          return this._queue.filter(options).length;
        }
        get pending() {
          return this._pendingCount;
        }
        get isPaused() {
          return this._isPaused;
        }
        get timeout() {
          return this._timeout;
        }
        set timeout(milliseconds) {
          this._timeout = milliseconds;
        }
      };
      exports.default = PQueue2;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/worker-zip/index.js
  var require_worker_zip = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/worker-zip/index.js"(exports, module) {
      var hook;
      module.exports.getContent = () => {
        if (typeof hook === `undefined`)
          hook = require("zlib").brotliDecompressSync(Buffer.from("", "base64")).toString();
        return hook;
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/treeify-npm-1.1.0-abf9292333-aa00dded22.zip/node_modules/treeify/treeify.js
  var require_treeify = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/treeify-npm-1.1.0-abf9292333-aa00dded22.zip/node_modules/treeify/treeify.js"(exports, module) {
      (function(root, factory) {
        if (typeof exports === "object") {
          module.exports = factory();
        } else if (typeof define === "function" && define.amd) {
          define(factory);
        } else {
          root.treeify = factory();
        }
      })(exports, function() {
        function makePrefix(key, last) {
          var str = last ? "\u2514" : "\u251C";
          if (key) {
            str += "\u2500 ";
          } else {
            str += "\u2500\u2500\u2510";
          }
          return str;
        }
        function filterKeys(obj, hideFunctions) {
          var keys = [];
          for (var branch in obj) {
            if (!obj.hasOwnProperty(branch)) {
              continue;
            }
            if (hideFunctions && typeof obj[branch] === "function") {
              continue;
            }
            keys.push(branch);
          }
          return keys;
        }
        function growBranch(key, root, last, lastStates, showValues, hideFunctions, callback) {
          var line = "", index = 0, lastKey, circular, lastStatesCopy = lastStates.slice(0);
          if (lastStatesCopy.push([root, last]) && lastStates.length > 0) {
            lastStates.forEach(function(lastState, idx) {
              if (idx > 0) {
                line += (lastState[1] ? " " : "\u2502") + "  ";
              }
              if (!circular && lastState[0] === root) {
                circular = true;
              }
            });
            line += makePrefix(key, last) + key;
            showValues && (typeof root !== "object" || root instanceof Date) && (line += ": " + root);
            circular && (line += " (circular ref.)");
            callback(line);
          }
          if (!circular && typeof root === "object") {
            var keys = filterKeys(root, hideFunctions);
            keys.forEach(function(branch) {
              lastKey = ++index === keys.length;
              growBranch(branch, root[branch], lastKey, lastStatesCopy, showValues, hideFunctions, callback);
            });
          }
        }
        ;
        var Treeify = {};
        Treeify.asLines = function(obj, showValues, hideFunctions, lineCallback) {
          var hideFunctionsArg = typeof hideFunctions !== "function" ? hideFunctions : false;
          growBranch(".", obj, false, [], showValues, hideFunctionsArg, lineCallback || hideFunctions);
        };
        Treeify.asTree = function(obj, showValues, hideFunctions) {
          var tree = "";
          growBranch(".", obj, false, [], showValues, hideFunctions, function(line) {
            tree += line + "\n";
          });
          return tree;
        };
        return Treeify;
      });
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/camelcase-npm-5.3.1-5db8af62c5-e6effce26b.zip/node_modules/camelcase/index.js
  var require_camelcase = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/camelcase-npm-5.3.1-5db8af62c5-e6effce26b.zip/node_modules/camelcase/index.js"(exports, module) {
      "use strict";
      var preserveCamelCase = (string) => {
        let isLastCharLower = false;
        let isLastCharUpper = false;
        let isLastLastCharUpper = false;
        for (let i = 0; i < string.length; i++) {
          const character = string[i];
          if (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {
            string = string.slice(0, i) + "-" + string.slice(i);
            isLastCharLower = false;
            isLastLastCharUpper = isLastCharUpper;
            isLastCharUpper = true;
            i++;
          } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {
            string = string.slice(0, i - 1) + "-" + string.slice(i - 1);
            isLastLastCharUpper = isLastCharUpper;
            isLastCharUpper = false;
            isLastCharLower = true;
          } else {
            isLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;
            isLastLastCharUpper = isLastCharUpper;
            isLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;
          }
        }
        return string;
      };
      var camelCase = (input, options) => {
        if (!(typeof input === "string" || Array.isArray(input))) {
          throw new TypeError("Expected the input to be `string | string[]`");
        }
        options = Object.assign({
          pascalCase: false
        }, options);
        const postProcess = (x) => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;
        if (Array.isArray(input)) {
          input = input.map((x) => x.trim()).filter((x) => x.length).join("-");
        } else {
          input = input.trim();
        }
        if (input.length === 0) {
          return "";
        }
        if (input.length === 1) {
          return options.pascalCase ? input.toUpperCase() : input.toLowerCase();
        }
        const hasUpperCase = input !== input.toLowerCase();
        if (hasUpperCase) {
          input = preserveCamelCase(input);
        }
        input = input.replace(/^[_.\- ]+/, "").toLowerCase().replace(/[_.\- ]+(\w|$)/g, (_, p1) => p1.toUpperCase()).replace(/\d+(\w|$)/g, (m) => m.toUpperCase());
        return postProcess(input);
      };
      module.exports = camelCase;
      module.exports.default = camelCase;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/diff/base.js
  var require_base = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/diff/base.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = Diff;
      function Diff() {
      }
      Diff.prototype = {
        diff: function diff(oldString, newString) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          var callback = options.callback;
          if (typeof options === "function") {
            callback = options;
            options = {};
          }
          this.options = options;
          var self2 = this;
          function done(value) {
            if (callback) {
              setTimeout(function() {
                callback(void 0, value);
              }, 0);
              return true;
            } else {
              return value;
            }
          }
          oldString = this.castInput(oldString);
          newString = this.castInput(newString);
          oldString = this.removeEmpty(this.tokenize(oldString));
          newString = this.removeEmpty(this.tokenize(newString));
          var newLen = newString.length, oldLen = oldString.length;
          var editLength = 1;
          var maxEditLength = newLen + oldLen;
          var bestPath = [{
            newPos: -1,
            components: []
          }];
          var oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);
          if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {
            return done([{
              value: this.join(newString),
              count: newString.length
            }]);
          }
          function execEditLength() {
            for (var diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2) {
              var basePath = void 0;
              var addPath = bestPath[diagonalPath - 1], removePath = bestPath[diagonalPath + 1], _oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;
              if (addPath) {
                bestPath[diagonalPath - 1] = void 0;
              }
              var canAdd = addPath && addPath.newPos + 1 < newLen, canRemove = removePath && 0 <= _oldPos && _oldPos < oldLen;
              if (!canAdd && !canRemove) {
                bestPath[diagonalPath] = void 0;
                continue;
              }
              if (!canAdd || canRemove && addPath.newPos < removePath.newPos) {
                basePath = clonePath(removePath);
                self2.pushComponent(basePath.components, void 0, true);
              } else {
                basePath = addPath;
                basePath.newPos++;
                self2.pushComponent(basePath.components, true, void 0);
              }
              _oldPos = self2.extractCommon(basePath, newString, oldString, diagonalPath);
              if (basePath.newPos + 1 >= newLen && _oldPos + 1 >= oldLen) {
                return done(buildValues(self2, basePath.components, newString, oldString, self2.useLongestToken));
              } else {
                bestPath[diagonalPath] = basePath;
              }
            }
            editLength++;
          }
          if (callback) {
            (function exec() {
              setTimeout(function() {
                if (editLength > maxEditLength) {
                  return callback();
                }
                if (!execEditLength()) {
                  exec();
                }
              }, 0);
            })();
          } else {
            while (editLength <= maxEditLength) {
              var ret = execEditLength();
              if (ret) {
                return ret;
              }
            }
          }
        },
        pushComponent: function pushComponent(components, added, removed) {
          var last = components[components.length - 1];
          if (last && last.added === added && last.removed === removed) {
            components[components.length - 1] = {
              count: last.count + 1,
              added,
              removed
            };
          } else {
            components.push({
              count: 1,
              added,
              removed
            });
          }
        },
        extractCommon: function extractCommon(basePath, newString, oldString, diagonalPath) {
          var newLen = newString.length, oldLen = oldString.length, newPos = basePath.newPos, oldPos = newPos - diagonalPath, commonCount = 0;
          while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])) {
            newPos++;
            oldPos++;
            commonCount++;
          }
          if (commonCount) {
            basePath.components.push({
              count: commonCount
            });
          }
          basePath.newPos = newPos;
          return oldPos;
        },
        equals: function equals(left, right) {
          if (this.options.comparator) {
            return this.options.comparator(left, right);
          } else {
            return left === right || this.options.ignoreCase && left.toLowerCase() === right.toLowerCase();
          }
        },
        removeEmpty: function removeEmpty(array) {
          var ret = [];
          for (var i = 0; i < array.length; i++) {
            if (array[i]) {
              ret.push(array[i]);
            }
          }
          return ret;
        },
        castInput: function castInput(value) {
          return value;
        },
        tokenize: function tokenize(value) {
          return value.split("");
        },
        join: function join(chars) {
          return chars.join("");
        }
      };
      function buildValues(diff, components, newString, oldString, useLongestToken) {
        var componentPos = 0, componentLen = components.length, newPos = 0, oldPos = 0;
        for (; componentPos < componentLen; componentPos++) {
          var component = components[componentPos];
          if (!component.removed) {
            if (!component.added && useLongestToken) {
              var value = newString.slice(newPos, newPos + component.count);
              value = value.map(function(value2, i) {
                var oldValue = oldString[oldPos + i];
                return oldValue.length > value2.length ? oldValue : value2;
              });
              component.value = diff.join(value);
            } else {
              component.value = diff.join(newString.slice(newPos, newPos + component.count));
            }
            newPos += component.count;
            if (!component.added) {
              oldPos += component.count;
            }
          } else {
            component.value = diff.join(oldString.slice(oldPos, oldPos + component.count));
            oldPos += component.count;
            if (componentPos && components[componentPos - 1].added) {
              var tmp = components[componentPos - 1];
              components[componentPos - 1] = components[componentPos];
              components[componentPos] = tmp;
            }
          }
        }
        var lastComponent = components[componentLen - 1];
        if (componentLen > 1 && typeof lastComponent.value === "string" && (lastComponent.added || lastComponent.removed) && diff.equals("", lastComponent.value)) {
          components[componentLen - 2].value += lastComponent.value;
          components.pop();
        }
        return components;
      }
      function clonePath(path3) {
        return {
          newPos: path3.newPos,
          components: path3.components.slice(0)
        };
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/diff/character.js
  var require_character = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/diff/character.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.diffChars = diffChars;
      exports.characterDiff = void 0;
      var _base = _interopRequireDefault(require_base());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {default: obj};
      }
      var characterDiff = new _base.default();
      exports.characterDiff = characterDiff;
      function diffChars(oldStr, newStr, options) {
        return characterDiff.diff(oldStr, newStr, options);
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/util/params.js
  var require_params = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/util/params.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.generateOptions = generateOptions;
      function generateOptions(options, defaults) {
        if (typeof options === "function") {
          defaults.callback = options;
        } else if (options) {
          for (var name in options) {
            if (options.hasOwnProperty(name)) {
              defaults[name] = options[name];
            }
          }
        }
        return defaults;
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/diff/word.js
  var require_word = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/diff/word.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.diffWords = diffWords;
      exports.diffWordsWithSpace = diffWordsWithSpace;
      exports.wordDiff = void 0;
      var _base = _interopRequireDefault(require_base());
      var _params = require_params();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {default: obj};
      }
      var extendedWordChars = /^[A-Za-z\xC0-\u02C6\u02C8-\u02D7\u02DE-\u02FF\u1E00-\u1EFF]+$/;
      var reWhitespace = /\S/;
      var wordDiff = new _base.default();
      exports.wordDiff = wordDiff;
      wordDiff.equals = function(left, right) {
        if (this.options.ignoreCase) {
          left = left.toLowerCase();
          right = right.toLowerCase();
        }
        return left === right || this.options.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right);
      };
      wordDiff.tokenize = function(value) {
        var tokens = value.split(/(\s+|[()[\]{}'"]|\b)/);
        for (var i = 0; i < tokens.length - 1; i++) {
          if (!tokens[i + 1] && tokens[i + 2] && extendedWordChars.test(tokens[i]) && extendedWordChars.test(tokens[i + 2])) {
            tokens[i] += tokens[i + 2];
            tokens.splice(i + 1, 2);
            i--;
          }
        }
        return tokens;
      };
      function diffWords(oldStr, newStr, options) {
        options = (0, _params.generateOptions)(options, {
          ignoreWhitespace: true
        });
        return wordDiff.diff(oldStr, newStr, options);
      }
      function diffWordsWithSpace(oldStr, newStr, options) {
        return wordDiff.diff(oldStr, newStr, options);
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/diff/line.js
  var require_line = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/diff/line.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.diffLines = diffLines;
      exports.diffTrimmedLines = diffTrimmedLines;
      exports.lineDiff = void 0;
      var _base = _interopRequireDefault(require_base());
      var _params = require_params();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {default: obj};
      }
      var lineDiff = new _base.default();
      exports.lineDiff = lineDiff;
      lineDiff.tokenize = function(value) {
        var retLines = [], linesAndNewlines = value.split(/(\n|\r\n)/);
        if (!linesAndNewlines[linesAndNewlines.length - 1]) {
          linesAndNewlines.pop();
        }
        for (var i = 0; i < linesAndNewlines.length; i++) {
          var line = linesAndNewlines[i];
          if (i % 2 && !this.options.newlineIsToken) {
            retLines[retLines.length - 1] += line;
          } else {
            if (this.options.ignoreWhitespace) {
              line = line.trim();
            }
            retLines.push(line);
          }
        }
        return retLines;
      };
      function diffLines(oldStr, newStr, callback) {
        return lineDiff.diff(oldStr, newStr, callback);
      }
      function diffTrimmedLines(oldStr, newStr, callback) {
        var options = (0, _params.generateOptions)(callback, {
          ignoreWhitespace: true
        });
        return lineDiff.diff(oldStr, newStr, options);
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/diff/sentence.js
  var require_sentence = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/diff/sentence.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.diffSentences = diffSentences;
      exports.sentenceDiff = void 0;
      var _base = _interopRequireDefault(require_base());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {default: obj};
      }
      var sentenceDiff = new _base.default();
      exports.sentenceDiff = sentenceDiff;
      sentenceDiff.tokenize = function(value) {
        return value.split(/(\S.+?[.!?])(?=\s+|$)/);
      };
      function diffSentences(oldStr, newStr, callback) {
        return sentenceDiff.diff(oldStr, newStr, callback);
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/diff/css.js
  var require_css = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/diff/css.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.diffCss = diffCss;
      exports.cssDiff = void 0;
      var _base = _interopRequireDefault(require_base());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {default: obj};
      }
      var cssDiff = new _base.default();
      exports.cssDiff = cssDiff;
      cssDiff.tokenize = function(value) {
        return value.split(/([{}:;,]|\s+)/);
      };
      function diffCss(oldStr, newStr, callback) {
        return cssDiff.diff(oldStr, newStr, callback);
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/diff/json.js
  var require_json2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/diff/json.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.diffJson = diffJson;
      exports.canonicalize = canonicalize;
      exports.jsonDiff = void 0;
      var _base = _interopRequireDefault(require_base());
      var _line = require_line();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {default: obj};
      }
      function _typeof(obj) {
        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof2(obj2) {
            return typeof obj2;
          };
        } else {
          _typeof = function _typeof2(obj2) {
            return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
          };
        }
        return _typeof(obj);
      }
      var objectPrototypeToString = Object.prototype.toString;
      var jsonDiff = new _base.default();
      exports.jsonDiff = jsonDiff;
      jsonDiff.useLongestToken = true;
      jsonDiff.tokenize = _line.lineDiff.tokenize;
      jsonDiff.castInput = function(value) {
        var _this$options = this.options, undefinedReplacement = _this$options.undefinedReplacement, _this$options$stringi = _this$options.stringifyReplacer, stringifyReplacer = _this$options$stringi === void 0 ? function(k, v) {
          return typeof v === "undefined" ? undefinedReplacement : v;
        } : _this$options$stringi;
        return typeof value === "string" ? value : JSON.stringify(canonicalize(value, null, null, stringifyReplacer), stringifyReplacer, "  ");
      };
      jsonDiff.equals = function(left, right) {
        return _base.default.prototype.equals.call(jsonDiff, left.replace(/,([\r\n])/g, "$1"), right.replace(/,([\r\n])/g, "$1"));
      };
      function diffJson(oldObj, newObj, options) {
        return jsonDiff.diff(oldObj, newObj, options);
      }
      function canonicalize(obj, stack, replacementStack, replacer, key) {
        stack = stack || [];
        replacementStack = replacementStack || [];
        if (replacer) {
          obj = replacer(key, obj);
        }
        var i;
        for (i = 0; i < stack.length; i += 1) {
          if (stack[i] === obj) {
            return replacementStack[i];
          }
        }
        var canonicalizedObj;
        if (objectPrototypeToString.call(obj) === "[object Array]") {
          stack.push(obj);
          canonicalizedObj = new Array(obj.length);
          replacementStack.push(canonicalizedObj);
          for (i = 0; i < obj.length; i += 1) {
            canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack, replacer, key);
          }
          stack.pop();
          replacementStack.pop();
          return canonicalizedObj;
        }
        if (obj && obj.toJSON) {
          obj = obj.toJSON();
        }
        if (_typeof(obj) === "object" && obj !== null) {
          stack.push(obj);
          canonicalizedObj = {};
          replacementStack.push(canonicalizedObj);
          var sortedKeys = [], _key;
          for (_key in obj) {
            if (obj.hasOwnProperty(_key)) {
              sortedKeys.push(_key);
            }
          }
          sortedKeys.sort();
          for (i = 0; i < sortedKeys.length; i += 1) {
            _key = sortedKeys[i];
            canonicalizedObj[_key] = canonicalize(obj[_key], stack, replacementStack, replacer, _key);
          }
          stack.pop();
          replacementStack.pop();
        } else {
          canonicalizedObj = obj;
        }
        return canonicalizedObj;
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/diff/array.js
  var require_array2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/diff/array.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.diffArrays = diffArrays;
      exports.arrayDiff = void 0;
      var _base = _interopRequireDefault(require_base());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {default: obj};
      }
      var arrayDiff = new _base.default();
      exports.arrayDiff = arrayDiff;
      arrayDiff.tokenize = function(value) {
        return value.slice();
      };
      arrayDiff.join = arrayDiff.removeEmpty = function(value) {
        return value;
      };
      function diffArrays(oldArr, newArr, callback) {
        return arrayDiff.diff(oldArr, newArr, callback);
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/patch/parse.js
  var require_parse6 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/patch/parse.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.parsePatch = parsePatch;
      function parsePatch(uniDiff) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var diffstr = uniDiff.split(/\r\n|[\n\v\f\r\x85]/), delimiters = uniDiff.match(/\r\n|[\n\v\f\r\x85]/g) || [], list = [], i = 0;
        function parseIndex() {
          var index = {};
          list.push(index);
          while (i < diffstr.length) {
            var line = diffstr[i];
            if (/^(\-\-\-|\+\+\+|@@)\s/.test(line)) {
              break;
            }
            var header = /^(?:Index:|diff(?: -r \w+)+)\s+(.+?)\s*$/.exec(line);
            if (header) {
              index.index = header[1];
            }
            i++;
          }
          parseFileHeader(index);
          parseFileHeader(index);
          index.hunks = [];
          while (i < diffstr.length) {
            var _line = diffstr[i];
            if (/^(Index:|diff|\-\-\-|\+\+\+)\s/.test(_line)) {
              break;
            } else if (/^@@/.test(_line)) {
              index.hunks.push(parseHunk());
            } else if (_line && options.strict) {
              throw new Error("Unknown line " + (i + 1) + " " + JSON.stringify(_line));
            } else {
              i++;
            }
          }
        }
        function parseFileHeader(index) {
          var fileHeader = /^(---|\+\+\+)\s+(.*)$/.exec(diffstr[i]);
          if (fileHeader) {
            var keyPrefix = fileHeader[1] === "---" ? "old" : "new";
            var data = fileHeader[2].split("	", 2);
            var fileName = data[0].replace(/\\\\/g, "\\");
            if (/^".*"$/.test(fileName)) {
              fileName = fileName.substr(1, fileName.length - 2);
            }
            index[keyPrefix + "FileName"] = fileName;
            index[keyPrefix + "Header"] = (data[1] || "").trim();
            i++;
          }
        }
        function parseHunk() {
          var chunkHeaderIndex = i, chunkHeaderLine = diffstr[i++], chunkHeader = chunkHeaderLine.split(/@@ -(\d+)(?:,(\d+))? \+(\d+)(?:,(\d+))? @@/);
          var hunk = {
            oldStart: +chunkHeader[1],
            oldLines: +chunkHeader[2] || 1,
            newStart: +chunkHeader[3],
            newLines: +chunkHeader[4] || 1,
            lines: [],
            linedelimiters: []
          };
          var addCount = 0, removeCount = 0;
          for (; i < diffstr.length; i++) {
            if (diffstr[i].indexOf("--- ") === 0 && i + 2 < diffstr.length && diffstr[i + 1].indexOf("+++ ") === 0 && diffstr[i + 2].indexOf("@@") === 0) {
              break;
            }
            var operation = diffstr[i].length == 0 && i != diffstr.length - 1 ? " " : diffstr[i][0];
            if (operation === "+" || operation === "-" || operation === " " || operation === "\\") {
              hunk.lines.push(diffstr[i]);
              hunk.linedelimiters.push(delimiters[i] || "\n");
              if (operation === "+") {
                addCount++;
              } else if (operation === "-") {
                removeCount++;
              } else if (operation === " ") {
                addCount++;
                removeCount++;
              }
            } else {
              break;
            }
          }
          if (!addCount && hunk.newLines === 1) {
            hunk.newLines = 0;
          }
          if (!removeCount && hunk.oldLines === 1) {
            hunk.oldLines = 0;
          }
          if (options.strict) {
            if (addCount !== hunk.newLines) {
              throw new Error("Added line count did not match for hunk at line " + (chunkHeaderIndex + 1));
            }
            if (removeCount !== hunk.oldLines) {
              throw new Error("Removed line count did not match for hunk at line " + (chunkHeaderIndex + 1));
            }
          }
          return hunk;
        }
        while (i < diffstr.length) {
          parseIndex();
        }
        return list;
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/util/distance-iterator.js
  var require_distance_iterator = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/util/distance-iterator.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = _default;
      function _default(start2, minLine, maxLine) {
        var wantForward = true, backwardExhausted = false, forwardExhausted = false, localOffset = 1;
        return function iterator() {
          if (wantForward && !forwardExhausted) {
            if (backwardExhausted) {
              localOffset++;
            } else {
              wantForward = false;
            }
            if (start2 + localOffset <= maxLine) {
              return localOffset;
            }
            forwardExhausted = true;
          }
          if (!backwardExhausted) {
            if (!forwardExhausted) {
              wantForward = true;
            }
            if (minLine <= start2 - localOffset) {
              return -localOffset++;
            }
            backwardExhausted = true;
            return iterator();
          }
        };
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/patch/apply.js
  var require_apply = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/patch/apply.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.applyPatch = applyPatch2;
      exports.applyPatches = applyPatches;
      var _parse = require_parse6();
      var _distanceIterator = _interopRequireDefault(require_distance_iterator());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {default: obj};
      }
      function applyPatch2(source, uniDiff) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        if (typeof uniDiff === "string") {
          uniDiff = (0, _parse.parsePatch)(uniDiff);
        }
        if (Array.isArray(uniDiff)) {
          if (uniDiff.length > 1) {
            throw new Error("applyPatch only works with a single input.");
          }
          uniDiff = uniDiff[0];
        }
        var lines = source.split(/\r\n|[\n\v\f\r\x85]/), delimiters = source.match(/\r\n|[\n\v\f\r\x85]/g) || [], hunks = uniDiff.hunks, compareLine = options.compareLine || function(lineNumber, line2, operation2, patchContent) {
          return line2 === patchContent;
        }, errorCount = 0, fuzzFactor = options.fuzzFactor || 0, minLine = 0, offset = 0, removeEOFNL, addEOFNL;
        function hunkFits(hunk2, toPos2) {
          for (var j2 = 0; j2 < hunk2.lines.length; j2++) {
            var line2 = hunk2.lines[j2], operation2 = line2.length > 0 ? line2[0] : " ", content2 = line2.length > 0 ? line2.substr(1) : line2;
            if (operation2 === " " || operation2 === "-") {
              if (!compareLine(toPos2 + 1, lines[toPos2], operation2, content2)) {
                errorCount++;
                if (errorCount > fuzzFactor) {
                  return false;
                }
              }
              toPos2++;
            }
          }
          return true;
        }
        for (var i = 0; i < hunks.length; i++) {
          var hunk = hunks[i], maxLine = lines.length - hunk.oldLines, localOffset = 0, toPos = offset + hunk.oldStart - 1;
          var iterator = (0, _distanceIterator.default)(toPos, minLine, maxLine);
          for (; localOffset !== void 0; localOffset = iterator()) {
            if (hunkFits(hunk, toPos + localOffset)) {
              hunk.offset = offset += localOffset;
              break;
            }
          }
          if (localOffset === void 0) {
            return false;
          }
          minLine = hunk.offset + hunk.oldStart + hunk.oldLines;
        }
        var diffOffset = 0;
        for (var _i = 0; _i < hunks.length; _i++) {
          var _hunk = hunks[_i], _toPos = _hunk.oldStart + _hunk.offset + diffOffset - 1;
          diffOffset += _hunk.newLines - _hunk.oldLines;
          if (_toPos < 0) {
            _toPos = 0;
          }
          for (var j = 0; j < _hunk.lines.length; j++) {
            var line = _hunk.lines[j], operation = line.length > 0 ? line[0] : " ", content = line.length > 0 ? line.substr(1) : line, delimiter = _hunk.linedelimiters[j];
            if (operation === " ") {
              _toPos++;
            } else if (operation === "-") {
              lines.splice(_toPos, 1);
              delimiters.splice(_toPos, 1);
            } else if (operation === "+") {
              lines.splice(_toPos, 0, content);
              delimiters.splice(_toPos, 0, delimiter);
              _toPos++;
            } else if (operation === "\\") {
              var previousOperation = _hunk.lines[j - 1] ? _hunk.lines[j - 1][0] : null;
              if (previousOperation === "+") {
                removeEOFNL = true;
              } else if (previousOperation === "-") {
                addEOFNL = true;
              }
            }
          }
        }
        if (removeEOFNL) {
          while (!lines[lines.length - 1]) {
            lines.pop();
            delimiters.pop();
          }
        } else if (addEOFNL) {
          lines.push("");
          delimiters.push("\n");
        }
        for (var _k = 0; _k < lines.length - 1; _k++) {
          lines[_k] = lines[_k] + delimiters[_k];
        }
        return lines.join("");
      }
      function applyPatches(uniDiff, options) {
        if (typeof uniDiff === "string") {
          uniDiff = (0, _parse.parsePatch)(uniDiff);
        }
        var currentIndex = 0;
        function processIndex() {
          var index = uniDiff[currentIndex++];
          if (!index) {
            return options.complete();
          }
          options.loadFile(index, function(err, data) {
            if (err) {
              return options.complete(err);
            }
            var updatedContent = applyPatch2(data, index, options);
            options.patched(index, updatedContent, function(err2) {
              if (err2) {
                return options.complete(err2);
              }
              processIndex();
            });
          });
        }
        processIndex();
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/patch/create.js
  var require_create3 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/patch/create.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.structuredPatch = structuredPatch2;
      exports.createTwoFilesPatch = createTwoFilesPatch;
      exports.createPatch = createPatch;
      var _line = require_line();
      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
      }
      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance");
      }
      function _iterableToArray(iter) {
        if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]")
          return Array.from(iter);
      }
      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr)) {
          for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
          }
          return arr2;
        }
      }
      function structuredPatch2(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {
        if (!options) {
          options = {};
        }
        if (typeof options.context === "undefined") {
          options.context = 4;
        }
        var diff = (0, _line.diffLines)(oldStr, newStr, options);
        diff.push({
          value: "",
          lines: []
        });
        function contextLines(lines) {
          return lines.map(function(entry) {
            return " " + entry;
          });
        }
        var hunks = [];
        var oldRangeStart = 0, newRangeStart = 0, curRange = [], oldLine = 1, newLine = 1;
        var _loop = function _loop2(i2) {
          var current = diff[i2], lines = current.lines || current.value.replace(/\n$/, "").split("\n");
          current.lines = lines;
          if (current.added || current.removed) {
            var _curRange;
            if (!oldRangeStart) {
              var prev = diff[i2 - 1];
              oldRangeStart = oldLine;
              newRangeStart = newLine;
              if (prev) {
                curRange = options.context > 0 ? contextLines(prev.lines.slice(-options.context)) : [];
                oldRangeStart -= curRange.length;
                newRangeStart -= curRange.length;
              }
            }
            (_curRange = curRange).push.apply(_curRange, _toConsumableArray(lines.map(function(entry) {
              return (current.added ? "+" : "-") + entry;
            })));
            if (current.added) {
              newLine += lines.length;
            } else {
              oldLine += lines.length;
            }
          } else {
            if (oldRangeStart) {
              if (lines.length <= options.context * 2 && i2 < diff.length - 2) {
                var _curRange2;
                (_curRange2 = curRange).push.apply(_curRange2, _toConsumableArray(contextLines(lines)));
              } else {
                var _curRange3;
                var contextSize = Math.min(lines.length, options.context);
                (_curRange3 = curRange).push.apply(_curRange3, _toConsumableArray(contextLines(lines.slice(0, contextSize))));
                var hunk = {
                  oldStart: oldRangeStart,
                  oldLines: oldLine - oldRangeStart + contextSize,
                  newStart: newRangeStart,
                  newLines: newLine - newRangeStart + contextSize,
                  lines: curRange
                };
                if (i2 >= diff.length - 2 && lines.length <= options.context) {
                  var oldEOFNewline = /\n$/.test(oldStr);
                  var newEOFNewline = /\n$/.test(newStr);
                  var noNlBeforeAdds = lines.length == 0 && curRange.length > hunk.oldLines;
                  if (!oldEOFNewline && noNlBeforeAdds) {
                    curRange.splice(hunk.oldLines, 0, "\\ No newline at end of file");
                  }
                  if (!oldEOFNewline && !noNlBeforeAdds || !newEOFNewline) {
                    curRange.push("\\ No newline at end of file");
                  }
                }
                hunks.push(hunk);
                oldRangeStart = 0;
                newRangeStart = 0;
                curRange = [];
              }
            }
            oldLine += lines.length;
            newLine += lines.length;
          }
        };
        for (var i = 0; i < diff.length; i++) {
          _loop(i);
        }
        return {
          oldFileName,
          newFileName,
          oldHeader,
          newHeader,
          hunks
        };
      }
      function createTwoFilesPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {
        var diff = structuredPatch2(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options);
        var ret = [];
        if (oldFileName == newFileName) {
          ret.push("Index: " + oldFileName);
        }
        ret.push("===================================================================");
        ret.push("--- " + diff.oldFileName + (typeof diff.oldHeader === "undefined" ? "" : "	" + diff.oldHeader));
        ret.push("+++ " + diff.newFileName + (typeof diff.newHeader === "undefined" ? "" : "	" + diff.newHeader));
        for (var i = 0; i < diff.hunks.length; i++) {
          var hunk = diff.hunks[i];
          ret.push("@@ -" + hunk.oldStart + "," + hunk.oldLines + " +" + hunk.newStart + "," + hunk.newLines + " @@");
          ret.push.apply(ret, hunk.lines);
        }
        return ret.join("\n") + "\n";
      }
      function createPatch(fileName, oldStr, newStr, oldHeader, newHeader, options) {
        return createTwoFilesPatch(fileName, fileName, oldStr, newStr, oldHeader, newHeader, options);
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/util/array.js
  var require_array3 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/util/array.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.arrayEqual = arrayEqual;
      exports.arrayStartsWith = arrayStartsWith;
      function arrayEqual(a, b) {
        if (a.length !== b.length) {
          return false;
        }
        return arrayStartsWith(a, b);
      }
      function arrayStartsWith(array, start2) {
        if (start2.length > array.length) {
          return false;
        }
        for (var i = 0; i < start2.length; i++) {
          if (start2[i] !== array[i]) {
            return false;
          }
        }
        return true;
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/patch/merge.js
  var require_merge3 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/patch/merge.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.calcLineCount = calcLineCount;
      exports.merge = merge2;
      var _create = require_create3();
      var _parse = require_parse6();
      var _array = require_array3();
      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
      }
      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance");
      }
      function _iterableToArray(iter) {
        if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]")
          return Array.from(iter);
      }
      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr)) {
          for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
          }
          return arr2;
        }
      }
      function calcLineCount(hunk) {
        var _calcOldNewLineCount = calcOldNewLineCount(hunk.lines), oldLines = _calcOldNewLineCount.oldLines, newLines = _calcOldNewLineCount.newLines;
        if (oldLines !== void 0) {
          hunk.oldLines = oldLines;
        } else {
          delete hunk.oldLines;
        }
        if (newLines !== void 0) {
          hunk.newLines = newLines;
        } else {
          delete hunk.newLines;
        }
      }
      function merge2(mine, theirs, base) {
        mine = loadPatch(mine, base);
        theirs = loadPatch(theirs, base);
        var ret = {};
        if (mine.index || theirs.index) {
          ret.index = mine.index || theirs.index;
        }
        if (mine.newFileName || theirs.newFileName) {
          if (!fileNameChanged(mine)) {
            ret.oldFileName = theirs.oldFileName || mine.oldFileName;
            ret.newFileName = theirs.newFileName || mine.newFileName;
            ret.oldHeader = theirs.oldHeader || mine.oldHeader;
            ret.newHeader = theirs.newHeader || mine.newHeader;
          } else if (!fileNameChanged(theirs)) {
            ret.oldFileName = mine.oldFileName;
            ret.newFileName = mine.newFileName;
            ret.oldHeader = mine.oldHeader;
            ret.newHeader = mine.newHeader;
          } else {
            ret.oldFileName = selectField(ret, mine.oldFileName, theirs.oldFileName);
            ret.newFileName = selectField(ret, mine.newFileName, theirs.newFileName);
            ret.oldHeader = selectField(ret, mine.oldHeader, theirs.oldHeader);
            ret.newHeader = selectField(ret, mine.newHeader, theirs.newHeader);
          }
        }
        ret.hunks = [];
        var mineIndex = 0, theirsIndex = 0, mineOffset = 0, theirsOffset = 0;
        while (mineIndex < mine.hunks.length || theirsIndex < theirs.hunks.length) {
          var mineCurrent = mine.hunks[mineIndex] || {
            oldStart: Infinity
          }, theirsCurrent = theirs.hunks[theirsIndex] || {
            oldStart: Infinity
          };
          if (hunkBefore(mineCurrent, theirsCurrent)) {
            ret.hunks.push(cloneHunk(mineCurrent, mineOffset));
            mineIndex++;
            theirsOffset += mineCurrent.newLines - mineCurrent.oldLines;
          } else if (hunkBefore(theirsCurrent, mineCurrent)) {
            ret.hunks.push(cloneHunk(theirsCurrent, theirsOffset));
            theirsIndex++;
            mineOffset += theirsCurrent.newLines - theirsCurrent.oldLines;
          } else {
            var mergedHunk = {
              oldStart: Math.min(mineCurrent.oldStart, theirsCurrent.oldStart),
              oldLines: 0,
              newStart: Math.min(mineCurrent.newStart + mineOffset, theirsCurrent.oldStart + theirsOffset),
              newLines: 0,
              lines: []
            };
            mergeLines(mergedHunk, mineCurrent.oldStart, mineCurrent.lines, theirsCurrent.oldStart, theirsCurrent.lines);
            theirsIndex++;
            mineIndex++;
            ret.hunks.push(mergedHunk);
          }
        }
        return ret;
      }
      function loadPatch(param, base) {
        if (typeof param === "string") {
          if (/^@@/m.test(param) || /^Index:/m.test(param)) {
            return (0, _parse.parsePatch)(param)[0];
          }
          if (!base) {
            throw new Error("Must provide a base reference or pass in a patch");
          }
          return (0, _create.structuredPatch)(void 0, void 0, base, param);
        }
        return param;
      }
      function fileNameChanged(patch4) {
        return patch4.newFileName && patch4.newFileName !== patch4.oldFileName;
      }
      function selectField(index, mine, theirs) {
        if (mine === theirs) {
          return mine;
        } else {
          index.conflict = true;
          return {
            mine,
            theirs
          };
        }
      }
      function hunkBefore(test, check) {
        return test.oldStart < check.oldStart && test.oldStart + test.oldLines < check.oldStart;
      }
      function cloneHunk(hunk, offset) {
        return {
          oldStart: hunk.oldStart,
          oldLines: hunk.oldLines,
          newStart: hunk.newStart + offset,
          newLines: hunk.newLines,
          lines: hunk.lines
        };
      }
      function mergeLines(hunk, mineOffset, mineLines, theirOffset, theirLines) {
        var mine = {
          offset: mineOffset,
          lines: mineLines,
          index: 0
        }, their = {
          offset: theirOffset,
          lines: theirLines,
          index: 0
        };
        insertLeading(hunk, mine, their);
        insertLeading(hunk, their, mine);
        while (mine.index < mine.lines.length && their.index < their.lines.length) {
          var mineCurrent = mine.lines[mine.index], theirCurrent = their.lines[their.index];
          if ((mineCurrent[0] === "-" || mineCurrent[0] === "+") && (theirCurrent[0] === "-" || theirCurrent[0] === "+")) {
            mutualChange(hunk, mine, their);
          } else if (mineCurrent[0] === "+" && theirCurrent[0] === " ") {
            var _hunk$lines;
            (_hunk$lines = hunk.lines).push.apply(_hunk$lines, _toConsumableArray(collectChange(mine)));
          } else if (theirCurrent[0] === "+" && mineCurrent[0] === " ") {
            var _hunk$lines2;
            (_hunk$lines2 = hunk.lines).push.apply(_hunk$lines2, _toConsumableArray(collectChange(their)));
          } else if (mineCurrent[0] === "-" && theirCurrent[0] === " ") {
            removal(hunk, mine, their);
          } else if (theirCurrent[0] === "-" && mineCurrent[0] === " ") {
            removal(hunk, their, mine, true);
          } else if (mineCurrent === theirCurrent) {
            hunk.lines.push(mineCurrent);
            mine.index++;
            their.index++;
          } else {
            conflict(hunk, collectChange(mine), collectChange(their));
          }
        }
        insertTrailing(hunk, mine);
        insertTrailing(hunk, their);
        calcLineCount(hunk);
      }
      function mutualChange(hunk, mine, their) {
        var myChanges = collectChange(mine), theirChanges = collectChange(their);
        if (allRemoves(myChanges) && allRemoves(theirChanges)) {
          if ((0, _array.arrayStartsWith)(myChanges, theirChanges) && skipRemoveSuperset(their, myChanges, myChanges.length - theirChanges.length)) {
            var _hunk$lines3;
            (_hunk$lines3 = hunk.lines).push.apply(_hunk$lines3, _toConsumableArray(myChanges));
            return;
          } else if ((0, _array.arrayStartsWith)(theirChanges, myChanges) && skipRemoveSuperset(mine, theirChanges, theirChanges.length - myChanges.length)) {
            var _hunk$lines4;
            (_hunk$lines4 = hunk.lines).push.apply(_hunk$lines4, _toConsumableArray(theirChanges));
            return;
          }
        } else if ((0, _array.arrayEqual)(myChanges, theirChanges)) {
          var _hunk$lines5;
          (_hunk$lines5 = hunk.lines).push.apply(_hunk$lines5, _toConsumableArray(myChanges));
          return;
        }
        conflict(hunk, myChanges, theirChanges);
      }
      function removal(hunk, mine, their, swap) {
        var myChanges = collectChange(mine), theirChanges = collectContext(their, myChanges);
        if (theirChanges.merged) {
          var _hunk$lines6;
          (_hunk$lines6 = hunk.lines).push.apply(_hunk$lines6, _toConsumableArray(theirChanges.merged));
        } else {
          conflict(hunk, swap ? theirChanges : myChanges, swap ? myChanges : theirChanges);
        }
      }
      function conflict(hunk, mine, their) {
        hunk.conflict = true;
        hunk.lines.push({
          conflict: true,
          mine,
          theirs: their
        });
      }
      function insertLeading(hunk, insert, their) {
        while (insert.offset < their.offset && insert.index < insert.lines.length) {
          var line = insert.lines[insert.index++];
          hunk.lines.push(line);
          insert.offset++;
        }
      }
      function insertTrailing(hunk, insert) {
        while (insert.index < insert.lines.length) {
          var line = insert.lines[insert.index++];
          hunk.lines.push(line);
        }
      }
      function collectChange(state) {
        var ret = [], operation = state.lines[state.index][0];
        while (state.index < state.lines.length) {
          var line = state.lines[state.index];
          if (operation === "-" && line[0] === "+") {
            operation = "+";
          }
          if (operation === line[0]) {
            ret.push(line);
            state.index++;
          } else {
            break;
          }
        }
        return ret;
      }
      function collectContext(state, matchChanges) {
        var changes = [], merged = [], matchIndex = 0, contextChanges = false, conflicted = false;
        while (matchIndex < matchChanges.length && state.index < state.lines.length) {
          var change = state.lines[state.index], match2 = matchChanges[matchIndex];
          if (match2[0] === "+") {
            break;
          }
          contextChanges = contextChanges || change[0] !== " ";
          merged.push(match2);
          matchIndex++;
          if (change[0] === "+") {
            conflicted = true;
            while (change[0] === "+") {
              changes.push(change);
              change = state.lines[++state.index];
            }
          }
          if (match2.substr(1) === change.substr(1)) {
            changes.push(change);
            state.index++;
          } else {
            conflicted = true;
          }
        }
        if ((matchChanges[matchIndex] || "")[0] === "+" && contextChanges) {
          conflicted = true;
        }
        if (conflicted) {
          return changes;
        }
        while (matchIndex < matchChanges.length) {
          merged.push(matchChanges[matchIndex++]);
        }
        return {
          merged,
          changes
        };
      }
      function allRemoves(changes) {
        return changes.reduce(function(prev, change) {
          return prev && change[0] === "-";
        }, true);
      }
      function skipRemoveSuperset(state, removeChanges, delta) {
        for (var i = 0; i < delta; i++) {
          var changeContent = removeChanges[removeChanges.length - delta + i].substr(1);
          if (state.lines[state.index + i] !== " " + changeContent) {
            return false;
          }
        }
        state.index += delta;
        return true;
      }
      function calcOldNewLineCount(lines) {
        var oldLines = 0;
        var newLines = 0;
        lines.forEach(function(line) {
          if (typeof line !== "string") {
            var myCount = calcOldNewLineCount(line.mine);
            var theirCount = calcOldNewLineCount(line.theirs);
            if (oldLines !== void 0) {
              if (myCount.oldLines === theirCount.oldLines) {
                oldLines += myCount.oldLines;
              } else {
                oldLines = void 0;
              }
            }
            if (newLines !== void 0) {
              if (myCount.newLines === theirCount.newLines) {
                newLines += myCount.newLines;
              } else {
                newLines = void 0;
              }
            }
          } else {
            if (newLines !== void 0 && (line[0] === "+" || line[0] === " ")) {
              newLines++;
            }
            if (oldLines !== void 0 && (line[0] === "-" || line[0] === " ")) {
              oldLines++;
            }
          }
        });
        return {
          oldLines,
          newLines
        };
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/convert/dmp.js
  var require_dmp = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/convert/dmp.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.convertChangesToDMP = convertChangesToDMP;
      function convertChangesToDMP(changes) {
        var ret = [], change, operation;
        for (var i = 0; i < changes.length; i++) {
          change = changes[i];
          if (change.added) {
            operation = 1;
          } else if (change.removed) {
            operation = -1;
          } else {
            operation = 0;
          }
          ret.push([operation, change.value]);
        }
        return ret;
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/convert/xml.js
  var require_xml = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/convert/xml.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.convertChangesToXML = convertChangesToXML;
      function convertChangesToXML(changes) {
        var ret = [];
        for (var i = 0; i < changes.length; i++) {
          var change = changes[i];
          if (change.added) {
            ret.push("<ins>");
          } else if (change.removed) {
            ret.push("<del>");
          }
          ret.push(escapeHTML(change.value));
          if (change.added) {
            ret.push("</ins>");
          } else if (change.removed) {
            ret.push("</del>");
          }
        }
        return ret.join("");
      }
      function escapeHTML(s) {
        var n = s;
        n = n.replace(/&/g, "&amp;");
        n = n.replace(/</g, "&lt;");
        n = n.replace(/>/g, "&gt;");
        n = n.replace(/"/g, "&quot;");
        return n;
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/index.js
  var require_lib = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/diff-npm-4.0.1-4d86a500e8-d426381c08.zip/node_modules/diff/lib/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "Diff", {
        enumerable: true,
        get: function get3() {
          return _base.default;
        }
      });
      Object.defineProperty(exports, "diffChars", {
        enumerable: true,
        get: function get3() {
          return _character.diffChars;
        }
      });
      Object.defineProperty(exports, "diffWords", {
        enumerable: true,
        get: function get3() {
          return _word.diffWords;
        }
      });
      Object.defineProperty(exports, "diffWordsWithSpace", {
        enumerable: true,
        get: function get3() {
          return _word.diffWordsWithSpace;
        }
      });
      Object.defineProperty(exports, "diffLines", {
        enumerable: true,
        get: function get3() {
          return _line.diffLines;
        }
      });
      Object.defineProperty(exports, "diffTrimmedLines", {
        enumerable: true,
        get: function get3() {
          return _line.diffTrimmedLines;
        }
      });
      Object.defineProperty(exports, "diffSentences", {
        enumerable: true,
        get: function get3() {
          return _sentence.diffSentences;
        }
      });
      Object.defineProperty(exports, "diffCss", {
        enumerable: true,
        get: function get3() {
          return _css.diffCss;
        }
      });
      Object.defineProperty(exports, "diffJson", {
        enumerable: true,
        get: function get3() {
          return _json.diffJson;
        }
      });
      Object.defineProperty(exports, "canonicalize", {
        enumerable: true,
        get: function get3() {
          return _json.canonicalize;
        }
      });
      Object.defineProperty(exports, "diffArrays", {
        enumerable: true,
        get: function get3() {
          return _array.diffArrays;
        }
      });
      Object.defineProperty(exports, "applyPatch", {
        enumerable: true,
        get: function get3() {
          return _apply.applyPatch;
        }
      });
      Object.defineProperty(exports, "applyPatches", {
        enumerable: true,
        get: function get3() {
          return _apply.applyPatches;
        }
      });
      Object.defineProperty(exports, "parsePatch", {
        enumerable: true,
        get: function get3() {
          return _parse.parsePatch;
        }
      });
      Object.defineProperty(exports, "merge", {
        enumerable: true,
        get: function get3() {
          return _merge.merge;
        }
      });
      Object.defineProperty(exports, "structuredPatch", {
        enumerable: true,
        get: function get3() {
          return _create.structuredPatch;
        }
      });
      Object.defineProperty(exports, "createTwoFilesPatch", {
        enumerable: true,
        get: function get3() {
          return _create.createTwoFilesPatch;
        }
      });
      Object.defineProperty(exports, "createPatch", {
        enumerable: true,
        get: function get3() {
          return _create.createPatch;
        }
      });
      Object.defineProperty(exports, "convertChangesToDMP", {
        enumerable: true,
        get: function get3() {
          return _dmp.convertChangesToDMP;
        }
      });
      Object.defineProperty(exports, "convertChangesToXML", {
        enumerable: true,
        get: function get3() {
          return _xml.convertChangesToXML;
        }
      });
      var _base = _interopRequireDefault(require_base());
      var _character = require_character();
      var _word = require_word();
      var _line = require_line();
      var _sentence = require_sentence();
      var _css = require_css();
      var _json = require_json2();
      var _array = require_array2();
      var _apply = require_apply();
      var _parse = require_parse6();
      var _merge = require_merge3();
      var _create = require_create3();
      var _dmp = require_dmp();
      var _xml = require_xml();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {default: obj};
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_isKey.js
  var require_isKey = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_isKey.js"(exports, module) {
      var isArray2 = require_isArray();
      var isSymbol = require_isSymbol();
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
      var reIsPlainProp = /^\w*$/;
      function isKey(value, object) {
        if (isArray2(value)) {
          return false;
        }
        var type = typeof value;
        if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
          return true;
        }
        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
      }
      module.exports = isKey;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/isObject.js
  var require_isObject = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/isObject.js"(exports, module) {
      function isObject2(value) {
        var type = typeof value;
        return value != null && (type == "object" || type == "function");
      }
      module.exports = isObject2;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/isFunction.js
  var require_isFunction = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/isFunction.js"(exports, module) {
      var baseGetTag = require_baseGetTag();
      var isObject2 = require_isObject();
      var asyncTag = "[object AsyncFunction]";
      var funcTag = "[object Function]";
      var genTag = "[object GeneratorFunction]";
      var proxyTag = "[object Proxy]";
      function isFunction(value) {
        if (!isObject2(value)) {
          return false;
        }
        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }
      module.exports = isFunction;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_coreJsData.js
  var require_coreJsData = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_coreJsData.js"(exports, module) {
      var root = require_root();
      var coreJsData = root["__core-js_shared__"];
      module.exports = coreJsData;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_isMasked.js
  var require_isMasked = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_isMasked.js"(exports, module) {
      var coreJsData = require_coreJsData();
      var maskSrcKey = function() {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }();
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }
      module.exports = isMasked;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_toSource.js
  var require_toSource = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_toSource.js"(exports, module) {
      var funcProto = Function.prototype;
      var funcToString = funcProto.toString;
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {
          }
          try {
            return func + "";
          } catch (e) {
          }
        }
        return "";
      }
      module.exports = toSource;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseIsNative.js
  var require_baseIsNative = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseIsNative.js"(exports, module) {
      var isFunction = require_isFunction();
      var isMasked = require_isMasked();
      var isObject2 = require_isObject();
      var toSource = require_toSource();
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var funcProto = Function.prototype;
      var objectProto = Object.prototype;
      var funcToString = funcProto.toString;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
      function baseIsNative(value) {
        if (!isObject2(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }
      module.exports = baseIsNative;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_getValue.js
  var require_getValue = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_getValue.js"(exports, module) {
      function getValue(object, key) {
        return object == null ? void 0 : object[key];
      }
      module.exports = getValue;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_getNative.js
  var require_getNative = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_getNative.js"(exports, module) {
      var baseIsNative = require_baseIsNative();
      var getValue = require_getValue();
      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : void 0;
      }
      module.exports = getNative;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_nativeCreate.js
  var require_nativeCreate = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_nativeCreate.js"(exports, module) {
      var getNative = require_getNative();
      var nativeCreate = getNative(Object, "create");
      module.exports = nativeCreate;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_hashClear.js
  var require_hashClear = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_hashClear.js"(exports, module) {
      var nativeCreate = require_nativeCreate();
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }
      module.exports = hashClear;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_hashDelete.js
  var require_hashDelete = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_hashDelete.js"(exports, module) {
      function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }
      module.exports = hashDelete;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_hashGet.js
  var require_hashGet = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_hashGet.js"(exports, module) {
      var nativeCreate = require_nativeCreate();
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? void 0 : result;
        }
        return hasOwnProperty.call(data, key) ? data[key] : void 0;
      }
      module.exports = hashGet;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_hashHas.js
  var require_hashHas = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_hashHas.js"(exports, module) {
      var nativeCreate = require_nativeCreate();
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
      }
      module.exports = hashHas;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_hashSet.js
  var require_hashSet = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_hashSet.js"(exports, module) {
      var nativeCreate = require_nativeCreate();
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
        return this;
      }
      module.exports = hashSet;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_Hash.js
  var require_Hash = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_Hash.js"(exports, module) {
      var hashClear = require_hashClear();
      var hashDelete = require_hashDelete();
      var hashGet = require_hashGet();
      var hashHas = require_hashHas();
      var hashSet = require_hashSet();
      function Hash(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype["delete"] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      module.exports = Hash;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_listCacheClear.js
  var require_listCacheClear = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_listCacheClear.js"(exports, module) {
      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }
      module.exports = listCacheClear;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/eq.js
  var require_eq2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/eq.js"(exports, module) {
      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }
      module.exports = eq;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_assocIndexOf.js
  var require_assocIndexOf = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_assocIndexOf.js"(exports, module) {
      var eq = require_eq2();
      function assocIndexOf(array, key) {
        var length = array.length;
        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
      module.exports = assocIndexOf;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_listCacheDelete.js
  var require_listCacheDelete = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_listCacheDelete.js"(exports, module) {
      var assocIndexOf = require_assocIndexOf();
      var arrayProto = Array.prototype;
      var splice = arrayProto.splice;
      function listCacheDelete(key) {
        var data = this.__data__, index = assocIndexOf(data, key);
        if (index < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }
        --this.size;
        return true;
      }
      module.exports = listCacheDelete;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_listCacheGet.js
  var require_listCacheGet = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_listCacheGet.js"(exports, module) {
      var assocIndexOf = require_assocIndexOf();
      function listCacheGet(key) {
        var data = this.__data__, index = assocIndexOf(data, key);
        return index < 0 ? void 0 : data[index][1];
      }
      module.exports = listCacheGet;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_listCacheHas.js
  var require_listCacheHas = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_listCacheHas.js"(exports, module) {
      var assocIndexOf = require_assocIndexOf();
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }
      module.exports = listCacheHas;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_listCacheSet.js
  var require_listCacheSet = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_listCacheSet.js"(exports, module) {
      var assocIndexOf = require_assocIndexOf();
      function listCacheSet(key, value) {
        var data = this.__data__, index = assocIndexOf(data, key);
        if (index < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index][1] = value;
        }
        return this;
      }
      module.exports = listCacheSet;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_ListCache.js
  var require_ListCache = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_ListCache.js"(exports, module) {
      var listCacheClear = require_listCacheClear();
      var listCacheDelete = require_listCacheDelete();
      var listCacheGet = require_listCacheGet();
      var listCacheHas = require_listCacheHas();
      var listCacheSet = require_listCacheSet();
      function ListCache(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype["delete"] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      module.exports = ListCache;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_Map.js
  var require_Map = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_Map.js"(exports, module) {
      var getNative = require_getNative();
      var root = require_root();
      var Map2 = getNative(root, "Map");
      module.exports = Map2;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_mapCacheClear.js
  var require_mapCacheClear = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_mapCacheClear.js"(exports, module) {
      var Hash = require_Hash();
      var ListCache = require_ListCache();
      var Map2 = require_Map();
      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          "hash": new Hash(),
          "map": new (Map2 || ListCache)(),
          "string": new Hash()
        };
      }
      module.exports = mapCacheClear;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_isKeyable.js
  var require_isKeyable = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_isKeyable.js"(exports, module) {
      function isKeyable(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      module.exports = isKeyable;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_getMapData.js
  var require_getMapData = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_getMapData.js"(exports, module) {
      var isKeyable = require_isKeyable();
      function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      module.exports = getMapData;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_mapCacheDelete.js
  var require_mapCacheDelete = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_mapCacheDelete.js"(exports, module) {
      var getMapData = require_getMapData();
      function mapCacheDelete(key) {
        var result = getMapData(this, key)["delete"](key);
        this.size -= result ? 1 : 0;
        return result;
      }
      module.exports = mapCacheDelete;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_mapCacheGet.js
  var require_mapCacheGet = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_mapCacheGet.js"(exports, module) {
      var getMapData = require_getMapData();
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }
      module.exports = mapCacheGet;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_mapCacheHas.js
  var require_mapCacheHas = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_mapCacheHas.js"(exports, module) {
      var getMapData = require_getMapData();
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }
      module.exports = mapCacheHas;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_mapCacheSet.js
  var require_mapCacheSet = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_mapCacheSet.js"(exports, module) {
      var getMapData = require_getMapData();
      function mapCacheSet(key, value) {
        var data = getMapData(this, key), size = data.size;
        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }
      module.exports = mapCacheSet;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_MapCache.js
  var require_MapCache = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_MapCache.js"(exports, module) {
      var mapCacheClear = require_mapCacheClear();
      var mapCacheDelete = require_mapCacheDelete();
      var mapCacheGet = require_mapCacheGet();
      var mapCacheHas = require_mapCacheHas();
      var mapCacheSet = require_mapCacheSet();
      function MapCache(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype["delete"] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      module.exports = MapCache;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/memoize.js
  var require_memoize = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/memoize.js"(exports, module) {
      var MapCache = require_MapCache();
      var FUNC_ERROR_TEXT = "Expected a function";
      function memoize(func, resolver) {
        if (typeof func != "function" || resolver != null && typeof resolver != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        var memoized = function() {
          var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache2 = memoized.cache;
          if (cache2.has(key)) {
            return cache2.get(key);
          }
          var result = func.apply(this, args);
          memoized.cache = cache2.set(key, result) || cache2;
          return result;
        };
        memoized.cache = new (memoize.Cache || MapCache)();
        return memoized;
      }
      memoize.Cache = MapCache;
      module.exports = memoize;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_memoizeCapped.js
  var require_memoizeCapped = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_memoizeCapped.js"(exports, module) {
      var memoize = require_memoize();
      var MAX_MEMOIZE_SIZE = 500;
      function memoizeCapped(func) {
        var result = memoize(func, function(key) {
          if (cache2.size === MAX_MEMOIZE_SIZE) {
            cache2.clear();
          }
          return key;
        });
        var cache2 = result.cache;
        return result;
      }
      module.exports = memoizeCapped;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_stringToPath.js
  var require_stringToPath = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_stringToPath.js"(exports, module) {
      var memoizeCapped = require_memoizeCapped();
      var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reEscapeChar = /\\(\\)?/g;
      var stringToPath = memoizeCapped(function(string) {
        var result = [];
        if (string.charCodeAt(0) === 46) {
          result.push("");
        }
        string.replace(rePropName, function(match2, number, quote, subString) {
          result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match2);
        });
        return result;
      });
      module.exports = stringToPath;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_castPath.js
  var require_castPath = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_castPath.js"(exports, module) {
      var isArray2 = require_isArray();
      var isKey = require_isKey();
      var stringToPath = require_stringToPath();
      var toString = require_toString();
      function castPath(value, object) {
        if (isArray2(value)) {
          return value;
        }
        return isKey(value, object) ? [value] : stringToPath(toString(value));
      }
      module.exports = castPath;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_toKey.js
  var require_toKey = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_toKey.js"(exports, module) {
      var isSymbol = require_isSymbol();
      var INFINITY = 1 / 0;
      function toKey(value) {
        if (typeof value == "string" || isSymbol(value)) {
          return value;
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY ? "-0" : result;
      }
      module.exports = toKey;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseGet.js
  var require_baseGet = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseGet.js"(exports, module) {
      var castPath = require_castPath();
      var toKey = require_toKey();
      function baseGet(object, path3) {
        path3 = castPath(path3, object);
        var index = 0, length = path3.length;
        while (object != null && index < length) {
          object = object[toKey(path3[index++])];
        }
        return index && index == length ? object : void 0;
      }
      module.exports = baseGet;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_defineProperty.js
  var require_defineProperty = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_defineProperty.js"(exports, module) {
      var getNative = require_getNative();
      var defineProperty = function() {
        try {
          var func = getNative(Object, "defineProperty");
          func({}, "", {});
          return func;
        } catch (e) {
        }
      }();
      module.exports = defineProperty;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseAssignValue.js
  var require_baseAssignValue = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseAssignValue.js"(exports, module) {
      var defineProperty = require_defineProperty();
      function baseAssignValue(object, key, value) {
        if (key == "__proto__" && defineProperty) {
          defineProperty(object, key, {
            "configurable": true,
            "enumerable": true,
            "value": value,
            "writable": true
          });
        } else {
          object[key] = value;
        }
      }
      module.exports = baseAssignValue;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_assignValue.js
  var require_assignValue = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_assignValue.js"(exports, module) {
      var baseAssignValue = require_baseAssignValue();
      var eq = require_eq2();
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      function assignValue(object, key, value) {
        var objValue = object[key];
        if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }
      module.exports = assignValue;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_isIndex.js
  var require_isIndex = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_isIndex.js"(exports, module) {
      var MAX_SAFE_INTEGER = 9007199254740991;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      function isIndex(value, length) {
        var type = typeof value;
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
      }
      module.exports = isIndex;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseSet.js
  var require_baseSet = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseSet.js"(exports, module) {
      var assignValue = require_assignValue();
      var castPath = require_castPath();
      var isIndex = require_isIndex();
      var isObject2 = require_isObject();
      var toKey = require_toKey();
      function baseSet(object, path3, value, customizer) {
        if (!isObject2(object)) {
          return object;
        }
        path3 = castPath(path3, object);
        var index = -1, length = path3.length, lastIndex = length - 1, nested = object;
        while (nested != null && ++index < length) {
          var key = toKey(path3[index]), newValue = value;
          if (key === "__proto__" || key === "constructor" || key === "prototype") {
            return object;
          }
          if (index != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : void 0;
            if (newValue === void 0) {
              newValue = isObject2(objValue) ? objValue : isIndex(path3[index + 1]) ? [] : {};
            }
          }
          assignValue(nested, key, newValue);
          nested = nested[key];
        }
        return object;
      }
      module.exports = baseSet;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_basePickBy.js
  var require_basePickBy = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_basePickBy.js"(exports, module) {
      var baseGet = require_baseGet();
      var baseSet = require_baseSet();
      var castPath = require_castPath();
      function basePickBy(object, paths, predicate) {
        var index = -1, length = paths.length, result = {};
        while (++index < length) {
          var path3 = paths[index], value = baseGet(object, path3);
          if (predicate(value, path3)) {
            baseSet(result, castPath(path3, object), value);
          }
        }
        return result;
      }
      module.exports = basePickBy;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseHasIn.js
  var require_baseHasIn = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseHasIn.js"(exports, module) {
      function baseHasIn(object, key) {
        return object != null && key in Object(object);
      }
      module.exports = baseHasIn;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseIsArguments.js
  var require_baseIsArguments = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseIsArguments.js"(exports, module) {
      var baseGetTag = require_baseGetTag();
      var isObjectLike = require_isObjectLike();
      var argsTag = "[object Arguments]";
      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
      }
      module.exports = baseIsArguments;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/isArguments.js
  var require_isArguments = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/isArguments.js"(exports, module) {
      var baseIsArguments = require_baseIsArguments();
      var isObjectLike = require_isObjectLike();
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var propertyIsEnumerable = objectProto.propertyIsEnumerable;
      var isArguments = baseIsArguments(function() {
        return arguments;
      }()) ? baseIsArguments : function(value) {
        return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
      };
      module.exports = isArguments;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/isLength.js
  var require_isLength = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/isLength.js"(exports, module) {
      var MAX_SAFE_INTEGER = 9007199254740991;
      function isLength(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }
      module.exports = isLength;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_hasPath.js
  var require_hasPath = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_hasPath.js"(exports, module) {
      var castPath = require_castPath();
      var isArguments = require_isArguments();
      var isArray2 = require_isArray();
      var isIndex = require_isIndex();
      var isLength = require_isLength();
      var toKey = require_toKey();
      function hasPath(object, path3, hasFunc) {
        path3 = castPath(path3, object);
        var index = -1, length = path3.length, result = false;
        while (++index < length) {
          var key = toKey(path3[index]);
          if (!(result = object != null && hasFunc(object, key))) {
            break;
          }
          object = object[key];
        }
        if (result || ++index != length) {
          return result;
        }
        length = object == null ? 0 : object.length;
        return !!length && isLength(length) && isIndex(key, length) && (isArray2(object) || isArguments(object));
      }
      module.exports = hasPath;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/hasIn.js
  var require_hasIn = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/hasIn.js"(exports, module) {
      var baseHasIn = require_baseHasIn();
      var hasPath = require_hasPath();
      function hasIn(object, path3) {
        return object != null && hasPath(object, path3, baseHasIn);
      }
      module.exports = hasIn;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_basePick.js
  var require_basePick = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_basePick.js"(exports, module) {
      var basePickBy = require_basePickBy();
      var hasIn = require_hasIn();
      function basePick(object, paths) {
        return basePickBy(object, paths, function(value, path3) {
          return hasIn(object, path3);
        });
      }
      module.exports = basePick;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_arrayPush.js
  var require_arrayPush = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_arrayPush.js"(exports, module) {
      function arrayPush(array, values) {
        var index = -1, length = values.length, offset = array.length;
        while (++index < length) {
          array[offset + index] = values[index];
        }
        return array;
      }
      module.exports = arrayPush;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_isFlattenable.js
  var require_isFlattenable = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_isFlattenable.js"(exports, module) {
      var Symbol2 = require_Symbol();
      var isArguments = require_isArguments();
      var isArray2 = require_isArray();
      var spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : void 0;
      function isFlattenable(value) {
        return isArray2(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
      }
      module.exports = isFlattenable;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseFlatten.js
  var require_baseFlatten = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseFlatten.js"(exports, module) {
      var arrayPush = require_arrayPush();
      var isFlattenable = require_isFlattenable();
      function baseFlatten(array, depth, predicate, isStrict, result) {
        var index = -1, length = array.length;
        predicate || (predicate = isFlattenable);
        result || (result = []);
        while (++index < length) {
          var value = array[index];
          if (depth > 0 && predicate(value)) {
            if (depth > 1) {
              baseFlatten(value, depth - 1, predicate, isStrict, result);
            } else {
              arrayPush(result, value);
            }
          } else if (!isStrict) {
            result[result.length] = value;
          }
        }
        return result;
      }
      module.exports = baseFlatten;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/flatten.js
  var require_flatten = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/flatten.js"(exports, module) {
      var baseFlatten = require_baseFlatten();
      function flatten(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, 1) : [];
      }
      module.exports = flatten;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_apply.js
  var require_apply2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_apply.js"(exports, module) {
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      module.exports = apply;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_overRest.js
  var require_overRest = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_overRest.js"(exports, module) {
      var apply = require_apply2();
      var nativeMax = Math.max;
      function overRest(func, start2, transform) {
        start2 = nativeMax(start2 === void 0 ? func.length - 1 : start2, 0);
        return function() {
          var args = arguments, index = -1, length = nativeMax(args.length - start2, 0), array = Array(length);
          while (++index < length) {
            array[index] = args[start2 + index];
          }
          index = -1;
          var otherArgs = Array(start2 + 1);
          while (++index < start2) {
            otherArgs[index] = args[index];
          }
          otherArgs[start2] = transform(array);
          return apply(func, this, otherArgs);
        };
      }
      module.exports = overRest;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/constant.js
  var require_constant = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/constant.js"(exports, module) {
      function constant(value) {
        return function() {
          return value;
        };
      }
      module.exports = constant;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/identity.js
  var require_identity = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/identity.js"(exports, module) {
      function identity(value) {
        return value;
      }
      module.exports = identity;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseSetToString.js
  var require_baseSetToString = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseSetToString.js"(exports, module) {
      var constant = require_constant();
      var defineProperty = require_defineProperty();
      var identity = require_identity();
      var baseSetToString = !defineProperty ? identity : function(func, string) {
        return defineProperty(func, "toString", {
          "configurable": true,
          "enumerable": false,
          "value": constant(string),
          "writable": true
        });
      };
      module.exports = baseSetToString;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_shortOut.js
  var require_shortOut = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_shortOut.js"(exports, module) {
      var HOT_COUNT = 800;
      var HOT_SPAN = 16;
      var nativeNow = Date.now;
      function shortOut(func) {
        var count = 0, lastCalled = 0;
        return function() {
          var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
          lastCalled = stamp;
          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }
          return func.apply(void 0, arguments);
        };
      }
      module.exports = shortOut;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_setToString.js
  var require_setToString = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_setToString.js"(exports, module) {
      var baseSetToString = require_baseSetToString();
      var shortOut = require_shortOut();
      var setToString = shortOut(baseSetToString);
      module.exports = setToString;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_flatRest.js
  var require_flatRest = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_flatRest.js"(exports, module) {
      var flatten = require_flatten();
      var overRest = require_overRest();
      var setToString = require_setToString();
      function flatRest(func) {
        return setToString(overRest(func, void 0, flatten), func + "");
      }
      module.exports = flatRest;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/pick.js
  var require_pick = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/pick.js"(exports, module) {
      var basePick = require_basePick();
      var flatRest = require_flatRest();
      var pick2 = flatRest(function(object, paths) {
        return object == null ? {} : basePick(object, paths);
      });
      module.exports = pick2;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/nanoclone-npm-0.2.1-972ee958a0-96b2954e22.zip/node_modules/nanoclone/index.js
  var require_nanoclone = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/nanoclone-npm-0.2.1-972ee958a0-96b2954e22.zip/node_modules/nanoclone/index.js"(exports, module) {
      "use strict";
      var map;
      try {
        map = Map;
      } catch (_) {
      }
      var set;
      try {
        set = Set;
      } catch (_) {
      }
      function baseClone(src, circulars, clones) {
        if (!src || typeof src !== "object" || typeof src === "function") {
          return src;
        }
        if (src.nodeType && "cloneNode" in src) {
          return src.cloneNode(true);
        }
        if (src instanceof Date) {
          return new Date(src.getTime());
        }
        if (src instanceof RegExp) {
          return new RegExp(src);
        }
        if (Array.isArray(src)) {
          return src.map(clone2);
        }
        if (map && src instanceof map) {
          return new Map(Array.from(src.entries()));
        }
        if (set && src instanceof set) {
          return new Set(Array.from(src.values()));
        }
        if (src instanceof Object) {
          circulars.push(src);
          var obj = Object.create(src);
          clones.push(obj);
          for (var key in src) {
            var idx = circulars.findIndex(function(i) {
              return i === src[key];
            });
            obj[key] = idx > -1 ? clones[idx] : baseClone(src[key], circulars, clones);
          }
          return obj;
        }
        return src;
      }
      function clone2(src) {
        return baseClone(src, [], []);
      }
      module.exports = clone2;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/util/printValue.js
  var require_printValue = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/util/printValue.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = printValue;
      var toString = Object.prototype.toString;
      var errorToString = Error.prototype.toString;
      var regExpToString = RegExp.prototype.toString;
      var symbolToString = typeof Symbol !== "undefined" ? Symbol.prototype.toString : () => "";
      var SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/;
      function printNumber(val) {
        if (val != +val)
          return "NaN";
        const isNegativeZero = val === 0 && 1 / val < 0;
        return isNegativeZero ? "-0" : "" + val;
      }
      function printSimpleValue(val, quoteStrings = false) {
        if (val == null || val === true || val === false)
          return "" + val;
        const typeOf = typeof val;
        if (typeOf === "number")
          return printNumber(val);
        if (typeOf === "string")
          return quoteStrings ? `"${val}"` : val;
        if (typeOf === "function")
          return "[Function " + (val.name || "anonymous") + "]";
        if (typeOf === "symbol")
          return symbolToString.call(val).replace(SYMBOL_REGEXP, "Symbol($1)");
        const tag = toString.call(val).slice(8, -1);
        if (tag === "Date")
          return isNaN(val.getTime()) ? "" + val : val.toISOString(val);
        if (tag === "Error" || val instanceof Error)
          return "[" + errorToString.call(val) + "]";
        if (tag === "RegExp")
          return regExpToString.call(val);
        return null;
      }
      function printValue(value, quoteStrings) {
        let result = printSimpleValue(value, quoteStrings);
        if (result !== null)
          return result;
        return JSON.stringify(value, function(key, value2) {
          let result2 = printSimpleValue(this[key], quoteStrings);
          if (result2 !== null)
            return result2;
          return value2;
        }, 2);
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/locale.js
  var require_locale = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/locale.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.array = exports.object = exports.boolean = exports.date = exports.number = exports.string = exports.mixed = void 0;
      var _printValue = _interopRequireDefault(require_printValue());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {default: obj};
      }
      var mixed = {
        default: "${path} is invalid",
        required: "${path} is a required field",
        oneOf: "${path} must be one of the following values: ${values}",
        notOneOf: "${path} must not be one of the following values: ${values}",
        notType: ({
          path: path3,
          type,
          value,
          originalValue
        }) => {
          let isCast = originalValue != null && originalValue !== value;
          let msg = `${path3} must be a \`${type}\` type, but the final value was: \`${(0, _printValue.default)(value, true)}\`` + (isCast ? ` (cast from the value \`${(0, _printValue.default)(originalValue, true)}\`).` : ".");
          if (value === null) {
            msg += `
 If "null" is intended as an empty value be sure to mark the schema as \`.nullable()\``;
          }
          return msg;
        },
        defined: "${path} must be defined"
      };
      exports.mixed = mixed;
      var string = {
        length: "${path} must be exactly ${length} characters",
        min: "${path} must be at least ${min} characters",
        max: "${path} must be at most ${max} characters",
        matches: '${path} must match the following: "${regex}"',
        email: "${path} must be a valid email",
        url: "${path} must be a valid URL",
        uuid: "${path} must be a valid UUID",
        trim: "${path} must be a trimmed string",
        lowercase: "${path} must be a lowercase string",
        uppercase: "${path} must be a upper case string"
      };
      exports.string = string;
      var number = {
        min: "${path} must be greater than or equal to ${min}",
        max: "${path} must be less than or equal to ${max}",
        lessThan: "${path} must be less than ${less}",
        moreThan: "${path} must be greater than ${more}",
        positive: "${path} must be a positive number",
        negative: "${path} must be a negative number",
        integer: "${path} must be an integer"
      };
      exports.number = number;
      var date = {
        min: "${path} field must be later than ${min}",
        max: "${path} field must be at earlier than ${max}"
      };
      exports.date = date;
      var boolean = {
        isValue: "${path} field must be ${value}"
      };
      exports.boolean = boolean;
      var object = {
        noUnknown: "${path} field has unspecified keys: ${unknown}"
      };
      exports.object = object;
      var array = {
        min: "${path} field must have at least ${min} items",
        max: "${path} field must have less than or equal to ${max} items",
        length: "${path} must be have ${length} items"
      };
      exports.array = array;
      var _default = Object.assign(Object.create(null), {
        mixed,
        string,
        number,
        date,
        object,
        array,
        boolean
      });
      exports.default = _default;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseHas.js
  var require_baseHas = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseHas.js"(exports, module) {
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      function baseHas(object, key) {
        return object != null && hasOwnProperty.call(object, key);
      }
      module.exports = baseHas;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/has.js
  var require_has = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/has.js"(exports, module) {
      var baseHas = require_baseHas();
      var hasPath = require_hasPath();
      function has(object, path3) {
        return object != null && hasPath(object, path3, baseHas);
      }
      module.exports = has;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/util/isSchema.js
  var require_isSchema = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/util/isSchema.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _default = (obj) => obj && obj.__isYupSchema__;
      exports.default = _default;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/Condition.js
  var require_Condition = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/Condition.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _has = _interopRequireDefault(require_has());
      var _isSchema = _interopRequireDefault(require_isSchema());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {default: obj};
      }
      var Condition = class {
        constructor(refs, options) {
          this.refs = refs;
          this.refs = refs;
          if (typeof options === "function") {
            this.fn = options;
            return;
          }
          if (!(0, _has.default)(options, "is"))
            throw new TypeError("`is:` is required for `when()` conditions");
          if (!options.then && !options.otherwise)
            throw new TypeError("either `then:` or `otherwise:` is required for `when()` conditions");
          let {
            is,
            then,
            otherwise
          } = options;
          let check = typeof is === "function" ? is : (...values) => values.every((value) => value === is);
          this.fn = function(...args) {
            let options2 = args.pop();
            let schema = args.pop();
            let branch = check(...args) ? then : otherwise;
            if (!branch)
              return void 0;
            if (typeof branch === "function")
              return branch(schema);
            return schema.concat(branch.resolve(options2));
          };
        }
        resolve(base, options) {
          let values = this.refs.map((ref) => ref.getValue(options == null ? void 0 : options.value, options == null ? void 0 : options.parent, options == null ? void 0 : options.context));
          let schema = this.fn.apply(base, values.concat(base, options));
          if (schema === void 0 || schema === base)
            return base;
          if (!(0, _isSchema.default)(schema))
            throw new TypeError("conditions must return a schema object");
          return schema.resolve(options);
        }
      };
      var _default = Condition;
      exports.default = _default;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/util/toArray.js
  var require_toArray = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/util/toArray.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = toArray;
      function toArray(value) {
        return value == null ? [] : [].concat(value);
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/ValidationError.js
  var require_ValidationError = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/ValidationError.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _printValue = _interopRequireDefault(require_printValue());
      var _toArray = _interopRequireDefault(require_toArray());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {default: obj};
      }
      function _extends() {
        _extends = Object.assign || function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends.apply(this, arguments);
      }
      var strReg = /\$\{\s*(\w+)\s*\}/g;
      var ValidationError = class extends Error {
        static formatError(message, params) {
          const path3 = params.label || params.path || "this";
          if (path3 !== params.path)
            params = _extends({}, params, {
              path: path3
            });
          if (typeof message === "string")
            return message.replace(strReg, (_, key) => (0, _printValue.default)(params[key]));
          if (typeof message === "function")
            return message(params);
          return message;
        }
        static isError(err) {
          return err && err.name === "ValidationError";
        }
        constructor(errorOrErrors, value, field, type) {
          super();
          this.name = "ValidationError";
          this.value = value;
          this.path = field;
          this.type = type;
          this.errors = [];
          this.inner = [];
          (0, _toArray.default)(errorOrErrors).forEach((err) => {
            if (ValidationError.isError(err)) {
              this.errors.push(...err.errors);
              this.inner = this.inner.concat(err.inner.length ? err.inner : err);
            } else {
              this.errors.push(err);
            }
          });
          this.message = this.errors.length > 1 ? `${this.errors.length} errors occurred` : this.errors[0];
          if (Error.captureStackTrace)
            Error.captureStackTrace(this, ValidationError);
        }
      };
      exports.default = ValidationError;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/util/runTests.js
  var require_runTests = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/util/runTests.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = runTests;
      var _ValidationError = _interopRequireDefault(require_ValidationError());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {default: obj};
      }
      var once = (cb) => {
        let fired = false;
        return (...args) => {
          if (fired)
            return;
          fired = true;
          cb(...args);
        };
      };
      function runTests(options, cb) {
        let {
          endEarly,
          tests: tests2,
          args,
          value,
          errors: errors4,
          sort,
          path: path3
        } = options;
        let callback = once(cb);
        let count = tests2.length;
        const nestedErrors = [];
        errors4 = errors4 ? errors4 : [];
        if (!count)
          return errors4.length ? callback(new _ValidationError.default(errors4, value, path3)) : callback(null, value);
        for (let i = 0; i < tests2.length; i++) {
          const test = tests2[i];
          test(args, function finishTestRun(err) {
            if (err) {
              if (!_ValidationError.default.isError(err)) {
                return callback(err, value);
              }
              if (endEarly) {
                err.value = value;
                return callback(err, value);
              }
              nestedErrors.push(err);
            }
            if (--count <= 0) {
              if (nestedErrors.length) {
                if (sort)
                  nestedErrors.sort(sort);
                if (errors4.length)
                  nestedErrors.push(...errors4);
                errors4 = nestedErrors;
              }
              if (errors4.length) {
                callback(new _ValidationError.default(errors4, value, path3), value);
                return;
              }
              callback(null, value);
            }
          });
        }
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_createBaseFor.js
  var require_createBaseFor = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_createBaseFor.js"(exports, module) {
      function createBaseFor(fromRight) {
        return function(object, iteratee, keysFunc) {
          var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
          while (length--) {
            var key = props[fromRight ? length : ++index];
            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object;
        };
      }
      module.exports = createBaseFor;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseFor.js
  var require_baseFor = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseFor.js"(exports, module) {
      var createBaseFor = require_createBaseFor();
      var baseFor = createBaseFor();
      module.exports = baseFor;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseTimes.js
  var require_baseTimes = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseTimes.js"(exports, module) {
      function baseTimes(n, iteratee) {
        var index = -1, result = Array(n);
        while (++index < n) {
          result[index] = iteratee(index);
        }
        return result;
      }
      module.exports = baseTimes;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/stubFalse.js
  var require_stubFalse = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/stubFalse.js"(exports, module) {
      function stubFalse() {
        return false;
      }
      module.exports = stubFalse;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/isBuffer.js
  var require_isBuffer = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/isBuffer.js"(exports, module) {
      var root = require_root();
      var stubFalse = require_stubFalse();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var Buffer2 = moduleExports ? root.Buffer : void 0;
      var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
      var isBuffer = nativeIsBuffer || stubFalse;
      module.exports = isBuffer;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseIsTypedArray.js
  var require_baseIsTypedArray = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseIsTypedArray.js"(exports, module) {
      var baseGetTag = require_baseGetTag();
      var isLength = require_isLength();
      var isObjectLike = require_isObjectLike();
      var argsTag = "[object Arguments]";
      var arrayTag = "[object Array]";
      var boolTag = "[object Boolean]";
      var dateTag = "[object Date]";
      var errorTag = "[object Error]";
      var funcTag = "[object Function]";
      var mapTag = "[object Map]";
      var numberTag = "[object Number]";
      var objectTag = "[object Object]";
      var regexpTag = "[object RegExp]";
      var setTag = "[object Set]";
      var stringTag = "[object String]";
      var weakMapTag = "[object WeakMap]";
      var arrayBufferTag = "[object ArrayBuffer]";
      var dataViewTag = "[object DataView]";
      var float32Tag = "[object Float32Array]";
      var float64Tag = "[object Float64Array]";
      var int8Tag = "[object Int8Array]";
      var int16Tag = "[object Int16Array]";
      var int32Tag = "[object Int32Array]";
      var uint8Tag = "[object Uint8Array]";
      var uint8ClampedTag = "[object Uint8ClampedArray]";
      var uint16Tag = "[object Uint16Array]";
      var uint32Tag = "[object Uint32Array]";
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
      }
      module.exports = baseIsTypedArray;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseUnary.js
  var require_baseUnary = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseUnary.js"(exports, module) {
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      module.exports = baseUnary;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_nodeUtil.js
  var require_nodeUtil = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_nodeUtil.js"(exports, module) {
      var freeGlobal = require_freeGlobal();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          var types2 = freeModule && freeModule.require && freeModule.require("util").types;
          if (types2) {
            return types2;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {
        }
      }();
      module.exports = nodeUtil;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/isTypedArray.js
  var require_isTypedArray = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/isTypedArray.js"(exports, module) {
      var baseIsTypedArray = require_baseIsTypedArray();
      var baseUnary = require_baseUnary();
      var nodeUtil = require_nodeUtil();
      var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
      module.exports = isTypedArray;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_arrayLikeKeys.js
  var require_arrayLikeKeys = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_arrayLikeKeys.js"(exports, module) {
      var baseTimes = require_baseTimes();
      var isArguments = require_isArguments();
      var isArray2 = require_isArray();
      var isBuffer = require_isBuffer();
      var isIndex = require_isIndex();
      var isTypedArray = require_isTypedArray();
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      function arrayLikeKeys(value, inherited) {
        var isArr = isArray2(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
        for (var key in value) {
          if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
            result.push(key);
          }
        }
        return result;
      }
      module.exports = arrayLikeKeys;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_isPrototype.js
  var require_isPrototype = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_isPrototype.js"(exports, module) {
      var objectProto = Object.prototype;
      function isPrototype(value) {
        var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
        return value === proto;
      }
      module.exports = isPrototype;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_overArg.js
  var require_overArg = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_overArg.js"(exports, module) {
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      module.exports = overArg;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_nativeKeys.js
  var require_nativeKeys = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_nativeKeys.js"(exports, module) {
      var overArg = require_overArg();
      var nativeKeys = overArg(Object.keys, Object);
      module.exports = nativeKeys;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseKeys.js
  var require_baseKeys = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseKeys.js"(exports, module) {
      var isPrototype = require_isPrototype();
      var nativeKeys = require_nativeKeys();
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      function baseKeys(object) {
        if (!isPrototype(object)) {
          return nativeKeys(object);
        }
        var result = [];
        for (var key in Object(object)) {
          if (hasOwnProperty.call(object, key) && key != "constructor") {
            result.push(key);
          }
        }
        return result;
      }
      module.exports = baseKeys;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/isArrayLike.js
  var require_isArrayLike = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/isArrayLike.js"(exports, module) {
      var isFunction = require_isFunction();
      var isLength = require_isLength();
      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value);
      }
      module.exports = isArrayLike;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/keys.js
  var require_keys = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/keys.js"(exports, module) {
      var arrayLikeKeys = require_arrayLikeKeys();
      var baseKeys = require_baseKeys();
      var isArrayLike = require_isArrayLike();
      function keys(object) {
        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
      }
      module.exports = keys;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseForOwn.js
  var require_baseForOwn = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseForOwn.js"(exports, module) {
      var baseFor = require_baseFor();
      var keys = require_keys();
      function baseForOwn(object, iteratee) {
        return object && baseFor(object, iteratee, keys);
      }
      module.exports = baseForOwn;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_stackClear.js
  var require_stackClear = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_stackClear.js"(exports, module) {
      var ListCache = require_ListCache();
      function stackClear() {
        this.__data__ = new ListCache();
        this.size = 0;
      }
      module.exports = stackClear;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_stackDelete.js
  var require_stackDelete = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_stackDelete.js"(exports, module) {
      function stackDelete(key) {
        var data = this.__data__, result = data["delete"](key);
        this.size = data.size;
        return result;
      }
      module.exports = stackDelete;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_stackGet.js
  var require_stackGet = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_stackGet.js"(exports, module) {
      function stackGet(key) {
        return this.__data__.get(key);
      }
      module.exports = stackGet;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_stackHas.js
  var require_stackHas = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_stackHas.js"(exports, module) {
      function stackHas(key) {
        return this.__data__.has(key);
      }
      module.exports = stackHas;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_stackSet.js
  var require_stackSet = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_stackSet.js"(exports, module) {
      var ListCache = require_ListCache();
      var Map2 = require_Map();
      var MapCache = require_MapCache();
      var LARGE_ARRAY_SIZE = 200;
      function stackSet(key, value) {
        var data = this.__data__;
        if (data instanceof ListCache) {
          var pairs = data.__data__;
          if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
      }
      module.exports = stackSet;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_Stack.js
  var require_Stack = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_Stack.js"(exports, module) {
      var ListCache = require_ListCache();
      var stackClear = require_stackClear();
      var stackDelete = require_stackDelete();
      var stackGet = require_stackGet();
      var stackHas = require_stackHas();
      var stackSet = require_stackSet();
      function Stack(entries) {
        var data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }
      Stack.prototype.clear = stackClear;
      Stack.prototype["delete"] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;
      module.exports = Stack;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_setCacheAdd.js
  var require_setCacheAdd = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_setCacheAdd.js"(exports, module) {
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);
        return this;
      }
      module.exports = setCacheAdd;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_setCacheHas.js
  var require_setCacheHas = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_setCacheHas.js"(exports, module) {
      function setCacheHas(value) {
        return this.__data__.has(value);
      }
      module.exports = setCacheHas;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_SetCache.js
  var require_SetCache = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_SetCache.js"(exports, module) {
      var MapCache = require_MapCache();
      var setCacheAdd = require_setCacheAdd();
      var setCacheHas = require_setCacheHas();
      function SetCache(values) {
        var index = -1, length = values == null ? 0 : values.length;
        this.__data__ = new MapCache();
        while (++index < length) {
          this.add(values[index]);
        }
      }
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;
      module.exports = SetCache;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_arraySome.js
  var require_arraySome = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_arraySome.js"(exports, module) {
      function arraySome(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }
      module.exports = arraySome;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_cacheHas.js
  var require_cacheHas = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_cacheHas.js"(exports, module) {
      function cacheHas(cache2, key) {
        return cache2.has(key);
      }
      module.exports = cacheHas;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_equalArrays.js
  var require_equalArrays = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_equalArrays.js"(exports, module) {
      var SetCache = require_SetCache();
      var arraySome = require_arraySome();
      var cacheHas = require_cacheHas();
      var COMPARE_PARTIAL_FLAG = 1;
      var COMPARE_UNORDERED_FLAG = 2;
      function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        var arrStacked = stack.get(array);
        var othStacked = stack.get(other);
        if (arrStacked && othStacked) {
          return arrStacked == other && othStacked == array;
        }
        var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
        stack.set(array, other);
        stack.set(other, array);
        while (++index < arrLength) {
          var arrValue = array[index], othValue = other[index];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
          }
          if (compared !== void 0) {
            if (compared) {
              continue;
            }
            result = false;
            break;
          }
          if (seen) {
            if (!arraySome(other, function(othValue2, othIndex) {
              if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
              result = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result = false;
            break;
          }
        }
        stack["delete"](array);
        stack["delete"](other);
        return result;
      }
      module.exports = equalArrays;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_Uint8Array.js
  var require_Uint8Array = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_Uint8Array.js"(exports, module) {
      var root = require_root();
      var Uint8Array2 = root.Uint8Array;
      module.exports = Uint8Array2;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_mapToArray.js
  var require_mapToArray = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_mapToArray.js"(exports, module) {
      function mapToArray(map) {
        var index = -1, result = Array(map.size);
        map.forEach(function(value, key) {
          result[++index] = [key, value];
        });
        return result;
      }
      module.exports = mapToArray;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_setToArray.js
  var require_setToArray = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_setToArray.js"(exports, module) {
      function setToArray(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = value;
        });
        return result;
      }
      module.exports = setToArray;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_equalByTag.js
  var require_equalByTag = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_equalByTag.js"(exports, module) {
      var Symbol2 = require_Symbol();
      var Uint8Array2 = require_Uint8Array();
      var eq = require_eq2();
      var equalArrays = require_equalArrays();
      var mapToArray = require_mapToArray();
      var setToArray = require_setToArray();
      var COMPARE_PARTIAL_FLAG = 1;
      var COMPARE_UNORDERED_FLAG = 2;
      var boolTag = "[object Boolean]";
      var dateTag = "[object Date]";
      var errorTag = "[object Error]";
      var mapTag = "[object Map]";
      var numberTag = "[object Number]";
      var regexpTag = "[object RegExp]";
      var setTag = "[object Set]";
      var stringTag = "[object String]";
      var symbolTag = "[object Symbol]";
      var arrayBufferTag = "[object ArrayBuffer]";
      var dataViewTag = "[object DataView]";
      var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
      var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
      function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
              return false;
            }
            object = object.buffer;
            other = other.buffer;
          case arrayBufferTag:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
              return false;
            }
            return true;
          case boolTag:
          case dateTag:
          case numberTag:
            return eq(+object, +other);
          case errorTag:
            return object.name == other.name && object.message == other.message;
          case regexpTag:
          case stringTag:
            return object == other + "";
          case mapTag:
            var convert = mapToArray;
          case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);
            if (object.size != other.size && !isPartial) {
              return false;
            }
            var stacked = stack.get(object);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG;
            stack.set(object, other);
            var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack["delete"](object);
            return result;
          case symbolTag:
            if (symbolValueOf) {
              return symbolValueOf.call(object) == symbolValueOf.call(other);
            }
        }
        return false;
      }
      module.exports = equalByTag;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseGetAllKeys.js
  var require_baseGetAllKeys = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseGetAllKeys.js"(exports, module) {
      var arrayPush = require_arrayPush();
      var isArray2 = require_isArray();
      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray2(object) ? result : arrayPush(result, symbolsFunc(object));
      }
      module.exports = baseGetAllKeys;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_arrayFilter.js
  var require_arrayFilter = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_arrayFilter.js"(exports, module) {
      function arrayFilter(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      module.exports = arrayFilter;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/stubArray.js
  var require_stubArray = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/stubArray.js"(exports, module) {
      function stubArray() {
        return [];
      }
      module.exports = stubArray;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_getSymbols.js
  var require_getSymbols = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_getSymbols.js"(exports, module) {
      var arrayFilter = require_arrayFilter();
      var stubArray = require_stubArray();
      var objectProto = Object.prototype;
      var propertyIsEnumerable = objectProto.propertyIsEnumerable;
      var nativeGetSymbols = Object.getOwnPropertySymbols;
      var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
        if (object == null) {
          return [];
        }
        object = Object(object);
        return arrayFilter(nativeGetSymbols(object), function(symbol) {
          return propertyIsEnumerable.call(object, symbol);
        });
      };
      module.exports = getSymbols;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_getAllKeys.js
  var require_getAllKeys = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_getAllKeys.js"(exports, module) {
      var baseGetAllKeys = require_baseGetAllKeys();
      var getSymbols = require_getSymbols();
      var keys = require_keys();
      function getAllKeys(object) {
        return baseGetAllKeys(object, keys, getSymbols);
      }
      module.exports = getAllKeys;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_equalObjects.js
  var require_equalObjects = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_equalObjects.js"(exports, module) {
      var getAllKeys = require_getAllKeys();
      var COMPARE_PARTIAL_FLAG = 1;
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index = objLength;
        while (index--) {
          var key = objProps[index];
          if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
            return false;
          }
        }
        var objStacked = stack.get(object);
        var othStacked = stack.get(other);
        if (objStacked && othStacked) {
          return objStacked == other && othStacked == object;
        }
        var result = true;
        stack.set(object, other);
        stack.set(other, object);
        var skipCtor = isPartial;
        while (++index < objLength) {
          key = objProps[index];
          var objValue = object[key], othValue = other[key];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
          }
          if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result = false;
            break;
          }
          skipCtor || (skipCtor = key == "constructor");
        }
        if (result && !skipCtor) {
          var objCtor = object.constructor, othCtor = other.constructor;
          if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
            result = false;
          }
        }
        stack["delete"](object);
        stack["delete"](other);
        return result;
      }
      module.exports = equalObjects;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_DataView.js
  var require_DataView = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_DataView.js"(exports, module) {
      var getNative = require_getNative();
      var root = require_root();
      var DataView = getNative(root, "DataView");
      module.exports = DataView;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_Promise.js
  var require_Promise = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_Promise.js"(exports, module) {
      var getNative = require_getNative();
      var root = require_root();
      var Promise2 = getNative(root, "Promise");
      module.exports = Promise2;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_Set.js
  var require_Set = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_Set.js"(exports, module) {
      var getNative = require_getNative();
      var root = require_root();
      var Set2 = getNative(root, "Set");
      module.exports = Set2;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_WeakMap.js
  var require_WeakMap = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_WeakMap.js"(exports, module) {
      var getNative = require_getNative();
      var root = require_root();
      var WeakMap2 = getNative(root, "WeakMap");
      module.exports = WeakMap2;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_getTag.js
  var require_getTag = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_getTag.js"(exports, module) {
      var DataView = require_DataView();
      var Map2 = require_Map();
      var Promise2 = require_Promise();
      var Set2 = require_Set();
      var WeakMap2 = require_WeakMap();
      var baseGetTag = require_baseGetTag();
      var toSource = require_toSource();
      var mapTag = "[object Map]";
      var objectTag = "[object Object]";
      var promiseTag = "[object Promise]";
      var setTag = "[object Set]";
      var weakMapTag = "[object WeakMap]";
      var dataViewTag = "[object DataView]";
      var dataViewCtorString = toSource(DataView);
      var mapCtorString = toSource(Map2);
      var promiseCtorString = toSource(Promise2);
      var setCtorString = toSource(Set2);
      var weakMapCtorString = toSource(WeakMap2);
      var getTag = baseGetTag;
      if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
        getTag = function(value) {
          var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString:
                return dataViewTag;
              case mapCtorString:
                return mapTag;
              case promiseCtorString:
                return promiseTag;
              case setCtorString:
                return setTag;
              case weakMapCtorString:
                return weakMapTag;
            }
          }
          return result;
        };
      }
      module.exports = getTag;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseIsEqualDeep.js
  var require_baseIsEqualDeep = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseIsEqualDeep.js"(exports, module) {
      var Stack = require_Stack();
      var equalArrays = require_equalArrays();
      var equalByTag = require_equalByTag();
      var equalObjects = require_equalObjects();
      var getTag = require_getTag();
      var isArray2 = require_isArray();
      var isBuffer = require_isBuffer();
      var isTypedArray = require_isTypedArray();
      var COMPARE_PARTIAL_FLAG = 1;
      var argsTag = "[object Arguments]";
      var arrayTag = "[object Array]";
      var objectTag = "[object Object]";
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray2(object), othIsArr = isArray2(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
        objTag = objTag == argsTag ? objectTag : objTag;
        othTag = othTag == argsTag ? objectTag : othTag;
        var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
        if (isSameTag && isBuffer(object)) {
          if (!isBuffer(other)) {
            return false;
          }
          objIsArr = true;
          objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack());
          return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack || (stack = new Stack());
        return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
      }
      module.exports = baseIsEqualDeep;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseIsEqual.js
  var require_baseIsEqual = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseIsEqual.js"(exports, module) {
      var baseIsEqualDeep = require_baseIsEqualDeep();
      var isObjectLike = require_isObjectLike();
      function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }
        if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
          return value !== value && other !== other;
        }
        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
      }
      module.exports = baseIsEqual;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseIsMatch.js
  var require_baseIsMatch = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseIsMatch.js"(exports, module) {
      var Stack = require_Stack();
      var baseIsEqual = require_baseIsEqual();
      var COMPARE_PARTIAL_FLAG = 1;
      var COMPARE_UNORDERED_FLAG = 2;
      function baseIsMatch(object, source, matchData, customizer) {
        var index = matchData.length, length = index, noCustomizer = !customizer;
        if (object == null) {
          return !length;
        }
        object = Object(object);
        while (index--) {
          var data = matchData[index];
          if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
            return false;
          }
        }
        while (++index < length) {
          data = matchData[index];
          var key = data[0], objValue = object[key], srcValue = data[1];
          if (noCustomizer && data[2]) {
            if (objValue === void 0 && !(key in object)) {
              return false;
            }
          } else {
            var stack = new Stack();
            if (customizer) {
              var result = customizer(objValue, srcValue, key, object, source, stack);
            }
            if (!(result === void 0 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
              return false;
            }
          }
        }
        return true;
      }
      module.exports = baseIsMatch;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_isStrictComparable.js
  var require_isStrictComparable = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_isStrictComparable.js"(exports, module) {
      var isObject2 = require_isObject();
      function isStrictComparable(value) {
        return value === value && !isObject2(value);
      }
      module.exports = isStrictComparable;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_getMatchData.js
  var require_getMatchData = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_getMatchData.js"(exports, module) {
      var isStrictComparable = require_isStrictComparable();
      var keys = require_keys();
      function getMatchData(object) {
        var result = keys(object), length = result.length;
        while (length--) {
          var key = result[length], value = object[key];
          result[length] = [key, value, isStrictComparable(value)];
        }
        return result;
      }
      module.exports = getMatchData;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_matchesStrictComparable.js
  var require_matchesStrictComparable = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_matchesStrictComparable.js"(exports, module) {
      function matchesStrictComparable(key, srcValue) {
        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
        };
      }
      module.exports = matchesStrictComparable;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseMatches.js
  var require_baseMatches = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseMatches.js"(exports, module) {
      var baseIsMatch = require_baseIsMatch();
      var getMatchData = require_getMatchData();
      var matchesStrictComparable = require_matchesStrictComparable();
      function baseMatches(source) {
        var matchData = getMatchData(source);
        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable(matchData[0][0], matchData[0][1]);
        }
        return function(object) {
          return object === source || baseIsMatch(object, source, matchData);
        };
      }
      module.exports = baseMatches;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/get.js
  var require_get = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/get.js"(exports, module) {
      var baseGet = require_baseGet();
      function get3(object, path3, defaultValue) {
        var result = object == null ? void 0 : baseGet(object, path3);
        return result === void 0 ? defaultValue : result;
      }
      module.exports = get3;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseMatchesProperty.js
  var require_baseMatchesProperty = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseMatchesProperty.js"(exports, module) {
      var baseIsEqual = require_baseIsEqual();
      var get3 = require_get();
      var hasIn = require_hasIn();
      var isKey = require_isKey();
      var isStrictComparable = require_isStrictComparable();
      var matchesStrictComparable = require_matchesStrictComparable();
      var toKey = require_toKey();
      var COMPARE_PARTIAL_FLAG = 1;
      var COMPARE_UNORDERED_FLAG = 2;
      function baseMatchesProperty(path3, srcValue) {
        if (isKey(path3) && isStrictComparable(srcValue)) {
          return matchesStrictComparable(toKey(path3), srcValue);
        }
        return function(object) {
          var objValue = get3(object, path3);
          return objValue === void 0 && objValue === srcValue ? hasIn(object, path3) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
        };
      }
      module.exports = baseMatchesProperty;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseProperty.js
  var require_baseProperty = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseProperty.js"(exports, module) {
      function baseProperty(key) {
        return function(object) {
          return object == null ? void 0 : object[key];
        };
      }
      module.exports = baseProperty;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_basePropertyDeep.js
  var require_basePropertyDeep = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_basePropertyDeep.js"(exports, module) {
      var baseGet = require_baseGet();
      function basePropertyDeep(path3) {
        return function(object) {
          return baseGet(object, path3);
        };
      }
      module.exports = basePropertyDeep;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/property.js
  var require_property = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/property.js"(exports, module) {
      var baseProperty = require_baseProperty();
      var basePropertyDeep = require_basePropertyDeep();
      var isKey = require_isKey();
      var toKey = require_toKey();
      function property(path3) {
        return isKey(path3) ? baseProperty(toKey(path3)) : basePropertyDeep(path3);
      }
      module.exports = property;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseIteratee.js
  var require_baseIteratee = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseIteratee.js"(exports, module) {
      var baseMatches = require_baseMatches();
      var baseMatchesProperty = require_baseMatchesProperty();
      var identity = require_identity();
      var isArray2 = require_isArray();
      var property = require_property();
      function baseIteratee(value) {
        if (typeof value == "function") {
          return value;
        }
        if (value == null) {
          return identity;
        }
        if (typeof value == "object") {
          return isArray2(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
        }
        return property(value);
      }
      module.exports = baseIteratee;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/mapValues.js
  var require_mapValues = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/mapValues.js"(exports, module) {
      var baseAssignValue = require_baseAssignValue();
      var baseForOwn = require_baseForOwn();
      var baseIteratee = require_baseIteratee();
      function mapValues(object, iteratee) {
        var result = {};
        iteratee = baseIteratee(iteratee, 3);
        baseForOwn(object, function(value, key, object2) {
          baseAssignValue(result, key, iteratee(value, key, object2));
        });
        return result;
      }
      module.exports = mapValues;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/property-expr-npm-2.0.4-dffd410058-7ac142e189.zip/node_modules/property-expr/index.js
  var require_property_expr = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/property-expr-npm-2.0.4-dffd410058-7ac142e189.zip/node_modules/property-expr/index.js"(exports, module) {
      "use strict";
      function Cache4(maxSize) {
        this._maxSize = maxSize;
        this.clear();
      }
      Cache4.prototype.clear = function() {
        this._size = 0;
        this._values = Object.create(null);
      };
      Cache4.prototype.get = function(key) {
        return this._values[key];
      };
      Cache4.prototype.set = function(key, value) {
        this._size >= this._maxSize && this.clear();
        if (!(key in this._values))
          this._size++;
        return this._values[key] = value;
      };
      var SPLIT_REGEX = /[^.^\]^[]+|(?=\[\]|\.\.)/g;
      var DIGIT_REGEX = /^\d+$/;
      var LEAD_DIGIT_REGEX = /^\d/;
      var SPEC_CHAR_REGEX = /[~`!#$%\^&*+=\-\[\]\\';,/{}|\\":<>\?]/g;
      var CLEAN_QUOTES_REGEX = /^\s*(['"]?)(.*?)(\1)\s*$/;
      var MAX_CACHE_SIZE = 512;
      var pathCache = new Cache4(MAX_CACHE_SIZE);
      var setCache = new Cache4(MAX_CACHE_SIZE);
      var getCache = new Cache4(MAX_CACHE_SIZE);
      module.exports = {
        Cache: Cache4,
        split: split2,
        normalizePath,
        setter: function(path3) {
          var parts = normalizePath(path3);
          return setCache.get(path3) || setCache.set(path3, function setter(obj, value) {
            var index = 0;
            var len = parts.length;
            var data = obj;
            while (index < len - 1) {
              var part = parts[index];
              if (part === "__proto__" || part === "constructor" || part === "prototype") {
                return obj;
              }
              data = data[parts[index++]];
            }
            data[parts[index]] = value;
          });
        },
        getter: function(path3, safe) {
          var parts = normalizePath(path3);
          return getCache.get(path3) || getCache.set(path3, function getter(data) {
            var index = 0, len = parts.length;
            while (index < len) {
              if (data != null || !safe)
                data = data[parts[index++]];
              else
                return;
            }
            return data;
          });
        },
        join: function(segments) {
          return segments.reduce(function(path3, part) {
            return path3 + (isQuoted(part) || DIGIT_REGEX.test(part) ? "[" + part + "]" : (path3 ? "." : "") + part);
          }, "");
        },
        forEach: function(path3, cb, thisArg) {
          forEach(Array.isArray(path3) ? path3 : split2(path3), cb, thisArg);
        }
      };
      function normalizePath(path3) {
        return pathCache.get(path3) || pathCache.set(path3, split2(path3).map(function(part) {
          return part.replace(CLEAN_QUOTES_REGEX, "$2");
        }));
      }
      function split2(path3) {
        return path3.match(SPLIT_REGEX);
      }
      function forEach(parts, iter, thisArg) {
        var len = parts.length, part, idx, isArray2, isBracket;
        for (idx = 0; idx < len; idx++) {
          part = parts[idx];
          if (part) {
            if (shouldBeQuoted(part)) {
              part = '"' + part + '"';
            }
            isBracket = isQuoted(part);
            isArray2 = !isBracket && /^\d+$/.test(part);
            iter.call(thisArg, part, isBracket, isArray2, idx, parts);
          }
        }
      }
      function isQuoted(str) {
        return typeof str === "string" && str && ["'", '"'].indexOf(str.charAt(0)) !== -1;
      }
      function hasLeadingNumber(part) {
        return part.match(LEAD_DIGIT_REGEX) && !part.match(DIGIT_REGEX);
      }
      function hasSpecialChars(part) {
        return SPEC_CHAR_REGEX.test(part);
      }
      function shouldBeQuoted(part) {
        return !isQuoted(part) && (hasLeadingNumber(part) || hasSpecialChars(part));
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/Reference.js
  var require_Reference = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/Reference.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.create = create;
      exports.default = void 0;
      var _propertyExpr = require_property_expr();
      var prefixes = {
        context: "$",
        value: "."
      };
      function create(key, options) {
        return new Reference(key, options);
      }
      var Reference = class {
        constructor(key, options = {}) {
          if (typeof key !== "string")
            throw new TypeError("ref must be a string, got: " + key);
          this.key = key.trim();
          if (key === "")
            throw new TypeError("ref must be a non-empty string");
          this.isContext = this.key[0] === prefixes.context;
          this.isValue = this.key[0] === prefixes.value;
          this.isSibling = !this.isContext && !this.isValue;
          let prefix = this.isContext ? prefixes.context : this.isValue ? prefixes.value : "";
          this.path = this.key.slice(prefix.length);
          this.getter = this.path && (0, _propertyExpr.getter)(this.path, true);
          this.map = options.map;
        }
        getValue(value, parent, context) {
          let result = this.isContext ? context : this.isValue ? value : parent;
          if (this.getter)
            result = this.getter(result || {});
          if (this.map)
            result = this.map(result);
          return result;
        }
        cast(value, options) {
          return this.getValue(value, options == null ? void 0 : options.parent, options == null ? void 0 : options.context);
        }
        resolve() {
          return this;
        }
        describe() {
          return {
            type: "ref",
            key: this.key
          };
        }
        toString() {
          return `Ref(${this.key})`;
        }
        static isRef(value) {
          return value && value.__isYupRef;
        }
      };
      exports.default = Reference;
      Reference.prototype.__isYupRef = true;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/util/createValidation.js
  var require_createValidation = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/util/createValidation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createValidation;
      var _mapValues = _interopRequireDefault(require_mapValues());
      var _ValidationError = _interopRequireDefault(require_ValidationError());
      var _Reference = _interopRequireDefault(require_Reference());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {default: obj};
      }
      function _extends() {
        _extends = Object.assign || function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends.apply(this, arguments);
      }
      function _objectWithoutPropertiesLoose(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      function createValidation(config) {
        function validate(_ref, cb) {
          let {
            value,
            path: path3 = "",
            label,
            options,
            originalValue,
            sync
          } = _ref, rest = _objectWithoutPropertiesLoose(_ref, ["value", "path", "label", "options", "originalValue", "sync"]);
          const {
            name,
            test,
            params,
            message
          } = config;
          let {
            parent,
            context
          } = options;
          function resolve(item) {
            return _Reference.default.isRef(item) ? item.getValue(value, parent, context) : item;
          }
          function createError(overrides = {}) {
            const nextParams = (0, _mapValues.default)(_extends({
              value,
              originalValue,
              label,
              path: overrides.path || path3
            }, params, overrides.params), resolve);
            const error = new _ValidationError.default(_ValidationError.default.formatError(overrides.message || message, nextParams), value, nextParams.path, overrides.type || name);
            error.params = nextParams;
            return error;
          }
          let ctx = _extends({
            path: path3,
            parent,
            type: name,
            createError,
            resolve,
            options,
            originalValue
          }, rest);
          if (!sync) {
            try {
              Promise.resolve(test.call(ctx, value, ctx)).then((validOrError) => {
                if (_ValidationError.default.isError(validOrError))
                  cb(validOrError);
                else if (!validOrError)
                  cb(createError());
                else
                  cb(null, validOrError);
              });
            } catch (err) {
              cb(err);
            }
            return;
          }
          let result;
          try {
            var _ref2;
            result = test.call(ctx, value, ctx);
            if (typeof ((_ref2 = result) == null ? void 0 : _ref2.then) === "function") {
              throw new Error(`Validation test of type: "${ctx.type}" returned a Promise during a synchronous validate. This test will finish after the validate call has returned`);
            }
          } catch (err) {
            cb(err);
            return;
          }
          if (_ValidationError.default.isError(result))
            cb(result);
          else if (!result)
            cb(createError());
          else
            cb(null, result);
        }
        validate.OPTIONS = config;
        return validate;
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/util/reach.js
  var require_reach = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/util/reach.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.getIn = getIn;
      exports.default = void 0;
      var _propertyExpr = require_property_expr();
      var trim = (part) => part.substr(0, part.length - 1).substr(1);
      function getIn(schema, path3, value, context = value) {
        let parent, lastPart, lastPartDebug;
        if (!path3)
          return {
            parent,
            parentPath: path3,
            schema
          };
        (0, _propertyExpr.forEach)(path3, (_part, isBracket, isArray2) => {
          let part = isBracket ? trim(_part) : _part;
          schema = schema.resolve({
            context,
            parent,
            value
          });
          if (schema.innerType) {
            let idx = isArray2 ? parseInt(part, 10) : 0;
            if (value && idx >= value.length) {
              throw new Error(`Yup.reach cannot resolve an array item at index: ${_part}, in the path: ${path3}. because there is no value at that index. `);
            }
            parent = value;
            value = value && value[idx];
            schema = schema.innerType;
          }
          if (!isArray2) {
            if (!schema.fields || !schema.fields[part])
              throw new Error(`The schema does not contain the path: ${path3}. (failed at: ${lastPartDebug} which is a type: "${schema._type}")`);
            parent = value;
            value = value && value[part];
            schema = schema.fields[part];
          }
          lastPart = part;
          lastPartDebug = isBracket ? "[" + _part + "]" : "." + _part;
        });
        return {
          schema,
          parent,
          parentPath: lastPart
        };
      }
      var reach = (obj, path3, value, context) => getIn(obj, path3, value, context).schema;
      var _default = reach;
      exports.default = _default;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/util/ReferenceSet.js
  var require_ReferenceSet = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/util/ReferenceSet.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _Reference = _interopRequireDefault(require_Reference());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {default: obj};
      }
      var ReferenceSet = class {
        constructor() {
          this.list = new Set();
          this.refs = new Map();
        }
        get size() {
          return this.list.size + this.refs.size;
        }
        describe() {
          const description = [];
          for (const item of this.list)
            description.push(item);
          for (const [, ref] of this.refs)
            description.push(ref.describe());
          return description;
        }
        toArray() {
          return Array.from(this.list).concat(Array.from(this.refs.values()));
        }
        add(value) {
          _Reference.default.isRef(value) ? this.refs.set(value.key, value) : this.list.add(value);
        }
        delete(value) {
          _Reference.default.isRef(value) ? this.refs.delete(value.key) : this.list.delete(value);
        }
        has(value, resolve) {
          if (this.list.has(value))
            return true;
          let item, values = this.refs.values();
          while (item = values.next(), !item.done)
            if (resolve(item.value) === value)
              return true;
          return false;
        }
        clone() {
          const next = new ReferenceSet();
          next.list = new Set(this.list);
          next.refs = new Map(this.refs);
          return next;
        }
        merge(newItems, removeItems) {
          const next = this.clone();
          newItems.list.forEach((value) => next.add(value));
          newItems.refs.forEach((value) => next.add(value));
          removeItems.list.forEach((value) => next.delete(value));
          removeItems.refs.forEach((value) => next.delete(value));
          return next;
        }
      };
      exports.default = ReferenceSet;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/schema.js
  var require_schema2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/schema.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _nanoclone = _interopRequireDefault(require_nanoclone());
      var _locale = require_locale();
      var _Condition = _interopRequireDefault(require_Condition());
      var _runTests = _interopRequireDefault(require_runTests());
      var _createValidation = _interopRequireDefault(require_createValidation());
      var _printValue = _interopRequireDefault(require_printValue());
      var _Reference = _interopRequireDefault(require_Reference());
      var _reach = require_reach();
      var _toArray = _interopRequireDefault(require_toArray());
      var _ValidationError = _interopRequireDefault(require_ValidationError());
      var _ReferenceSet = _interopRequireDefault(require_ReferenceSet());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {default: obj};
      }
      function _extends() {
        _extends = Object.assign || function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends.apply(this, arguments);
      }
      var BaseSchema = class {
        constructor(options) {
          this.deps = [];
          this.conditions = [];
          this._whitelist = new _ReferenceSet.default();
          this._blacklist = new _ReferenceSet.default();
          this.exclusiveTests = Object.create(null);
          this.tests = [];
          this.transforms = [];
          this.withMutation(() => {
            this.typeError(_locale.mixed.notType);
          });
          this.type = (options == null ? void 0 : options.type) || "mixed";
          this.spec = _extends({
            strip: false,
            strict: false,
            abortEarly: true,
            recursive: true,
            nullable: false,
            presence: "optional"
          }, options == null ? void 0 : options.spec);
        }
        get _type() {
          return this.type;
        }
        _typeCheck(_value) {
          return true;
        }
        clone(spec) {
          if (this._mutate) {
            if (spec)
              Object.assign(this.spec, spec);
            return this;
          }
          const next = Object.create(Object.getPrototypeOf(this));
          next.type = this.type;
          next._typeError = this._typeError;
          next._whitelistError = this._whitelistError;
          next._blacklistError = this._blacklistError;
          next._whitelist = this._whitelist.clone();
          next._blacklist = this._blacklist.clone();
          next.exclusiveTests = _extends({}, this.exclusiveTests);
          next.deps = [...this.deps];
          next.conditions = [...this.conditions];
          next.tests = [...this.tests];
          next.transforms = [...this.transforms];
          next.spec = (0, _nanoclone.default)(_extends({}, this.spec, spec));
          return next;
        }
        label(label) {
          var next = this.clone();
          next.spec.label = label;
          return next;
        }
        meta(...args) {
          if (args.length === 0)
            return this.spec.meta;
          let next = this.clone();
          next.spec.meta = Object.assign(next.spec.meta || {}, args[0]);
          return next;
        }
        withMutation(fn) {
          let before = this._mutate;
          this._mutate = true;
          let result = fn(this);
          this._mutate = before;
          return result;
        }
        concat(schema) {
          if (!schema || schema === this)
            return this;
          if (schema.type !== this.type && this.type !== "mixed")
            throw new TypeError(`You cannot \`concat()\` schema's of different types: ${this.type} and ${schema.type}`);
          let base = this;
          let combined = schema.clone();
          const mergedSpec = _extends({}, base.spec, combined.spec);
          combined.spec = mergedSpec;
          combined._typeError || (combined._typeError = base._typeError);
          combined._whitelistError || (combined._whitelistError = base._whitelistError);
          combined._blacklistError || (combined._blacklistError = base._blacklistError);
          combined._whitelist = base._whitelist.merge(schema._whitelist, schema._blacklist);
          combined._blacklist = base._blacklist.merge(schema._blacklist, schema._whitelist);
          combined.tests = base.tests;
          combined.exclusiveTests = base.exclusiveTests;
          combined.withMutation((next) => {
            schema.tests.forEach((fn) => {
              next.test(fn.OPTIONS);
            });
          });
          return combined;
        }
        isType(v) {
          if (this.spec.nullable && v === null)
            return true;
          return this._typeCheck(v);
        }
        resolve(options) {
          let schema = this;
          if (schema.conditions.length) {
            let conditions = schema.conditions;
            schema = schema.clone();
            schema.conditions = [];
            schema = conditions.reduce((schema2, condition) => condition.resolve(schema2, options), schema);
            schema = schema.resolve(options);
          }
          return schema;
        }
        cast(value, options = {}) {
          let resolvedSchema = this.resolve(_extends({
            value
          }, options));
          let result = resolvedSchema._cast(value, options);
          if (value !== void 0 && options.assert !== false && resolvedSchema.isType(result) !== true) {
            let formattedValue = (0, _printValue.default)(value);
            let formattedResult = (0, _printValue.default)(result);
            throw new TypeError(`The value of ${options.path || "field"} could not be cast to a value that satisfies the schema type: "${resolvedSchema._type}". 

attempted value: ${formattedValue} 
` + (formattedResult !== formattedValue ? `result of cast: ${formattedResult}` : ""));
          }
          return result;
        }
        _cast(rawValue, _options) {
          let value = rawValue === void 0 ? rawValue : this.transforms.reduce((value2, fn) => fn.call(this, value2, rawValue, this), rawValue);
          if (value === void 0) {
            value = this.getDefault();
          }
          return value;
        }
        _validate(_value, options = {}, cb) {
          let {
            sync,
            path: path3,
            from = [],
            originalValue = _value,
            strict = this.spec.strict,
            abortEarly = this.spec.abortEarly
          } = options;
          let value = _value;
          if (!strict) {
            value = this._cast(value, _extends({
              assert: false
            }, options));
          }
          let args = {
            value,
            path: path3,
            options,
            originalValue,
            schema: this,
            label: this.spec.label,
            sync,
            from
          };
          let initialTests = [];
          if (this._typeError)
            initialTests.push(this._typeError);
          if (this._whitelistError)
            initialTests.push(this._whitelistError);
          if (this._blacklistError)
            initialTests.push(this._blacklistError);
          (0, _runTests.default)({
            args,
            value,
            path: path3,
            sync,
            tests: initialTests,
            endEarly: abortEarly
          }, (err) => {
            if (err)
              return void cb(err, value);
            (0, _runTests.default)({
              tests: this.tests,
              args,
              path: path3,
              sync,
              value,
              endEarly: abortEarly
            }, cb);
          });
        }
        validate(value, options, maybeCb) {
          let schema = this.resolve(_extends({}, options, {
            value
          }));
          return typeof maybeCb === "function" ? schema._validate(value, options, maybeCb) : new Promise((resolve, reject) => schema._validate(value, options, (err, value2) => {
            if (err)
              reject(err);
            else
              resolve(value2);
          }));
        }
        validateSync(value, options) {
          let schema = this.resolve(_extends({}, options, {
            value
          }));
          let result;
          schema._validate(value, _extends({}, options, {
            sync: true
          }), (err, value2) => {
            if (err)
              throw err;
            result = value2;
          });
          return result;
        }
        isValid(value, options) {
          return this.validate(value, options).then(() => true, (err) => {
            if (_ValidationError.default.isError(err))
              return false;
            throw err;
          });
        }
        isValidSync(value, options) {
          try {
            this.validateSync(value, options);
            return true;
          } catch (err) {
            if (_ValidationError.default.isError(err))
              return false;
            throw err;
          }
        }
        _getDefault() {
          let defaultValue = this.spec.default;
          if (defaultValue == null) {
            return defaultValue;
          }
          return typeof defaultValue === "function" ? defaultValue.call(this) : (0, _nanoclone.default)(defaultValue);
        }
        getDefault(options) {
          let schema = this.resolve(options || {});
          return schema._getDefault();
        }
        default(def) {
          if (arguments.length === 0) {
            return this._getDefault();
          }
          let next = this.clone({
            default: def
          });
          return next;
        }
        strict(isStrict = true) {
          var next = this.clone();
          next.spec.strict = isStrict;
          return next;
        }
        _isPresent(value) {
          return value != null;
        }
        defined(message = _locale.mixed.defined) {
          return this.test({
            message,
            name: "defined",
            exclusive: true,
            test(value) {
              return value !== void 0;
            }
          });
        }
        required(message = _locale.mixed.required) {
          return this.clone({
            presence: "required"
          }).withMutation((s) => s.test({
            message,
            name: "required",
            exclusive: true,
            test(value) {
              return this.schema._isPresent(value);
            }
          }));
        }
        notRequired() {
          var next = this.clone({
            presence: "optional"
          });
          next.tests = next.tests.filter((test) => test.OPTIONS.name !== "required");
          return next;
        }
        nullable(isNullable2 = true) {
          var next = this.clone({
            nullable: isNullable2 !== false
          });
          return next;
        }
        transform(fn) {
          var next = this.clone();
          next.transforms.push(fn);
          return next;
        }
        test(...args) {
          let opts;
          if (args.length === 1) {
            if (typeof args[0] === "function") {
              opts = {
                test: args[0]
              };
            } else {
              opts = args[0];
            }
          } else if (args.length === 2) {
            opts = {
              name: args[0],
              test: args[1]
            };
          } else {
            opts = {
              name: args[0],
              message: args[1],
              test: args[2]
            };
          }
          if (opts.message === void 0)
            opts.message = _locale.mixed.default;
          if (typeof opts.test !== "function")
            throw new TypeError("`test` is a required parameters");
          let next = this.clone();
          let validate = (0, _createValidation.default)(opts);
          let isExclusive = opts.exclusive || opts.name && next.exclusiveTests[opts.name] === true;
          if (opts.exclusive) {
            if (!opts.name)
              throw new TypeError("Exclusive tests must provide a unique `name` identifying the test");
          }
          if (opts.name)
            next.exclusiveTests[opts.name] = !!opts.exclusive;
          next.tests = next.tests.filter((fn) => {
            if (fn.OPTIONS.name === opts.name) {
              if (isExclusive)
                return false;
              if (fn.OPTIONS.test === validate.OPTIONS.test)
                return false;
            }
            return true;
          });
          next.tests.push(validate);
          return next;
        }
        when(keys, options) {
          if (!Array.isArray(keys) && typeof keys !== "string") {
            options = keys;
            keys = ".";
          }
          let next = this.clone();
          let deps = (0, _toArray.default)(keys).map((key) => new _Reference.default(key));
          deps.forEach((dep) => {
            if (dep.isSibling)
              next.deps.push(dep.key);
          });
          next.conditions.push(new _Condition.default(deps, options));
          return next;
        }
        typeError(message) {
          var next = this.clone();
          next._typeError = (0, _createValidation.default)({
            message,
            name: "typeError",
            test(value) {
              if (value !== void 0 && !this.schema.isType(value))
                return this.createError({
                  params: {
                    type: this.schema._type
                  }
                });
              return true;
            }
          });
          return next;
        }
        oneOf(enums, message = _locale.mixed.oneOf) {
          var next = this.clone();
          enums.forEach((val) => {
            next._whitelist.add(val);
            next._blacklist.delete(val);
          });
          next._whitelistError = (0, _createValidation.default)({
            message,
            name: "oneOf",
            test(value) {
              if (value === void 0)
                return true;
              let valids = this.schema._whitelist;
              return valids.has(value, this.resolve) ? true : this.createError({
                params: {
                  values: valids.toArray().join(", ")
                }
              });
            }
          });
          return next;
        }
        notOneOf(enums, message = _locale.mixed.notOneOf) {
          var next = this.clone();
          enums.forEach((val) => {
            next._blacklist.add(val);
            next._whitelist.delete(val);
          });
          next._blacklistError = (0, _createValidation.default)({
            message,
            name: "notOneOf",
            test(value) {
              let invalids = this.schema._blacklist;
              if (invalids.has(value, this.resolve))
                return this.createError({
                  params: {
                    values: invalids.toArray().join(", ")
                  }
                });
              return true;
            }
          });
          return next;
        }
        strip(strip = true) {
          let next = this.clone();
          next.spec.strip = strip;
          return next;
        }
        describe() {
          const next = this.clone();
          const {
            label,
            meta
          } = next.spec;
          const description = {
            meta,
            label,
            type: next.type,
            oneOf: next._whitelist.describe(),
            notOneOf: next._blacklist.describe(),
            tests: next.tests.map((fn) => ({
              name: fn.OPTIONS.name,
              params: fn.OPTIONS.params
            })).filter((n, idx, list) => list.findIndex((c) => c.name === n.name) === idx)
          };
          return description;
        }
      };
      exports.default = BaseSchema;
      BaseSchema.prototype.__isYupSchema__ = true;
      for (const method of ["validate", "validateSync"])
        BaseSchema.prototype[`${method}At`] = function(path3, value, options = {}) {
          const {
            parent,
            parentPath,
            schema
          } = (0, _reach.getIn)(this, path3, value, options.context);
          return schema[method](parent && parent[parentPath], _extends({}, options, {
            parent,
            path: path3
          }));
        };
      for (const alias of ["equals", "is"])
        BaseSchema.prototype[alias] = BaseSchema.prototype.oneOf;
      for (const alias of ["not", "nope"])
        BaseSchema.prototype[alias] = BaseSchema.prototype.notOneOf;
      BaseSchema.prototype.optional = BaseSchema.prototype.notRequired;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/mixed.js
  var require_mixed = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/mixed.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.create = create;
      exports.default = void 0;
      var _schema = _interopRequireDefault(require_schema2());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {default: obj};
      }
      var Mixed = _schema.default;
      var _default = Mixed;
      exports.default = _default;
      function create() {
        return new Mixed();
      }
      create.prototype = Mixed.prototype;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/util/isAbsent.js
  var require_isAbsent = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/util/isAbsent.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _default = (value) => value == null;
      exports.default = _default;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/boolean.js
  var require_boolean = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/boolean.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.create = create;
      exports.default = void 0;
      var _schema = _interopRequireDefault(require_schema2());
      var _locale = require_locale();
      var _isAbsent = _interopRequireDefault(require_isAbsent());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {default: obj};
      }
      function create() {
        return new BooleanSchema();
      }
      var BooleanSchema = class extends _schema.default {
        constructor() {
          super({
            type: "boolean"
          });
          this.withMutation(() => {
            this.transform(function(value) {
              if (!this.isType(value)) {
                if (/^(true|1)$/i.test(String(value)))
                  return true;
                if (/^(false|0)$/i.test(String(value)))
                  return false;
              }
              return value;
            });
          });
        }
        _typeCheck(v) {
          if (v instanceof Boolean)
            v = v.valueOf();
          return typeof v === "boolean";
        }
        isTrue(message = _locale.boolean.isValue) {
          return this.test({
            message,
            name: "is-value",
            exclusive: true,
            params: {
              value: "true"
            },
            test(value) {
              return (0, _isAbsent.default)(value) || value === true;
            }
          });
        }
        isFalse(message = _locale.boolean.isValue) {
          return this.test({
            message,
            name: "is-value",
            exclusive: true,
            params: {
              value: "false"
            },
            test(value) {
              return (0, _isAbsent.default)(value) || value === false;
            }
          });
        }
      };
      exports.default = BooleanSchema;
      create.prototype = BooleanSchema.prototype;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/string.js
  var require_string2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/string.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.create = create;
      exports.default = void 0;
      var _locale = require_locale();
      var _isAbsent = _interopRequireDefault(require_isAbsent());
      var _schema = _interopRequireDefault(require_schema2());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {default: obj};
      }
      var rEmail = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i;
      var rUrl = /^((https?|ftp):)?\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i;
      var rUUID = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
      var isTrimmed = (value) => (0, _isAbsent.default)(value) || value === value.trim();
      var objStringTag = {}.toString();
      function create() {
        return new StringSchema();
      }
      var StringSchema = class extends _schema.default {
        constructor() {
          super({
            type: "string"
          });
          this.withMutation(() => {
            this.transform(function(value) {
              if (this.isType(value))
                return value;
              if (Array.isArray(value))
                return value;
              const strValue = value != null && value.toString ? value.toString() : value;
              if (strValue === objStringTag)
                return value;
              return strValue;
            });
          });
        }
        _typeCheck(value) {
          if (value instanceof String)
            value = value.valueOf();
          return typeof value === "string";
        }
        _isPresent(value) {
          return super._isPresent(value) && !!value.length;
        }
        length(length, message = _locale.string.length) {
          return this.test({
            message,
            name: "length",
            exclusive: true,
            params: {
              length
            },
            test(value) {
              return (0, _isAbsent.default)(value) || value.length === this.resolve(length);
            }
          });
        }
        min(min, message = _locale.string.min) {
          return this.test({
            message,
            name: "min",
            exclusive: true,
            params: {
              min
            },
            test(value) {
              return (0, _isAbsent.default)(value) || value.length >= this.resolve(min);
            }
          });
        }
        max(max, message = _locale.string.max) {
          return this.test({
            name: "max",
            exclusive: true,
            message,
            params: {
              max
            },
            test(value) {
              return (0, _isAbsent.default)(value) || value.length <= this.resolve(max);
            }
          });
        }
        matches(regex, options) {
          let excludeEmptyString = false;
          let message;
          let name;
          if (options) {
            if (typeof options === "object") {
              ({
                excludeEmptyString = false,
                message,
                name
              } = options);
            } else {
              message = options;
            }
          }
          return this.test({
            name: name || "matches",
            message: message || _locale.string.matches,
            params: {
              regex
            },
            test: (value) => (0, _isAbsent.default)(value) || value === "" && excludeEmptyString || value.search(regex) !== -1
          });
        }
        email(message = _locale.string.email) {
          return this.matches(rEmail, {
            name: "email",
            message,
            excludeEmptyString: true
          });
        }
        url(message = _locale.string.url) {
          return this.matches(rUrl, {
            name: "url",
            message,
            excludeEmptyString: true
          });
        }
        uuid(message = _locale.string.uuid) {
          return this.matches(rUUID, {
            name: "uuid",
            message,
            excludeEmptyString: false
          });
        }
        ensure() {
          return this.default("").transform((val) => val === null ? "" : val);
        }
        trim(message = _locale.string.trim) {
          return this.transform((val) => val != null ? val.trim() : val).test({
            message,
            name: "trim",
            test: isTrimmed
          });
        }
        lowercase(message = _locale.string.lowercase) {
          return this.transform((value) => !(0, _isAbsent.default)(value) ? value.toLowerCase() : value).test({
            message,
            name: "string_case",
            exclusive: true,
            test: (value) => (0, _isAbsent.default)(value) || value === value.toLowerCase()
          });
        }
        uppercase(message = _locale.string.uppercase) {
          return this.transform((value) => !(0, _isAbsent.default)(value) ? value.toUpperCase() : value).test({
            message,
            name: "string_case",
            exclusive: true,
            test: (value) => (0, _isAbsent.default)(value) || value === value.toUpperCase()
          });
        }
      };
      exports.default = StringSchema;
      create.prototype = StringSchema.prototype;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/number.js
  var require_number = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/number.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.create = create;
      exports.default = void 0;
      var _locale = require_locale();
      var _isAbsent = _interopRequireDefault(require_isAbsent());
      var _schema = _interopRequireDefault(require_schema2());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {default: obj};
      }
      var isNaN2 = (value) => value != +value;
      function create() {
        return new NumberSchema();
      }
      var NumberSchema = class extends _schema.default {
        constructor() {
          super({
            type: "number"
          });
          this.withMutation(() => {
            this.transform(function(value) {
              let parsed = value;
              if (typeof parsed === "string") {
                parsed = parsed.replace(/\s/g, "");
                if (parsed === "")
                  return NaN;
                parsed = +parsed;
              }
              if (this.isType(parsed))
                return parsed;
              return parseFloat(parsed);
            });
          });
        }
        _typeCheck(value) {
          if (value instanceof Number)
            value = value.valueOf();
          return typeof value === "number" && !isNaN2(value);
        }
        min(min, message = _locale.number.min) {
          return this.test({
            message,
            name: "min",
            exclusive: true,
            params: {
              min
            },
            test(value) {
              return (0, _isAbsent.default)(value) || value >= this.resolve(min);
            }
          });
        }
        max(max, message = _locale.number.max) {
          return this.test({
            message,
            name: "max",
            exclusive: true,
            params: {
              max
            },
            test(value) {
              return (0, _isAbsent.default)(value) || value <= this.resolve(max);
            }
          });
        }
        lessThan(less, message = _locale.number.lessThan) {
          return this.test({
            message,
            name: "max",
            exclusive: true,
            params: {
              less
            },
            test(value) {
              return (0, _isAbsent.default)(value) || value < this.resolve(less);
            }
          });
        }
        moreThan(more, message = _locale.number.moreThan) {
          return this.test({
            message,
            name: "min",
            exclusive: true,
            params: {
              more
            },
            test(value) {
              return (0, _isAbsent.default)(value) || value > this.resolve(more);
            }
          });
        }
        positive(msg = _locale.number.positive) {
          return this.moreThan(0, msg);
        }
        negative(msg = _locale.number.negative) {
          return this.lessThan(0, msg);
        }
        integer(message = _locale.number.integer) {
          return this.test({
            name: "integer",
            message,
            test: (val) => (0, _isAbsent.default)(val) || Number.isInteger(val)
          });
        }
        truncate() {
          return this.transform((value) => !(0, _isAbsent.default)(value) ? value | 0 : value);
        }
        round(method) {
          var _method;
          var avail = ["ceil", "floor", "round", "trunc"];
          method = ((_method = method) == null ? void 0 : _method.toLowerCase()) || "round";
          if (method === "trunc")
            return this.truncate();
          if (avail.indexOf(method.toLowerCase()) === -1)
            throw new TypeError("Only valid options for round() are: " + avail.join(", "));
          return this.transform((value) => !(0, _isAbsent.default)(value) ? Math[method](value) : value);
        }
      };
      exports.default = NumberSchema;
      create.prototype = NumberSchema.prototype;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/util/isodate.js
  var require_isodate = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/util/isodate.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = parseIsoDate;
      var isoReg = /^(\d{4}|[+\-]\d{6})(?:-?(\d{2})(?:-?(\d{2}))?)?(?:[ T]?(\d{2}):?(\d{2})(?::?(\d{2})(?:[,\.](\d{1,}))?)?(?:(Z)|([+\-])(\d{2})(?::?(\d{2}))?)?)?$/;
      function parseIsoDate(date) {
        var numericKeys = [1, 4, 5, 6, 7, 10, 11], minutesOffset = 0, timestamp, struct;
        if (struct = isoReg.exec(date)) {
          for (var i = 0, k; k = numericKeys[i]; ++i)
            struct[k] = +struct[k] || 0;
          struct[2] = (+struct[2] || 1) - 1;
          struct[3] = +struct[3] || 1;
          struct[7] = struct[7] ? String(struct[7]).substr(0, 3) : 0;
          if ((struct[8] === void 0 || struct[8] === "") && (struct[9] === void 0 || struct[9] === ""))
            timestamp = +new Date(struct[1], struct[2], struct[3], struct[4], struct[5], struct[6], struct[7]);
          else {
            if (struct[8] !== "Z" && struct[9] !== void 0) {
              minutesOffset = struct[10] * 60 + struct[11];
              if (struct[9] === "+")
                minutesOffset = 0 - minutesOffset;
            }
            timestamp = Date.UTC(struct[1], struct[2], struct[3], struct[4], struct[5] + minutesOffset, struct[6], struct[7]);
          }
        } else
          timestamp = Date.parse ? Date.parse(date) : NaN;
        return timestamp;
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/date.js
  var require_date = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/date.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.create = create;
      exports.default = void 0;
      var _isodate = _interopRequireDefault(require_isodate());
      var _locale = require_locale();
      var _isAbsent = _interopRequireDefault(require_isAbsent());
      var _Reference = _interopRequireDefault(require_Reference());
      var _schema = _interopRequireDefault(require_schema2());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {default: obj};
      }
      var invalidDate = new Date("");
      var isDate3 = (obj) => Object.prototype.toString.call(obj) === "[object Date]";
      function create() {
        return new DateSchema();
      }
      var DateSchema = class extends _schema.default {
        constructor() {
          super({
            type: "date"
          });
          this.withMutation(() => {
            this.transform(function(value) {
              if (this.isType(value))
                return value;
              value = (0, _isodate.default)(value);
              return !isNaN(value) ? new Date(value) : invalidDate;
            });
          });
        }
        _typeCheck(v) {
          return isDate3(v) && !isNaN(v.getTime());
        }
        prepareParam(ref, name) {
          let param;
          if (!_Reference.default.isRef(ref)) {
            let cast = this.cast(ref);
            if (!this._typeCheck(cast))
              throw new TypeError(`\`${name}\` must be a Date or a value that can be \`cast()\` to a Date`);
            param = cast;
          } else {
            param = ref;
          }
          return param;
        }
        min(min, message = _locale.date.min) {
          let limit = this.prepareParam(min, "min");
          return this.test({
            message,
            name: "min",
            exclusive: true,
            params: {
              min
            },
            test(value) {
              return (0, _isAbsent.default)(value) || value >= this.resolve(limit);
            }
          });
        }
        max(max, message = _locale.date.max) {
          var limit = this.prepareParam(max, "max");
          return this.test({
            message,
            name: "max",
            exclusive: true,
            params: {
              max
            },
            test(value) {
              return (0, _isAbsent.default)(value) || value <= this.resolve(limit);
            }
          });
        }
      };
      exports.default = DateSchema;
      DateSchema.INVALID_DATE = invalidDate;
      create.prototype = DateSchema.prototype;
      create.INVALID_DATE = invalidDate;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_arrayReduce.js
  var require_arrayReduce = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_arrayReduce.js"(exports, module) {
      function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1, length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[++index];
        }
        while (++index < length) {
          accumulator = iteratee(accumulator, array[index], index, array);
        }
        return accumulator;
      }
      module.exports = arrayReduce;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_basePropertyOf.js
  var require_basePropertyOf = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_basePropertyOf.js"(exports, module) {
      function basePropertyOf(object) {
        return function(key) {
          return object == null ? void 0 : object[key];
        };
      }
      module.exports = basePropertyOf;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_deburrLetter.js
  var require_deburrLetter = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_deburrLetter.js"(exports, module) {
      var basePropertyOf = require_basePropertyOf();
      var deburredLetters = {
        "\xC0": "A",
        "\xC1": "A",
        "\xC2": "A",
        "\xC3": "A",
        "\xC4": "A",
        "\xC5": "A",
        "\xE0": "a",
        "\xE1": "a",
        "\xE2": "a",
        "\xE3": "a",
        "\xE4": "a",
        "\xE5": "a",
        "\xC7": "C",
        "\xE7": "c",
        "\xD0": "D",
        "\xF0": "d",
        "\xC8": "E",
        "\xC9": "E",
        "\xCA": "E",
        "\xCB": "E",
        "\xE8": "e",
        "\xE9": "e",
        "\xEA": "e",
        "\xEB": "e",
        "\xCC": "I",
        "\xCD": "I",
        "\xCE": "I",
        "\xCF": "I",
        "\xEC": "i",
        "\xED": "i",
        "\xEE": "i",
        "\xEF": "i",
        "\xD1": "N",
        "\xF1": "n",
        "\xD2": "O",
        "\xD3": "O",
        "\xD4": "O",
        "\xD5": "O",
        "\xD6": "O",
        "\xD8": "O",
        "\xF2": "o",
        "\xF3": "o",
        "\xF4": "o",
        "\xF5": "o",
        "\xF6": "o",
        "\xF8": "o",
        "\xD9": "U",
        "\xDA": "U",
        "\xDB": "U",
        "\xDC": "U",
        "\xF9": "u",
        "\xFA": "u",
        "\xFB": "u",
        "\xFC": "u",
        "\xDD": "Y",
        "\xFD": "y",
        "\xFF": "y",
        "\xC6": "Ae",
        "\xE6": "ae",
        "\xDE": "Th",
        "\xFE": "th",
        "\xDF": "ss",
        "\u0100": "A",
        "\u0102": "A",
        "\u0104": "A",
        "\u0101": "a",
        "\u0103": "a",
        "\u0105": "a",
        "\u0106": "C",
        "\u0108": "C",
        "\u010A": "C",
        "\u010C": "C",
        "\u0107": "c",
        "\u0109": "c",
        "\u010B": "c",
        "\u010D": "c",
        "\u010E": "D",
        "\u0110": "D",
        "\u010F": "d",
        "\u0111": "d",
        "\u0112": "E",
        "\u0114": "E",
        "\u0116": "E",
        "\u0118": "E",
        "\u011A": "E",
        "\u0113": "e",
        "\u0115": "e",
        "\u0117": "e",
        "\u0119": "e",
        "\u011B": "e",
        "\u011C": "G",
        "\u011E": "G",
        "\u0120": "G",
        "\u0122": "G",
        "\u011D": "g",
        "\u011F": "g",
        "\u0121": "g",
        "\u0123": "g",
        "\u0124": "H",
        "\u0126": "H",
        "\u0125": "h",
        "\u0127": "h",
        "\u0128": "I",
        "\u012A": "I",
        "\u012C": "I",
        "\u012E": "I",
        "\u0130": "I",
        "\u0129": "i",
        "\u012B": "i",
        "\u012D": "i",
        "\u012F": "i",
        "\u0131": "i",
        "\u0134": "J",
        "\u0135": "j",
        "\u0136": "K",
        "\u0137": "k",
        "\u0138": "k",
        "\u0139": "L",
        "\u013B": "L",
        "\u013D": "L",
        "\u013F": "L",
        "\u0141": "L",
        "\u013A": "l",
        "\u013C": "l",
        "\u013E": "l",
        "\u0140": "l",
        "\u0142": "l",
        "\u0143": "N",
        "\u0145": "N",
        "\u0147": "N",
        "\u014A": "N",
        "\u0144": "n",
        "\u0146": "n",
        "\u0148": "n",
        "\u014B": "n",
        "\u014C": "O",
        "\u014E": "O",
        "\u0150": "O",
        "\u014D": "o",
        "\u014F": "o",
        "\u0151": "o",
        "\u0154": "R",
        "\u0156": "R",
        "\u0158": "R",
        "\u0155": "r",
        "\u0157": "r",
        "\u0159": "r",
        "\u015A": "S",
        "\u015C": "S",
        "\u015E": "S",
        "\u0160": "S",
        "\u015B": "s",
        "\u015D": "s",
        "\u015F": "s",
        "\u0161": "s",
        "\u0162": "T",
        "\u0164": "T",
        "\u0166": "T",
        "\u0163": "t",
        "\u0165": "t",
        "\u0167": "t",
        "\u0168": "U",
        "\u016A": "U",
        "\u016C": "U",
        "\u016E": "U",
        "\u0170": "U",
        "\u0172": "U",
        "\u0169": "u",
        "\u016B": "u",
        "\u016D": "u",
        "\u016F": "u",
        "\u0171": "u",
        "\u0173": "u",
        "\u0174": "W",
        "\u0175": "w",
        "\u0176": "Y",
        "\u0177": "y",
        "\u0178": "Y",
        "\u0179": "Z",
        "\u017B": "Z",
        "\u017D": "Z",
        "\u017A": "z",
        "\u017C": "z",
        "\u017E": "z",
        "\u0132": "IJ",
        "\u0133": "ij",
        "\u0152": "Oe",
        "\u0153": "oe",
        "\u0149": "'n",
        "\u017F": "s"
      };
      var deburrLetter = basePropertyOf(deburredLetters);
      module.exports = deburrLetter;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/deburr.js
  var require_deburr = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/deburr.js"(exports, module) {
      var deburrLetter = require_deburrLetter();
      var toString = require_toString();
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
      var rsComboMarksRange = "\\u0300-\\u036f";
      var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
      var rsComboSymbolsRange = "\\u20d0-\\u20ff";
      var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
      var rsCombo = "[" + rsComboRange + "]";
      var reComboMark = RegExp(rsCombo, "g");
      function deburr(string) {
        string = toString(string);
        return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
      }
      module.exports = deburr;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_asciiWords.js
  var require_asciiWords = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_asciiWords.js"(exports, module) {
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
      function asciiWords(string) {
        return string.match(reAsciiWord) || [];
      }
      module.exports = asciiWords;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_hasUnicodeWord.js
  var require_hasUnicodeWord = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_hasUnicodeWord.js"(exports, module) {
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
      function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
      }
      module.exports = hasUnicodeWord;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_unicodeWords.js
  var require_unicodeWords = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_unicodeWords.js"(exports, module) {
      var rsAstralRange = "\\ud800-\\udfff";
      var rsComboMarksRange = "\\u0300-\\u036f";
      var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
      var rsComboSymbolsRange = "\\u20d0-\\u20ff";
      var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
      var rsDingbatRange = "\\u2700-\\u27bf";
      var rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff";
      var rsMathOpRange = "\\xac\\xb1\\xd7\\xf7";
      var rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf";
      var rsPunctuationRange = "\\u2000-\\u206f";
      var rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000";
      var rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde";
      var rsVarRange = "\\ufe0e\\ufe0f";
      var rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
      var rsApos = "['\u2019]";
      var rsBreak = "[" + rsBreakRange + "]";
      var rsCombo = "[" + rsComboRange + "]";
      var rsDigits = "\\d+";
      var rsDingbat = "[" + rsDingbatRange + "]";
      var rsLower = "[" + rsLowerRange + "]";
      var rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]";
      var rsFitz = "\\ud83c[\\udffb-\\udfff]";
      var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
      var rsNonAstral = "[^" + rsAstralRange + "]";
      var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
      var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
      var rsUpper = "[" + rsUpperRange + "]";
      var rsZWJ = "\\u200d";
      var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")";
      var rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")";
      var rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?";
      var rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?";
      var reOptMod = rsModifier + "?";
      var rsOptVar = "[" + rsVarRange + "]?";
      var rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
      var rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])";
      var rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])";
      var rsSeq = rsOptVar + reOptMod + rsOptJoin;
      var rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq;
      var reUnicodeWord = RegExp([
        rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
        rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
        rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
        rsUpper + "+" + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
      ].join("|"), "g");
      function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
      }
      module.exports = unicodeWords;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/words.js
  var require_words = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/words.js"(exports, module) {
      var asciiWords = require_asciiWords();
      var hasUnicodeWord = require_hasUnicodeWord();
      var toString = require_toString();
      var unicodeWords = require_unicodeWords();
      function words(string, pattern, guard) {
        string = toString(string);
        pattern = guard ? void 0 : pattern;
        if (pattern === void 0) {
          return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
        }
        return string.match(pattern) || [];
      }
      module.exports = words;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_createCompounder.js
  var require_createCompounder = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_createCompounder.js"(exports, module) {
      var arrayReduce = require_arrayReduce();
      var deburr = require_deburr();
      var words = require_words();
      var rsApos = "['\u2019]";
      var reApos = RegExp(rsApos, "g");
      function createCompounder(callback) {
        return function(string) {
          return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
        };
      }
      module.exports = createCompounder;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/snakeCase.js
  var require_snakeCase = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/snakeCase.js"(exports, module) {
      var createCompounder = require_createCompounder();
      var snakeCase = createCompounder(function(result, word, index) {
        return result + (index ? "_" : "") + word.toLowerCase();
      });
      module.exports = snakeCase;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/camelCase.js
  var require_camelCase = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/camelCase.js"(exports, module) {
      var capitalize2 = require_capitalize();
      var createCompounder = require_createCompounder();
      var camelCase = createCompounder(function(result, word, index) {
        word = word.toLowerCase();
        return result + (index ? capitalize2(word) : word);
      });
      module.exports = camelCase;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/mapKeys.js
  var require_mapKeys = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/mapKeys.js"(exports, module) {
      var baseAssignValue = require_baseAssignValue();
      var baseForOwn = require_baseForOwn();
      var baseIteratee = require_baseIteratee();
      function mapKeys(object, iteratee) {
        var result = {};
        iteratee = baseIteratee(iteratee, 3);
        baseForOwn(object, function(value, key, object2) {
          baseAssignValue(result, iteratee(value, key, object2), value);
        });
        return result;
      }
      module.exports = mapKeys;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/toposort-npm-2.0.2-d472329c7d-d64c74b570.zip/node_modules/toposort/index.js
  var require_toposort = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/toposort-npm-2.0.2-d472329c7d-d64c74b570.zip/node_modules/toposort/index.js"(exports, module) {
      module.exports = function(edges) {
        return toposort(uniqueNodes(edges), edges);
      };
      module.exports.array = toposort;
      function toposort(nodes, edges) {
        var cursor = nodes.length, sorted = new Array(cursor), visited = {}, i = cursor, outgoingEdges = makeOutgoingEdges(edges), nodesHash = makeNodesHash(nodes);
        edges.forEach(function(edge) {
          if (!nodesHash.has(edge[0]) || !nodesHash.has(edge[1])) {
            throw new Error("Unknown node. There is an unknown node in the supplied edges.");
          }
        });
        while (i--) {
          if (!visited[i])
            visit(nodes[i], i, new Set());
        }
        return sorted;
        function visit(node, i2, predecessors) {
          if (predecessors.has(node)) {
            var nodeRep;
            try {
              nodeRep = ", node was:" + JSON.stringify(node);
            } catch (e) {
              nodeRep = "";
            }
            throw new Error("Cyclic dependency" + nodeRep);
          }
          if (!nodesHash.has(node)) {
            throw new Error("Found unknown node. Make sure to provided all involved nodes. Unknown node: " + JSON.stringify(node));
          }
          if (visited[i2])
            return;
          visited[i2] = true;
          var outgoing = outgoingEdges.get(node) || new Set();
          outgoing = Array.from(outgoing);
          if (i2 = outgoing.length) {
            predecessors.add(node);
            do {
              var child = outgoing[--i2];
              visit(child, nodesHash.get(child), predecessors);
            } while (i2);
            predecessors.delete(node);
          }
          sorted[--cursor] = node;
        }
      }
      function uniqueNodes(arr) {
        var res = new Set();
        for (var i = 0, len = arr.length; i < len; i++) {
          var edge = arr[i];
          res.add(edge[0]);
          res.add(edge[1]);
        }
        return Array.from(res);
      }
      function makeOutgoingEdges(arr) {
        var edges = new Map();
        for (var i = 0, len = arr.length; i < len; i++) {
          var edge = arr[i];
          if (!edges.has(edge[0]))
            edges.set(edge[0], new Set());
          if (!edges.has(edge[1]))
            edges.set(edge[1], new Set());
          edges.get(edge[0]).add(edge[1]);
        }
        return edges;
      }
      function makeNodesHash(arr) {
        var res = new Map();
        for (var i = 0, len = arr.length; i < len; i++) {
          res.set(arr[i], i);
        }
        return res;
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/util/sortFields.js
  var require_sortFields = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/util/sortFields.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = sortFields;
      var _has = _interopRequireDefault(require_has());
      var _toposort = _interopRequireDefault(require_toposort());
      var _propertyExpr = require_property_expr();
      var _Reference = _interopRequireDefault(require_Reference());
      var _isSchema = _interopRequireDefault(require_isSchema());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {default: obj};
      }
      function sortFields(fields, excludes = []) {
        let edges = [];
        let nodes = [];
        function addNode(depPath, key) {
          var node = (0, _propertyExpr.split)(depPath)[0];
          if (!~nodes.indexOf(node))
            nodes.push(node);
          if (!~excludes.indexOf(`${key}-${node}`))
            edges.push([key, node]);
        }
        for (const key in fields)
          if ((0, _has.default)(fields, key)) {
            let value = fields[key];
            if (!~nodes.indexOf(key))
              nodes.push(key);
            if (_Reference.default.isRef(value) && value.isSibling)
              addNode(value.path, key);
            else if ((0, _isSchema.default)(value) && "deps" in value)
              value.deps.forEach((path3) => addNode(path3, key));
          }
        return _toposort.default.array(nodes, edges).reverse();
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/util/sortByKeyOrder.js
  var require_sortByKeyOrder = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/util/sortByKeyOrder.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = sortByKeyOrder;
      function findIndex(arr, err) {
        let idx = Infinity;
        arr.some((key, ii) => {
          var _err$path;
          if (((_err$path = err.path) == null ? void 0 : _err$path.indexOf(key)) !== -1) {
            idx = ii;
            return true;
          }
        });
        return idx;
      }
      function sortByKeyOrder(keys) {
        return (a, b) => {
          return findIndex(keys, a) - findIndex(keys, b);
        };
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/object.js
  var require_object = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/object.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.create = create;
      exports.default = void 0;
      var _has = _interopRequireDefault(require_has());
      var _snakeCase = _interopRequireDefault(require_snakeCase());
      var _camelCase = _interopRequireDefault(require_camelCase());
      var _mapKeys = _interopRequireDefault(require_mapKeys());
      var _mapValues = _interopRequireDefault(require_mapValues());
      var _propertyExpr = require_property_expr();
      var _locale = require_locale();
      var _sortFields = _interopRequireDefault(require_sortFields());
      var _sortByKeyOrder = _interopRequireDefault(require_sortByKeyOrder());
      var _runTests = _interopRequireDefault(require_runTests());
      var _ValidationError = _interopRequireDefault(require_ValidationError());
      var _schema = _interopRequireDefault(require_schema2());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {default: obj};
      }
      function _extends() {
        _extends = Object.assign || function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends.apply(this, arguments);
      }
      var isObject2 = (obj) => Object.prototype.toString.call(obj) === "[object Object]";
      function unknown(ctx, value) {
        let known = Object.keys(ctx.fields);
        return Object.keys(value).filter((key) => known.indexOf(key) === -1);
      }
      var defaultSort = (0, _sortByKeyOrder.default)([]);
      var ObjectSchema = class extends _schema.default {
        constructor(spec) {
          super({
            type: "object"
          });
          this.fields = Object.create(null);
          this._sortErrors = defaultSort;
          this._nodes = [];
          this._excludedEdges = [];
          this.withMutation(() => {
            this.transform(function coerce(value) {
              if (typeof value === "string") {
                try {
                  value = JSON.parse(value);
                } catch (err) {
                  value = null;
                }
              }
              if (this.isType(value))
                return value;
              return null;
            });
            if (spec) {
              this.shape(spec);
            }
          });
        }
        _typeCheck(value) {
          return isObject2(value) || typeof value === "function";
        }
        _cast(_value, options = {}) {
          var _options$stripUnknown;
          let value = super._cast(_value, options);
          if (value === void 0)
            return this.getDefault();
          if (!this._typeCheck(value))
            return value;
          let fields = this.fields;
          let strip = (_options$stripUnknown = options.stripUnknown) != null ? _options$stripUnknown : this.spec.noUnknown;
          let props = this._nodes.concat(Object.keys(value).filter((v) => this._nodes.indexOf(v) === -1));
          let intermediateValue = {};
          let innerOptions = _extends({}, options, {
            parent: intermediateValue,
            __validating: options.__validating || false
          });
          let isChanged = false;
          for (const prop of props) {
            let field = fields[prop];
            let exists = (0, _has.default)(value, prop);
            if (field) {
              let fieldValue;
              let inputValue = value[prop];
              innerOptions.path = (options.path ? `${options.path}.` : "") + prop;
              field = field.resolve({
                value: inputValue,
                context: options.context,
                parent: intermediateValue
              });
              let fieldSpec = "spec" in field ? field.spec : void 0;
              let strict = fieldSpec == null ? void 0 : fieldSpec.strict;
              if (fieldSpec == null ? void 0 : fieldSpec.strip) {
                isChanged = isChanged || prop in value;
                continue;
              }
              fieldValue = !options.__validating || !strict ? field.cast(value[prop], innerOptions) : value[prop];
              if (fieldValue !== void 0) {
                intermediateValue[prop] = fieldValue;
              }
            } else if (exists && !strip) {
              intermediateValue[prop] = value[prop];
            }
            if (intermediateValue[prop] !== value[prop]) {
              isChanged = true;
            }
          }
          return isChanged ? intermediateValue : value;
        }
        _validate(_value, opts = {}, callback) {
          let errors4 = [];
          let {
            sync,
            from = [],
            originalValue = _value,
            abortEarly = this.spec.abortEarly,
            recursive = this.spec.recursive
          } = opts;
          from = [{
            schema: this,
            value: originalValue
          }, ...from];
          opts.__validating = true;
          opts.originalValue = originalValue;
          opts.from = from;
          super._validate(_value, opts, (err, value) => {
            if (err) {
              if (!_ValidationError.default.isError(err) || abortEarly) {
                return void callback(err, value);
              }
              errors4.push(err);
            }
            if (!recursive || !isObject2(value)) {
              callback(errors4[0] || null, value);
              return;
            }
            originalValue = originalValue || value;
            let tests2 = this._nodes.map((key) => (_, cb) => {
              let path3 = key.indexOf(".") === -1 ? (opts.path ? `${opts.path}.` : "") + key : `${opts.path || ""}["${key}"]`;
              let field = this.fields[key];
              if (field && "validate" in field) {
                field.validate(value[key], _extends({}, opts, {
                  path: path3,
                  from,
                  strict: true,
                  parent: value,
                  originalValue: originalValue[key]
                }), cb);
                return;
              }
              cb(null);
            });
            (0, _runTests.default)({
              sync,
              tests: tests2,
              value,
              errors: errors4,
              endEarly: abortEarly,
              sort: this._sortErrors,
              path: opts.path
            }, callback);
          });
        }
        clone(spec) {
          const next = super.clone(spec);
          next.fields = _extends({}, this.fields);
          next._nodes = this._nodes;
          next._excludedEdges = this._excludedEdges;
          next._sortErrors = this._sortErrors;
          return next;
        }
        concat(schema) {
          let next = super.concat(schema);
          let nextFields = next.fields;
          for (let [field, schemaOrRef] of Object.entries(this.fields)) {
            const target = nextFields[field];
            if (target === void 0) {
              nextFields[field] = schemaOrRef;
            } else if (target instanceof _schema.default && schemaOrRef instanceof _schema.default) {
              nextFields[field] = schemaOrRef.concat(target);
            }
          }
          return next.withMutation(() => next.shape(nextFields));
        }
        getDefaultFromShape() {
          let dft = {};
          this._nodes.forEach((key) => {
            const field = this.fields[key];
            dft[key] = "default" in field ? field.getDefault() : void 0;
          });
          return dft;
        }
        _getDefault() {
          if ("default" in this.spec) {
            return super._getDefault();
          }
          if (!this._nodes.length) {
            return void 0;
          }
          return this.getDefaultFromShape();
        }
        shape(additions, excludes = []) {
          let next = this.clone();
          let fields = Object.assign(next.fields, additions);
          next.fields = fields;
          next._sortErrors = (0, _sortByKeyOrder.default)(Object.keys(fields));
          if (excludes.length) {
            if (!Array.isArray(excludes[0]))
              excludes = [excludes];
            let keys = excludes.map(([first, second]) => `${first}-${second}`);
            next._excludedEdges = next._excludedEdges.concat(keys);
          }
          next._nodes = (0, _sortFields.default)(fields, next._excludedEdges);
          return next;
        }
        pick(keys) {
          const picked = {};
          for (const key of keys) {
            if (this.fields[key])
              picked[key] = this.fields[key];
          }
          return this.clone().withMutation((next) => {
            next.fields = {};
            return next.shape(picked);
          });
        }
        omit(keys) {
          const next = this.clone();
          const fields = next.fields;
          next.fields = {};
          for (const key of keys) {
            delete fields[key];
          }
          return next.withMutation(() => next.shape(fields));
        }
        from(from, to, alias) {
          let fromGetter = (0, _propertyExpr.getter)(from, true);
          return this.transform((obj) => {
            if (obj == null)
              return obj;
            let newObj = obj;
            if ((0, _has.default)(obj, from)) {
              newObj = _extends({}, obj);
              if (!alias)
                delete newObj[from];
              newObj[to] = fromGetter(obj);
            }
            return newObj;
          });
        }
        noUnknown(noAllow = true, message = _locale.object.noUnknown) {
          if (typeof noAllow === "string") {
            message = noAllow;
            noAllow = true;
          }
          let next = this.test({
            name: "noUnknown",
            exclusive: true,
            message,
            test(value) {
              if (value == null)
                return true;
              const unknownKeys = unknown(this.schema, value);
              return !noAllow || unknownKeys.length === 0 || this.createError({
                params: {
                  unknown: unknownKeys.join(", ")
                }
              });
            }
          });
          next.spec.noUnknown = noAllow;
          return next;
        }
        unknown(allow = true, message = _locale.object.noUnknown) {
          return this.noUnknown(!allow, message);
        }
        transformKeys(fn) {
          return this.transform((obj) => obj && (0, _mapKeys.default)(obj, (_, key) => fn(key)));
        }
        camelCase() {
          return this.transformKeys(_camelCase.default);
        }
        snakeCase() {
          return this.transformKeys(_snakeCase.default);
        }
        constantCase() {
          return this.transformKeys((key) => (0, _snakeCase.default)(key).toUpperCase());
        }
        describe() {
          let base = super.describe();
          base.fields = (0, _mapValues.default)(this.fields, (value) => value.describe());
          return base;
        }
      };
      exports.default = ObjectSchema;
      function create(spec) {
        return new ObjectSchema(spec);
      }
      create.prototype = ObjectSchema.prototype;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/array.js
  var require_array4 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/array.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.create = create;
      exports.default = void 0;
      var _isAbsent = _interopRequireDefault(require_isAbsent());
      var _isSchema = _interopRequireDefault(require_isSchema());
      var _printValue = _interopRequireDefault(require_printValue());
      var _locale = require_locale();
      var _runTests = _interopRequireDefault(require_runTests());
      var _ValidationError = _interopRequireDefault(require_ValidationError());
      var _schema = _interopRequireDefault(require_schema2());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {default: obj};
      }
      function _extends() {
        _extends = Object.assign || function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends.apply(this, arguments);
      }
      function create(type) {
        return new ArraySchema(type);
      }
      var ArraySchema = class extends _schema.default {
        constructor(type) {
          super({
            type: "array"
          });
          this.innerType = type;
          this.withMutation(() => {
            this.transform(function(values) {
              if (typeof values === "string")
                try {
                  values = JSON.parse(values);
                } catch (err) {
                  values = null;
                }
              return this.isType(values) ? values : null;
            });
          });
        }
        _typeCheck(v) {
          return Array.isArray(v);
        }
        get _subType() {
          return this.innerType;
        }
        _cast(_value, _opts) {
          const value = super._cast(_value, _opts);
          if (!this._typeCheck(value) || !this.innerType)
            return value;
          let isChanged = false;
          const castArray = value.map((v, idx) => {
            const castElement = this.innerType.cast(v, _extends({}, _opts, {
              path: `${_opts.path || ""}[${idx}]`
            }));
            if (castElement !== v) {
              isChanged = true;
            }
            return castElement;
          });
          return isChanged ? castArray : value;
        }
        _validate(_value, options = {}, callback) {
          var _options$abortEarly, _options$recursive;
          let errors4 = [];
          let sync = options.sync;
          let path3 = options.path;
          let innerType = this.innerType;
          let endEarly = (_options$abortEarly = options.abortEarly) != null ? _options$abortEarly : this.spec.abortEarly;
          let recursive = (_options$recursive = options.recursive) != null ? _options$recursive : this.spec.recursive;
          let originalValue = options.originalValue != null ? options.originalValue : _value;
          super._validate(_value, options, (err, value) => {
            if (err) {
              if (!_ValidationError.default.isError(err) || endEarly) {
                return void callback(err, value);
              }
              errors4.push(err);
            }
            if (!recursive || !innerType || !this._typeCheck(value)) {
              callback(errors4[0] || null, value);
              return;
            }
            originalValue = originalValue || value;
            let tests2 = new Array(value.length);
            for (let idx = 0; idx < value.length; idx++) {
              let item = value[idx];
              let path4 = `${options.path || ""}[${idx}]`;
              let innerOptions = _extends({}, options, {
                path: path4,
                strict: true,
                parent: value,
                index: idx,
                originalValue: originalValue[idx]
              });
              tests2[idx] = (_, cb) => innerType.validate(item, innerOptions, cb);
            }
            (0, _runTests.default)({
              sync,
              path: path3,
              value,
              errors: errors4,
              endEarly,
              tests: tests2
            }, callback);
          });
        }
        clone(spec) {
          const next = super.clone(spec);
          next.innerType = this.innerType;
          return next;
        }
        concat(schema) {
          let next = super.concat(schema);
          next.innerType = this.innerType;
          if (schema.innerType)
            next.innerType = next.innerType ? next.innerType.concat(schema.innerType) : schema.innerType;
          return next;
        }
        of(schema) {
          let next = this.clone();
          if (!(0, _isSchema.default)(schema))
            throw new TypeError("`array.of()` sub-schema must be a valid yup schema not: " + (0, _printValue.default)(schema));
          next.innerType = schema;
          return next;
        }
        length(length, message = _locale.array.length) {
          return this.test({
            message,
            name: "length",
            exclusive: true,
            params: {
              length
            },
            test(value) {
              return (0, _isAbsent.default)(value) || value.length === this.resolve(length);
            }
          });
        }
        min(min, message) {
          message = message || _locale.array.min;
          return this.test({
            message,
            name: "min",
            exclusive: true,
            params: {
              min
            },
            test(value) {
              return (0, _isAbsent.default)(value) || value.length >= this.resolve(min);
            }
          });
        }
        max(max, message) {
          message = message || _locale.array.max;
          return this.test({
            message,
            name: "max",
            exclusive: true,
            params: {
              max
            },
            test(value) {
              return (0, _isAbsent.default)(value) || value.length <= this.resolve(max);
            }
          });
        }
        ensure() {
          return this.default(() => []).transform((val, original) => {
            if (this._typeCheck(val))
              return val;
            return original == null ? [] : [].concat(original);
          });
        }
        compact(rejector) {
          let reject = !rejector ? (v) => !!v : (v, i, a) => !rejector(v, i, a);
          return this.transform((values) => values != null ? values.filter(reject) : values);
        }
        describe() {
          let base = super.describe();
          if (this.innerType)
            base.innerType = this.innerType.describe();
          return base;
        }
        nullable(isNullable2 = true) {
          return super.nullable(isNullable2);
        }
        defined() {
          return super.defined();
        }
        required(msg) {
          return super.required(msg);
        }
      };
      exports.default = ArraySchema;
      create.prototype = ArraySchema.prototype;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/Lazy.js
  var require_Lazy = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/Lazy.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.create = create;
      exports.default = void 0;
      var _isSchema = _interopRequireDefault(require_isSchema());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {default: obj};
      }
      function create(builder) {
        return new Lazy(builder);
      }
      var Lazy = class {
        constructor(builder) {
          this.type = "lazy";
          this.__isYupSchema__ = true;
          this._resolve = (value, options = {}) => {
            let schema = this.builder(value, options);
            if (!(0, _isSchema.default)(schema))
              throw new TypeError("lazy() functions must return a valid schema");
            return schema.resolve(options);
          };
          this.builder = builder;
        }
        resolve(options) {
          return this._resolve(options.value, options);
        }
        cast(value, options) {
          return this._resolve(value, options).cast(value, options);
        }
        validate(value, options, maybeCb) {
          return this._resolve(value, options).validate(value, options, maybeCb);
        }
        validateSync(value, options) {
          return this._resolve(value, options).validateSync(value, options);
        }
        validateAt(path3, value, options) {
          return this._resolve(value, options).validateAt(path3, value, options);
        }
        validateSyncAt(path3, value, options) {
          return this._resolve(value, options).validateSyncAt(path3, value, options);
        }
        describe() {
          return null;
        }
        isValid(value, options) {
          return this._resolve(value, options).isValid(value, options);
        }
        isValidSync(value, options) {
          return this._resolve(value, options).isValidSync(value, options);
        }
      };
      var _default = Lazy;
      exports.default = _default;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/setLocale.js
  var require_setLocale = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/setLocale.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = setLocale;
      var _locale = _interopRequireDefault(require_locale());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {default: obj};
      }
      function setLocale(custom) {
        Object.keys(custom).forEach((type) => {
          Object.keys(custom[type]).forEach((method) => {
            _locale.default[type][method] = custom[type][method];
          });
        });
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/index.js
  var require_lib2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/yup-npm-0.32.9-d884fe5f43-3f33850913.zip/node_modules/yup/lib/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.addMethod = addMethod;
      Object.defineProperty(exports, "MixedSchema", {
        enumerable: true,
        get: function() {
          return _mixed.default;
        }
      });
      Object.defineProperty(exports, "mixed", {
        enumerable: true,
        get: function() {
          return _mixed.create;
        }
      });
      Object.defineProperty(exports, "BooleanSchema", {
        enumerable: true,
        get: function() {
          return _boolean.default;
        }
      });
      Object.defineProperty(exports, "bool", {
        enumerable: true,
        get: function() {
          return _boolean.create;
        }
      });
      Object.defineProperty(exports, "boolean", {
        enumerable: true,
        get: function() {
          return _boolean.create;
        }
      });
      Object.defineProperty(exports, "StringSchema", {
        enumerable: true,
        get: function() {
          return _string.default;
        }
      });
      Object.defineProperty(exports, "string", {
        enumerable: true,
        get: function() {
          return _string.create;
        }
      });
      Object.defineProperty(exports, "NumberSchema", {
        enumerable: true,
        get: function() {
          return _number.default;
        }
      });
      Object.defineProperty(exports, "number", {
        enumerable: true,
        get: function() {
          return _number.create;
        }
      });
      Object.defineProperty(exports, "DateSchema", {
        enumerable: true,
        get: function() {
          return _date.default;
        }
      });
      Object.defineProperty(exports, "date", {
        enumerable: true,
        get: function() {
          return _date.create;
        }
      });
      Object.defineProperty(exports, "ObjectSchema", {
        enumerable: true,
        get: function() {
          return _object.default;
        }
      });
      Object.defineProperty(exports, "object", {
        enumerable: true,
        get: function() {
          return _object.create;
        }
      });
      Object.defineProperty(exports, "ArraySchema", {
        enumerable: true,
        get: function() {
          return _array.default;
        }
      });
      Object.defineProperty(exports, "array", {
        enumerable: true,
        get: function() {
          return _array.create;
        }
      });
      Object.defineProperty(exports, "ref", {
        enumerable: true,
        get: function() {
          return _Reference.create;
        }
      });
      Object.defineProperty(exports, "lazy", {
        enumerable: true,
        get: function() {
          return _Lazy.create;
        }
      });
      Object.defineProperty(exports, "ValidationError", {
        enumerable: true,
        get: function() {
          return _ValidationError.default;
        }
      });
      Object.defineProperty(exports, "reach", {
        enumerable: true,
        get: function() {
          return _reach.default;
        }
      });
      Object.defineProperty(exports, "isSchema", {
        enumerable: true,
        get: function() {
          return _isSchema.default;
        }
      });
      Object.defineProperty(exports, "setLocale", {
        enumerable: true,
        get: function() {
          return _setLocale.default;
        }
      });
      Object.defineProperty(exports, "BaseSchema", {
        enumerable: true,
        get: function() {
          return _schema.default;
        }
      });
      var _mixed = _interopRequireWildcard(require_mixed());
      var _boolean = _interopRequireWildcard(require_boolean());
      var _string = _interopRequireWildcard(require_string2());
      var _number = _interopRequireWildcard(require_number());
      var _date = _interopRequireWildcard(require_date());
      var _object = _interopRequireWildcard(require_object());
      var _array = _interopRequireWildcard(require_array4());
      var _Reference = require_Reference();
      var _Lazy = require_Lazy();
      var _ValidationError = _interopRequireDefault(require_ValidationError());
      var _reach = _interopRequireDefault(require_reach());
      var _isSchema = _interopRequireDefault(require_isSchema());
      var _setLocale = _interopRequireDefault(require_setLocale());
      var _schema = _interopRequireDefault(require_schema2());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {default: obj};
      }
      function _getRequireWildcardCache() {
        if (typeof WeakMap !== "function")
          return null;
        var cache2 = new WeakMap();
        _getRequireWildcardCache = function() {
          return cache2;
        };
        return cache2;
      }
      function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return {default: obj};
        }
        var cache2 = _getRequireWildcardCache();
        if (cache2 && cache2.has(obj)) {
          return cache2.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache2) {
          cache2.set(obj, newObj);
        }
        return newObj;
      }
      function addMethod(schemaType, name, fn) {
        if (!schemaType || !(0, _isSchema.default)(schemaType.prototype))
          throw new TypeError("You must provide a yup schema constructor function");
        if (typeof name !== "string")
          throw new TypeError("A Method name must be provided");
        if (typeof fn !== "function")
          throw new TypeError("Method function must be provided");
        schemaType.prototype[name] = fn;
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/ansi-colors-npm-4.1.1-97ad42f223-138d04a510.zip/node_modules/ansi-colors/symbols.js
  var require_symbols = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/ansi-colors-npm-4.1.1-97ad42f223-138d04a510.zip/node_modules/ansi-colors/symbols.js"(exports, module) {
      "use strict";
      var isHyper = process.env.TERM_PROGRAM === "Hyper";
      var isWindows = process.platform === "win32";
      var isLinux = process.platform === "linux";
      var common = {
        ballotDisabled: "\u2612",
        ballotOff: "\u2610",
        ballotOn: "\u2611",
        bullet: "\u2022",
        bulletWhite: "\u25E6",
        fullBlock: "\u2588",
        heart: "\u2764",
        identicalTo: "\u2261",
        line: "\u2500",
        mark: "\u203B",
        middot: "\xB7",
        minus: "\uFF0D",
        multiplication: "\xD7",
        obelus: "\xF7",
        pencilDownRight: "\u270E",
        pencilRight: "\u270F",
        pencilUpRight: "\u2710",
        percent: "%",
        pilcrow2: "\u2761",
        pilcrow: "\xB6",
        plusMinus: "\xB1",
        section: "\xA7",
        starsOff: "\u2606",
        starsOn: "\u2605",
        upDownArrow: "\u2195"
      };
      var windows = Object.assign({}, common, {
        check: "\u221A",
        cross: "\xD7",
        ellipsisLarge: "...",
        ellipsis: "...",
        info: "i",
        question: "?",
        questionSmall: "?",
        pointer: ">",
        pointerSmall: "\xBB",
        radioOff: "( )",
        radioOn: "(*)",
        warning: "\u203C"
      });
      var other = Object.assign({}, common, {
        ballotCross: "\u2718",
        check: "\u2714",
        cross: "\u2716",
        ellipsisLarge: "\u22EF",
        ellipsis: "\u2026",
        info: "\u2139",
        question: "?",
        questionFull: "\uFF1F",
        questionSmall: "\uFE56",
        pointer: isLinux ? "\u25B8" : "\u276F",
        pointerSmall: isLinux ? "\u2023" : "\u203A",
        radioOff: "\u25EF",
        radioOn: "\u25C9",
        warning: "\u26A0"
      });
      module.exports = isWindows && !isHyper ? windows : other;
      Reflect.defineProperty(module.exports, "common", {enumerable: false, value: common});
      Reflect.defineProperty(module.exports, "windows", {enumerable: false, value: windows});
      Reflect.defineProperty(module.exports, "other", {enumerable: false, value: other});
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/ansi-colors-npm-4.1.1-97ad42f223-138d04a510.zip/node_modules/ansi-colors/index.js
  var require_ansi_colors = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/ansi-colors-npm-4.1.1-97ad42f223-138d04a510.zip/node_modules/ansi-colors/index.js"(exports, module) {
      "use strict";
      var isObject2 = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
      var ANSI_REGEX = /[\u001b\u009b][[\]#;?()]*(?:(?:(?:[^\W_]*;?[^\W_]*)\u0007)|(?:(?:[0-9]{1,4}(;[0-9]{0,4})*)?[~0-9=<>cf-nqrtyA-PRZ]))/g;
      var create = () => {
        const colors2 = {enabled: true, visible: true, styles: {}, keys: {}};
        if ("FORCE_COLOR" in process.env) {
          colors2.enabled = process.env.FORCE_COLOR !== "0";
        }
        const ansi = (style2) => {
          let open = style2.open = `[${style2.codes[0]}m`;
          let close = style2.close = `[${style2.codes[1]}m`;
          let regex = style2.regex = new RegExp(`\\u001b\\[${style2.codes[1]}m`, "g");
          style2.wrap = (input, newline) => {
            if (input.includes(close))
              input = input.replace(regex, close + open);
            let output = open + input + close;
            return newline ? output.replace(/\r*\n/g, `${close}$&${open}`) : output;
          };
          return style2;
        };
        const wrap = (style2, input, newline) => {
          return typeof style2 === "function" ? style2(input) : style2.wrap(input, newline);
        };
        const style = (input, stack) => {
          if (input === "" || input == null)
            return "";
          if (colors2.enabled === false)
            return input;
          if (colors2.visible === false)
            return "";
          let str = "" + input;
          let nl = str.includes("\n");
          let n = stack.length;
          if (n > 0 && stack.includes("unstyle")) {
            stack = [...new Set(["unstyle", ...stack])].reverse();
          }
          while (n-- > 0)
            str = wrap(colors2.styles[stack[n]], str, nl);
          return str;
        };
        const define2 = (name, codes, type) => {
          colors2.styles[name] = ansi({name, codes});
          let keys = colors2.keys[type] || (colors2.keys[type] = []);
          keys.push(name);
          Reflect.defineProperty(colors2, name, {
            configurable: true,
            enumerable: true,
            set(value) {
              colors2.alias(name, value);
            },
            get() {
              let color = (input) => style(input, color.stack);
              Reflect.setPrototypeOf(color, colors2);
              color.stack = this.stack ? this.stack.concat(name) : [name];
              return color;
            }
          });
        };
        define2("reset", [0, 0], "modifier");
        define2("bold", [1, 22], "modifier");
        define2("dim", [2, 22], "modifier");
        define2("italic", [3, 23], "modifier");
        define2("underline", [4, 24], "modifier");
        define2("inverse", [7, 27], "modifier");
        define2("hidden", [8, 28], "modifier");
        define2("strikethrough", [9, 29], "modifier");
        define2("black", [30, 39], "color");
        define2("red", [31, 39], "color");
        define2("green", [32, 39], "color");
        define2("yellow", [33, 39], "color");
        define2("blue", [34, 39], "color");
        define2("magenta", [35, 39], "color");
        define2("cyan", [36, 39], "color");
        define2("white", [37, 39], "color");
        define2("gray", [90, 39], "color");
        define2("grey", [90, 39], "color");
        define2("bgBlack", [40, 49], "bg");
        define2("bgRed", [41, 49], "bg");
        define2("bgGreen", [42, 49], "bg");
        define2("bgYellow", [43, 49], "bg");
        define2("bgBlue", [44, 49], "bg");
        define2("bgMagenta", [45, 49], "bg");
        define2("bgCyan", [46, 49], "bg");
        define2("bgWhite", [47, 49], "bg");
        define2("blackBright", [90, 39], "bright");
        define2("redBright", [91, 39], "bright");
        define2("greenBright", [92, 39], "bright");
        define2("yellowBright", [93, 39], "bright");
        define2("blueBright", [94, 39], "bright");
        define2("magentaBright", [95, 39], "bright");
        define2("cyanBright", [96, 39], "bright");
        define2("whiteBright", [97, 39], "bright");
        define2("bgBlackBright", [100, 49], "bgBright");
        define2("bgRedBright", [101, 49], "bgBright");
        define2("bgGreenBright", [102, 49], "bgBright");
        define2("bgYellowBright", [103, 49], "bgBright");
        define2("bgBlueBright", [104, 49], "bgBright");
        define2("bgMagentaBright", [105, 49], "bgBright");
        define2("bgCyanBright", [106, 49], "bgBright");
        define2("bgWhiteBright", [107, 49], "bgBright");
        colors2.ansiRegex = ANSI_REGEX;
        colors2.hasColor = colors2.hasAnsi = (str) => {
          colors2.ansiRegex.lastIndex = 0;
          return typeof str === "string" && str !== "" && colors2.ansiRegex.test(str);
        };
        colors2.alias = (name, color) => {
          let fn = typeof color === "string" ? colors2[color] : color;
          if (typeof fn !== "function") {
            throw new TypeError("Expected alias to be the name of an existing color (string) or a function");
          }
          if (!fn.stack) {
            Reflect.defineProperty(fn, "name", {value: name});
            colors2.styles[name] = fn;
            fn.stack = [name];
          }
          Reflect.defineProperty(colors2, name, {
            configurable: true,
            enumerable: true,
            set(value) {
              colors2.alias(name, value);
            },
            get() {
              let color2 = (input) => style(input, color2.stack);
              Reflect.setPrototypeOf(color2, colors2);
              color2.stack = this.stack ? this.stack.concat(fn.stack) : fn.stack;
              return color2;
            }
          });
        };
        colors2.theme = (custom) => {
          if (!isObject2(custom))
            throw new TypeError("Expected theme to be an object");
          for (let name of Object.keys(custom)) {
            colors2.alias(name, custom[name]);
          }
          return colors2;
        };
        colors2.alias("unstyle", (str) => {
          if (typeof str === "string" && str !== "") {
            colors2.ansiRegex.lastIndex = 0;
            return str.replace(colors2.ansiRegex, "");
          }
          return "";
        });
        colors2.alias("noop", (str) => str);
        colors2.none = colors2.clear = colors2.noop;
        colors2.stripColor = colors2.unstyle;
        colors2.symbols = require_symbols();
        colors2.define = define2;
        return colors2;
      };
      module.exports = create();
      module.exports.create = create;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/utils.js
  var require_utils5 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/utils.js"(exports) {
      "use strict";
      var toString = Object.prototype.toString;
      var colors2 = require_ansi_colors();
      var called = false;
      var fns = [];
      var complements = {
        "yellow": "blue",
        "cyan": "red",
        "green": "magenta",
        "black": "white",
        "blue": "yellow",
        "red": "cyan",
        "magenta": "green",
        "white": "black"
      };
      exports.longest = (arr, prop) => {
        return arr.reduce((a, v) => Math.max(a, prop ? v[prop].length : v.length), 0);
      };
      exports.hasColor = (str) => !!str && colors2.hasColor(str);
      var isObject2 = exports.isObject = (val) => {
        return val !== null && typeof val === "object" && !Array.isArray(val);
      };
      exports.nativeType = (val) => {
        return toString.call(val).slice(8, -1).toLowerCase().replace(/\s/g, "");
      };
      exports.isAsyncFn = (val) => {
        return exports.nativeType(val) === "asyncfunction";
      };
      exports.isPrimitive = (val) => {
        return val != null && typeof val !== "object" && typeof val !== "function";
      };
      exports.resolve = (context, value, ...rest) => {
        if (typeof value === "function") {
          return value.call(context, ...rest);
        }
        return value;
      };
      exports.scrollDown = (choices = []) => [...choices.slice(1), choices[0]];
      exports.scrollUp = (choices = []) => [choices.pop(), ...choices];
      exports.reorder = (arr = []) => {
        let res = arr.slice();
        res.sort((a, b) => {
          if (a.index > b.index)
            return 1;
          if (a.index < b.index)
            return -1;
          return 0;
        });
        return res;
      };
      exports.swap = (arr, index, pos) => {
        let len = arr.length;
        let idx = pos === len ? 0 : pos < 0 ? len - 1 : pos;
        let choice = arr[index];
        arr[index] = arr[idx];
        arr[idx] = choice;
      };
      exports.width = (stream, fallback = 80) => {
        let columns = stream && stream.columns ? stream.columns : fallback;
        if (stream && typeof stream.getWindowSize === "function") {
          columns = stream.getWindowSize()[0];
        }
        if (process.platform === "win32") {
          return columns - 1;
        }
        return columns;
      };
      exports.height = (stream, fallback = 20) => {
        let rows = stream && stream.rows ? stream.rows : fallback;
        if (stream && typeof stream.getWindowSize === "function") {
          rows = stream.getWindowSize()[1];
        }
        return rows;
      };
      exports.wordWrap = (str, options = {}) => {
        if (!str)
          return str;
        if (typeof options === "number") {
          options = {width: options};
        }
        let {indent = "", newline = "\n" + indent, width = 80} = options;
        let spaces = (newline + indent).match(/[^\S\n]/g) || [];
        width -= spaces.length;
        let source = `.{1,${width}}([\\s\\u200B]+|$)|[^\\s\\u200B]+?([\\s\\u200B]+|$)`;
        let output = str.trim();
        let regex = new RegExp(source, "g");
        let lines = output.match(regex) || [];
        lines = lines.map((line) => line.replace(/\n$/, ""));
        if (options.padEnd)
          lines = lines.map((line) => line.padEnd(width, " "));
        if (options.padStart)
          lines = lines.map((line) => line.padStart(width, " "));
        return indent + lines.join(newline);
      };
      exports.unmute = (color) => {
        let name = color.stack.find((n) => colors2.keys.color.includes(n));
        if (name) {
          return colors2[name];
        }
        let bg = color.stack.find((n) => n.slice(2) === "bg");
        if (bg) {
          return colors2[name.slice(2)];
        }
        return (str) => str;
      };
      exports.pascal = (str) => str ? str[0].toUpperCase() + str.slice(1) : "";
      exports.inverse = (color) => {
        if (!color || !color.stack)
          return color;
        let name = color.stack.find((n) => colors2.keys.color.includes(n));
        if (name) {
          let col = colors2["bg" + exports.pascal(name)];
          return col ? col.black : color;
        }
        let bg = color.stack.find((n) => n.slice(0, 2) === "bg");
        if (bg) {
          return colors2[bg.slice(2).toLowerCase()] || color;
        }
        return colors2.none;
      };
      exports.complement = (color) => {
        if (!color || !color.stack)
          return color;
        let name = color.stack.find((n) => colors2.keys.color.includes(n));
        let bg = color.stack.find((n) => n.slice(0, 2) === "bg");
        if (name && !bg) {
          return colors2[complements[name] || name];
        }
        if (bg) {
          let lower = bg.slice(2).toLowerCase();
          let comp = complements[lower];
          if (!comp)
            return color;
          return colors2["bg" + exports.pascal(comp)] || color;
        }
        return colors2.none;
      };
      exports.meridiem = (date) => {
        let hours = date.getHours();
        let minutes = date.getMinutes();
        let ampm = hours >= 12 ? "pm" : "am";
        hours = hours % 12;
        let hrs = hours === 0 ? 12 : hours;
        let min = minutes < 10 ? "0" + minutes : minutes;
        return hrs + ":" + min + " " + ampm;
      };
      exports.set = (obj = {}, prop = "", val) => {
        return prop.split(".").reduce((acc, k, i, arr) => {
          let value = arr.length - 1 > i ? acc[k] || {} : val;
          if (!exports.isObject(value) && i < arr.length - 1)
            value = {};
          return acc[k] = value;
        }, obj);
      };
      exports.get = (obj = {}, prop = "", fallback) => {
        let value = obj[prop] == null ? prop.split(".").reduce((acc, k) => acc && acc[k], obj) : obj[prop];
        return value == null ? fallback : value;
      };
      exports.mixin = (target, b) => {
        if (!isObject2(target))
          return b;
        if (!isObject2(b))
          return target;
        for (let key of Object.keys(b)) {
          let desc = Object.getOwnPropertyDescriptor(b, key);
          if (desc.hasOwnProperty("value")) {
            if (target.hasOwnProperty(key) && isObject2(desc.value)) {
              let existing = Object.getOwnPropertyDescriptor(target, key);
              if (isObject2(existing.value)) {
                target[key] = exports.merge({}, target[key], b[key]);
              } else {
                Reflect.defineProperty(target, key, desc);
              }
            } else {
              Reflect.defineProperty(target, key, desc);
            }
          } else {
            Reflect.defineProperty(target, key, desc);
          }
        }
        return target;
      };
      exports.merge = (...args) => {
        let target = {};
        for (let ele of args)
          exports.mixin(target, ele);
        return target;
      };
      exports.mixinEmitter = (obj, emitter) => {
        let proto = emitter.constructor.prototype;
        for (let key of Object.keys(proto)) {
          let val = proto[key];
          if (typeof val === "function") {
            exports.define(obj, key, val.bind(emitter));
          } else {
            exports.define(obj, key, val);
          }
        }
      };
      exports.onExit = (callback) => {
        const onExit = (quit, code) => {
          if (called)
            return;
          called = true;
          fns.forEach((fn) => fn());
          if (quit === true) {
            process.exit(128 + code);
          }
        };
        if (fns.length === 0) {
          process.once("SIGTERM", onExit.bind(null, true, 15));
          process.once("SIGINT", onExit.bind(null, true, 2));
          process.once("exit", onExit);
        }
        fns.push(callback);
      };
      exports.define = (obj, key, value) => {
        Reflect.defineProperty(obj, key, {value});
      };
      exports.defineExport = (obj, key, fn) => {
        let custom;
        Reflect.defineProperty(obj, key, {
          enumerable: true,
          configurable: true,
          set(val) {
            custom = val;
          },
          get() {
            return custom ? custom() : fn();
          }
        });
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/combos.js
  var require_combos = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/combos.js"(exports) {
      "use strict";
      exports.ctrl = {
        a: "first",
        b: "backward",
        c: "cancel",
        d: "deleteForward",
        e: "last",
        f: "forward",
        g: "reset",
        i: "tab",
        k: "cutForward",
        l: "reset",
        n: "newItem",
        m: "cancel",
        j: "submit",
        p: "search",
        r: "remove",
        s: "save",
        u: "undo",
        w: "cutLeft",
        x: "toggleCursor",
        v: "paste"
      };
      exports.shift = {
        up: "shiftUp",
        down: "shiftDown",
        left: "shiftLeft",
        right: "shiftRight",
        tab: "prev"
      };
      exports.fn = {
        up: "pageUp",
        down: "pageDown",
        left: "pageLeft",
        right: "pageRight",
        delete: "deleteForward"
      };
      exports.option = {
        b: "backward",
        f: "forward",
        d: "cutRight",
        left: "cutLeft",
        up: "altUp",
        down: "altDown"
      };
      exports.keys = {
        pageup: "pageUp",
        pagedown: "pageDown",
        home: "home",
        end: "end",
        cancel: "cancel",
        delete: "deleteForward",
        backspace: "delete",
        down: "down",
        enter: "submit",
        escape: "cancel",
        left: "left",
        space: "space",
        number: "number",
        return: "submit",
        right: "right",
        tab: "next",
        up: "up"
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/keypress.js
  var require_keypress = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/keypress.js"(exports, module) {
      "use strict";
      var readline2 = require("readline");
      var combos = require_combos();
      var metaKeyCodeRe = /^(?:\x1b)([a-zA-Z0-9])$/;
      var fnKeyRe = /^(?:\x1b+)(O|N|\[|\[\[)(?:(\d+)(?:;(\d+))?([~^$])|(?:1;)?(\d+)?([a-zA-Z]))/;
      var keyName = {
        "OP": "f1",
        "OQ": "f2",
        "OR": "f3",
        "OS": "f4",
        "[11~": "f1",
        "[12~": "f2",
        "[13~": "f3",
        "[14~": "f4",
        "[[A": "f1",
        "[[B": "f2",
        "[[C": "f3",
        "[[D": "f4",
        "[[E": "f5",
        "[15~": "f5",
        "[17~": "f6",
        "[18~": "f7",
        "[19~": "f8",
        "[20~": "f9",
        "[21~": "f10",
        "[23~": "f11",
        "[24~": "f12",
        "[A": "up",
        "[B": "down",
        "[C": "right",
        "[D": "left",
        "[E": "clear",
        "[F": "end",
        "[H": "home",
        "OA": "up",
        "OB": "down",
        "OC": "right",
        "OD": "left",
        "OE": "clear",
        "OF": "end",
        "OH": "home",
        "[1~": "home",
        "[2~": "insert",
        "[3~": "delete",
        "[4~": "end",
        "[5~": "pageup",
        "[6~": "pagedown",
        "[[5~": "pageup",
        "[[6~": "pagedown",
        "[7~": "home",
        "[8~": "end",
        "[a": "up",
        "[b": "down",
        "[c": "right",
        "[d": "left",
        "[e": "clear",
        "[2$": "insert",
        "[3$": "delete",
        "[5$": "pageup",
        "[6$": "pagedown",
        "[7$": "home",
        "[8$": "end",
        "Oa": "up",
        "Ob": "down",
        "Oc": "right",
        "Od": "left",
        "Oe": "clear",
        "[2^": "insert",
        "[3^": "delete",
        "[5^": "pageup",
        "[6^": "pagedown",
        "[7^": "home",
        "[8^": "end",
        "[Z": "tab"
      };
      function isShiftKey(code) {
        return ["[a", "[b", "[c", "[d", "[e", "[2$", "[3$", "[5$", "[6$", "[7$", "[8$", "[Z"].includes(code);
      }
      function isCtrlKey(code) {
        return ["Oa", "Ob", "Oc", "Od", "Oe", "[2^", "[3^", "[5^", "[6^", "[7^", "[8^"].includes(code);
      }
      var keypress = (s = "", event = {}) => {
        let parts;
        let key = __spreadValues({
          name: event.name,
          ctrl: false,
          meta: false,
          shift: false,
          option: false,
          sequence: s,
          raw: s
        }, event);
        if (Buffer.isBuffer(s)) {
          if (s[0] > 127 && s[1] === void 0) {
            s[0] -= 128;
            s = "" + String(s);
          } else {
            s = String(s);
          }
        } else if (s !== void 0 && typeof s !== "string") {
          s = String(s);
        } else if (!s) {
          s = key.sequence || "";
        }
        key.sequence = key.sequence || s || key.name;
        if (s === "\r") {
          key.raw = void 0;
          key.name = "return";
        } else if (s === "\n") {
          key.name = "enter";
        } else if (s === "	") {
          key.name = "tab";
        } else if (s === "\b" || s === "\x7F" || s === "\x7F" || s === "\b") {
          key.name = "backspace";
          key.meta = s.charAt(0) === "";
        } else if (s === "" || s === "") {
          key.name = "escape";
          key.meta = s.length === 2;
        } else if (s === " " || s === " ") {
          key.name = "space";
          key.meta = s.length === 2;
        } else if (s <= "") {
          key.name = String.fromCharCode(s.charCodeAt(0) + "a".charCodeAt(0) - 1);
          key.ctrl = true;
        } else if (s.length === 1 && s >= "0" && s <= "9") {
          key.name = "number";
        } else if (s.length === 1 && s >= "a" && s <= "z") {
          key.name = s;
        } else if (s.length === 1 && s >= "A" && s <= "Z") {
          key.name = s.toLowerCase();
          key.shift = true;
        } else if (parts = metaKeyCodeRe.exec(s)) {
          key.meta = true;
          key.shift = /^[A-Z]$/.test(parts[1]);
        } else if (parts = fnKeyRe.exec(s)) {
          let segs = [...s];
          if (segs[0] === "" && segs[1] === "") {
            key.option = true;
          }
          let code = [parts[1], parts[2], parts[4], parts[6]].filter(Boolean).join("");
          let modifier = (parts[3] || parts[5] || 1) - 1;
          key.ctrl = !!(modifier & 4);
          key.meta = !!(modifier & 10);
          key.shift = !!(modifier & 1);
          key.code = code;
          key.name = keyName[code];
          key.shift = isShiftKey(code) || key.shift;
          key.ctrl = isCtrlKey(code) || key.ctrl;
        }
        return key;
      };
      keypress.listen = (options = {}, onKeypress) => {
        let {stdin} = options;
        if (!stdin || stdin !== process.stdin && !stdin.isTTY) {
          throw new Error("Invalid stream passed");
        }
        let rl = readline2.createInterface({terminal: true, input: stdin});
        readline2.emitKeypressEvents(stdin, rl);
        let on = (buf, key) => onKeypress(buf, keypress(buf, key), rl);
        let isRaw = stdin.isRaw;
        if (stdin.isTTY)
          stdin.setRawMode(true);
        stdin.on("keypress", on);
        rl.resume();
        let off = () => {
          if (stdin.isTTY)
            stdin.setRawMode(isRaw);
          stdin.removeListener("keypress", on);
          rl.pause();
          rl.close();
        };
        return off;
      };
      keypress.action = (buf, key, customActions) => {
        let obj = __spreadValues(__spreadValues({}, combos), customActions);
        if (key.ctrl) {
          key.action = obj.ctrl[key.name];
          return key;
        }
        if (key.option && obj.option) {
          key.action = obj.option[key.name];
          return key;
        }
        if (key.shift) {
          key.action = obj.shift[key.name];
          return key;
        }
        key.action = obj.keys[key.name];
        return key;
      };
      module.exports = keypress;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/timer.js
  var require_timer = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/timer.js"(exports, module) {
      "use strict";
      module.exports = (prompt5) => {
        prompt5.timers = prompt5.timers || {};
        let timers = prompt5.options.timers;
        if (!timers)
          return;
        for (let key of Object.keys(timers)) {
          let opts = timers[key];
          if (typeof opts === "number") {
            opts = {interval: opts};
          }
          create(prompt5, key, opts);
        }
      };
      function create(prompt5, name, options = {}) {
        let timer = prompt5.timers[name] = {name, start: Date.now(), ms: 0, tick: 0};
        let ms = options.interval || 120;
        timer.frames = options.frames || [];
        timer.loading = true;
        let interval = setInterval(() => {
          timer.ms = Date.now() - timer.start;
          timer.tick++;
          prompt5.render();
        }, ms);
        timer.stop = () => {
          timer.loading = false;
          clearInterval(interval);
        };
        Reflect.defineProperty(timer, "interval", {value: interval});
        prompt5.once("close", () => timer.stop());
        return timer.stop;
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/state.js
  var require_state = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/state.js"(exports, module) {
      "use strict";
      var {define: define2, width} = require_utils5();
      var State = class {
        constructor(prompt5) {
          let options = prompt5.options;
          define2(this, "_prompt", prompt5);
          this.type = prompt5.type;
          this.name = prompt5.name;
          this.message = "";
          this.header = "";
          this.footer = "";
          this.error = "";
          this.hint = "";
          this.input = "";
          this.cursor = 0;
          this.index = 0;
          this.lines = 0;
          this.tick = 0;
          this.prompt = "";
          this.buffer = "";
          this.width = width(options.stdout || process.stdout);
          Object.assign(this, options);
          this.name = this.name || this.message;
          this.message = this.message || this.name;
          this.symbols = prompt5.symbols;
          this.styles = prompt5.styles;
          this.required = new Set();
          this.cancelled = false;
          this.submitted = false;
        }
        clone() {
          let state = __spreadValues({}, this);
          state.status = this.status;
          state.buffer = Buffer.from(state.buffer);
          delete state.clone;
          return state;
        }
        set color(val) {
          this._color = val;
        }
        get color() {
          let styles = this.prompt.styles;
          if (this.cancelled)
            return styles.cancelled;
          if (this.submitted)
            return styles.submitted;
          let color = this._color || styles[this.status];
          return typeof color === "function" ? color : styles.pending;
        }
        set loading(value) {
          this._loading = value;
        }
        get loading() {
          if (typeof this._loading === "boolean")
            return this._loading;
          if (this.loadingChoices)
            return "choices";
          return false;
        }
        get status() {
          if (this.cancelled)
            return "cancelled";
          if (this.submitted)
            return "submitted";
          return "pending";
        }
      };
      module.exports = State;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/styles.js
  var require_styles = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/styles.js"(exports, module) {
      "use strict";
      var utils = require_utils5();
      var colors2 = require_ansi_colors();
      var styles = {
        default: colors2.noop,
        noop: colors2.noop,
        set inverse(custom) {
          this._inverse = custom;
        },
        get inverse() {
          return this._inverse || utils.inverse(this.primary);
        },
        set complement(custom) {
          this._complement = custom;
        },
        get complement() {
          return this._complement || utils.complement(this.primary);
        },
        primary: colors2.cyan,
        success: colors2.green,
        danger: colors2.magenta,
        strong: colors2.bold,
        warning: colors2.yellow,
        muted: colors2.dim,
        disabled: colors2.gray,
        dark: colors2.dim.gray,
        underline: colors2.underline,
        set info(custom) {
          this._info = custom;
        },
        get info() {
          return this._info || this.primary;
        },
        set em(custom) {
          this._em = custom;
        },
        get em() {
          return this._em || this.primary.underline;
        },
        set heading(custom) {
          this._heading = custom;
        },
        get heading() {
          return this._heading || this.muted.underline;
        },
        set pending(custom) {
          this._pending = custom;
        },
        get pending() {
          return this._pending || this.primary;
        },
        set submitted(custom) {
          this._submitted = custom;
        },
        get submitted() {
          return this._submitted || this.success;
        },
        set cancelled(custom) {
          this._cancelled = custom;
        },
        get cancelled() {
          return this._cancelled || this.danger;
        },
        set typing(custom) {
          this._typing = custom;
        },
        get typing() {
          return this._typing || this.dim;
        },
        set placeholder(custom) {
          this._placeholder = custom;
        },
        get placeholder() {
          return this._placeholder || this.primary.dim;
        },
        set highlight(custom) {
          this._highlight = custom;
        },
        get highlight() {
          return this._highlight || this.inverse;
        }
      };
      styles.merge = (options = {}) => {
        if (options.styles && typeof options.styles.enabled === "boolean") {
          colors2.enabled = options.styles.enabled;
        }
        if (options.styles && typeof options.styles.visible === "boolean") {
          colors2.visible = options.styles.visible;
        }
        let result = utils.merge({}, styles, options.styles);
        delete result.merge;
        for (let key of Object.keys(colors2)) {
          if (!result.hasOwnProperty(key)) {
            Reflect.defineProperty(result, key, {get: () => colors2[key]});
          }
        }
        for (let key of Object.keys(colors2.styles)) {
          if (!result.hasOwnProperty(key)) {
            Reflect.defineProperty(result, key, {get: () => colors2[key]});
          }
        }
        return result;
      };
      module.exports = styles;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/symbols.js
  var require_symbols2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/symbols.js"(exports, module) {
      "use strict";
      var isWindows = process.platform === "win32";
      var colors2 = require_ansi_colors();
      var utils = require_utils5();
      var symbols = __spreadProps(__spreadValues({}, colors2.symbols), {
        upDownDoubleArrow: "\u21D5",
        upDownDoubleArrow2: "\u2B0D",
        upDownArrow: "\u2195",
        asterisk: "*",
        asterism: "\u2042",
        bulletWhite: "\u25E6",
        electricArrow: "\u2301",
        ellipsisLarge: "\u22EF",
        ellipsisSmall: "\u2026",
        fullBlock: "\u2588",
        identicalTo: "\u2261",
        indicator: colors2.symbols.check,
        leftAngle: "\u2039",
        mark: "\u203B",
        minus: "\u2212",
        multiplication: "\xD7",
        obelus: "\xF7",
        percent: "%",
        pilcrow: "\xB6",
        pilcrow2: "\u2761",
        pencilUpRight: "\u2710",
        pencilDownRight: "\u270E",
        pencilRight: "\u270F",
        plus: "+",
        plusMinus: "\xB1",
        pointRight: "\u261E",
        rightAngle: "\u203A",
        section: "\xA7",
        hexagon: {off: "\u2B21", on: "\u2B22", disabled: "\u2B22"},
        ballot: {on: "\u2611", off: "\u2610", disabled: "\u2612"},
        stars: {on: "\u2605", off: "\u2606", disabled: "\u2606"},
        folder: {on: "\u25BC", off: "\u25B6", disabled: "\u25B6"},
        prefix: {
          pending: colors2.symbols.question,
          submitted: colors2.symbols.check,
          cancelled: colors2.symbols.cross
        },
        separator: {
          pending: colors2.symbols.pointerSmall,
          submitted: colors2.symbols.middot,
          cancelled: colors2.symbols.middot
        },
        radio: {
          off: isWindows ? "( )" : "\u25EF",
          on: isWindows ? "(*)" : "\u25C9",
          disabled: isWindows ? "(|)" : "\u24BE"
        },
        numbers: ["\u24EA", "\u2460", "\u2461", "\u2462", "\u2463", "\u2464", "\u2465", "\u2466", "\u2467", "\u2468", "\u2469", "\u246A", "\u246B", "\u246C", "\u246D", "\u246E", "\u246F", "\u2470", "\u2471", "\u2472", "\u2473", "\u3251", "\u3252", "\u3253", "\u3254", "\u3255", "\u3256", "\u3257", "\u3258", "\u3259", "\u325A", "\u325B", "\u325C", "\u325D", "\u325E", "\u325F", "\u32B1", "\u32B2", "\u32B3", "\u32B4", "\u32B5", "\u32B6", "\u32B7", "\u32B8", "\u32B9", "\u32BA", "\u32BB", "\u32BC", "\u32BD", "\u32BE", "\u32BF"]
      });
      symbols.merge = (options) => {
        let result = utils.merge({}, colors2.symbols, symbols, options.symbols);
        delete result.merge;
        return result;
      };
      module.exports = symbols;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/theme.js
  var require_theme = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/theme.js"(exports, module) {
      "use strict";
      var styles = require_styles();
      var symbols = require_symbols2();
      var utils = require_utils5();
      module.exports = (prompt5) => {
        prompt5.options = utils.merge({}, prompt5.options.theme, prompt5.options);
        prompt5.symbols = symbols.merge(prompt5.options);
        prompt5.styles = styles.merge(prompt5.options);
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/ansi.js
  var require_ansi = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/ansi.js"(exports, module) {
      "use strict";
      var isTerm = process.env.TERM_PROGRAM === "Apple_Terminal";
      var colors2 = require_ansi_colors();
      var utils = require_utils5();
      var ansi = module.exports = exports;
      var ESC = "[";
      var BEL = "\x07";
      var hidden = false;
      var code = ansi.code = {
        bell: BEL,
        beep: BEL,
        beginning: `${ESC}G`,
        down: `${ESC}J`,
        esc: ESC,
        getPosition: `${ESC}6n`,
        hide: `${ESC}?25l`,
        line: `${ESC}2K`,
        lineEnd: `${ESC}K`,
        lineStart: `${ESC}1K`,
        restorePosition: ESC + (isTerm ? "8" : "u"),
        savePosition: ESC + (isTerm ? "7" : "s"),
        screen: `${ESC}2J`,
        show: `${ESC}?25h`,
        up: `${ESC}1J`
      };
      var cursor = ansi.cursor = {
        get hidden() {
          return hidden;
        },
        hide() {
          hidden = true;
          return code.hide;
        },
        show() {
          hidden = false;
          return code.show;
        },
        forward: (count = 1) => `${ESC}${count}C`,
        backward: (count = 1) => `${ESC}${count}D`,
        nextLine: (count = 1) => `${ESC}E`.repeat(count),
        prevLine: (count = 1) => `${ESC}F`.repeat(count),
        up: (count = 1) => count ? `${ESC}${count}A` : "",
        down: (count = 1) => count ? `${ESC}${count}B` : "",
        right: (count = 1) => count ? `${ESC}${count}C` : "",
        left: (count = 1) => count ? `${ESC}${count}D` : "",
        to(x, y) {
          return y ? `${ESC}${y + 1};${x + 1}H` : `${ESC}${x + 1}G`;
        },
        move(x = 0, y = 0) {
          let res = "";
          res += x < 0 ? cursor.left(-x) : x > 0 ? cursor.right(x) : "";
          res += y < 0 ? cursor.up(-y) : y > 0 ? cursor.down(y) : "";
          return res;
        },
        restore(state = {}) {
          let {after, cursor: cursor2, initial, input, prompt: prompt5, size, value} = state;
          initial = utils.isPrimitive(initial) ? String(initial) : "";
          input = utils.isPrimitive(input) ? String(input) : "";
          value = utils.isPrimitive(value) ? String(value) : "";
          if (size) {
            let codes = ansi.cursor.up(size) + ansi.cursor.to(prompt5.length);
            let diff = input.length - cursor2;
            if (diff > 0) {
              codes += ansi.cursor.left(diff);
            }
            return codes;
          }
          if (value || after) {
            let pos = !input && !!initial ? -initial.length : -input.length + cursor2;
            if (after)
              pos -= after.length;
            if (input === "" && initial && !prompt5.includes(initial)) {
              pos += initial.length;
            }
            return ansi.cursor.move(pos);
          }
        }
      };
      var erase = ansi.erase = {
        screen: code.screen,
        up: code.up,
        down: code.down,
        line: code.line,
        lineEnd: code.lineEnd,
        lineStart: code.lineStart,
        lines(n) {
          let str = "";
          for (let i = 0; i < n; i++) {
            str += ansi.erase.line + (i < n - 1 ? ansi.cursor.up(1) : "");
          }
          if (n)
            str += ansi.code.beginning;
          return str;
        }
      };
      ansi.clear = (input = "", columns = process.stdout.columns) => {
        if (!columns)
          return erase.line + cursor.to(0);
        let width = (str) => [...colors2.unstyle(str)].length;
        let lines = input.split(/\r?\n/);
        let rows = 0;
        for (let line of lines) {
          rows += 1 + Math.floor(Math.max(width(line) - 1, 0) / columns);
        }
        return (erase.line + cursor.prevLine()).repeat(rows - 1) + erase.line + cursor.to(0);
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompt.js
  var require_prompt = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompt.js"(exports, module) {
      "use strict";
      var Events = require("events");
      var colors2 = require_ansi_colors();
      var keypress = require_keypress();
      var timer = require_timer();
      var State = require_state();
      var theme = require_theme();
      var utils = require_utils5();
      var ansi = require_ansi();
      var Prompt = class extends Events {
        constructor(options = {}) {
          super();
          this.name = options.name;
          this.type = options.type;
          this.options = options;
          theme(this);
          timer(this);
          this.state = new State(this);
          this.initial = [options.initial, options.default].find((v) => v != null);
          this.stdout = options.stdout || process.stdout;
          this.stdin = options.stdin || process.stdin;
          this.scale = options.scale || 1;
          this.term = this.options.term || process.env.TERM_PROGRAM;
          this.margin = margin(this.options.margin);
          this.setMaxListeners(0);
          setOptions(this);
        }
        async keypress(input, event = {}) {
          this.keypressed = true;
          let key = keypress.action(input, keypress(input, event), this.options.actions);
          this.state.keypress = key;
          this.emit("keypress", input, key);
          this.emit("state", this.state.clone());
          let fn = this.options[key.action] || this[key.action] || this.dispatch;
          if (typeof fn === "function") {
            return await fn.call(this, input, key);
          }
          this.alert();
        }
        alert() {
          delete this.state.alert;
          if (this.options.show === false) {
            this.emit("alert");
          } else {
            this.stdout.write(ansi.code.beep);
          }
        }
        cursorHide() {
          this.stdout.write(ansi.cursor.hide());
          utils.onExit(() => this.cursorShow());
        }
        cursorShow() {
          this.stdout.write(ansi.cursor.show());
        }
        write(str) {
          if (!str)
            return;
          if (this.stdout && this.state.show !== false) {
            this.stdout.write(str);
          }
          this.state.buffer += str;
        }
        clear(lines = 0) {
          let buffer = this.state.buffer;
          this.state.buffer = "";
          if (!buffer && !lines || this.options.show === false)
            return;
          this.stdout.write(ansi.cursor.down(lines) + ansi.clear(buffer, this.width));
        }
        restore() {
          if (this.state.closed || this.options.show === false)
            return;
          let {prompt: prompt5, after, rest} = this.sections();
          let {cursor, initial = "", input = "", value = ""} = this;
          let size = this.state.size = rest.length;
          let state = {after, cursor, initial, input, prompt: prompt5, size, value};
          let codes = ansi.cursor.restore(state);
          if (codes) {
            this.stdout.write(codes);
          }
        }
        sections() {
          let {buffer, input, prompt: prompt5} = this.state;
          prompt5 = colors2.unstyle(prompt5);
          let buf = colors2.unstyle(buffer);
          let idx = buf.indexOf(prompt5);
          let header = buf.slice(0, idx);
          let rest = buf.slice(idx);
          let lines = rest.split("\n");
          let first = lines[0];
          let last = lines[lines.length - 1];
          let promptLine = prompt5 + (input ? " " + input : "");
          let len = promptLine.length;
          let after = len < first.length ? first.slice(len + 1) : "";
          return {header, prompt: first, after, rest: lines.slice(1), last};
        }
        async submit() {
          this.state.submitted = true;
          this.state.validating = true;
          if (this.options.onSubmit) {
            await this.options.onSubmit.call(this, this.name, this.value, this);
          }
          let result = this.state.error || await this.validate(this.value, this.state);
          if (result !== true) {
            let error = "\n" + this.symbols.pointer + " ";
            if (typeof result === "string") {
              error += result.trim();
            } else {
              error += "Invalid input";
            }
            this.state.error = "\n" + this.styles.danger(error);
            this.state.submitted = false;
            await this.render();
            await this.alert();
            this.state.validating = false;
            this.state.error = void 0;
            return;
          }
          this.state.validating = false;
          await this.render();
          await this.close();
          this.value = await this.result(this.value);
          this.emit("submit", this.value);
        }
        async cancel(err) {
          this.state.cancelled = this.state.submitted = true;
          await this.render();
          await this.close();
          if (typeof this.options.onCancel === "function") {
            await this.options.onCancel.call(this, this.name, this.value, this);
          }
          this.emit("cancel", await this.error(err));
        }
        async close() {
          this.state.closed = true;
          try {
            let sections = this.sections();
            let lines = Math.ceil(sections.prompt.length / this.width);
            if (sections.rest) {
              this.write(ansi.cursor.down(sections.rest.length));
            }
            this.write("\n".repeat(lines));
          } catch (err) {
          }
          this.emit("close");
        }
        start() {
          if (!this.stop && this.options.show !== false) {
            this.stop = keypress.listen(this, this.keypress.bind(this));
            this.once("close", this.stop);
          }
        }
        async skip() {
          this.skipped = this.options.skip === true;
          if (typeof this.options.skip === "function") {
            this.skipped = await this.options.skip.call(this, this.name, this.value);
          }
          return this.skipped;
        }
        async initialize() {
          let {format, options, result} = this;
          this.format = () => format.call(this, this.value);
          this.result = () => result.call(this, this.value);
          if (typeof options.initial === "function") {
            this.initial = await options.initial.call(this, this);
          }
          if (typeof options.onRun === "function") {
            await options.onRun.call(this, this);
          }
          if (typeof options.onSubmit === "function") {
            let onSubmit = options.onSubmit.bind(this);
            let submit = this.submit.bind(this);
            delete this.options.onSubmit;
            this.submit = async () => {
              await onSubmit(this.name, this.value, this);
              return submit();
            };
          }
          await this.start();
          await this.render();
        }
        render() {
          throw new Error("expected prompt to have a custom render method");
        }
        run() {
          return new Promise(async (resolve, reject) => {
            this.once("submit", resolve);
            this.once("cancel", reject);
            if (await this.skip()) {
              this.render = () => {
              };
              return this.submit();
            }
            await this.initialize();
            this.emit("run");
          });
        }
        async element(name, choice, i) {
          let {options, state, symbols, timers} = this;
          let timer2 = timers && timers[name];
          state.timer = timer2;
          let value = options[name] || state[name] || symbols[name];
          let val = choice && choice[name] != null ? choice[name] : await value;
          if (val === "")
            return val;
          let res = await this.resolve(val, state, choice, i);
          if (!res && choice && choice[name]) {
            return this.resolve(value, state, choice, i);
          }
          return res;
        }
        async prefix() {
          let element = await this.element("prefix") || this.symbols;
          let timer2 = this.timers && this.timers.prefix;
          let state = this.state;
          state.timer = timer2;
          if (utils.isObject(element))
            element = element[state.status] || element.pending;
          if (!utils.hasColor(element)) {
            let style = this.styles[state.status] || this.styles.pending;
            return style(element);
          }
          return element;
        }
        async message() {
          let message = await this.element("message");
          if (!utils.hasColor(message)) {
            return this.styles.strong(message);
          }
          return message;
        }
        async separator() {
          let element = await this.element("separator") || this.symbols;
          let timer2 = this.timers && this.timers.separator;
          let state = this.state;
          state.timer = timer2;
          let value = element[state.status] || element.pending || state.separator;
          let ele = await this.resolve(value, state);
          if (utils.isObject(ele))
            ele = ele[state.status] || ele.pending;
          if (!utils.hasColor(ele)) {
            return this.styles.muted(ele);
          }
          return ele;
        }
        async pointer(choice, i) {
          let val = await this.element("pointer", choice, i);
          if (typeof val === "string" && utils.hasColor(val)) {
            return val;
          }
          if (val) {
            let styles = this.styles;
            let focused = this.index === i;
            let style = focused ? styles.primary : (val2) => val2;
            let ele = await this.resolve(val[focused ? "on" : "off"] || val, this.state);
            let styled = !utils.hasColor(ele) ? style(ele) : ele;
            return focused ? styled : " ".repeat(ele.length);
          }
        }
        async indicator(choice, i) {
          let val = await this.element("indicator", choice, i);
          if (typeof val === "string" && utils.hasColor(val)) {
            return val;
          }
          if (val) {
            let styles = this.styles;
            let enabled = choice.enabled === true;
            let style = enabled ? styles.success : styles.dark;
            let ele = val[enabled ? "on" : "off"] || val;
            return !utils.hasColor(ele) ? style(ele) : ele;
          }
          return "";
        }
        body() {
          return null;
        }
        footer() {
          if (this.state.status === "pending") {
            return this.element("footer");
          }
        }
        header() {
          if (this.state.status === "pending") {
            return this.element("header");
          }
        }
        async hint() {
          if (this.state.status === "pending" && !this.isValue(this.state.input)) {
            let hint = await this.element("hint");
            if (!utils.hasColor(hint)) {
              return this.styles.muted(hint);
            }
            return hint;
          }
        }
        error(err) {
          return !this.state.submitted ? err || this.state.error : "";
        }
        format(value) {
          return value;
        }
        result(value) {
          return value;
        }
        validate(value) {
          if (this.options.required === true) {
            return this.isValue(value);
          }
          return true;
        }
        isValue(value) {
          return value != null && value !== "";
        }
        resolve(value, ...args) {
          return utils.resolve(this, value, ...args);
        }
        get base() {
          return Prompt.prototype;
        }
        get style() {
          return this.styles[this.state.status];
        }
        get height() {
          return this.options.rows || utils.height(this.stdout, 25);
        }
        get width() {
          return this.options.columns || utils.width(this.stdout, 80);
        }
        get size() {
          return {width: this.width, height: this.height};
        }
        set cursor(value) {
          this.state.cursor = value;
        }
        get cursor() {
          return this.state.cursor;
        }
        set input(value) {
          this.state.input = value;
        }
        get input() {
          return this.state.input;
        }
        set value(value) {
          this.state.value = value;
        }
        get value() {
          let {input, value} = this.state;
          let result = [value, input].find(this.isValue.bind(this));
          return this.isValue(result) ? result : this.initial;
        }
        static get prompt() {
          return (options) => new this(options).run();
        }
      };
      function setOptions(prompt5) {
        let isValidKey = (key) => {
          return prompt5[key] === void 0 || typeof prompt5[key] === "function";
        };
        let ignore = [
          "actions",
          "choices",
          "initial",
          "margin",
          "roles",
          "styles",
          "symbols",
          "theme",
          "timers",
          "value"
        ];
        let ignoreFn = [
          "body",
          "footer",
          "error",
          "header",
          "hint",
          "indicator",
          "message",
          "prefix",
          "separator",
          "skip"
        ];
        for (let key of Object.keys(prompt5.options)) {
          if (ignore.includes(key))
            continue;
          if (/^on[A-Z]/.test(key))
            continue;
          let option = prompt5.options[key];
          if (typeof option === "function" && isValidKey(key)) {
            if (!ignoreFn.includes(key)) {
              prompt5[key] = option.bind(prompt5);
            }
          } else if (typeof prompt5[key] !== "function") {
            prompt5[key] = option;
          }
        }
      }
      function margin(value) {
        if (typeof value === "number") {
          value = [value, value, value, value];
        }
        let arr = [].concat(value || []);
        let pad = (i) => i % 2 === 0 ? "\n" : " ";
        let res = [];
        for (let i = 0; i < 4; i++) {
          let char = pad(i);
          if (arr[i]) {
            res.push(char.repeat(arr[i]));
          } else {
            res.push("");
          }
        }
        return res;
      }
      module.exports = Prompt;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/roles.js
  var require_roles = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/roles.js"(exports, module) {
      "use strict";
      var utils = require_utils5();
      var roles = {
        default(prompt5, choice) {
          return choice;
        },
        checkbox(prompt5, choice) {
          throw new Error("checkbox role is not implemented yet");
        },
        editable(prompt5, choice) {
          throw new Error("editable role is not implemented yet");
        },
        expandable(prompt5, choice) {
          throw new Error("expandable role is not implemented yet");
        },
        heading(prompt5, choice) {
          choice.disabled = "";
          choice.indicator = [choice.indicator, " "].find((v) => v != null);
          choice.message = choice.message || "";
          return choice;
        },
        input(prompt5, choice) {
          throw new Error("input role is not implemented yet");
        },
        option(prompt5, choice) {
          return roles.default(prompt5, choice);
        },
        radio(prompt5, choice) {
          throw new Error("radio role is not implemented yet");
        },
        separator(prompt5, choice) {
          choice.disabled = "";
          choice.indicator = [choice.indicator, " "].find((v) => v != null);
          choice.message = choice.message || prompt5.symbols.line.repeat(5);
          return choice;
        },
        spacer(prompt5, choice) {
          return choice;
        }
      };
      module.exports = (name, options = {}) => {
        let role = utils.merge({}, roles, options.roles);
        return role[name] || role.default;
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/types/array.js
  var require_array5 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/types/array.js"(exports, module) {
      "use strict";
      var colors2 = require_ansi_colors();
      var Prompt = require_prompt();
      var roles = require_roles();
      var utils = require_utils5();
      var {reorder, scrollUp, scrollDown, isObject: isObject2, swap} = utils;
      var ArrayPrompt = class extends Prompt {
        constructor(options) {
          super(options);
          this.cursorHide();
          this.maxSelected = options.maxSelected || Infinity;
          this.multiple = options.multiple || false;
          this.initial = options.initial || 0;
          this.delay = options.delay || 0;
          this.longest = 0;
          this.num = "";
        }
        async initialize() {
          if (typeof this.options.initial === "function") {
            this.initial = await this.options.initial.call(this);
          }
          await this.reset(true);
          await super.initialize();
        }
        async reset() {
          let {choices, initial, autofocus, suggest: suggest2} = this.options;
          this.state._choices = [];
          this.state.choices = [];
          this.choices = await Promise.all(await this.toChoices(choices));
          this.choices.forEach((ch) => ch.enabled = false);
          if (typeof suggest2 !== "function" && this.selectable.length === 0) {
            throw new Error("At least one choice must be selectable");
          }
          if (isObject2(initial))
            initial = Object.keys(initial);
          if (Array.isArray(initial)) {
            if (autofocus != null)
              this.index = this.findIndex(autofocus);
            initial.forEach((v) => this.enable(this.find(v)));
            await this.render();
          } else {
            if (autofocus != null)
              initial = autofocus;
            if (typeof initial === "string")
              initial = this.findIndex(initial);
            if (typeof initial === "number" && initial > -1) {
              this.index = Math.max(0, Math.min(initial, this.choices.length));
              this.enable(this.find(this.index));
            }
          }
          if (this.isDisabled(this.focused)) {
            await this.down();
          }
        }
        async toChoices(value, parent) {
          this.state.loadingChoices = true;
          let choices = [];
          let index = 0;
          let toChoices = async (items, parent2) => {
            if (typeof items === "function")
              items = await items.call(this);
            if (items instanceof Promise)
              items = await items;
            for (let i = 0; i < items.length; i++) {
              let choice = items[i] = await this.toChoice(items[i], index++, parent2);
              choices.push(choice);
              if (choice.choices) {
                await toChoices(choice.choices, choice);
              }
            }
            return choices;
          };
          return toChoices(value, parent).then((choices2) => {
            this.state.loadingChoices = false;
            return choices2;
          });
        }
        async toChoice(ele, i, parent) {
          if (typeof ele === "function")
            ele = await ele.call(this, this);
          if (ele instanceof Promise)
            ele = await ele;
          if (typeof ele === "string")
            ele = {name: ele};
          if (ele.normalized)
            return ele;
          ele.normalized = true;
          let origVal = ele.value;
          let role = roles(ele.role, this.options);
          ele = role(this, ele);
          if (typeof ele.disabled === "string" && !ele.hint) {
            ele.hint = ele.disabled;
            ele.disabled = true;
          }
          if (ele.disabled === true && ele.hint == null) {
            ele.hint = "(disabled)";
          }
          if (ele.index != null)
            return ele;
          ele.name = ele.name || ele.key || ele.title || ele.value || ele.message;
          ele.message = ele.message || ele.name || "";
          ele.value = [ele.value, ele.name].find(this.isValue.bind(this));
          ele.input = "";
          ele.index = i;
          ele.cursor = 0;
          utils.define(ele, "parent", parent);
          ele.level = parent ? parent.level + 1 : 1;
          if (ele.indent == null) {
            ele.indent = parent ? parent.indent + "  " : ele.indent || "";
          }
          ele.path = parent ? parent.path + "." + ele.name : ele.name;
          ele.enabled = !!(this.multiple && !this.isDisabled(ele) && (ele.enabled || this.isSelected(ele)));
          if (!this.isDisabled(ele)) {
            this.longest = Math.max(this.longest, colors2.unstyle(ele.message).length);
          }
          let choice = __spreadValues({}, ele);
          ele.reset = (input = choice.input, value = choice.value) => {
            for (let key of Object.keys(choice))
              ele[key] = choice[key];
            ele.input = input;
            ele.value = value;
          };
          if (origVal == null && typeof ele.initial === "function") {
            ele.input = await ele.initial.call(this, this.state, ele, i);
          }
          return ele;
        }
        async onChoice(choice, i) {
          this.emit("choice", choice, i, this);
          if (typeof choice.onChoice === "function") {
            await choice.onChoice.call(this, this.state, choice, i);
          }
        }
        async addChoice(ele, i, parent) {
          let choice = await this.toChoice(ele, i, parent);
          this.choices.push(choice);
          this.index = this.choices.length - 1;
          this.limit = this.choices.length;
          return choice;
        }
        async newItem(item, i, parent) {
          let ele = __spreadValues({name: "New choice name?", editable: true, newChoice: true}, item);
          let choice = await this.addChoice(ele, i, parent);
          choice.updateChoice = () => {
            delete choice.newChoice;
            choice.name = choice.message = choice.input;
            choice.input = "";
            choice.cursor = 0;
          };
          return this.render();
        }
        indent(choice) {
          if (choice.indent == null) {
            return choice.level > 1 ? "  ".repeat(choice.level - 1) : "";
          }
          return choice.indent;
        }
        dispatch(s, key) {
          if (this.multiple && this[key.name])
            return this[key.name]();
          this.alert();
        }
        focus(choice, enabled) {
          if (typeof enabled !== "boolean")
            enabled = choice.enabled;
          if (enabled && !choice.enabled && this.selected.length >= this.maxSelected) {
            return this.alert();
          }
          this.index = choice.index;
          choice.enabled = enabled && !this.isDisabled(choice);
          return choice;
        }
        space() {
          if (!this.multiple)
            return this.alert();
          this.toggle(this.focused);
          return this.render();
        }
        a() {
          if (this.maxSelected < this.choices.length)
            return this.alert();
          let enabled = this.selectable.every((ch) => ch.enabled);
          this.choices.forEach((ch) => ch.enabled = !enabled);
          return this.render();
        }
        i() {
          if (this.choices.length - this.selected.length > this.maxSelected) {
            return this.alert();
          }
          this.choices.forEach((ch) => ch.enabled = !ch.enabled);
          return this.render();
        }
        g(choice = this.focused) {
          if (!this.choices.some((ch) => !!ch.parent))
            return this.a();
          this.toggle(choice.parent && !choice.choices ? choice.parent : choice);
          return this.render();
        }
        toggle(choice, enabled) {
          if (!choice.enabled && this.selected.length >= this.maxSelected) {
            return this.alert();
          }
          if (typeof enabled !== "boolean")
            enabled = !choice.enabled;
          choice.enabled = enabled;
          if (choice.choices) {
            choice.choices.forEach((ch) => this.toggle(ch, enabled));
          }
          let parent = choice.parent;
          while (parent) {
            let choices = parent.choices.filter((ch) => this.isDisabled(ch));
            parent.enabled = choices.every((ch) => ch.enabled === true);
            parent = parent.parent;
          }
          reset(this, this.choices);
          this.emit("toggle", choice, this);
          return choice;
        }
        enable(choice) {
          if (this.selected.length >= this.maxSelected)
            return this.alert();
          choice.enabled = !this.isDisabled(choice);
          choice.choices && choice.choices.forEach(this.enable.bind(this));
          return choice;
        }
        disable(choice) {
          choice.enabled = false;
          choice.choices && choice.choices.forEach(this.disable.bind(this));
          return choice;
        }
        number(n) {
          this.num += n;
          let number = (num) => {
            let i = Number(num);
            if (i > this.choices.length - 1)
              return this.alert();
            let focused = this.focused;
            let choice = this.choices.find((ch) => i === ch.index);
            if (!choice.enabled && this.selected.length >= this.maxSelected) {
              return this.alert();
            }
            if (this.visible.indexOf(choice) === -1) {
              let choices = reorder(this.choices);
              let actualIdx = choices.indexOf(choice);
              if (focused.index > actualIdx) {
                let start2 = choices.slice(actualIdx, actualIdx + this.limit);
                let end = choices.filter((ch) => !start2.includes(ch));
                this.choices = start2.concat(end);
              } else {
                let pos = actualIdx - this.limit + 1;
                this.choices = choices.slice(pos).concat(choices.slice(0, pos));
              }
            }
            this.index = this.choices.indexOf(choice);
            this.toggle(this.focused);
            return this.render();
          };
          clearTimeout(this.numberTimeout);
          return new Promise((resolve) => {
            let len = this.choices.length;
            let num = this.num;
            let handle = (val = false, res) => {
              clearTimeout(this.numberTimeout);
              if (val)
                res = number(num);
              this.num = "";
              resolve(res);
            };
            if (num === "0" || num.length === 1 && Number(num + "0") > len) {
              return handle(true);
            }
            if (Number(num) > len) {
              return handle(false, this.alert());
            }
            this.numberTimeout = setTimeout(() => handle(true), this.delay);
          });
        }
        home() {
          this.choices = reorder(this.choices);
          this.index = 0;
          return this.render();
        }
        end() {
          let pos = this.choices.length - this.limit;
          let choices = reorder(this.choices);
          this.choices = choices.slice(pos).concat(choices.slice(0, pos));
          this.index = this.limit - 1;
          return this.render();
        }
        first() {
          this.index = 0;
          return this.render();
        }
        last() {
          this.index = this.visible.length - 1;
          return this.render();
        }
        prev() {
          if (this.visible.length <= 1)
            return this.alert();
          return this.up();
        }
        next() {
          if (this.visible.length <= 1)
            return this.alert();
          return this.down();
        }
        right() {
          if (this.cursor >= this.input.length)
            return this.alert();
          this.cursor++;
          return this.render();
        }
        left() {
          if (this.cursor <= 0)
            return this.alert();
          this.cursor--;
          return this.render();
        }
        up() {
          let len = this.choices.length;
          let vis = this.visible.length;
          let idx = this.index;
          if (this.options.scroll === false && idx === 0) {
            return this.alert();
          }
          if (len > vis && idx === 0) {
            return this.scrollUp();
          }
          this.index = (idx - 1 % len + len) % len;
          if (this.isDisabled()) {
            return this.up();
          }
          return this.render();
        }
        down() {
          let len = this.choices.length;
          let vis = this.visible.length;
          let idx = this.index;
          if (this.options.scroll === false && idx === vis - 1) {
            return this.alert();
          }
          if (len > vis && idx === vis - 1) {
            return this.scrollDown();
          }
          this.index = (idx + 1) % len;
          if (this.isDisabled()) {
            return this.down();
          }
          return this.render();
        }
        scrollUp(i = 0) {
          this.choices = scrollUp(this.choices);
          this.index = i;
          if (this.isDisabled()) {
            return this.up();
          }
          return this.render();
        }
        scrollDown(i = this.visible.length - 1) {
          this.choices = scrollDown(this.choices);
          this.index = i;
          if (this.isDisabled()) {
            return this.down();
          }
          return this.render();
        }
        async shiftUp() {
          if (this.options.sort === true) {
            this.sorting = true;
            this.swap(this.index - 1);
            await this.up();
            this.sorting = false;
            return;
          }
          return this.scrollUp(this.index);
        }
        async shiftDown() {
          if (this.options.sort === true) {
            this.sorting = true;
            this.swap(this.index + 1);
            await this.down();
            this.sorting = false;
            return;
          }
          return this.scrollDown(this.index);
        }
        pageUp() {
          if (this.visible.length <= 1)
            return this.alert();
          this.limit = Math.max(this.limit - 1, 0);
          this.index = Math.min(this.limit - 1, this.index);
          this._limit = this.limit;
          if (this.isDisabled()) {
            return this.up();
          }
          return this.render();
        }
        pageDown() {
          if (this.visible.length >= this.choices.length)
            return this.alert();
          this.index = Math.max(0, this.index);
          this.limit = Math.min(this.limit + 1, this.choices.length);
          this._limit = this.limit;
          if (this.isDisabled()) {
            return this.down();
          }
          return this.render();
        }
        swap(pos) {
          swap(this.choices, this.index, pos);
        }
        isDisabled(choice = this.focused) {
          let keys = ["disabled", "collapsed", "hidden", "completing", "readonly"];
          if (choice && keys.some((key) => choice[key] === true)) {
            return true;
          }
          return choice && choice.role === "heading";
        }
        isEnabled(choice = this.focused) {
          if (Array.isArray(choice))
            return choice.every((ch) => this.isEnabled(ch));
          if (choice.choices) {
            let choices = choice.choices.filter((ch) => !this.isDisabled(ch));
            return choice.enabled && choices.every((ch) => this.isEnabled(ch));
          }
          return choice.enabled && !this.isDisabled(choice);
        }
        isChoice(choice, value) {
          return choice.name === value || choice.index === Number(value);
        }
        isSelected(choice) {
          if (Array.isArray(this.initial)) {
            return this.initial.some((value) => this.isChoice(choice, value));
          }
          return this.isChoice(choice, this.initial);
        }
        map(names = [], prop = "value") {
          return [].concat(names || []).reduce((acc, name) => {
            acc[name] = this.find(name, prop);
            return acc;
          }, {});
        }
        filter(value, prop) {
          let isChoice = (ele, i) => [ele.name, i].includes(value);
          let fn = typeof value === "function" ? value : isChoice;
          let choices = this.options.multiple ? this.state._choices : this.choices;
          let result = choices.filter(fn);
          if (prop) {
            return result.map((ch) => ch[prop]);
          }
          return result;
        }
        find(value, prop) {
          if (isObject2(value))
            return prop ? value[prop] : value;
          let isChoice = (ele, i) => [ele.name, i].includes(value);
          let fn = typeof value === "function" ? value : isChoice;
          let choice = this.choices.find(fn);
          if (choice) {
            return prop ? choice[prop] : choice;
          }
        }
        findIndex(value) {
          return this.choices.indexOf(this.find(value));
        }
        async submit() {
          let choice = this.focused;
          if (!choice)
            return this.alert();
          if (choice.newChoice) {
            if (!choice.input)
              return this.alert();
            choice.updateChoice();
            return this.render();
          }
          if (this.choices.some((ch) => ch.newChoice)) {
            return this.alert();
          }
          let {reorder: reorder2, sort} = this.options;
          let multi = this.multiple === true;
          let value = this.selected;
          if (value === void 0) {
            return this.alert();
          }
          if (Array.isArray(value) && reorder2 !== false && sort !== true) {
            value = utils.reorder(value);
          }
          this.value = multi ? value.map((ch) => ch.name) : value.name;
          return super.submit();
        }
        set choices(choices = []) {
          this.state._choices = this.state._choices || [];
          this.state.choices = choices;
          for (let choice of choices) {
            if (!this.state._choices.some((ch) => ch.name === choice.name)) {
              this.state._choices.push(choice);
            }
          }
          if (!this._initial && this.options.initial) {
            this._initial = true;
            let init = this.initial;
            if (typeof init === "string" || typeof init === "number") {
              let choice = this.find(init);
              if (choice) {
                this.initial = choice.index;
                this.focus(choice, true);
              }
            }
          }
        }
        get choices() {
          return reset(this, this.state.choices || []);
        }
        set visible(visible) {
          this.state.visible = visible;
        }
        get visible() {
          return (this.state.visible || this.choices).slice(0, this.limit);
        }
        set limit(num) {
          this.state.limit = num;
        }
        get limit() {
          let {state, options, choices} = this;
          let limit = state.limit || this._limit || options.limit || choices.length;
          return Math.min(limit, this.height);
        }
        set value(value) {
          super.value = value;
        }
        get value() {
          if (typeof super.value !== "string" && super.value === this.initial) {
            return this.input;
          }
          return super.value;
        }
        set index(i) {
          this.state.index = i;
        }
        get index() {
          return Math.max(0, this.state ? this.state.index : 0);
        }
        get enabled() {
          return this.filter(this.isEnabled.bind(this));
        }
        get focused() {
          let choice = this.choices[this.index];
          if (choice && this.state.submitted && this.multiple !== true) {
            choice.enabled = true;
          }
          return choice;
        }
        get selectable() {
          return this.choices.filter((choice) => !this.isDisabled(choice));
        }
        get selected() {
          return this.multiple ? this.enabled : this.focused;
        }
      };
      function reset(prompt5, choices) {
        if (choices instanceof Promise)
          return choices;
        if (typeof choices === "function") {
          if (utils.isAsyncFn(choices))
            return choices;
          choices = choices.call(prompt5, prompt5);
        }
        for (let choice of choices) {
          if (Array.isArray(choice.choices)) {
            let items = choice.choices.filter((ch) => !prompt5.isDisabled(ch));
            choice.enabled = items.every((ch) => ch.enabled === true);
          }
          if (prompt5.isDisabled(choice) === true) {
            delete choice.enabled;
          }
        }
        return choices;
      }
      module.exports = ArrayPrompt;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/select.js
  var require_select = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/select.js"(exports, module) {
      "use strict";
      var ArrayPrompt = require_array5();
      var utils = require_utils5();
      var SelectPrompt = class extends ArrayPrompt {
        constructor(options) {
          super(options);
          this.emptyError = this.options.emptyError || "No items were selected";
        }
        async dispatch(s, key) {
          if (this.multiple) {
            return this[key.name] ? await this[key.name](s, key) : await super.dispatch(s, key);
          }
          this.alert();
        }
        separator() {
          if (this.options.separator)
            return super.separator();
          let sep = this.styles.muted(this.symbols.ellipsis);
          return this.state.submitted ? super.separator() : sep;
        }
        pointer(choice, i) {
          return !this.multiple || this.options.pointer ? super.pointer(choice, i) : "";
        }
        indicator(choice, i) {
          return this.multiple ? super.indicator(choice, i) : "";
        }
        choiceMessage(choice, i) {
          let message = this.resolve(choice.message, this.state, choice, i);
          if (choice.role === "heading" && !utils.hasColor(message)) {
            message = this.styles.strong(message);
          }
          return this.resolve(message, this.state, choice, i);
        }
        choiceSeparator() {
          return ":";
        }
        async renderChoice(choice, i) {
          await this.onChoice(choice, i);
          let focused = this.index === i;
          let pointer = await this.pointer(choice, i);
          let check = await this.indicator(choice, i) + (choice.pad || "");
          let hint = await this.resolve(choice.hint, this.state, choice, i);
          if (hint && !utils.hasColor(hint)) {
            hint = this.styles.muted(hint);
          }
          let ind = this.indent(choice);
          let msg = await this.choiceMessage(choice, i);
          let line = () => [this.margin[3], ind + pointer + check, msg, this.margin[1], hint].filter(Boolean).join(" ");
          if (choice.role === "heading") {
            return line();
          }
          if (choice.disabled) {
            if (!utils.hasColor(msg)) {
              msg = this.styles.disabled(msg);
            }
            return line();
          }
          if (focused) {
            msg = this.styles.em(msg);
          }
          return line();
        }
        async renderChoices() {
          if (this.state.loading === "choices") {
            return this.styles.warning("Loading choices");
          }
          if (this.state.submitted)
            return "";
          let choices = this.visible.map(async (ch, i) => await this.renderChoice(ch, i));
          let visible = await Promise.all(choices);
          if (!visible.length)
            visible.push(this.styles.danger("No matching choices"));
          let result = this.margin[0] + visible.join("\n");
          let header;
          if (this.options.choicesHeader) {
            header = await this.resolve(this.options.choicesHeader, this.state);
          }
          return [header, result].filter(Boolean).join("\n");
        }
        format() {
          if (!this.state.submitted || this.state.cancelled)
            return "";
          if (Array.isArray(this.selected)) {
            return this.selected.map((choice) => this.styles.primary(choice.name)).join(", ");
          }
          return this.styles.primary(this.selected.name);
        }
        async render() {
          let {submitted, size} = this.state;
          let prompt5 = "";
          let header = await this.header();
          let prefix = await this.prefix();
          let separator = await this.separator();
          let message = await this.message();
          if (this.options.promptLine !== false) {
            prompt5 = [prefix, message, separator, ""].join(" ");
            this.state.prompt = prompt5;
          }
          let output = await this.format();
          let help = await this.error() || await this.hint();
          let body = await this.renderChoices();
          let footer = await this.footer();
          if (output)
            prompt5 += output;
          if (help && !prompt5.includes(help))
            prompt5 += " " + help;
          if (submitted && !output && !body.trim() && this.multiple && this.emptyError != null) {
            prompt5 += this.styles.danger(this.emptyError);
          }
          this.clear(size);
          this.write([header, prompt5, body, footer].filter(Boolean).join("\n"));
          this.write(this.margin[2]);
          this.restore();
        }
      };
      module.exports = SelectPrompt;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/autocomplete.js
  var require_autocomplete = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/autocomplete.js"(exports, module) {
      "use strict";
      var Select = require_select();
      var highlight = (input, color) => {
        let val = input.toLowerCase();
        return (str) => {
          let s = str.toLowerCase();
          let i = s.indexOf(val);
          let colored = color(str.slice(i, i + val.length));
          return i >= 0 ? str.slice(0, i) + colored + str.slice(i + val.length) : str;
        };
      };
      var AutoComplete = class extends Select {
        constructor(options) {
          super(options);
          this.cursorShow();
        }
        moveCursor(n) {
          this.state.cursor += n;
        }
        dispatch(ch) {
          return this.append(ch);
        }
        space(ch) {
          return this.options.multiple ? super.space(ch) : this.append(ch);
        }
        append(ch) {
          let {cursor, input} = this.state;
          this.input = input.slice(0, cursor) + ch + input.slice(cursor);
          this.moveCursor(1);
          return this.complete();
        }
        delete() {
          let {cursor, input} = this.state;
          if (!input)
            return this.alert();
          this.input = input.slice(0, cursor - 1) + input.slice(cursor);
          this.moveCursor(-1);
          return this.complete();
        }
        deleteForward() {
          let {cursor, input} = this.state;
          if (input[cursor] === void 0)
            return this.alert();
          this.input = `${input}`.slice(0, cursor) + `${input}`.slice(cursor + 1);
          return this.complete();
        }
        number(ch) {
          return this.append(ch);
        }
        async complete() {
          this.completing = true;
          this.choices = await this.suggest(this.input, this.state._choices);
          this.state.limit = void 0;
          this.index = Math.min(Math.max(this.visible.length - 1, 0), this.index);
          await this.render();
          this.completing = false;
        }
        suggest(input = this.input, choices = this.state._choices) {
          if (typeof this.options.suggest === "function") {
            return this.options.suggest.call(this, input, choices);
          }
          let str = input.toLowerCase();
          return choices.filter((ch) => ch.message.toLowerCase().includes(str));
        }
        pointer() {
          return "";
        }
        format() {
          if (!this.focused)
            return this.input;
          if (this.options.multiple && this.state.submitted) {
            return this.selected.map((ch) => this.styles.primary(ch.message)).join(", ");
          }
          if (this.state.submitted) {
            let value = this.value = this.input = this.focused.value;
            return this.styles.primary(value);
          }
          return this.input;
        }
        async render() {
          if (this.state.status !== "pending")
            return super.render();
          let style = this.options.highlight ? this.options.highlight.bind(this) : this.styles.placeholder;
          let color = highlight(this.input, style);
          let choices = this.choices;
          this.choices = choices.map((ch) => __spreadProps(__spreadValues({}, ch), {message: color(ch.message)}));
          await super.render();
          this.choices = choices;
        }
        submit() {
          if (this.options.multiple) {
            this.value = this.selected.map((ch) => ch.name);
          }
          return super.submit();
        }
      };
      module.exports = AutoComplete;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/placeholder.js
  var require_placeholder = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/placeholder.js"(exports, module) {
      "use strict";
      var utils = require_utils5();
      module.exports = (prompt5, options = {}) => {
        prompt5.cursorHide();
        let {input = "", initial = "", pos, showCursor = true, color} = options;
        let style = color || prompt5.styles.placeholder;
        let inverse = utils.inverse(prompt5.styles.primary);
        let blinker = (str) => inverse(prompt5.styles.black(str));
        let output = input;
        let char = " ";
        let reverse = blinker(char);
        if (prompt5.blink && prompt5.blink.off === true) {
          blinker = (str) => str;
          reverse = "";
        }
        if (showCursor && pos === 0 && initial === "" && input === "") {
          return blinker(char);
        }
        if (showCursor && pos === 0 && (input === initial || input === "")) {
          return blinker(initial[0]) + style(initial.slice(1));
        }
        initial = utils.isPrimitive(initial) ? `${initial}` : "";
        input = utils.isPrimitive(input) ? `${input}` : "";
        let placeholder = initial && initial.startsWith(input) && initial !== input;
        let cursor = placeholder ? blinker(initial[input.length]) : reverse;
        if (pos !== input.length && showCursor === true) {
          output = input.slice(0, pos) + blinker(input[pos]) + input.slice(pos + 1);
          cursor = "";
        }
        if (showCursor === false) {
          cursor = "";
        }
        if (placeholder) {
          let raw = prompt5.styles.unstyle(output + cursor);
          return output + cursor + style(initial.slice(raw.length));
        }
        return output + cursor;
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/form.js
  var require_form = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/form.js"(exports, module) {
      "use strict";
      var colors2 = require_ansi_colors();
      var SelectPrompt = require_select();
      var placeholder = require_placeholder();
      var FormPrompt = class extends SelectPrompt {
        constructor(options) {
          super(__spreadProps(__spreadValues({}, options), {multiple: true}));
          this.type = "form";
          this.initial = this.options.initial;
          this.align = [this.options.align, "right"].find((v) => v != null);
          this.emptyError = "";
          this.values = {};
        }
        async reset(first) {
          await super.reset();
          if (first === true)
            this._index = this.index;
          this.index = this._index;
          this.values = {};
          this.choices.forEach((choice) => choice.reset && choice.reset());
          return this.render();
        }
        dispatch(char) {
          return !!char && this.append(char);
        }
        append(char) {
          let choice = this.focused;
          if (!choice)
            return this.alert();
          let {cursor, input} = choice;
          choice.value = choice.input = input.slice(0, cursor) + char + input.slice(cursor);
          choice.cursor++;
          return this.render();
        }
        delete() {
          let choice = this.focused;
          if (!choice || choice.cursor <= 0)
            return this.alert();
          let {cursor, input} = choice;
          choice.value = choice.input = input.slice(0, cursor - 1) + input.slice(cursor);
          choice.cursor--;
          return this.render();
        }
        deleteForward() {
          let choice = this.focused;
          if (!choice)
            return this.alert();
          let {cursor, input} = choice;
          if (input[cursor] === void 0)
            return this.alert();
          let str = `${input}`.slice(0, cursor) + `${input}`.slice(cursor + 1);
          choice.value = choice.input = str;
          return this.render();
        }
        right() {
          let choice = this.focused;
          if (!choice)
            return this.alert();
          if (choice.cursor >= choice.input.length)
            return this.alert();
          choice.cursor++;
          return this.render();
        }
        left() {
          let choice = this.focused;
          if (!choice)
            return this.alert();
          if (choice.cursor <= 0)
            return this.alert();
          choice.cursor--;
          return this.render();
        }
        space(ch, key) {
          return this.dispatch(ch, key);
        }
        number(ch, key) {
          return this.dispatch(ch, key);
        }
        next() {
          let ch = this.focused;
          if (!ch)
            return this.alert();
          let {initial, input} = ch;
          if (initial && initial.startsWith(input) && input !== initial) {
            ch.value = ch.input = initial;
            ch.cursor = ch.value.length;
            return this.render();
          }
          return super.next();
        }
        prev() {
          let ch = this.focused;
          if (!ch)
            return this.alert();
          if (ch.cursor === 0)
            return super.prev();
          ch.value = ch.input = "";
          ch.cursor = 0;
          return this.render();
        }
        separator() {
          return "";
        }
        format(value) {
          return !this.state.submitted ? super.format(value) : "";
        }
        pointer() {
          return "";
        }
        indicator(choice) {
          return choice.input ? "\u29BF" : "\u2299";
        }
        async choiceSeparator(choice, i) {
          let sep = await this.resolve(choice.separator, this.state, choice, i) || ":";
          return sep ? " " + this.styles.disabled(sep) : "";
        }
        async renderChoice(choice, i) {
          await this.onChoice(choice, i);
          let {state, styles} = this;
          let {cursor, initial = "", name, hint, input = ""} = choice;
          let {muted, submitted, primary, danger} = styles;
          let help = hint;
          let focused = this.index === i;
          let validate = choice.validate || (() => true);
          let sep = await this.choiceSeparator(choice, i);
          let msg = choice.message;
          if (this.align === "right")
            msg = msg.padStart(this.longest + 1, " ");
          if (this.align === "left")
            msg = msg.padEnd(this.longest + 1, " ");
          let value = this.values[name] = input || initial;
          let color = input ? "success" : "dark";
          if (await validate.call(choice, value, this.state) !== true) {
            color = "danger";
          }
          let style = styles[color];
          let indicator = style(await this.indicator(choice, i)) + (choice.pad || "");
          let indent = this.indent(choice);
          let line = () => [indent, indicator, msg + sep, input, help].filter(Boolean).join(" ");
          if (state.submitted) {
            msg = colors2.unstyle(msg);
            input = submitted(input);
            help = "";
            return line();
          }
          if (choice.format) {
            input = await choice.format.call(this, input, choice, i);
          } else {
            let color2 = this.styles.muted;
            let options = {input, initial, pos: cursor, showCursor: focused, color: color2};
            input = placeholder(this, options);
          }
          if (!this.isValue(input)) {
            input = this.styles.muted(this.symbols.ellipsis);
          }
          if (choice.result) {
            this.values[name] = await choice.result.call(this, value, choice, i);
          }
          if (focused) {
            msg = primary(msg);
          }
          if (choice.error) {
            input += (input ? " " : "") + danger(choice.error.trim());
          } else if (choice.hint) {
            input += (input ? " " : "") + muted(choice.hint.trim());
          }
          return line();
        }
        async submit() {
          this.value = this.values;
          return super.base.submit.call(this);
        }
      };
      module.exports = FormPrompt;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/types/auth.js
  var require_auth = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/types/auth.js"(exports, module) {
      "use strict";
      var FormPrompt = require_form();
      var defaultAuthenticate = () => {
        throw new Error("expected prompt to have a custom authenticate method");
      };
      var factory = (authenticate = defaultAuthenticate) => {
        class AuthPrompt extends FormPrompt {
          constructor(options) {
            super(options);
          }
          async submit() {
            this.value = await authenticate.call(this, this.values, this.state);
            super.base.submit.call(this);
          }
          static create(authenticate2) {
            return factory(authenticate2);
          }
        }
        return AuthPrompt;
      };
      module.exports = factory();
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/basicauth.js
  var require_basicauth = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/basicauth.js"(exports, module) {
      "use strict";
      var AuthPrompt = require_auth();
      function defaultAuthenticate(value, state) {
        if (value.username === this.options.username && value.password === this.options.password) {
          return true;
        }
        return false;
      }
      var factory = (authenticate = defaultAuthenticate) => {
        const choices = [
          {name: "username", message: "username"},
          {
            name: "password",
            message: "password",
            format(input) {
              if (this.options.showPassword) {
                return input;
              }
              let color = this.state.submitted ? this.styles.primary : this.styles.muted;
              return color(this.symbols.asterisk.repeat(input.length));
            }
          }
        ];
        class BasicAuthPrompt extends AuthPrompt.create(authenticate) {
          constructor(options) {
            super(__spreadProps(__spreadValues({}, options), {choices}));
          }
          static create(authenticate2) {
            return factory(authenticate2);
          }
        }
        return BasicAuthPrompt;
      };
      module.exports = factory();
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/types/boolean.js
  var require_boolean2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/types/boolean.js"(exports, module) {
      "use strict";
      var Prompt = require_prompt();
      var {isPrimitive, hasColor} = require_utils5();
      var BooleanPrompt = class extends Prompt {
        constructor(options) {
          super(options);
          this.cursorHide();
        }
        async initialize() {
          let initial = await this.resolve(this.initial, this.state);
          this.input = await this.cast(initial);
          await super.initialize();
        }
        dispatch(ch) {
          if (!this.isValue(ch))
            return this.alert();
          this.input = ch;
          return this.submit();
        }
        format(value) {
          let {styles, state} = this;
          return !state.submitted ? styles.primary(value) : styles.success(value);
        }
        cast(input) {
          return this.isTrue(input);
        }
        isTrue(input) {
          return /^[ty1]/i.test(input);
        }
        isFalse(input) {
          return /^[fn0]/i.test(input);
        }
        isValue(value) {
          return isPrimitive(value) && (this.isTrue(value) || this.isFalse(value));
        }
        async hint() {
          if (this.state.status === "pending") {
            let hint = await this.element("hint");
            if (!hasColor(hint)) {
              return this.styles.muted(hint);
            }
            return hint;
          }
        }
        async render() {
          let {input, size} = this.state;
          let prefix = await this.prefix();
          let sep = await this.separator();
          let msg = await this.message();
          let hint = this.styles.muted(this.default);
          let promptLine = [prefix, msg, hint, sep].filter(Boolean).join(" ");
          this.state.prompt = promptLine;
          let header = await this.header();
          let value = this.value = this.cast(input);
          let output = await this.format(value);
          let help = await this.error() || await this.hint();
          let footer = await this.footer();
          if (help && !promptLine.includes(help))
            output += " " + help;
          promptLine += " " + output;
          this.clear(size);
          this.write([header, promptLine, footer].filter(Boolean).join("\n"));
          this.restore();
        }
        set value(value) {
          super.value = value;
        }
        get value() {
          return this.cast(super.value);
        }
      };
      module.exports = BooleanPrompt;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/confirm.js
  var require_confirm = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/confirm.js"(exports, module) {
      "use strict";
      var BooleanPrompt = require_boolean2();
      var ConfirmPrompt = class extends BooleanPrompt {
        constructor(options) {
          super(options);
          this.default = this.options.default || (this.initial ? "(Y/n)" : "(y/N)");
        }
      };
      module.exports = ConfirmPrompt;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/editable.js
  var require_editable = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/editable.js"(exports, module) {
      "use strict";
      var Select = require_select();
      var Form = require_form();
      var form = Form.prototype;
      var Editable = class extends Select {
        constructor(options) {
          super(__spreadProps(__spreadValues({}, options), {multiple: true}));
          this.align = [this.options.align, "left"].find((v) => v != null);
          this.emptyError = "";
          this.values = {};
        }
        dispatch(char, key) {
          let choice = this.focused;
          let parent = choice.parent || {};
          if (!choice.editable && !parent.editable) {
            if (char === "a" || char === "i")
              return super[char]();
          }
          return form.dispatch.call(this, char, key);
        }
        append(char, key) {
          return form.append.call(this, char, key);
        }
        delete(char, key) {
          return form.delete.call(this, char, key);
        }
        space(char) {
          return this.focused.editable ? this.append(char) : super.space();
        }
        number(char) {
          return this.focused.editable ? this.append(char) : super.number(char);
        }
        next() {
          return this.focused.editable ? form.next.call(this) : super.next();
        }
        prev() {
          return this.focused.editable ? form.prev.call(this) : super.prev();
        }
        async indicator(choice, i) {
          let symbol = choice.indicator || "";
          let value = choice.editable ? symbol : super.indicator(choice, i);
          return await this.resolve(value, this.state, choice, i) || "";
        }
        indent(choice) {
          return choice.role === "heading" ? "" : choice.editable ? " " : "  ";
        }
        async renderChoice(choice, i) {
          choice.indent = "";
          if (choice.editable)
            return form.renderChoice.call(this, choice, i);
          return super.renderChoice(choice, i);
        }
        error() {
          return "";
        }
        footer() {
          return this.state.error;
        }
        async validate() {
          let result = true;
          for (let choice of this.choices) {
            if (typeof choice.validate !== "function") {
              continue;
            }
            if (choice.role === "heading") {
              continue;
            }
            let val = choice.parent ? this.value[choice.parent.name] : this.value;
            if (choice.editable) {
              val = choice.value === choice.name ? choice.initial || "" : choice.value;
            } else if (!this.isDisabled(choice)) {
              val = choice.enabled === true;
            }
            result = await choice.validate(val, this.state);
            if (result !== true) {
              break;
            }
          }
          if (result !== true) {
            this.state.error = typeof result === "string" ? result : "Invalid Input";
          }
          return result;
        }
        submit() {
          if (this.focused.newChoice === true)
            return super.submit();
          if (this.choices.some((ch) => ch.newChoice)) {
            return this.alert();
          }
          this.value = {};
          for (let choice of this.choices) {
            let val = choice.parent ? this.value[choice.parent.name] : this.value;
            if (choice.role === "heading") {
              this.value[choice.name] = {};
              continue;
            }
            if (choice.editable) {
              val[choice.name] = choice.value === choice.name ? choice.initial || "" : choice.value;
            } else if (!this.isDisabled(choice)) {
              val[choice.name] = choice.enabled === true;
            }
          }
          return this.base.submit.call(this);
        }
      };
      module.exports = Editable;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/types/string.js
  var require_string3 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/types/string.js"(exports, module) {
      "use strict";
      var Prompt = require_prompt();
      var placeholder = require_placeholder();
      var {isPrimitive} = require_utils5();
      var StringPrompt = class extends Prompt {
        constructor(options) {
          super(options);
          this.initial = isPrimitive(this.initial) ? String(this.initial) : "";
          if (this.initial)
            this.cursorHide();
          this.state.prevCursor = 0;
          this.state.clipboard = [];
        }
        async keypress(input, key = {}) {
          let prev = this.state.prevKeypress;
          this.state.prevKeypress = key;
          if (this.options.multiline === true && key.name === "return") {
            if (!prev || prev.name !== "return") {
              return this.append("\n", key);
            }
          }
          return super.keypress(input, key);
        }
        moveCursor(n) {
          this.cursor += n;
        }
        reset() {
          this.input = this.value = "";
          this.cursor = 0;
          return this.render();
        }
        dispatch(ch, key) {
          if (!ch || key.ctrl || key.code)
            return this.alert();
          this.append(ch);
        }
        append(ch) {
          let {cursor, input} = this.state;
          this.input = `${input}`.slice(0, cursor) + ch + `${input}`.slice(cursor);
          this.moveCursor(String(ch).length);
          this.render();
        }
        insert(str) {
          this.append(str);
        }
        delete() {
          let {cursor, input} = this.state;
          if (cursor <= 0)
            return this.alert();
          this.input = `${input}`.slice(0, cursor - 1) + `${input}`.slice(cursor);
          this.moveCursor(-1);
          this.render();
        }
        deleteForward() {
          let {cursor, input} = this.state;
          if (input[cursor] === void 0)
            return this.alert();
          this.input = `${input}`.slice(0, cursor) + `${input}`.slice(cursor + 1);
          this.render();
        }
        cutForward() {
          let pos = this.cursor;
          if (this.input.length <= pos)
            return this.alert();
          this.state.clipboard.push(this.input.slice(pos));
          this.input = this.input.slice(0, pos);
          this.render();
        }
        cutLeft() {
          let pos = this.cursor;
          if (pos === 0)
            return this.alert();
          let before = this.input.slice(0, pos);
          let after = this.input.slice(pos);
          let words = before.split(" ");
          this.state.clipboard.push(words.pop());
          this.input = words.join(" ");
          this.cursor = this.input.length;
          this.input += after;
          this.render();
        }
        paste() {
          if (!this.state.clipboard.length)
            return this.alert();
          this.insert(this.state.clipboard.pop());
          this.render();
        }
        toggleCursor() {
          if (this.state.prevCursor) {
            this.cursor = this.state.prevCursor;
            this.state.prevCursor = 0;
          } else {
            this.state.prevCursor = this.cursor;
            this.cursor = 0;
          }
          this.render();
        }
        first() {
          this.cursor = 0;
          this.render();
        }
        last() {
          this.cursor = this.input.length - 1;
          this.render();
        }
        next() {
          let init = this.initial != null ? String(this.initial) : "";
          if (!init || !init.startsWith(this.input))
            return this.alert();
          this.input = this.initial;
          this.cursor = this.initial.length;
          this.render();
        }
        prev() {
          if (!this.input)
            return this.alert();
          this.reset();
        }
        backward() {
          return this.left();
        }
        forward() {
          return this.right();
        }
        right() {
          if (this.cursor >= this.input.length)
            return this.alert();
          this.moveCursor(1);
          return this.render();
        }
        left() {
          if (this.cursor <= 0)
            return this.alert();
          this.moveCursor(-1);
          return this.render();
        }
        isValue(value) {
          return !!value;
        }
        async format(input = this.value) {
          let initial = await this.resolve(this.initial, this.state);
          if (!this.state.submitted) {
            return placeholder(this, {input, initial, pos: this.cursor});
          }
          return this.styles.submitted(input || initial);
        }
        async render() {
          let size = this.state.size;
          let prefix = await this.prefix();
          let separator = await this.separator();
          let message = await this.message();
          let prompt5 = [prefix, message, separator].filter(Boolean).join(" ");
          this.state.prompt = prompt5;
          let header = await this.header();
          let output = await this.format();
          let help = await this.error() || await this.hint();
          let footer = await this.footer();
          if (help && !output.includes(help))
            output += " " + help;
          prompt5 += " " + output;
          this.clear(size);
          this.write([header, prompt5, footer].filter(Boolean).join("\n"));
          this.restore();
        }
      };
      module.exports = StringPrompt;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/completer.js
  var require_completer = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/completer.js"(exports, module) {
      "use strict";
      var unique = (arr) => arr.filter((v, i) => arr.lastIndexOf(v) === i);
      var compact = (arr) => unique(arr).filter(Boolean);
      module.exports = (action, data = {}, value = "") => {
        let {past = [], present = ""} = data;
        let rest, prev;
        switch (action) {
          case "prev":
          case "undo":
            rest = past.slice(0, past.length - 1);
            prev = past[past.length - 1] || "";
            return {
              past: compact([value, ...rest]),
              present: prev
            };
          case "next":
          case "redo":
            rest = past.slice(1);
            prev = past[0] || "";
            return {
              past: compact([...rest, value]),
              present: prev
            };
          case "save":
            return {
              past: compact([...past, value]),
              present: ""
            };
          case "remove":
            prev = compact(past.filter((v) => v !== value));
            present = "";
            if (prev.length) {
              present = prev.pop();
            }
            return {
              past: prev,
              present
            };
          default: {
            throw new Error(`Invalid action: "${action}"`);
          }
        }
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/input.js
  var require_input = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/input.js"(exports, module) {
      "use strict";
      var Prompt = require_string3();
      var completer = require_completer();
      var Input = class extends Prompt {
        constructor(options) {
          super(options);
          let history = this.options.history;
          if (history && history.store) {
            let initial = history.values || this.initial;
            this.autosave = !!history.autosave;
            this.store = history.store;
            this.data = this.store.get("values") || {past: [], present: initial};
            this.initial = this.data.present || this.data.past[this.data.past.length - 1];
          }
        }
        completion(action) {
          if (!this.store)
            return this.alert();
          this.data = completer(action, this.data, this.input);
          if (!this.data.present)
            return this.alert();
          this.input = this.data.present;
          this.cursor = this.input.length;
          return this.render();
        }
        altUp() {
          return this.completion("prev");
        }
        altDown() {
          return this.completion("next");
        }
        prev() {
          this.save();
          return super.prev();
        }
        save() {
          if (!this.store)
            return;
          this.data = completer("save", this.data, this.input);
          this.store.set("values", this.data);
        }
        submit() {
          if (this.store && this.autosave === true) {
            this.save();
          }
          return super.submit();
        }
      };
      module.exports = Input;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/invisible.js
  var require_invisible = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/invisible.js"(exports, module) {
      "use strict";
      var StringPrompt = require_string3();
      var InvisiblePrompt = class extends StringPrompt {
        format() {
          return "";
        }
      };
      module.exports = InvisiblePrompt;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/list.js
  var require_list2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/list.js"(exports, module) {
      "use strict";
      var StringPrompt = require_string3();
      var ListPrompt = class extends StringPrompt {
        constructor(options = {}) {
          super(options);
          this.sep = this.options.separator || /, */;
          this.initial = options.initial || "";
        }
        split(input = this.value) {
          return input ? String(input).split(this.sep) : [];
        }
        format() {
          let style = this.state.submitted ? this.styles.primary : (val) => val;
          return this.list.map(style).join(", ");
        }
        async submit(value) {
          let result = this.state.error || await this.validate(this.list, this.state);
          if (result !== true) {
            this.state.error = result;
            return super.submit();
          }
          this.value = this.list;
          return super.submit();
        }
        get list() {
          return this.split();
        }
      };
      module.exports = ListPrompt;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/multiselect.js
  var require_multiselect = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/multiselect.js"(exports, module) {
      "use strict";
      var Select = require_select();
      var MultiSelect = class extends Select {
        constructor(options) {
          super(__spreadProps(__spreadValues({}, options), {multiple: true}));
        }
      };
      module.exports = MultiSelect;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/types/number.js
  var require_number2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/types/number.js"(exports, module) {
      "use strict";
      var StringPrompt = require_string3();
      var NumberPrompt = class extends StringPrompt {
        constructor(options = {}) {
          super(__spreadValues({style: "number"}, options));
          this.min = this.isValue(options.min) ? this.toNumber(options.min) : -Infinity;
          this.max = this.isValue(options.max) ? this.toNumber(options.max) : Infinity;
          this.delay = options.delay != null ? options.delay : 1e3;
          this.float = options.float !== false;
          this.round = options.round === true || options.float === false;
          this.major = options.major || 10;
          this.minor = options.minor || 1;
          this.initial = options.initial != null ? options.initial : "";
          this.input = String(this.initial);
          this.cursor = this.input.length;
          this.cursorShow();
        }
        append(ch) {
          if (!/[-+.]/.test(ch) || ch === "." && this.input.includes(".")) {
            return this.alert("invalid number");
          }
          return super.append(ch);
        }
        number(ch) {
          return super.append(ch);
        }
        next() {
          if (this.input && this.input !== this.initial)
            return this.alert();
          if (!this.isValue(this.initial))
            return this.alert();
          this.input = this.initial;
          this.cursor = String(this.initial).length;
          return this.render();
        }
        up(number) {
          let step = number || this.minor;
          let num = this.toNumber(this.input);
          if (num > this.max + step)
            return this.alert();
          this.input = `${num + step}`;
          return this.render();
        }
        down(number) {
          let step = number || this.minor;
          let num = this.toNumber(this.input);
          if (num < this.min - step)
            return this.alert();
          this.input = `${num - step}`;
          return this.render();
        }
        shiftDown() {
          return this.down(this.major);
        }
        shiftUp() {
          return this.up(this.major);
        }
        format(input = this.input) {
          if (typeof this.options.format === "function") {
            return this.options.format.call(this, input);
          }
          return this.styles.info(input);
        }
        toNumber(value = "") {
          return this.float ? +value : Math.round(+value);
        }
        isValue(value) {
          return /^[-+]?[0-9]+((\.)|(\.[0-9]+))?$/.test(value);
        }
        submit() {
          let value = [this.input, this.initial].find((v) => this.isValue(v));
          this.value = this.toNumber(value || 0);
          return super.submit();
        }
      };
      module.exports = NumberPrompt;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/numeral.js
  var require_numeral = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/numeral.js"(exports, module) {
      module.exports = require_number2();
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/password.js
  var require_password = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/password.js"(exports, module) {
      "use strict";
      var StringPrompt = require_string3();
      var PasswordPrompt = class extends StringPrompt {
        constructor(options) {
          super(options);
          this.cursorShow();
        }
        format(input = this.input) {
          if (!this.keypressed)
            return "";
          let color = this.state.submitted ? this.styles.primary : this.styles.muted;
          return color(this.symbols.asterisk.repeat(input.length));
        }
      };
      module.exports = PasswordPrompt;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/scale.js
  var require_scale = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/scale.js"(exports, module) {
      "use strict";
      var colors2 = require_ansi_colors();
      var ArrayPrompt = require_array5();
      var utils = require_utils5();
      var LikertScale = class extends ArrayPrompt {
        constructor(options = {}) {
          super(options);
          this.widths = [].concat(options.messageWidth || 50);
          this.align = [].concat(options.align || "left");
          this.linebreak = options.linebreak || false;
          this.edgeLength = options.edgeLength || 3;
          this.newline = options.newline || "\n   ";
          let start2 = options.startNumber || 1;
          if (typeof this.scale === "number") {
            this.scaleKey = false;
            this.scale = Array(this.scale).fill(0).map((v, i) => ({name: i + start2}));
          }
        }
        async reset() {
          this.tableized = false;
          await super.reset();
          return this.render();
        }
        tableize() {
          if (this.tableized === true)
            return;
          this.tableized = true;
          let longest = 0;
          for (let ch of this.choices) {
            longest = Math.max(longest, ch.message.length);
            ch.scaleIndex = ch.initial || 2;
            ch.scale = [];
            for (let i = 0; i < this.scale.length; i++) {
              ch.scale.push({index: i});
            }
          }
          this.widths[0] = Math.min(this.widths[0], longest + 3);
        }
        async dispatch(s, key) {
          if (this.multiple) {
            return this[key.name] ? await this[key.name](s, key) : await super.dispatch(s, key);
          }
          this.alert();
        }
        heading(msg, item, i) {
          return this.styles.strong(msg);
        }
        separator() {
          return this.styles.muted(this.symbols.ellipsis);
        }
        right() {
          let choice = this.focused;
          if (choice.scaleIndex >= this.scale.length - 1)
            return this.alert();
          choice.scaleIndex++;
          return this.render();
        }
        left() {
          let choice = this.focused;
          if (choice.scaleIndex <= 0)
            return this.alert();
          choice.scaleIndex--;
          return this.render();
        }
        indent() {
          return "";
        }
        format() {
          if (this.state.submitted) {
            let values = this.choices.map((ch) => this.styles.info(ch.index));
            return values.join(", ");
          }
          return "";
        }
        pointer() {
          return "";
        }
        renderScaleKey() {
          if (this.scaleKey === false)
            return "";
          if (this.state.submitted)
            return "";
          let scale = this.scale.map((item) => `   ${item.name} - ${item.message}`);
          let key = ["", ...scale].map((item) => this.styles.muted(item));
          return key.join("\n");
        }
        renderScaleHeading(max) {
          let keys = this.scale.map((ele) => ele.name);
          if (typeof this.options.renderScaleHeading === "function") {
            keys = this.options.renderScaleHeading.call(this, max);
          }
          let diff = this.scaleLength - keys.join("").length;
          let spacing = Math.round(diff / (keys.length - 1));
          let names = keys.map((key) => this.styles.strong(key));
          let headings = names.join(" ".repeat(spacing));
          let padding = " ".repeat(this.widths[0]);
          return this.margin[3] + padding + this.margin[1] + headings;
        }
        scaleIndicator(choice, item, i) {
          if (typeof this.options.scaleIndicator === "function") {
            return this.options.scaleIndicator.call(this, choice, item, i);
          }
          let enabled = choice.scaleIndex === item.index;
          if (item.disabled)
            return this.styles.hint(this.symbols.radio.disabled);
          if (enabled)
            return this.styles.success(this.symbols.radio.on);
          return this.symbols.radio.off;
        }
        renderScale(choice, i) {
          let scale = choice.scale.map((item) => this.scaleIndicator(choice, item, i));
          let padding = this.term === "Hyper" ? "" : " ";
          return scale.join(padding + this.symbols.line.repeat(this.edgeLength));
        }
        async renderChoice(choice, i) {
          await this.onChoice(choice, i);
          let focused = this.index === i;
          let pointer = await this.pointer(choice, i);
          let hint = await choice.hint;
          if (hint && !utils.hasColor(hint)) {
            hint = this.styles.muted(hint);
          }
          let pad = (str) => this.margin[3] + str.replace(/\s+$/, "").padEnd(this.widths[0], " ");
          let newline = this.newline;
          let ind = this.indent(choice);
          let message = await this.resolve(choice.message, this.state, choice, i);
          let scale = await this.renderScale(choice, i);
          let margin = this.margin[1] + this.margin[3];
          this.scaleLength = colors2.unstyle(scale).length;
          this.widths[0] = Math.min(this.widths[0], this.width - this.scaleLength - margin.length);
          let msg = utils.wordWrap(message, {width: this.widths[0], newline});
          let lines = msg.split("\n").map((line) => pad(line) + this.margin[1]);
          if (focused) {
            scale = this.styles.info(scale);
            lines = lines.map((line) => this.styles.info(line));
          }
          lines[0] += scale;
          if (this.linebreak)
            lines.push("");
          return [ind + pointer, lines.join("\n")].filter(Boolean);
        }
        async renderChoices() {
          if (this.state.submitted)
            return "";
          this.tableize();
          let choices = this.visible.map(async (ch, i) => await this.renderChoice(ch, i));
          let visible = await Promise.all(choices);
          let heading = await this.renderScaleHeading();
          return this.margin[0] + [heading, ...visible.map((v) => v.join(" "))].join("\n");
        }
        async render() {
          let {submitted, size} = this.state;
          let prefix = await this.prefix();
          let separator = await this.separator();
          let message = await this.message();
          let prompt5 = "";
          if (this.options.promptLine !== false) {
            prompt5 = [prefix, message, separator, ""].join(" ");
            this.state.prompt = prompt5;
          }
          let header = await this.header();
          let output = await this.format();
          let key = await this.renderScaleKey();
          let help = await this.error() || await this.hint();
          let body = await this.renderChoices();
          let footer = await this.footer();
          let err = this.emptyError;
          if (output)
            prompt5 += output;
          if (help && !prompt5.includes(help))
            prompt5 += " " + help;
          if (submitted && !output && !body.trim() && this.multiple && err != null) {
            prompt5 += this.styles.danger(err);
          }
          this.clear(size);
          this.write([header, prompt5, key, body, footer].filter(Boolean).join("\n"));
          if (!this.state.submitted) {
            this.write(this.margin[2]);
          }
          this.restore();
        }
        submit() {
          this.value = {};
          for (let choice of this.choices) {
            this.value[choice.name] = choice.scaleIndex;
          }
          return this.base.submit.call(this);
        }
      };
      module.exports = LikertScale;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/interpolate.js
  var require_interpolate = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/interpolate.js"(exports, module) {
      "use strict";
      var colors2 = require_ansi_colors();
      var clean2 = (str = "") => {
        return typeof str === "string" ? str.replace(/^['"]|['"]$/g, "") : "";
      };
      var Item = class {
        constructor(token) {
          this.name = token.key;
          this.field = token.field || {};
          this.value = clean2(token.initial || this.field.initial || "");
          this.message = token.message || this.name;
          this.cursor = 0;
          this.input = "";
          this.lines = [];
        }
      };
      var tokenize = async (options = {}, defaults = {}, fn = (token) => token) => {
        let unique = new Set();
        let fields = options.fields || [];
        let input = options.template;
        let tabstops = [];
        let items = [];
        let keys = [];
        let line = 1;
        if (typeof input === "function") {
          input = await input();
        }
        let i = -1;
        let next = () => input[++i];
        let peek = () => input[i + 1];
        let push = (token) => {
          token.line = line;
          tabstops.push(token);
        };
        push({type: "bos", value: ""});
        while (i < input.length - 1) {
          let value = next();
          if (/^[^\S\n ]$/.test(value)) {
            push({type: "text", value});
            continue;
          }
          if (value === "\n") {
            push({type: "newline", value});
            line++;
            continue;
          }
          if (value === "\\") {
            value += next();
            push({type: "text", value});
            continue;
          }
          if ((value === "$" || value === "#" || value === "{") && peek() === "{") {
            let n = next();
            value += n;
            let token = {type: "template", open: value, inner: "", close: "", value};
            let ch;
            while (ch = next()) {
              if (ch === "}") {
                if (peek() === "}")
                  ch += next();
                token.value += ch;
                token.close = ch;
                break;
              }
              if (ch === ":") {
                token.initial = "";
                token.key = token.inner;
              } else if (token.initial !== void 0) {
                token.initial += ch;
              }
              token.value += ch;
              token.inner += ch;
            }
            token.template = token.open + (token.initial || token.inner) + token.close;
            token.key = token.key || token.inner;
            if (defaults.hasOwnProperty(token.key)) {
              token.initial = defaults[token.key];
            }
            token = fn(token);
            push(token);
            keys.push(token.key);
            unique.add(token.key);
            let item = items.find((item2) => item2.name === token.key);
            token.field = fields.find((ch2) => ch2.name === token.key);
            if (!item) {
              item = new Item(token);
              items.push(item);
            }
            item.lines.push(token.line - 1);
            continue;
          }
          let last = tabstops[tabstops.length - 1];
          if (last.type === "text" && last.line === line) {
            last.value += value;
          } else {
            push({type: "text", value});
          }
        }
        push({type: "eos", value: ""});
        return {input, tabstops, unique, keys, items};
      };
      module.exports = async (prompt5) => {
        let options = prompt5.options;
        let required = new Set(options.required === true ? [] : options.required || []);
        let defaults = __spreadValues(__spreadValues({}, options.values), options.initial);
        let {tabstops, items, keys} = await tokenize(options, defaults);
        let result = createFn("result", prompt5, options);
        let format = createFn("format", prompt5, options);
        let isValid = createFn("validate", prompt5, options, true);
        let isVal = prompt5.isValue.bind(prompt5);
        return async (state = {}, submitted = false) => {
          let index = 0;
          state.required = required;
          state.items = items;
          state.keys = keys;
          state.output = "";
          let validate = async (value, state2, item, index2) => {
            let error = await isValid(value, state2, item, index2);
            if (error === false) {
              return "Invalid field " + item.name;
            }
            return error;
          };
          for (let token of tabstops) {
            let value = token.value;
            let key = token.key;
            if (token.type !== "template") {
              if (value)
                state.output += value;
              continue;
            }
            if (token.type === "template") {
              let item = items.find((ch) => ch.name === key);
              if (options.required === true) {
                state.required.add(item.name);
              }
              let val = [item.input, state.values[item.value], item.value, value].find(isVal);
              let field = item.field || {};
              let message = field.message || token.inner;
              if (submitted) {
                let error = await validate(state.values[key], state, item, index);
                if (error && typeof error === "string" || error === false) {
                  state.invalid.set(key, error);
                  continue;
                }
                state.invalid.delete(key);
                let res = await result(state.values[key], state, item, index);
                state.output += colors2.unstyle(res);
                continue;
              }
              item.placeholder = false;
              let before = value;
              value = await format(value, state, item, index);
              if (val !== value) {
                state.values[key] = val;
                value = prompt5.styles.typing(val);
                state.missing.delete(message);
              } else {
                state.values[key] = void 0;
                val = `<${message}>`;
                value = prompt5.styles.primary(val);
                item.placeholder = true;
                if (state.required.has(key)) {
                  state.missing.add(message);
                }
              }
              if (state.missing.has(message) && state.validating) {
                value = prompt5.styles.warning(val);
              }
              if (state.invalid.has(key) && state.validating) {
                value = prompt5.styles.danger(val);
              }
              if (index === state.index) {
                if (before !== value) {
                  value = prompt5.styles.underline(value);
                } else {
                  value = prompt5.styles.heading(colors2.unstyle(value));
                }
              }
              index++;
            }
            if (value) {
              state.output += value;
            }
          }
          let lines = state.output.split("\n").map((l) => " " + l);
          let len = items.length;
          let done = 0;
          for (let item of items) {
            if (state.invalid.has(item.name)) {
              item.lines.forEach((i) => {
                if (lines[i][0] !== " ")
                  return;
                lines[i] = state.styles.danger(state.symbols.bullet) + lines[i].slice(1);
              });
            }
            if (prompt5.isValue(state.values[item.name])) {
              done++;
            }
          }
          state.completed = (done / len * 100).toFixed(0);
          state.output = lines.join("\n");
          return state.output;
        };
      };
      function createFn(prop, prompt5, options, fallback) {
        return (value, state, item, index) => {
          if (typeof item.field[prop] === "function") {
            return item.field[prop].call(prompt5, value, state, item, index);
          }
          return [fallback, value].find((v) => prompt5.isValue(v));
        };
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/snippet.js
  var require_snippet = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/snippet.js"(exports, module) {
      "use strict";
      var colors2 = require_ansi_colors();
      var interpolate = require_interpolate();
      var Prompt = require_prompt();
      var SnippetPrompt = class extends Prompt {
        constructor(options) {
          super(options);
          this.cursorHide();
          this.reset(true);
        }
        async initialize() {
          this.interpolate = await interpolate(this);
          await super.initialize();
        }
        async reset(first) {
          this.state.keys = [];
          this.state.invalid = new Map();
          this.state.missing = new Set();
          this.state.completed = 0;
          this.state.values = {};
          if (first !== true) {
            await this.initialize();
            await this.render();
          }
        }
        moveCursor(n) {
          let item = this.getItem();
          this.cursor += n;
          item.cursor += n;
        }
        dispatch(ch, key) {
          if (!key.code && !key.ctrl && ch != null && this.getItem()) {
            this.append(ch, key);
            return;
          }
          this.alert();
        }
        append(ch, key) {
          let item = this.getItem();
          let prefix = item.input.slice(0, this.cursor);
          let suffix = item.input.slice(this.cursor);
          this.input = item.input = `${prefix}${ch}${suffix}`;
          this.moveCursor(1);
          this.render();
        }
        delete() {
          let item = this.getItem();
          if (this.cursor <= 0 || !item.input)
            return this.alert();
          let suffix = item.input.slice(this.cursor);
          let prefix = item.input.slice(0, this.cursor - 1);
          this.input = item.input = `${prefix}${suffix}`;
          this.moveCursor(-1);
          this.render();
        }
        increment(i) {
          return i >= this.state.keys.length - 1 ? 0 : i + 1;
        }
        decrement(i) {
          return i <= 0 ? this.state.keys.length - 1 : i - 1;
        }
        first() {
          this.state.index = 0;
          this.render();
        }
        last() {
          this.state.index = this.state.keys.length - 1;
          this.render();
        }
        right() {
          if (this.cursor >= this.input.length)
            return this.alert();
          this.moveCursor(1);
          this.render();
        }
        left() {
          if (this.cursor <= 0)
            return this.alert();
          this.moveCursor(-1);
          this.render();
        }
        prev() {
          this.state.index = this.decrement(this.state.index);
          this.getItem();
          this.render();
        }
        next() {
          this.state.index = this.increment(this.state.index);
          this.getItem();
          this.render();
        }
        up() {
          this.prev();
        }
        down() {
          this.next();
        }
        format(value) {
          let color = this.state.completed < 100 ? this.styles.warning : this.styles.success;
          if (this.state.submitted === true && this.state.completed !== 100) {
            color = this.styles.danger;
          }
          return color(`${this.state.completed}% completed`);
        }
        async render() {
          let {index, keys = [], submitted, size} = this.state;
          let newline = [this.options.newline, "\n"].find((v) => v != null);
          let prefix = await this.prefix();
          let separator = await this.separator();
          let message = await this.message();
          let prompt5 = [prefix, message, separator].filter(Boolean).join(" ");
          this.state.prompt = prompt5;
          let header = await this.header();
          let error = await this.error() || "";
          let hint = await this.hint() || "";
          let body = submitted ? "" : await this.interpolate(this.state);
          let key = this.state.key = keys[index] || "";
          let input = await this.format(key);
          let footer = await this.footer();
          if (input)
            prompt5 += " " + input;
          if (hint && !input && this.state.completed === 0)
            prompt5 += " " + hint;
          this.clear(size);
          let lines = [header, prompt5, body, footer, error.trim()];
          this.write(lines.filter(Boolean).join(newline));
          this.restore();
        }
        getItem(name) {
          let {items, keys, index} = this.state;
          let item = items.find((ch) => ch.name === keys[index]);
          if (item && item.input != null) {
            this.input = item.input;
            this.cursor = item.cursor;
          }
          return item;
        }
        async submit() {
          if (typeof this.interpolate !== "function")
            await this.initialize();
          await this.interpolate(this.state, true);
          let {invalid, missing, output, values} = this.state;
          if (invalid.size) {
            let err = "";
            for (let [key, value] of invalid)
              err += `Invalid ${key}: ${value}
`;
            this.state.error = err;
            return super.submit();
          }
          if (missing.size) {
            this.state.error = "Required: " + [...missing.keys()].join(", ");
            return super.submit();
          }
          let lines = colors2.unstyle(output).split("\n");
          let result = lines.map((v) => v.slice(1)).join("\n");
          this.value = {values, result};
          return super.submit();
        }
      };
      module.exports = SnippetPrompt;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/sort.js
  var require_sort2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/sort.js"(exports, module) {
      "use strict";
      var hint = "(Use <shift>+<up/down> to sort)";
      var Prompt = require_select();
      var Sort = class extends Prompt {
        constructor(options) {
          super(__spreadProps(__spreadValues({}, options), {reorder: false, sort: true, multiple: true}));
          this.state.hint = [this.options.hint, hint].find(this.isValue.bind(this));
        }
        indicator() {
          return "";
        }
        async renderChoice(choice, i) {
          let str = await super.renderChoice(choice, i);
          let sym = this.symbols.identicalTo + " ";
          let pre = this.index === i && this.sorting ? this.styles.muted(sym) : "  ";
          if (this.options.drag === false)
            pre = "";
          if (this.options.numbered === true) {
            return pre + `${i + 1} - ` + str;
          }
          return pre + str;
        }
        get selected() {
          return this.choices;
        }
        submit() {
          this.value = this.choices.map((choice) => choice.value);
          return super.submit();
        }
      };
      module.exports = Sort;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/survey.js
  var require_survey = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/survey.js"(exports, module) {
      "use strict";
      var ArrayPrompt = require_array5();
      var Survey = class extends ArrayPrompt {
        constructor(options = {}) {
          super(options);
          this.emptyError = options.emptyError || "No items were selected";
          this.term = process.env.TERM_PROGRAM;
          if (!this.options.header) {
            let header = ["", "4 - Strongly Agree", "3 - Agree", "2 - Neutral", "1 - Disagree", "0 - Strongly Disagree", ""];
            header = header.map((ele) => this.styles.muted(ele));
            this.state.header = header.join("\n   ");
          }
        }
        async toChoices(...args) {
          if (this.createdScales)
            return false;
          this.createdScales = true;
          let choices = await super.toChoices(...args);
          for (let choice of choices) {
            choice.scale = createScale(5, this.options);
            choice.scaleIdx = 2;
          }
          return choices;
        }
        dispatch() {
          this.alert();
        }
        space() {
          let choice = this.focused;
          let ele = choice.scale[choice.scaleIdx];
          let selected = ele.selected;
          choice.scale.forEach((e) => e.selected = false);
          ele.selected = !selected;
          return this.render();
        }
        indicator() {
          return "";
        }
        pointer() {
          return "";
        }
        separator() {
          return this.styles.muted(this.symbols.ellipsis);
        }
        right() {
          let choice = this.focused;
          if (choice.scaleIdx >= choice.scale.length - 1)
            return this.alert();
          choice.scaleIdx++;
          return this.render();
        }
        left() {
          let choice = this.focused;
          if (choice.scaleIdx <= 0)
            return this.alert();
          choice.scaleIdx--;
          return this.render();
        }
        indent() {
          return "   ";
        }
        async renderChoice(item, i) {
          await this.onChoice(item, i);
          let focused = this.index === i;
          let isHyper = this.term === "Hyper";
          let n = !isHyper ? 8 : 9;
          let s = !isHyper ? " " : "";
          let ln = this.symbols.line.repeat(n);
          let sp = " ".repeat(n + (isHyper ? 0 : 1));
          let dot = (enabled) => (enabled ? this.styles.success("\u25C9") : "\u25EF") + s;
          let num = i + 1 + ".";
          let color = focused ? this.styles.heading : this.styles.noop;
          let msg = await this.resolve(item.message, this.state, item, i);
          let indent = this.indent(item);
          let scale = indent + item.scale.map((e, i2) => dot(i2 === item.scaleIdx)).join(ln);
          let val = (i2) => i2 === item.scaleIdx ? color(i2) : i2;
          let next = indent + item.scale.map((e, i2) => val(i2)).join(sp);
          let line = () => [num, msg].filter(Boolean).join(" ");
          let lines = () => [line(), scale, next, " "].filter(Boolean).join("\n");
          if (focused) {
            scale = this.styles.cyan(scale);
            next = this.styles.cyan(next);
          }
          return lines();
        }
        async renderChoices() {
          if (this.state.submitted)
            return "";
          let choices = this.visible.map(async (ch, i) => await this.renderChoice(ch, i));
          let visible = await Promise.all(choices);
          if (!visible.length)
            visible.push(this.styles.danger("No matching choices"));
          return visible.join("\n");
        }
        format() {
          if (this.state.submitted) {
            let values = this.choices.map((ch) => this.styles.info(ch.scaleIdx));
            return values.join(", ");
          }
          return "";
        }
        async render() {
          let {submitted, size} = this.state;
          let prefix = await this.prefix();
          let separator = await this.separator();
          let message = await this.message();
          let prompt5 = [prefix, message, separator].filter(Boolean).join(" ");
          this.state.prompt = prompt5;
          let header = await this.header();
          let output = await this.format();
          let help = await this.error() || await this.hint();
          let body = await this.renderChoices();
          let footer = await this.footer();
          if (output || !help)
            prompt5 += " " + output;
          if (help && !prompt5.includes(help))
            prompt5 += " " + help;
          if (submitted && !output && !body && this.multiple && this.type !== "form") {
            prompt5 += this.styles.danger(this.emptyError);
          }
          this.clear(size);
          this.write([prompt5, header, body, footer].filter(Boolean).join("\n"));
          this.restore();
        }
        submit() {
          this.value = {};
          for (let choice of this.choices) {
            this.value[choice.name] = choice.scaleIdx;
          }
          return this.base.submit.call(this);
        }
      };
      function createScale(n, options = {}) {
        if (Array.isArray(options.scale)) {
          return options.scale.map((ele) => __spreadValues({}, ele));
        }
        let scale = [];
        for (let i = 1; i < n + 1; i++)
          scale.push({i, selected: false});
        return scale;
      }
      module.exports = Survey;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/text.js
  var require_text = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/text.js"(exports, module) {
      module.exports = require_input();
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/toggle.js
  var require_toggle = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/toggle.js"(exports, module) {
      "use strict";
      var BooleanPrompt = require_boolean2();
      var TogglePrompt = class extends BooleanPrompt {
        async initialize() {
          await super.initialize();
          this.value = this.initial = !!this.options.initial;
          this.disabled = this.options.disabled || "no";
          this.enabled = this.options.enabled || "yes";
          await this.render();
        }
        reset() {
          this.value = this.initial;
          this.render();
        }
        delete() {
          this.alert();
        }
        toggle() {
          this.value = !this.value;
          this.render();
        }
        enable() {
          if (this.value === true)
            return this.alert();
          this.value = true;
          this.render();
        }
        disable() {
          if (this.value === false)
            return this.alert();
          this.value = false;
          this.render();
        }
        up() {
          this.toggle();
        }
        down() {
          this.toggle();
        }
        right() {
          this.toggle();
        }
        left() {
          this.toggle();
        }
        next() {
          this.toggle();
        }
        prev() {
          this.toggle();
        }
        dispatch(ch = "", key) {
          switch (ch.toLowerCase()) {
            case " ":
              return this.toggle();
            case "1":
            case "y":
            case "t":
              return this.enable();
            case "0":
            case "n":
            case "f":
              return this.disable();
            default: {
              return this.alert();
            }
          }
        }
        format() {
          let active = (str) => this.styles.primary.underline(str);
          let value = [
            this.value ? this.disabled : active(this.disabled),
            this.value ? active(this.enabled) : this.enabled
          ];
          return value.join(this.styles.muted(" / "));
        }
        async render() {
          let {size} = this.state;
          let header = await this.header();
          let prefix = await this.prefix();
          let separator = await this.separator();
          let message = await this.message();
          let output = await this.format();
          let help = await this.error() || await this.hint();
          let footer = await this.footer();
          let prompt5 = [prefix, message, separator, output].join(" ");
          this.state.prompt = prompt5;
          if (help && !prompt5.includes(help))
            prompt5 += " " + help;
          this.clear(size);
          this.write([header, prompt5, footer].filter(Boolean).join("\n"));
          this.write(this.margin[2]);
          this.restore();
        }
      };
      module.exports = TogglePrompt;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/quiz.js
  var require_quiz = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/quiz.js"(exports, module) {
      "use strict";
      var SelectPrompt = require_select();
      var Quiz = class extends SelectPrompt {
        constructor(options) {
          super(options);
          if (typeof this.options.correctChoice !== "number" || this.options.correctChoice < 0) {
            throw new Error("Please specify the index of the correct answer from the list of choices");
          }
        }
        async toChoices(value, parent) {
          let choices = await super.toChoices(value, parent);
          if (choices.length < 2) {
            throw new Error("Please give at least two choices to the user");
          }
          if (this.options.correctChoice > choices.length) {
            throw new Error("Please specify the index of the correct answer from the list of choices");
          }
          return choices;
        }
        check(state) {
          return state.index === this.options.correctChoice;
        }
        async result(selected) {
          return {
            selectedAnswer: selected,
            correctAnswer: this.options.choices[this.options.correctChoice].value,
            correct: await this.check(this.state)
          };
        }
      };
      module.exports = Quiz;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/index.js
  var require_prompts = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/prompts/index.js"(exports) {
      "use strict";
      var utils = require_utils5();
      var define2 = (key, fn) => {
        utils.defineExport(exports, key, fn);
        utils.defineExport(exports, key.toLowerCase(), fn);
      };
      define2("AutoComplete", () => require_autocomplete());
      define2("BasicAuth", () => require_basicauth());
      define2("Confirm", () => require_confirm());
      define2("Editable", () => require_editable());
      define2("Form", () => require_form());
      define2("Input", () => require_input());
      define2("Invisible", () => require_invisible());
      define2("List", () => require_list2());
      define2("MultiSelect", () => require_multiselect());
      define2("Numeral", () => require_numeral());
      define2("Password", () => require_password());
      define2("Scale", () => require_scale());
      define2("Select", () => require_select());
      define2("Snippet", () => require_snippet());
      define2("Sort", () => require_sort2());
      define2("Survey", () => require_survey());
      define2("Text", () => require_text());
      define2("Toggle", () => require_toggle());
      define2("Quiz", () => require_quiz());
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/types/index.js
  var require_types4 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/lib/types/index.js"(exports, module) {
      module.exports = {
        ArrayPrompt: require_array5(),
        AuthPrompt: require_auth(),
        BooleanPrompt: require_boolean2(),
        NumberPrompt: require_number2(),
        StringPrompt: require_string3()
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/index.js
  var require_enquirer = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/enquirer-npm-2.3.6-7899175762-1c0911e14a.zip/node_modules/enquirer/index.js"(exports, module) {
      "use strict";
      var assert = require("assert");
      var Events = require("events");
      var utils = require_utils5();
      var Enquirer = class extends Events {
        constructor(options, answers) {
          super();
          this.options = utils.merge({}, options);
          this.answers = __spreadValues({}, answers);
        }
        register(type, fn) {
          if (utils.isObject(type)) {
            for (let key of Object.keys(type))
              this.register(key, type[key]);
            return this;
          }
          assert.equal(typeof fn, "function", "expected a function");
          let name = type.toLowerCase();
          if (fn.prototype instanceof this.Prompt) {
            this.prompts[name] = fn;
          } else {
            this.prompts[name] = fn(this.Prompt, this);
          }
          return this;
        }
        async prompt(questions = []) {
          for (let question of [].concat(questions)) {
            try {
              if (typeof question === "function")
                question = await question.call(this);
              await this.ask(utils.merge({}, this.options, question));
            } catch (err) {
              return Promise.reject(err);
            }
          }
          return this.answers;
        }
        async ask(question) {
          if (typeof question === "function") {
            question = await question.call(this);
          }
          let opts = utils.merge({}, this.options, question);
          let {type, name} = question;
          let {set, get: get3} = utils;
          if (typeof type === "function") {
            type = await type.call(this, question, this.answers);
          }
          if (!type)
            return this.answers[name];
          assert(this.prompts[type], `Prompt "${type}" is not registered`);
          let prompt5 = new this.prompts[type](opts);
          let value = get3(this.answers, name);
          prompt5.state.answers = this.answers;
          prompt5.enquirer = this;
          if (name) {
            prompt5.on("submit", (value2) => {
              this.emit("answer", name, value2, prompt5);
              set(this.answers, name, value2);
            });
          }
          let emit = prompt5.emit.bind(prompt5);
          prompt5.emit = (...args) => {
            this.emit.call(this, ...args);
            return emit(...args);
          };
          this.emit("prompt", prompt5, this);
          if (opts.autofill && value != null) {
            prompt5.value = prompt5.input = value;
            if (opts.autofill === "show") {
              await prompt5.submit();
            }
          } else {
            value = prompt5.value = await prompt5.run();
          }
          return value;
        }
        use(plugin16) {
          plugin16.call(this, this);
          return this;
        }
        set Prompt(value) {
          this._Prompt = value;
        }
        get Prompt() {
          return this._Prompt || this.constructor.Prompt;
        }
        get prompts() {
          return this.constructor.prompts;
        }
        static set Prompt(value) {
          this._Prompt = value;
        }
        static get Prompt() {
          return this._Prompt || require_prompt();
        }
        static get prompts() {
          return require_prompts();
        }
        static get types() {
          return require_types4();
        }
        static get prompt() {
          const fn = (questions, ...rest) => {
            let enquirer = new this(...rest);
            let emit = enquirer.emit.bind(enquirer);
            enquirer.emit = (...args) => {
              fn.emit(...args);
              return emit(...args);
            };
            return enquirer.prompt(questions);
          };
          utils.mixinEmitter(fn, new Events());
          return fn;
        }
      };
      utils.mixinEmitter(Enquirer, new Events());
      var prompts = Enquirer.prompts;
      for (let name of Object.keys(prompts)) {
        let key = name.toLowerCase();
        let run = (options) => new prompts[name](options).run();
        Enquirer.prompt[key] = run;
        Enquirer[key] = run;
        if (!Enquirer[name]) {
          Reflect.defineProperty(Enquirer, name, {get: () => prompts[name]});
        }
      }
      var exp = (name) => {
        utils.defineExport(Enquirer, name, () => Enquirer.types[name]);
      };
      exp("ArrayPrompt");
      exp("AuthPrompt");
      exp("BooleanPrompt");
      exp("NumberPrompt");
      exp("StringPrompt");
      module.exports = Enquirer;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_arrayEach.js
  var require_arrayEach = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_arrayEach.js"(exports, module) {
      function arrayEach(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (iteratee(array[index], index, array) === false) {
            break;
          }
        }
        return array;
      }
      module.exports = arrayEach;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_copyObject.js
  var require_copyObject = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_copyObject.js"(exports, module) {
      var assignValue = require_assignValue();
      var baseAssignValue = require_baseAssignValue();
      function copyObject(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});
        var index = -1, length = props.length;
        while (++index < length) {
          var key = props[index];
          var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
          if (newValue === void 0) {
            newValue = source[key];
          }
          if (isNew) {
            baseAssignValue(object, key, newValue);
          } else {
            assignValue(object, key, newValue);
          }
        }
        return object;
      }
      module.exports = copyObject;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseAssign.js
  var require_baseAssign = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseAssign.js"(exports, module) {
      var copyObject = require_copyObject();
      var keys = require_keys();
      function baseAssign(object, source) {
        return object && copyObject(source, keys(source), object);
      }
      module.exports = baseAssign;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_nativeKeysIn.js
  var require_nativeKeysIn = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_nativeKeysIn.js"(exports, module) {
      function nativeKeysIn(object) {
        var result = [];
        if (object != null) {
          for (var key in Object(object)) {
            result.push(key);
          }
        }
        return result;
      }
      module.exports = nativeKeysIn;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseKeysIn.js
  var require_baseKeysIn = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseKeysIn.js"(exports, module) {
      var isObject2 = require_isObject();
      var isPrototype = require_isPrototype();
      var nativeKeysIn = require_nativeKeysIn();
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      function baseKeysIn(object) {
        if (!isObject2(object)) {
          return nativeKeysIn(object);
        }
        var isProto = isPrototype(object), result = [];
        for (var key in object) {
          if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
            result.push(key);
          }
        }
        return result;
      }
      module.exports = baseKeysIn;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/keysIn.js
  var require_keysIn = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/keysIn.js"(exports, module) {
      var arrayLikeKeys = require_arrayLikeKeys();
      var baseKeysIn = require_baseKeysIn();
      var isArrayLike = require_isArrayLike();
      function keysIn(object) {
        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
      }
      module.exports = keysIn;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseAssignIn.js
  var require_baseAssignIn = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseAssignIn.js"(exports, module) {
      var copyObject = require_copyObject();
      var keysIn = require_keysIn();
      function baseAssignIn(object, source) {
        return object && copyObject(source, keysIn(source), object);
      }
      module.exports = baseAssignIn;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_cloneBuffer.js
  var require_cloneBuffer = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_cloneBuffer.js"(exports, module) {
      var root = require_root();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var Buffer2 = moduleExports ? root.Buffer : void 0;
      var allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
      function cloneBuffer(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }
        var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
        buffer.copy(result);
        return result;
      }
      module.exports = cloneBuffer;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_copyArray.js
  var require_copyArray = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_copyArray.js"(exports, module) {
      function copyArray(source, array) {
        var index = -1, length = source.length;
        array || (array = Array(length));
        while (++index < length) {
          array[index] = source[index];
        }
        return array;
      }
      module.exports = copyArray;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_copySymbols.js
  var require_copySymbols = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_copySymbols.js"(exports, module) {
      var copyObject = require_copyObject();
      var getSymbols = require_getSymbols();
      function copySymbols(source, object) {
        return copyObject(source, getSymbols(source), object);
      }
      module.exports = copySymbols;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_getPrototype.js
  var require_getPrototype = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_getPrototype.js"(exports, module) {
      var overArg = require_overArg();
      var getPrototype = overArg(Object.getPrototypeOf, Object);
      module.exports = getPrototype;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_getSymbolsIn.js
  var require_getSymbolsIn = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_getSymbolsIn.js"(exports, module) {
      var arrayPush = require_arrayPush();
      var getPrototype = require_getPrototype();
      var getSymbols = require_getSymbols();
      var stubArray = require_stubArray();
      var nativeGetSymbols = Object.getOwnPropertySymbols;
      var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
        var result = [];
        while (object) {
          arrayPush(result, getSymbols(object));
          object = getPrototype(object);
        }
        return result;
      };
      module.exports = getSymbolsIn;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_copySymbolsIn.js
  var require_copySymbolsIn = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_copySymbolsIn.js"(exports, module) {
      var copyObject = require_copyObject();
      var getSymbolsIn = require_getSymbolsIn();
      function copySymbolsIn(source, object) {
        return copyObject(source, getSymbolsIn(source), object);
      }
      module.exports = copySymbolsIn;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_getAllKeysIn.js
  var require_getAllKeysIn = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_getAllKeysIn.js"(exports, module) {
      var baseGetAllKeys = require_baseGetAllKeys();
      var getSymbolsIn = require_getSymbolsIn();
      var keysIn = require_keysIn();
      function getAllKeysIn(object) {
        return baseGetAllKeys(object, keysIn, getSymbolsIn);
      }
      module.exports = getAllKeysIn;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_initCloneArray.js
  var require_initCloneArray = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_initCloneArray.js"(exports, module) {
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      function initCloneArray(array) {
        var length = array.length, result = new array.constructor(length);
        if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
          result.index = array.index;
          result.input = array.input;
        }
        return result;
      }
      module.exports = initCloneArray;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_cloneArrayBuffer.js
  var require_cloneArrayBuffer = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_cloneArrayBuffer.js"(exports, module) {
      var Uint8Array2 = require_Uint8Array();
      function cloneArrayBuffer(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
        return result;
      }
      module.exports = cloneArrayBuffer;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_cloneDataView.js
  var require_cloneDataView = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_cloneDataView.js"(exports, module) {
      var cloneArrayBuffer = require_cloneArrayBuffer();
      function cloneDataView(dataView, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
      }
      module.exports = cloneDataView;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_cloneRegExp.js
  var require_cloneRegExp = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_cloneRegExp.js"(exports, module) {
      var reFlags = /\w*$/;
      function cloneRegExp(regexp) {
        var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
        result.lastIndex = regexp.lastIndex;
        return result;
      }
      module.exports = cloneRegExp;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_cloneSymbol.js
  var require_cloneSymbol = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_cloneSymbol.js"(exports, module) {
      var Symbol2 = require_Symbol();
      var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
      var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
      function cloneSymbol(symbol) {
        return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
      }
      module.exports = cloneSymbol;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_cloneTypedArray.js
  var require_cloneTypedArray = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_cloneTypedArray.js"(exports, module) {
      var cloneArrayBuffer = require_cloneArrayBuffer();
      function cloneTypedArray(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }
      module.exports = cloneTypedArray;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_initCloneByTag.js
  var require_initCloneByTag = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_initCloneByTag.js"(exports, module) {
      var cloneArrayBuffer = require_cloneArrayBuffer();
      var cloneDataView = require_cloneDataView();
      var cloneRegExp = require_cloneRegExp();
      var cloneSymbol = require_cloneSymbol();
      var cloneTypedArray = require_cloneTypedArray();
      var boolTag = "[object Boolean]";
      var dateTag = "[object Date]";
      var mapTag = "[object Map]";
      var numberTag = "[object Number]";
      var regexpTag = "[object RegExp]";
      var setTag = "[object Set]";
      var stringTag = "[object String]";
      var symbolTag = "[object Symbol]";
      var arrayBufferTag = "[object ArrayBuffer]";
      var dataViewTag = "[object DataView]";
      var float32Tag = "[object Float32Array]";
      var float64Tag = "[object Float64Array]";
      var int8Tag = "[object Int8Array]";
      var int16Tag = "[object Int16Array]";
      var int32Tag = "[object Int32Array]";
      var uint8Tag = "[object Uint8Array]";
      var uint8ClampedTag = "[object Uint8ClampedArray]";
      var uint16Tag = "[object Uint16Array]";
      var uint32Tag = "[object Uint32Array]";
      function initCloneByTag(object, tag, isDeep) {
        var Ctor = object.constructor;
        switch (tag) {
          case arrayBufferTag:
            return cloneArrayBuffer(object);
          case boolTag:
          case dateTag:
            return new Ctor(+object);
          case dataViewTag:
            return cloneDataView(object, isDeep);
          case float32Tag:
          case float64Tag:
          case int8Tag:
          case int16Tag:
          case int32Tag:
          case uint8Tag:
          case uint8ClampedTag:
          case uint16Tag:
          case uint32Tag:
            return cloneTypedArray(object, isDeep);
          case mapTag:
            return new Ctor();
          case numberTag:
          case stringTag:
            return new Ctor(object);
          case regexpTag:
            return cloneRegExp(object);
          case setTag:
            return new Ctor();
          case symbolTag:
            return cloneSymbol(object);
        }
      }
      module.exports = initCloneByTag;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseCreate.js
  var require_baseCreate = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseCreate.js"(exports, module) {
      var isObject2 = require_isObject();
      var objectCreate = Object.create;
      var baseCreate = function() {
        function object() {
        }
        return function(proto) {
          if (!isObject2(proto)) {
            return {};
          }
          if (objectCreate) {
            return objectCreate(proto);
          }
          object.prototype = proto;
          var result = new object();
          object.prototype = void 0;
          return result;
        };
      }();
      module.exports = baseCreate;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_initCloneObject.js
  var require_initCloneObject = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_initCloneObject.js"(exports, module) {
      var baseCreate = require_baseCreate();
      var getPrototype = require_getPrototype();
      var isPrototype = require_isPrototype();
      function initCloneObject(object) {
        return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
      }
      module.exports = initCloneObject;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseIsMap.js
  var require_baseIsMap = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseIsMap.js"(exports, module) {
      var getTag = require_getTag();
      var isObjectLike = require_isObjectLike();
      var mapTag = "[object Map]";
      function baseIsMap(value) {
        return isObjectLike(value) && getTag(value) == mapTag;
      }
      module.exports = baseIsMap;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/isMap.js
  var require_isMap = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/isMap.js"(exports, module) {
      var baseIsMap = require_baseIsMap();
      var baseUnary = require_baseUnary();
      var nodeUtil = require_nodeUtil();
      var nodeIsMap = nodeUtil && nodeUtil.isMap;
      var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
      module.exports = isMap;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseIsSet.js
  var require_baseIsSet = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseIsSet.js"(exports, module) {
      var getTag = require_getTag();
      var isObjectLike = require_isObjectLike();
      var setTag = "[object Set]";
      function baseIsSet(value) {
        return isObjectLike(value) && getTag(value) == setTag;
      }
      module.exports = baseIsSet;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/isSet.js
  var require_isSet = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/isSet.js"(exports, module) {
      var baseIsSet = require_baseIsSet();
      var baseUnary = require_baseUnary();
      var nodeUtil = require_nodeUtil();
      var nodeIsSet = nodeUtil && nodeUtil.isSet;
      var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
      module.exports = isSet;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseClone.js
  var require_baseClone = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseClone.js"(exports, module) {
      var Stack = require_Stack();
      var arrayEach = require_arrayEach();
      var assignValue = require_assignValue();
      var baseAssign = require_baseAssign();
      var baseAssignIn = require_baseAssignIn();
      var cloneBuffer = require_cloneBuffer();
      var copyArray = require_copyArray();
      var copySymbols = require_copySymbols();
      var copySymbolsIn = require_copySymbolsIn();
      var getAllKeys = require_getAllKeys();
      var getAllKeysIn = require_getAllKeysIn();
      var getTag = require_getTag();
      var initCloneArray = require_initCloneArray();
      var initCloneByTag = require_initCloneByTag();
      var initCloneObject = require_initCloneObject();
      var isArray2 = require_isArray();
      var isBuffer = require_isBuffer();
      var isMap = require_isMap();
      var isObject2 = require_isObject();
      var isSet = require_isSet();
      var keys = require_keys();
      var keysIn = require_keysIn();
      var CLONE_DEEP_FLAG = 1;
      var CLONE_FLAT_FLAG = 2;
      var CLONE_SYMBOLS_FLAG = 4;
      var argsTag = "[object Arguments]";
      var arrayTag = "[object Array]";
      var boolTag = "[object Boolean]";
      var dateTag = "[object Date]";
      var errorTag = "[object Error]";
      var funcTag = "[object Function]";
      var genTag = "[object GeneratorFunction]";
      var mapTag = "[object Map]";
      var numberTag = "[object Number]";
      var objectTag = "[object Object]";
      var regexpTag = "[object RegExp]";
      var setTag = "[object Set]";
      var stringTag = "[object String]";
      var symbolTag = "[object Symbol]";
      var weakMapTag = "[object WeakMap]";
      var arrayBufferTag = "[object ArrayBuffer]";
      var dataViewTag = "[object DataView]";
      var float32Tag = "[object Float32Array]";
      var float64Tag = "[object Float64Array]";
      var int8Tag = "[object Int8Array]";
      var int16Tag = "[object Int16Array]";
      var int32Tag = "[object Int32Array]";
      var uint8Tag = "[object Uint8Array]";
      var uint8ClampedTag = "[object Uint8ClampedArray]";
      var uint16Tag = "[object Uint16Array]";
      var uint32Tag = "[object Uint32Array]";
      var cloneableTags = {};
      cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
      cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
      function baseClone(value, bitmask, customizer, key, object, stack) {
        var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
        if (customizer) {
          result = object ? customizer(value, key, object, stack) : customizer(value);
        }
        if (result !== void 0) {
          return result;
        }
        if (!isObject2(value)) {
          return value;
        }
        var isArr = isArray2(value);
        if (isArr) {
          result = initCloneArray(value);
          if (!isDeep) {
            return copyArray(value, result);
          }
        } else {
          var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
          if (isBuffer(value)) {
            return cloneBuffer(value, isDeep);
          }
          if (tag == objectTag || tag == argsTag || isFunc && !object) {
            result = isFlat || isFunc ? {} : initCloneObject(value);
            if (!isDeep) {
              return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
            }
          } else {
            if (!cloneableTags[tag]) {
              return object ? value : {};
            }
            result = initCloneByTag(value, tag, isDeep);
          }
        }
        stack || (stack = new Stack());
        var stacked = stack.get(value);
        if (stacked) {
          return stacked;
        }
        stack.set(value, result);
        if (isSet(value)) {
          value.forEach(function(subValue) {
            result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
          });
        } else if (isMap(value)) {
          value.forEach(function(subValue, key2) {
            result.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
          });
        }
        var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
        var props = isArr ? void 0 : keysFunc(value);
        arrayEach(props || value, function(subValue, key2) {
          if (props) {
            key2 = subValue;
            subValue = value[key2];
          }
          assignValue(result, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
        });
        return result;
      }
      module.exports = baseClone;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/cloneDeep.js
  var require_cloneDeep = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/cloneDeep.js"(exports, module) {
      var baseClone = require_baseClone();
      var CLONE_DEEP_FLAG = 1;
      var CLONE_SYMBOLS_FLAG = 4;
      function cloneDeep3(value) {
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
      }
      module.exports = cloneDeep3;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/set.js
  var require_set2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/set.js"(exports, module) {
      var baseSet = require_baseSet();
      function set(object, path3, value) {
        return object == null ? object : baseSet(object, path3, value);
      }
      module.exports = set;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/last.js
  var require_last = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/last.js"(exports, module) {
      function last(array) {
        var length = array == null ? 0 : array.length;
        return length ? array[length - 1] : void 0;
      }
      module.exports = last;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_parent.js
  var require_parent = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_parent.js"(exports, module) {
      var baseGet = require_baseGet();
      var baseSlice = require_baseSlice();
      function parent(object, path3) {
        return path3.length < 2 ? object : baseGet(object, baseSlice(path3, 0, -1));
      }
      module.exports = parent;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseUnset.js
  var require_baseUnset = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseUnset.js"(exports, module) {
      var castPath = require_castPath();
      var last = require_last();
      var parent = require_parent();
      var toKey = require_toKey();
      function baseUnset(object, path3) {
        path3 = castPath(path3, object);
        object = parent(object, path3);
        return object == null || delete object[toKey(last(path3))];
      }
      module.exports = baseUnset;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/unset.js
  var require_unset = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/unset.js"(exports, module) {
      var baseUnset = require_baseUnset();
      function unset(object, path3) {
        return object == null ? true : baseUnset(object, path3);
      }
      module.exports = unset;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-cli/package.json
  var require_package = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-cli/package.json"(exports, module) {
      module.exports = {
        name: "@yarnpkg/cli",
        version: "3.0.0-rc.5",
        license: "BSD-2-Clause",
        main: "./sources/index.ts",
        dependencies: {
          "@yarnpkg/core": "workspace:^3.0.0-rc.5",
          "@yarnpkg/fslib": "workspace:^2.5.0-rc.5",
          "@yarnpkg/libzip": "workspace:^2.2.2-rc.3",
          "@yarnpkg/parsers": "workspace:^2.4.0-rc.3",
          "@yarnpkg/plugin-compat": "workspace:^3.0.0-rc.5",
          "@yarnpkg/plugin-dlx": "workspace:^3.0.0-rc.5",
          "@yarnpkg/plugin-essentials": "workspace:^3.0.0-rc.5",
          "@yarnpkg/plugin-file": "workspace:^2.2.1-rc.5",
          "@yarnpkg/plugin-git": "workspace:^2.4.0-rc.5",
          "@yarnpkg/plugin-github": "workspace:^2.2.0-rc.5",
          "@yarnpkg/plugin-http": "workspace:^2.1.3-rc.5",
          "@yarnpkg/plugin-init": "workspace:^3.0.0-rc.5",
          "@yarnpkg/plugin-link": "workspace:^2.1.2-rc.5",
          "@yarnpkg/plugin-node-modules": "workspace:^3.0.0-rc.5",
          "@yarnpkg/plugin-npm": "workspace:^2.5.0-rc.5",
          "@yarnpkg/plugin-npm-cli": "workspace:^3.0.0-rc.5",
          "@yarnpkg/plugin-pack": "workspace:^3.0.0-rc.5",
          "@yarnpkg/plugin-patch": "workspace:^3.0.0-rc.5",
          "@yarnpkg/plugin-pnp": "workspace:^3.0.0-rc.5",
          "@yarnpkg/shell": "workspace:^3.0.0-rc.5",
          chalk: "^3.0.0",
          "ci-info": "^2.0.0",
          clipanion: "^3.0.0-rc.10",
          semver: "^7.1.2",
          tslib: "^1.13.0",
          typanion: "^3.3.0",
          yup: "^0.32.9"
        },
        devDependencies: {
          "@types/ci-info": "^2",
          "@types/semver": "^7.1.0",
          "@types/yup": "^0",
          "@yarnpkg/builder": "workspace:*",
          "@yarnpkg/monorepo": "workspace:*",
          "@yarnpkg/pnpify": "workspace:*",
          micromatch: "^4.0.2",
          typescript: "^4.3.2"
        },
        peerDependencies: {
          "@yarnpkg/core": "^3.0.0-rc.5"
        },
        scripts: {
          postpack: "rm -rf lib",
          prepack: 'run build:compile "$(pwd)"',
          "build:cli+hook": "run build:pnp:hook && builder build bundle",
          "build:cli": "builder build bundle",
          "run:cli": "builder run",
          "update-local": "run build:cli --no-git-hash && rsync -a --delete bundles/ bin/"
        },
        publishConfig: {
          main: "./lib/index.js",
          types: "./lib/index.d.ts",
          bin: null
        },
        files: [
          "/lib/**/*",
          "!/lib/pluginConfiguration.*",
          "!/lib/cli.*"
        ],
        "@yarnpkg/builder": {
          bundles: {
            standard: [
              "@yarnpkg/plugin-essentials",
              "@yarnpkg/plugin-compat",
              "@yarnpkg/plugin-dlx",
              "@yarnpkg/plugin-file",
              "@yarnpkg/plugin-git",
              "@yarnpkg/plugin-github",
              "@yarnpkg/plugin-http",
              "@yarnpkg/plugin-init",
              "@yarnpkg/plugin-link",
              "@yarnpkg/plugin-node-modules",
              "@yarnpkg/plugin-npm",
              "@yarnpkg/plugin-npm-cli",
              "@yarnpkg/plugin-pack",
              "@yarnpkg/plugin-patch",
              "@yarnpkg/plugin-pnp"
            ]
          }
        },
        repository: {
          type: "git",
          url: "ssh://git@github.com/yarnpkg/berry.git",
          directory: "packages/yarnpkg-cli"
        },
        engines: {
          node: ">=12 <14 || 14.2 - 14.9 || >14.10.0"
        },
        stableVersion: "2.4.0"
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/protocols-npm-1.4.7-490c536d90-e4be48f930.zip/node_modules/protocols/lib/index.js
  var require_lib3 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/protocols-npm-1.4.7-490c536d90-e4be48f930.zip/node_modules/protocols/lib/index.js"(exports, module) {
      "use strict";
      module.exports = function protocols(input, first) {
        if (first === true) {
          first = 0;
        }
        var index = input.indexOf("://"), splits = input.substring(0, index).split("+").filter(Boolean);
        if (typeof first === "number") {
          return splits[first];
        }
        return splits;
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/is-ssh-npm-1.3.1-a45ec50c50-769a6ce564.zip/node_modules/is-ssh/lib/index.js
  var require_lib4 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/is-ssh-npm-1.3.1-a45ec50c50-769a6ce564.zip/node_modules/is-ssh/lib/index.js"(exports, module) {
      "use strict";
      var protocols = require_lib3();
      function isSsh(input) {
        if (Array.isArray(input)) {
          return input.indexOf("ssh") !== -1 || input.indexOf("rsync") !== -1;
        }
        if (typeof input !== "string") {
          return false;
        }
        var prots = protocols(input);
        input = input.substring(input.indexOf("://") + 3);
        if (isSsh(prots)) {
          return true;
        }
        return input.indexOf("@") < input.indexOf(":");
      }
      module.exports = isSsh;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/parse-path-npm-4.0.1-2df1e9ed3e-dbe025d582.zip/node_modules/parse-path/lib/index.js
  var require_lib5 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/parse-path-npm-4.0.1-2df1e9ed3e-dbe025d582.zip/node_modules/parse-path/lib/index.js"(exports, module) {
      "use strict";
      var protocols = require_lib3();
      var isSsh = require_lib4();
      var qs = require("querystring");
      function parsePath(url) {
        url = (url || "").trim();
        var output = {
          protocols: protocols(url),
          protocol: null,
          port: null,
          resource: "",
          user: "",
          pathname: "",
          hash: "",
          search: "",
          href: url,
          query: Object.create(null)
        }, protocolIndex = url.indexOf("://"), resourceIndex = -1, splits = null, parts = null;
        if (url.startsWith(".")) {
          if (url.startsWith("./")) {
            url = url.substring(2);
          }
          output.pathname = url;
          output.protocol = "file";
        }
        var firstChar = url.charAt(1);
        if (!output.protocol) {
          output.protocol = output.protocols[0];
          if (!output.protocol) {
            if (isSsh(url)) {
              output.protocol = "ssh";
            } else if (firstChar === "/" || firstChar === "~") {
              url = url.substring(2);
              output.protocol = "file";
            } else {
              output.protocol = "file";
            }
          }
        }
        if (protocolIndex !== -1) {
          url = url.substring(protocolIndex + 3);
        }
        parts = url.split("/");
        if (output.protocol !== "file") {
          output.resource = parts.shift();
        } else {
          output.resource = "";
        }
        splits = output.resource.split("@");
        if (splits.length === 2) {
          output.user = splits[0];
          output.resource = splits[1];
        }
        splits = output.resource.split(":");
        if (splits.length === 2) {
          output.resource = splits[0];
          if (splits[1]) {
            output.port = Number(splits[1]);
            if (isNaN(output.port)) {
              output.port = null;
              parts.unshift(splits[1]);
            }
          } else {
            output.port = null;
          }
        }
        parts = parts.filter(Boolean);
        if (output.protocol === "file") {
          output.pathname = output.href;
        } else {
          output.pathname = output.pathname || (output.protocol !== "file" || output.href[0] === "/" ? "/" : "") + parts.join("/");
        }
        splits = output.pathname.split("#");
        if (splits.length === 2) {
          output.pathname = splits[0];
          output.hash = splits[1];
        }
        splits = output.pathname.split("?");
        if (splits.length === 2) {
          output.pathname = splits[0];
          output.search = splits[1];
        }
        output.query = qs.parse(output.search);
        output.href = output.href.replace(/\/$/, "");
        output.pathname = output.pathname.replace(/\/$/, "");
        return output;
      }
      module.exports = parsePath;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/normalize-url-npm-3.3.0-f91cbdff7c-f6aa4a1a94.zip/node_modules/normalize-url/index.js
  var require_normalize_url2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/normalize-url-npm-3.3.0-f91cbdff7c-f6aa4a1a94.zip/node_modules/normalize-url/index.js"(exports, module) {
      "use strict";
      var URLParser = typeof URL === "undefined" ? require("url").URL : URL;
      var testParameter = (name, filters) => {
        return filters.some((filter) => filter instanceof RegExp ? filter.test(name) : filter === name);
      };
      module.exports = (urlString, opts) => {
        opts = Object.assign({
          defaultProtocol: "http:",
          normalizeProtocol: true,
          forceHttp: false,
          forceHttps: false,
          stripHash: true,
          stripWWW: true,
          removeQueryParameters: [/^utm_\w+/i],
          removeTrailingSlash: true,
          removeDirectoryIndex: false,
          sortQueryParameters: true
        }, opts);
        if (Reflect.has(opts, "normalizeHttps")) {
          opts.forceHttp = opts.normalizeHttps;
        }
        if (Reflect.has(opts, "normalizeHttp")) {
          opts.forceHttps = opts.normalizeHttp;
        }
        if (Reflect.has(opts, "stripFragment")) {
          opts.stripHash = opts.stripFragment;
        }
        urlString = urlString.trim();
        const hasRelativeProtocol = urlString.startsWith("//");
        const isRelativeUrl = !hasRelativeProtocol && /^\.*\//.test(urlString);
        if (!isRelativeUrl) {
          urlString = urlString.replace(/^(?!(?:\w+:)?\/\/)|^\/\//, opts.defaultProtocol);
        }
        const urlObj = new URLParser(urlString);
        if (opts.forceHttp && opts.forceHttps) {
          throw new Error("The `forceHttp` and `forceHttps` options cannot be used together");
        }
        if (opts.forceHttp && urlObj.protocol === "https:") {
          urlObj.protocol = "http:";
        }
        if (opts.forceHttps && urlObj.protocol === "http:") {
          urlObj.protocol = "https:";
        }
        if (opts.stripHash) {
          urlObj.hash = "";
        }
        if (urlObj.pathname) {
          urlObj.pathname = urlObj.pathname.replace(/((?![https?:]).)\/{2,}/g, (_, p1) => {
            if (/^(?!\/)/g.test(p1)) {
              return `${p1}/`;
            }
            return "/";
          });
        }
        if (urlObj.pathname) {
          urlObj.pathname = decodeURI(urlObj.pathname);
        }
        if (opts.removeDirectoryIndex === true) {
          opts.removeDirectoryIndex = [/^index\.[a-z]+$/];
        }
        if (Array.isArray(opts.removeDirectoryIndex) && opts.removeDirectoryIndex.length > 0) {
          let pathComponents = urlObj.pathname.split("/");
          const lastComponent = pathComponents[pathComponents.length - 1];
          if (testParameter(lastComponent, opts.removeDirectoryIndex)) {
            pathComponents = pathComponents.slice(0, pathComponents.length - 1);
            urlObj.pathname = pathComponents.slice(1).join("/") + "/";
          }
        }
        if (urlObj.hostname) {
          urlObj.hostname = urlObj.hostname.replace(/\.$/, "");
          if (opts.stripWWW && /^www\.([a-z\-\d]{2,63})\.([a-z\.]{2,5})$/.test(urlObj.hostname)) {
            urlObj.hostname = urlObj.hostname.replace(/^www\./, "");
          }
        }
        if (Array.isArray(opts.removeQueryParameters)) {
          for (const key of [...urlObj.searchParams.keys()]) {
            if (testParameter(key, opts.removeQueryParameters)) {
              urlObj.searchParams.delete(key);
            }
          }
        }
        if (opts.sortQueryParameters) {
          urlObj.searchParams.sort();
        }
        urlString = urlObj.toString();
        if (opts.removeTrailingSlash || urlObj.pathname === "/") {
          urlString = urlString.replace(/\/$/, "");
        }
        if (hasRelativeProtocol && !opts.normalizeProtocol) {
          urlString = urlString.replace(/^http:\/\//, "//");
        }
        return urlString;
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/parse-url-npm-5.0.1-57615de346-05c8e88f8c.zip/node_modules/parse-url/lib/index.js
  var require_lib6 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/parse-url-npm-5.0.1-57615de346-05c8e88f8c.zip/node_modules/parse-url/lib/index.js"(exports, module) {
      "use strict";
      var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      var parsePath = require_lib5();
      var normalizeUrl = require_normalize_url2();
      function parseUrl(url) {
        var normalize = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
        if (typeof url !== "string" || !url.trim()) {
          throw new Error("Invalid url.");
        }
        if (normalize) {
          if ((typeof normalize === "undefined" ? "undefined" : _typeof(normalize)) !== "object") {
            normalize = {
              stripFragment: false
            };
          }
          url = normalizeUrl(url, normalize);
        }
        var parsed = parsePath(url);
        return parsed;
      }
      module.exports = parseUrl;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/git-up-npm-4.0.2-3cd4003c69-852603d6fc.zip/node_modules/git-up/lib/index.js
  var require_lib7 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/git-up-npm-4.0.2-3cd4003c69-852603d6fc.zip/node_modules/git-up/lib/index.js"(exports, module) {
      "use strict";
      var parseUrl = require_lib6();
      var isSsh = require_lib4();
      function gitUp(input) {
        var output = parseUrl(input);
        output.token = "";
        var splits = output.user.split(":");
        if (splits.length === 2) {
          if (splits[1] === "x-oauth-basic") {
            output.token = splits[0];
          } else if (splits[0] === "x-token-auth") {
            output.token = splits[1];
          }
        }
        if (isSsh(output.protocols) || isSsh(input)) {
          output.protocol = "ssh";
        } else if (output.protocols.length) {
          output.protocol = output.protocols[0];
        } else {
          output.protocol = "file";
        }
        output.href = output.href.replace(/\/$/, "");
        return output;
      }
      module.exports = gitUp;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/git-url-parse-npm-11.1.2-f0b367da09-68890ec749.zip/node_modules/git-url-parse/lib/index.js
  var require_lib8 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/git-url-parse-npm-11.1.2-f0b367da09-68890ec749.zip/node_modules/git-url-parse/lib/index.js"(exports, module) {
      "use strict";
      var gitUp = require_lib7();
      function gitUrlParse(url) {
        if (typeof url !== "string") {
          throw new Error("The url must be a string.");
        }
        var urlInfo = gitUp(url), sourceParts = urlInfo.resource.split("."), splits = null;
        urlInfo.toString = function(type) {
          return gitUrlParse.stringify(this, type);
        };
        urlInfo.source = sourceParts.length > 2 ? sourceParts.slice(1 - sourceParts.length).join(".") : urlInfo.source = urlInfo.resource;
        urlInfo.git_suffix = /\.git$/.test(urlInfo.pathname);
        urlInfo.name = decodeURIComponent(urlInfo.pathname.replace(/^\//, "").replace(/\.git$/, ""));
        urlInfo.owner = decodeURIComponent(urlInfo.user);
        switch (urlInfo.source) {
          case "git.cloudforge.com":
            urlInfo.owner = urlInfo.user;
            urlInfo.organization = sourceParts[0];
            urlInfo.source = "cloudforge.com";
            break;
          case "visualstudio.com":
            if (urlInfo.resource === "vs-ssh.visualstudio.com") {
              splits = urlInfo.name.split("/");
              if (splits.length === 4) {
                urlInfo.organization = splits[1];
                urlInfo.owner = splits[2];
                urlInfo.name = splits[3];
                urlInfo.full_name = splits[2] + "/" + splits[3];
              }
              break;
            } else {
              splits = urlInfo.name.split("/");
              if (splits.length === 2) {
                urlInfo.owner = splits[1];
                urlInfo.name = splits[1];
                urlInfo.full_name = "_git/" + urlInfo.name;
              } else if (splits.length === 3) {
                urlInfo.name = splits[2];
                if (splits[0] === "DefaultCollection") {
                  urlInfo.owner = splits[2];
                  urlInfo.organization = splits[0];
                  urlInfo.full_name = urlInfo.organization + "/_git/" + urlInfo.name;
                } else {
                  urlInfo.owner = splits[0];
                  urlInfo.full_name = urlInfo.owner + "/_git/" + urlInfo.name;
                }
              } else if (splits.length === 4) {
                urlInfo.organization = splits[0];
                urlInfo.owner = splits[1];
                urlInfo.name = splits[3];
                urlInfo.full_name = urlInfo.organization + "/" + urlInfo.owner + "/_git/" + urlInfo.name;
              }
              break;
            }
          case "dev.azure.com":
          case "azure.com":
            if (urlInfo.resource === "ssh.dev.azure.com") {
              splits = urlInfo.name.split("/");
              if (splits.length === 4) {
                urlInfo.organization = splits[1];
                urlInfo.owner = splits[2];
                urlInfo.name = splits[3];
              }
              break;
            } else {
              splits = urlInfo.name.split("/");
              if (splits.length === 5) {
                urlInfo.organization = splits[0];
                urlInfo.owner = splits[1];
                urlInfo.name = splits[4];
                urlInfo.full_name = "_git/" + urlInfo.name;
              } else if (splits.length === 3) {
                urlInfo.name = splits[2];
                if (splits[0] === "DefaultCollection") {
                  urlInfo.owner = splits[2];
                  urlInfo.organization = splits[0];
                  urlInfo.full_name = urlInfo.organization + "/_git/" + urlInfo.name;
                } else {
                  urlInfo.owner = splits[0];
                  urlInfo.full_name = urlInfo.owner + "/_git/" + urlInfo.name;
                }
              } else if (splits.length === 4) {
                urlInfo.organization = splits[0];
                urlInfo.owner = splits[1];
                urlInfo.name = splits[3];
                urlInfo.full_name = urlInfo.organization + "/" + urlInfo.owner + "/_git/" + urlInfo.name;
              }
              break;
            }
          default:
            splits = urlInfo.name.split("/");
            var nameIndex = splits.length - 1;
            if (splits.length >= 2) {
              var blobIndex = splits.indexOf("blob", 2);
              var treeIndex = splits.indexOf("tree", 2);
              var commitIndex = splits.indexOf("commit", 2);
              nameIndex = blobIndex > 0 ? blobIndex - 1 : treeIndex > 0 ? treeIndex - 1 : commitIndex > 0 ? commitIndex - 1 : nameIndex;
              urlInfo.owner = splits.slice(0, nameIndex).join("/");
              urlInfo.name = splits[nameIndex];
              if (commitIndex) {
                urlInfo.commit = splits[nameIndex + 2];
              }
            }
            urlInfo.ref = "";
            urlInfo.filepathtype = "";
            urlInfo.filepath = "";
            if (splits.length > nameIndex + 2 && ["blob", "tree"].indexOf(splits[nameIndex + 1]) >= 0) {
              urlInfo.filepathtype = splits[nameIndex + 1];
              urlInfo.ref = splits[nameIndex + 2];
              if (splits.length > nameIndex + 3) {
                urlInfo.filepath = splits.slice(nameIndex + 3).join("/");
              }
            }
            urlInfo.organization = urlInfo.owner;
            break;
        }
        if (!urlInfo.full_name) {
          urlInfo.full_name = urlInfo.owner;
          if (urlInfo.name) {
            urlInfo.full_name && (urlInfo.full_name += "/");
            urlInfo.full_name += urlInfo.name;
          }
        }
        return urlInfo;
      }
      gitUrlParse.stringify = function(obj, type) {
        type = type || (obj.protocols && obj.protocols.length ? obj.protocols.join("+") : obj.protocol);
        var port = obj.port ? ":" + obj.port : "";
        var user = obj.user || "git";
        var maybeGitSuffix = obj.git_suffix ? ".git" : "";
        switch (type) {
          case "ssh":
            if (port)
              return "ssh://" + user + "@" + obj.resource + port + "/" + obj.full_name + maybeGitSuffix;
            else
              return user + "@" + obj.resource + ":" + obj.full_name + maybeGitSuffix;
          case "git+ssh":
          case "ssh+git":
          case "ftp":
          case "ftps":
            return type + "://" + user + "@" + obj.resource + port + "/" + obj.full_name + maybeGitSuffix;
          case "http":
          case "https":
            var auth = obj.token ? buildToken(obj) : obj.user && (obj.protocols.includes("http") || obj.protocols.includes("https")) ? obj.user + "@" : "";
            return type + "://" + auth + obj.resource + port + "/" + obj.full_name + maybeGitSuffix;
          default:
            return obj.href;
        }
      };
      function buildToken(obj) {
        switch (obj.source) {
          case "bitbucket.org":
            return "x-token-auth:" + obj.token + "@";
          default:
            return obj.token + "@";
        }
      }
      module.exports = gitUrlParse;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_assignMergeValue.js
  var require_assignMergeValue = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_assignMergeValue.js"(exports, module) {
      var baseAssignValue = require_baseAssignValue();
      var eq = require_eq2();
      function assignMergeValue(object, key, value) {
        if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }
      module.exports = assignMergeValue;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/isArrayLikeObject.js
  var require_isArrayLikeObject = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/isArrayLikeObject.js"(exports, module) {
      var isArrayLike = require_isArrayLike();
      var isObjectLike = require_isObjectLike();
      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }
      module.exports = isArrayLikeObject;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/isPlainObject.js
  var require_isPlainObject = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/isPlainObject.js"(exports, module) {
      var baseGetTag = require_baseGetTag();
      var getPrototype = require_getPrototype();
      var isObjectLike = require_isObjectLike();
      var objectTag = "[object Object]";
      var funcProto = Function.prototype;
      var objectProto = Object.prototype;
      var funcToString = funcProto.toString;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var objectCtorString = funcToString.call(Object);
      function isPlainObject(value) {
        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
          return false;
        }
        var proto = getPrototype(value);
        if (proto === null) {
          return true;
        }
        var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
        return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
      }
      module.exports = isPlainObject;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_safeGet.js
  var require_safeGet = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_safeGet.js"(exports, module) {
      function safeGet(object, key) {
        if (key === "constructor" && typeof object[key] === "function") {
          return;
        }
        if (key == "__proto__") {
          return;
        }
        return object[key];
      }
      module.exports = safeGet;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/toPlainObject.js
  var require_toPlainObject = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/toPlainObject.js"(exports, module) {
      var copyObject = require_copyObject();
      var keysIn = require_keysIn();
      function toPlainObject(value) {
        return copyObject(value, keysIn(value));
      }
      module.exports = toPlainObject;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseMergeDeep.js
  var require_baseMergeDeep = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseMergeDeep.js"(exports, module) {
      var assignMergeValue = require_assignMergeValue();
      var cloneBuffer = require_cloneBuffer();
      var cloneTypedArray = require_cloneTypedArray();
      var copyArray = require_copyArray();
      var initCloneObject = require_initCloneObject();
      var isArguments = require_isArguments();
      var isArray2 = require_isArray();
      var isArrayLikeObject = require_isArrayLikeObject();
      var isBuffer = require_isBuffer();
      var isFunction = require_isFunction();
      var isObject2 = require_isObject();
      var isPlainObject = require_isPlainObject();
      var isTypedArray = require_isTypedArray();
      var safeGet = require_safeGet();
      var toPlainObject = require_toPlainObject();
      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
        if (stacked) {
          assignMergeValue(object, key, stacked);
          return;
        }
        var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
        var isCommon = newValue === void 0;
        if (isCommon) {
          var isArr = isArray2(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
          newValue = srcValue;
          if (isArr || isBuff || isTyped) {
            if (isArray2(objValue)) {
              newValue = objValue;
            } else if (isArrayLikeObject(objValue)) {
              newValue = copyArray(objValue);
            } else if (isBuff) {
              isCommon = false;
              newValue = cloneBuffer(srcValue, true);
            } else if (isTyped) {
              isCommon = false;
              newValue = cloneTypedArray(srcValue, true);
            } else {
              newValue = [];
            }
          } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
            newValue = objValue;
            if (isArguments(objValue)) {
              newValue = toPlainObject(objValue);
            } else if (!isObject2(objValue) || isFunction(objValue)) {
              newValue = initCloneObject(srcValue);
            }
          } else {
            isCommon = false;
          }
        }
        if (isCommon) {
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack["delete"](srcValue);
        }
        assignMergeValue(object, key, newValue);
      }
      module.exports = baseMergeDeep;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseMerge.js
  var require_baseMerge = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseMerge.js"(exports, module) {
      var Stack = require_Stack();
      var assignMergeValue = require_assignMergeValue();
      var baseFor = require_baseFor();
      var baseMergeDeep = require_baseMergeDeep();
      var isObject2 = require_isObject();
      var keysIn = require_keysIn();
      var safeGet = require_safeGet();
      function baseMerge(object, source, srcIndex, customizer, stack) {
        if (object === source) {
          return;
        }
        baseFor(source, function(srcValue, key) {
          stack || (stack = new Stack());
          if (isObject2(srcValue)) {
            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
          } else {
            var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
            if (newValue === void 0) {
              newValue = srcValue;
            }
            assignMergeValue(object, key, newValue);
          }
        }, keysIn);
      }
      module.exports = baseMerge;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseRest.js
  var require_baseRest = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_baseRest.js"(exports, module) {
      var identity = require_identity();
      var overRest = require_overRest();
      var setToString = require_setToString();
      function baseRest(func, start2) {
        return setToString(overRest(func, start2, identity), func + "");
      }
      module.exports = baseRest;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_isIterateeCall.js
  var require_isIterateeCall = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_isIterateeCall.js"(exports, module) {
      var eq = require_eq2();
      var isArrayLike = require_isArrayLike();
      var isIndex = require_isIndex();
      var isObject2 = require_isObject();
      function isIterateeCall(value, index, object) {
        if (!isObject2(object)) {
          return false;
        }
        var type = typeof index;
        if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
          return eq(object[index], value);
        }
        return false;
      }
      module.exports = isIterateeCall;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_createAssigner.js
  var require_createAssigner = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/_createAssigner.js"(exports, module) {
      var baseRest = require_baseRest();
      var isIterateeCall = require_isIterateeCall();
      function createAssigner(assigner) {
        return baseRest(function(object, sources) {
          var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
          customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? void 0 : customizer;
            length = 1;
          }
          object = Object(object);
          while (++index < length) {
            var source = sources[index];
            if (source) {
              assigner(object, source, index, customizer);
            }
          }
          return object;
        });
      }
      module.exports = createAssigner;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/merge.js
  var require_merge4 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/lodash-npm-4.17.20-c0db62021c-b31afa0973.zip/node_modules/lodash/merge.js"(exports, module) {
      var baseMerge = require_baseMerge();
      var createAssigner = require_createAssigner();
      var merge2 = createAssigner(function(object, source, srcIndex) {
        baseMerge(object, source, srcIndex);
      });
      module.exports = merge2;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-pnp/sources/hook.js
  var require_hook = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-pnp/sources/hook.js"(exports, module) {
      var hook;
      module.exports = () => {
        if (typeof hook === `undefined`)
          hook = require("zlib").brotliDecompressSync(Buffer.from("", "base64")).toString();
        return hook;
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/resolve.exports-npm-1.0.2-bbb8d62ef6-1de1e50dc6.zip/node_modules/resolve.exports/dist/index.js
  var require_dist3 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/resolve.exports-npm-1.0.2-bbb8d62ef6-1de1e50dc6.zip/node_modules/resolve.exports/dist/index.js"(exports) {
      function loop(exports2, keys) {
        if (typeof exports2 === "string") {
          return exports2;
        }
        if (exports2) {
          let idx, tmp;
          if (Array.isArray(exports2)) {
            for (idx = 0; idx < exports2.length; idx++) {
              if (tmp = loop(exports2[idx], keys))
                return tmp;
            }
          } else {
            for (idx in exports2) {
              if (keys.has(idx)) {
                return loop(exports2[idx], keys);
              }
            }
          }
        }
      }
      function bail(name, entry, condition) {
        throw new Error(condition ? `No known conditions for "${entry}" entry in "${name}" package` : `Missing "${entry}" export in "${name}" package`);
      }
      function toName(name, entry) {
        return entry === name ? "." : entry[0] === "." ? entry : entry.replace(new RegExp("^" + name + "/"), "./");
      }
      function resolve(pkg, entry = ".", options = {}) {
        let {name, exports: exports2} = pkg;
        if (exports2) {
          let {browser, require: require2, conditions = []} = options;
          let target = toName(name, entry);
          if (target[0] !== ".")
            target = "./" + target;
          if (typeof exports2 === "string") {
            return target === "." ? exports2 : bail(name, target);
          }
          let allows = new Set(["default", ...conditions]);
          allows.add(require2 ? "require" : "import");
          allows.add(browser ? "browser" : "node");
          let key, tmp, isSingle = false;
          for (key in exports2) {
            isSingle = key[0] !== ".";
            break;
          }
          if (isSingle) {
            return target === "." ? loop(exports2, allows) || bail(name, target, 1) : bail(name, target);
          }
          if (tmp = exports2[target]) {
            return loop(tmp, allows) || bail(name, target, 1);
          }
          for (key in exports2) {
            tmp = key[key.length - 1];
            if (tmp === "/" && target.startsWith(key)) {
              return (tmp = loop(exports2[key], allows)) ? tmp + target.substring(key.length) : bail(name, target, 1);
            }
            if (tmp === "*" && target.startsWith(key.slice(0, -1))) {
              if (target.substring(key.length - 1).length > 0) {
                return (tmp = loop(exports2[key], allows)) ? tmp.replace("*", target.substring(key.length - 1)) : bail(name, target, 1);
              }
            }
          }
          return bail(name, target);
        }
      }
      function legacy(pkg, options = {}) {
        let i = 0, value, browser = options.browser, fields = options.fields || ["module", "main"];
        if (browser && !fields.includes("browser")) {
          fields.unshift("browser");
        }
        for (; i < fields.length; i++) {
          if (value = pkg[fields[i]]) {
            if (typeof value == "string") {
            } else if (typeof value == "object" && fields[i] == "browser") {
              if (typeof browser == "string") {
                value = value[browser = toName(pkg.name, browser)];
                if (value == null)
                  return browser;
              }
            } else {
              continue;
            }
            return typeof value == "string" ? "./" + value.replace(/^\.?\//, "") : value;
          }
        }
      }
      exports.legacy = legacy;
      exports.resolve = resolve;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/is-windows-npm-1.0.2-898cd6f3d7-438b7e5265.zip/node_modules/is-windows/index.js
  var require_is_windows = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/is-windows-npm-1.0.2-898cd6f3d7-438b7e5265.zip/node_modules/is-windows/index.js"(exports, module) {
      (function(factory) {
        if (exports && typeof exports === "object" && typeof module !== "undefined") {
          module.exports = factory();
        } else if (typeof define === "function" && define.amd) {
          define([], factory);
        } else if (typeof window !== "undefined") {
          window.isWindows = factory();
        } else if (typeof global !== "undefined") {
          global.isWindows = factory();
        } else if (typeof self !== "undefined") {
          self.isWindows = factory();
        } else {
          this.isWindows = factory();
        }
      })(function() {
        "use strict";
        return function isWindows() {
          return process && (process.platform === "win32" || /^(msys|cygwin)$/.test(process.env.OSTYPE));
        };
      });
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@zkochan-cmd-shim-npm-5.1.0-3bdda00327-7be69cfede.zip/node_modules/@zkochan/cmd-shim/index.js
  var require_cmd_shim = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/@zkochan-cmd-shim-npm-5.1.0-3bdda00327-7be69cfede.zip/node_modules/@zkochan/cmd-shim/index.js"(exports, module) {
      "use strict";
      cmdShim2.ifExists = cmdShimIfExists;
      var util_1 = require("util");
      var path3 = require("path");
      var isWindows = require_is_windows();
      var shebangExpr = /^#!\s*(?:\/usr\/bin\/env)?\s*([^ \t]+)(.*)$/;
      var DEFAULT_OPTIONS = {
        createPwshFile: true,
        createCmdFile: isWindows(),
        fs: require("fs")
      };
      var extensionToProgramMap = new Map([
        [".js", "node"],
        [".cjs", "node"],
        [".mjs", "node"],
        [".cmd", "cmd"],
        [".bat", "cmd"],
        [".ps1", "pwsh"],
        [".sh", "sh"]
      ]);
      function ingestOptions(opts) {
        const opts_ = __spreadValues(__spreadValues({}, DEFAULT_OPTIONS), opts);
        const fs8 = opts_.fs;
        opts_.fs_ = {
          chmod: fs8.chmod ? util_1.promisify(fs8.chmod) : async () => {
          },
          mkdir: util_1.promisify(fs8.mkdir),
          readFile: util_1.promisify(fs8.readFile),
          stat: util_1.promisify(fs8.stat),
          unlink: util_1.promisify(fs8.unlink),
          writeFile: util_1.promisify(fs8.writeFile)
        };
        return opts_;
      }
      async function cmdShim2(src, to, opts) {
        const opts_ = ingestOptions(opts);
        await opts_.fs_.stat(src);
        await cmdShim_(src, to, opts_);
      }
      function cmdShimIfExists(src, to, opts) {
        return cmdShim2(src, to, opts).catch(() => {
        });
      }
      function rm(path4, opts) {
        return opts.fs_.unlink(path4).catch(() => {
        });
      }
      async function cmdShim_(src, to, opts) {
        const srcRuntimeInfo = await searchScriptRuntime(src, opts);
        await writeShimsPreCommon(to, opts);
        return writeAllShims(src, to, srcRuntimeInfo, opts);
      }
      function writeShimsPreCommon(target, opts) {
        return opts.fs_.mkdir(path3.dirname(target), {recursive: true});
      }
      function writeAllShims(src, to, srcRuntimeInfo, opts) {
        const opts_ = ingestOptions(opts);
        const generatorAndExts = [{generator: generateShShim, extension: ""}];
        if (opts_.createCmdFile) {
          generatorAndExts.push({generator: generateCmdShim, extension: ".cmd"});
        }
        if (opts_.createPwshFile) {
          generatorAndExts.push({generator: generatePwshShim, extension: ".ps1"});
        }
        return Promise.all(generatorAndExts.map((generatorAndExt) => writeShim(src, to + generatorAndExt.extension, srcRuntimeInfo, generatorAndExt.generator, opts_)));
      }
      function writeShimPre(target, opts) {
        return rm(target, opts);
      }
      function writeShimPost(target, opts) {
        return chmodShim(target, opts);
      }
      async function searchScriptRuntime(target, opts) {
        const data = await opts.fs_.readFile(target, "utf8");
        const firstLine = data.trim().split(/\r*\n/)[0];
        const shebang = firstLine.match(shebangExpr);
        if (!shebang) {
          const targetExtension = path3.extname(target).toLowerCase();
          return {
            program: extensionToProgramMap.get(targetExtension) || null,
            additionalArgs: ""
          };
        }
        return {
          program: shebang[1],
          additionalArgs: shebang[2]
        };
      }
      async function writeShim(src, to, srcRuntimeInfo, generateShimScript, opts) {
        const defaultArgs = opts.preserveSymlinks ? "--preserve-symlinks" : "";
        const args = [srcRuntimeInfo.additionalArgs, defaultArgs].filter((arg) => arg).join(" ");
        opts = Object.assign({}, opts, {
          prog: srcRuntimeInfo.program,
          args
        });
        await writeShimPre(to, opts);
        await opts.fs_.writeFile(to, generateShimScript(src, to, opts), "utf8");
        return writeShimPost(to, opts);
      }
      function generateCmdShim(src, to, opts) {
        const shTarget = path3.relative(path3.dirname(to), src);
        let target = shTarget.split("/").join("\\");
        const quotedPathToTarget = path3.isAbsolute(target) ? `"${target}"` : `"%~dp0\\${target}"`;
        let longProg;
        let prog = opts.prog;
        let args = opts.args || "";
        const nodePath = normalizePathEnvVar(opts.nodePath).win32;
        if (!prog) {
          prog = quotedPathToTarget;
          args = "";
          target = "";
        } else {
          longProg = `"%~dp0\\${prog}.exe"`;
          target = quotedPathToTarget;
        }
        let progArgs = opts.progArgs ? `${opts.progArgs.join(` `)} ` : "";
        let cmd = nodePath ? `@SET NODE_PATH=${nodePath}\r
` : "";
        if (longProg) {
          cmd += `@IF EXIST ${longProg} (\r
  ${longProg} ${args} ${target} ${progArgs}%*\r
) ELSE (\r
  @SETLOCAL\r
  @SET PATHEXT=%PATHEXT:;.JS;=;%\r
  ${prog} ${args} ${target} ${progArgs}%*\r
)\r
`;
        } else {
          cmd += `@${prog} ${args} ${target} ${progArgs}%*\r
`;
        }
        return cmd;
      }
      function generateShShim(src, to, opts) {
        let shTarget = path3.relative(path3.dirname(to), src);
        let shProg = opts.prog && opts.prog.split("\\").join("/");
        let shLongProg;
        shTarget = shTarget.split("\\").join("/");
        const quotedPathToTarget = path3.isAbsolute(shTarget) ? `"${shTarget}"` : `"$basedir/${shTarget}"`;
        let args = opts.args || "";
        const shNodePath = normalizePathEnvVar(opts.nodePath).posix;
        if (!shProg) {
          shProg = quotedPathToTarget;
          args = "";
          shTarget = "";
        } else {
          shLongProg = `"$basedir/${opts.prog}"`;
          shTarget = quotedPathToTarget;
        }
        let progArgs = opts.progArgs ? `${opts.progArgs.join(` `)} ` : "";
        let sh = `#!/bin/sh
basedir=$(dirname "$(echo "$0" | sed -e 's,\\\\,/,g')")

case \`uname\` in
    *CYGWIN*) basedir=\`cygpath -w "$basedir"\`;;
esac

`;
        const env = opts.nodePath ? `export NODE_PATH="${shNodePath}"
` : "";
        if (shLongProg) {
          sh += `${env}if [ -x ${shLongProg} ]; then
  exec ${shLongProg} ${args} ${shTarget} ${progArgs}"$@"
else
  exec ${shProg} ${args} ${shTarget} ${progArgs}"$@"
fi
`;
        } else {
          sh += `${env}${shProg} ${args} ${shTarget} ${progArgs}"$@"
exit $?
`;
        }
        return sh;
      }
      function generatePwshShim(src, to, opts) {
        let shTarget = path3.relative(path3.dirname(to), src);
        const shProg = opts.prog && opts.prog.split("\\").join("/");
        let pwshProg = shProg && `"${shProg}$exe"`;
        let pwshLongProg;
        shTarget = shTarget.split("\\").join("/");
        const quotedPathToTarget = path3.isAbsolute(shTarget) ? `"${shTarget}"` : `"$basedir/${shTarget}"`;
        let args = opts.args || "";
        let normalizedPathEnvVar = normalizePathEnvVar(opts.nodePath);
        const nodePath = normalizedPathEnvVar.win32;
        const shNodePath = normalizedPathEnvVar.posix;
        if (!pwshProg) {
          pwshProg = quotedPathToTarget;
          args = "";
          shTarget = "";
        } else {
          pwshLongProg = `"$basedir/${opts.prog}$exe"`;
          shTarget = quotedPathToTarget;
        }
        let progArgs = opts.progArgs ? `${opts.progArgs.join(` `)} ` : "";
        let pwsh = `#!/usr/bin/env pwsh
$basedir=Split-Path $MyInvocation.MyCommand.Definition -Parent

$exe=""
${opts.nodePath ? `$env_node_path=$env:NODE_PATH
$env:NODE_PATH="${nodePath}"
` : ""}if ($PSVersionTable.PSVersion -lt "6.0" -or $IsWindows) {
  # Fix case when both the Windows and Linux builds of Node
  # are installed in the same directory
  $exe=".exe"
}`;
        if (opts.nodePath) {
          pwsh += ` else {
  $env:NODE_PATH="${shNodePath}"
}`;
        }
        if (pwshLongProg) {
          pwsh += `
$ret=0
if (Test-Path ${pwshLongProg}) {
  # Support pipeline input
  if ($MyInvocation.ExpectingInput) {
    $input | & ${pwshLongProg} ${args} ${shTarget} ${progArgs}$args
  } else {
    & ${pwshLongProg} ${args} ${shTarget} ${progArgs}$args
  }
  $ret=$LASTEXITCODE
} else {
  # Support pipeline input
  if ($MyInvocation.ExpectingInput) {
    $input | & ${pwshProg} ${args} ${shTarget} ${progArgs}$args
  } else {
    & ${pwshProg} ${args} ${shTarget} ${progArgs}$args
  }
  $ret=$LASTEXITCODE
}
${opts.nodePath ? "$env:NODE_PATH=$env_node_path\n" : ""}exit $ret
`;
        } else {
          pwsh += `
# Support pipeline input
if ($MyInvocation.ExpectingInput) {
  $input | & ${pwshProg} ${args} ${shTarget} ${progArgs}$args
} else {
  & ${pwshProg} ${args} ${shTarget} ${progArgs}$args
}
${opts.nodePath ? "$env:NODE_PATH=$env_node_path\n" : ""}exit $LASTEXITCODE
`;
        }
        return pwsh;
      }
      function chmodShim(to, opts) {
        return opts.fs_.chmod(to, 493);
      }
      function normalizePathEnvVar(nodePath) {
        if (!nodePath) {
          return {
            win32: "",
            posix: ""
          };
        }
        let split2 = typeof nodePath === "string" ? nodePath.split(path3.delimiter) : Array.from(nodePath);
        let result = {};
        for (let i = 0; i < split2.length; i++) {
          const win32 = split2[i].split("/").join("\\");
          const posix = isWindows() ? split2[i].split("\\").join("/").replace(/^([^:\\/]*):/, (_, $1) => `/mnt/${$1.toLowerCase()}`) : split2[i];
          result.win32 = result.win32 ? `${result.win32};${win32}` : win32;
          result.posix = result.posix ? `${result.posix}:${posix}` : posix;
          result[i] = {win32, posix};
        }
        return result;
      }
      module.exports = cmdShim2;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/readable-stream-npm-3.6.0-23a4a5eb56-d4ea81502d.zip/node_modules/readable-stream/lib/internal/streams/stream.js
  var require_stream5 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/readable-stream-npm-3.6.0-23a4a5eb56-d4ea81502d.zip/node_modules/readable-stream/lib/internal/streams/stream.js"(exports, module) {
      module.exports = require("stream");
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/readable-stream-npm-3.6.0-23a4a5eb56-d4ea81502d.zip/node_modules/readable-stream/lib/internal/streams/buffer_list.js
  var require_buffer_list = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/readable-stream-npm-3.6.0-23a4a5eb56-d4ea81502d.zip/node_modules/readable-stream/lib/internal/streams/buffer_list.js"(exports, module) {
      "use strict";
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly)
            symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};
          if (i % 2) {
            ownKeys(Object(source), true).forEach(function(key) {
              _defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }
        return target;
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
          _defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          _defineProperties(Constructor, staticProps);
        return Constructor;
      }
      var _require = require("buffer");
      var Buffer2 = _require.Buffer;
      var _require2 = require("util");
      var inspect8 = _require2.inspect;
      var custom = inspect8 && inspect8.custom || "inspect";
      function copyBuffer(src, target, offset) {
        Buffer2.prototype.copy.call(src, target, offset);
      }
      module.exports = /* @__PURE__ */ function() {
        function BufferList() {
          _classCallCheck(this, BufferList);
          this.head = null;
          this.tail = null;
          this.length = 0;
        }
        _createClass(BufferList, [{
          key: "push",
          value: function push(v) {
            var entry = {
              data: v,
              next: null
            };
            if (this.length > 0)
              this.tail.next = entry;
            else
              this.head = entry;
            this.tail = entry;
            ++this.length;
          }
        }, {
          key: "unshift",
          value: function unshift(v) {
            var entry = {
              data: v,
              next: this.head
            };
            if (this.length === 0)
              this.tail = entry;
            this.head = entry;
            ++this.length;
          }
        }, {
          key: "shift",
          value: function shift() {
            if (this.length === 0)
              return;
            var ret = this.head.data;
            if (this.length === 1)
              this.head = this.tail = null;
            else
              this.head = this.head.next;
            --this.length;
            return ret;
          }
        }, {
          key: "clear",
          value: function clear() {
            this.head = this.tail = null;
            this.length = 0;
          }
        }, {
          key: "join",
          value: function join(s) {
            if (this.length === 0)
              return "";
            var p = this.head;
            var ret = "" + p.data;
            while (p = p.next) {
              ret += s + p.data;
            }
            return ret;
          }
        }, {
          key: "concat",
          value: function concat(n) {
            if (this.length === 0)
              return Buffer2.alloc(0);
            var ret = Buffer2.allocUnsafe(n >>> 0);
            var p = this.head;
            var i = 0;
            while (p) {
              copyBuffer(p.data, ret, i);
              i += p.data.length;
              p = p.next;
            }
            return ret;
          }
        }, {
          key: "consume",
          value: function consume(n, hasStrings) {
            var ret;
            if (n < this.head.data.length) {
              ret = this.head.data.slice(0, n);
              this.head.data = this.head.data.slice(n);
            } else if (n === this.head.data.length) {
              ret = this.shift();
            } else {
              ret = hasStrings ? this._getString(n) : this._getBuffer(n);
            }
            return ret;
          }
        }, {
          key: "first",
          value: function first() {
            return this.head.data;
          }
        }, {
          key: "_getString",
          value: function _getString(n) {
            var p = this.head;
            var c = 1;
            var ret = p.data;
            n -= ret.length;
            while (p = p.next) {
              var str = p.data;
              var nb = n > str.length ? str.length : n;
              if (nb === str.length)
                ret += str;
              else
                ret += str.slice(0, n);
              n -= nb;
              if (n === 0) {
                if (nb === str.length) {
                  ++c;
                  if (p.next)
                    this.head = p.next;
                  else
                    this.head = this.tail = null;
                } else {
                  this.head = p;
                  p.data = str.slice(nb);
                }
                break;
              }
              ++c;
            }
            this.length -= c;
            return ret;
          }
        }, {
          key: "_getBuffer",
          value: function _getBuffer(n) {
            var ret = Buffer2.allocUnsafe(n);
            var p = this.head;
            var c = 1;
            p.data.copy(ret);
            n -= p.data.length;
            while (p = p.next) {
              var buf = p.data;
              var nb = n > buf.length ? buf.length : n;
              buf.copy(ret, ret.length - n, 0, nb);
              n -= nb;
              if (n === 0) {
                if (nb === buf.length) {
                  ++c;
                  if (p.next)
                    this.head = p.next;
                  else
                    this.head = this.tail = null;
                } else {
                  this.head = p;
                  p.data = buf.slice(nb);
                }
                break;
              }
              ++c;
            }
            this.length -= c;
            return ret;
          }
        }, {
          key: custom,
          value: function value(_, options) {
            return inspect8(this, _objectSpread({}, options, {
              depth: 0,
              customInspect: false
            }));
          }
        }]);
        return BufferList;
      }();
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/readable-stream-npm-3.6.0-23a4a5eb56-d4ea81502d.zip/node_modules/readable-stream/lib/internal/streams/destroy.js
  var require_destroy = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/readable-stream-npm-3.6.0-23a4a5eb56-d4ea81502d.zip/node_modules/readable-stream/lib/internal/streams/destroy.js"(exports, module) {
      "use strict";
      function destroy(err, cb) {
        var _this = this;
        var readableDestroyed = this._readableState && this._readableState.destroyed;
        var writableDestroyed = this._writableState && this._writableState.destroyed;
        if (readableDestroyed || writableDestroyed) {
          if (cb) {
            cb(err);
          } else if (err) {
            if (!this._writableState) {
              process.nextTick(emitErrorNT, this, err);
            } else if (!this._writableState.errorEmitted) {
              this._writableState.errorEmitted = true;
              process.nextTick(emitErrorNT, this, err);
            }
          }
          return this;
        }
        if (this._readableState) {
          this._readableState.destroyed = true;
        }
        if (this._writableState) {
          this._writableState.destroyed = true;
        }
        this._destroy(err || null, function(err2) {
          if (!cb && err2) {
            if (!_this._writableState) {
              process.nextTick(emitErrorAndCloseNT, _this, err2);
            } else if (!_this._writableState.errorEmitted) {
              _this._writableState.errorEmitted = true;
              process.nextTick(emitErrorAndCloseNT, _this, err2);
            } else {
              process.nextTick(emitCloseNT, _this);
            }
          } else if (cb) {
            process.nextTick(emitCloseNT, _this);
            cb(err2);
          } else {
            process.nextTick(emitCloseNT, _this);
          }
        });
        return this;
      }
      function emitErrorAndCloseNT(self2, err) {
        emitErrorNT(self2, err);
        emitCloseNT(self2);
      }
      function emitCloseNT(self2) {
        if (self2._writableState && !self2._writableState.emitClose)
          return;
        if (self2._readableState && !self2._readableState.emitClose)
          return;
        self2.emit("close");
      }
      function undestroy() {
        if (this._readableState) {
          this._readableState.destroyed = false;
          this._readableState.reading = false;
          this._readableState.ended = false;
          this._readableState.endEmitted = false;
        }
        if (this._writableState) {
          this._writableState.destroyed = false;
          this._writableState.ended = false;
          this._writableState.ending = false;
          this._writableState.finalCalled = false;
          this._writableState.prefinished = false;
          this._writableState.finished = false;
          this._writableState.errorEmitted = false;
        }
      }
      function emitErrorNT(self2, err) {
        self2.emit("error", err);
      }
      function errorOrDestroy(stream, err) {
        var rState = stream._readableState;
        var wState = stream._writableState;
        if (rState && rState.autoDestroy || wState && wState.autoDestroy)
          stream.destroy(err);
        else
          stream.emit("error", err);
      }
      module.exports = {
        destroy,
        undestroy,
        errorOrDestroy
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/readable-stream-npm-3.6.0-23a4a5eb56-d4ea81502d.zip/node_modules/readable-stream/errors.js
  var require_errors2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/readable-stream-npm-3.6.0-23a4a5eb56-d4ea81502d.zip/node_modules/readable-stream/errors.js"(exports, module) {
      "use strict";
      var codes = {};
      function createErrorType(code, message, Base) {
        if (!Base) {
          Base = Error;
        }
        function getMessage(arg1, arg2, arg3) {
          if (typeof message === "string") {
            return message;
          } else {
            return message(arg1, arg2, arg3);
          }
        }
        class NodeError extends Base {
          constructor(arg1, arg2, arg3) {
            super(getMessage(arg1, arg2, arg3));
          }
        }
        NodeError.prototype.name = Base.name;
        NodeError.prototype.code = code;
        codes[code] = NodeError;
      }
      function oneOf(expected, thing) {
        if (Array.isArray(expected)) {
          const len = expected.length;
          expected = expected.map((i) => String(i));
          if (len > 2) {
            return `one of ${thing} ${expected.slice(0, len - 1).join(", ")}, or ` + expected[len - 1];
          } else if (len === 2) {
            return `one of ${thing} ${expected[0]} or ${expected[1]}`;
          } else {
            return `of ${thing} ${expected[0]}`;
          }
        } else {
          return `of ${thing} ${String(expected)}`;
        }
      }
      function startsWith(str, search, pos) {
        return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
      }
      function endsWith(str, search, this_len) {
        if (this_len === void 0 || this_len > str.length) {
          this_len = str.length;
        }
        return str.substring(this_len - search.length, this_len) === search;
      }
      function includes(str, search, start2) {
        if (typeof start2 !== "number") {
          start2 = 0;
        }
        if (start2 + search.length > str.length) {
          return false;
        } else {
          return str.indexOf(search, start2) !== -1;
        }
      }
      createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
        return 'The value "' + value + '" is invalid for option "' + name + '"';
      }, TypeError);
      createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
        let determiner;
        if (typeof expected === "string" && startsWith(expected, "not ")) {
          determiner = "must not be";
          expected = expected.replace(/^not /, "");
        } else {
          determiner = "must be";
        }
        let msg;
        if (endsWith(name, " argument")) {
          msg = `The ${name} ${determiner} ${oneOf(expected, "type")}`;
        } else {
          const type = includes(name, ".") ? "property" : "argument";
          msg = `The "${name}" ${type} ${determiner} ${oneOf(expected, "type")}`;
        }
        msg += `. Received type ${typeof actual}`;
        return msg;
      }, TypeError);
      createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
      createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
        return "The " + name + " method is not implemented";
      });
      createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
      createErrorType("ERR_STREAM_DESTROYED", function(name) {
        return "Cannot call " + name + " after a stream was destroyed";
      });
      createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
      createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
      createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
      createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
      createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
        return "Unknown encoding: " + arg;
      }, TypeError);
      createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
      module.exports.codes = codes;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/readable-stream-npm-3.6.0-23a4a5eb56-d4ea81502d.zip/node_modules/readable-stream/lib/internal/streams/state.js
  var require_state2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/readable-stream-npm-3.6.0-23a4a5eb56-d4ea81502d.zip/node_modules/readable-stream/lib/internal/streams/state.js"(exports, module) {
      "use strict";
      var ERR_INVALID_OPT_VALUE = require_errors2().codes.ERR_INVALID_OPT_VALUE;
      function highWaterMarkFrom(options, isDuplex, duplexKey) {
        return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
      }
      function getHighWaterMark(state, options, duplexKey, isDuplex) {
        var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
        if (hwm != null) {
          if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : "highWaterMark";
            throw new ERR_INVALID_OPT_VALUE(name, hwm);
          }
          return Math.floor(hwm);
        }
        return state.objectMode ? 16 : 16 * 1024;
      }
      module.exports = {
        getHighWaterMark
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/inherits-npm-2.0.4-c66b3957a0-4a48a73384.zip/node_modules/inherits/inherits_browser.js
  var require_inherits_browser = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/inherits-npm-2.0.4-c66b3957a0-4a48a73384.zip/node_modules/inherits/inherits_browser.js"(exports, module) {
      if (typeof Object.create === "function") {
        module.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            ctor.prototype = Object.create(superCtor.prototype, {
              constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
          }
        };
      } else {
        module.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function() {
            };
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
          }
        };
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/inherits-npm-2.0.4-c66b3957a0-4a48a73384.zip/node_modules/inherits/inherits.js
  var require_inherits = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/inherits-npm-2.0.4-c66b3957a0-4a48a73384.zip/node_modules/inherits/inherits.js"(exports, module) {
      try {
        util = require("util");
        if (typeof util.inherits !== "function")
          throw "";
        module.exports = util.inherits;
      } catch (e) {
        module.exports = require_inherits_browser();
      }
      var util;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/util-deprecate-npm-1.0.2-e3fe1a219c-474acf1146.zip/node_modules/util-deprecate/node.js
  var require_node = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/util-deprecate-npm-1.0.2-e3fe1a219c-474acf1146.zip/node_modules/util-deprecate/node.js"(exports, module) {
      module.exports = require("util").deprecate;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/readable-stream-npm-3.6.0-23a4a5eb56-d4ea81502d.zip/node_modules/readable-stream/lib/_stream_writable.js
  var require_stream_writable = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/readable-stream-npm-3.6.0-23a4a5eb56-d4ea81502d.zip/node_modules/readable-stream/lib/_stream_writable.js"(exports, module) {
      "use strict";
      module.exports = Writable5;
      function CorkedRequest(state) {
        var _this = this;
        this.next = null;
        this.entry = null;
        this.finish = function() {
          onCorkedFinish(_this, state);
        };
      }
      var Duplex;
      Writable5.WritableState = WritableState;
      var internalUtil = {
        deprecate: require_node()
      };
      var Stream = require_stream5();
      var Buffer2 = require("buffer").Buffer;
      var OurUint8Array = global.Uint8Array || function() {
      };
      function _uint8ArrayToBuffer(chunk) {
        return Buffer2.from(chunk);
      }
      function _isUint8Array(obj) {
        return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
      }
      var destroyImpl = require_destroy();
      var _require = require_state2();
      var getHighWaterMark = _require.getHighWaterMark;
      var _require$codes = require_errors2().codes;
      var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
      var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
      var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
      var ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE;
      var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
      var ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES;
      var ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END;
      var ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
      var errorOrDestroy = destroyImpl.errorOrDestroy;
      require_inherits()(Writable5, Stream);
      function nop() {
      }
      function WritableState(options, stream, isDuplex) {
        Duplex = Duplex || require_stream_duplex();
        options = options || {};
        if (typeof isDuplex !== "boolean")
          isDuplex = stream instanceof Duplex;
        this.objectMode = !!options.objectMode;
        if (isDuplex)
          this.objectMode = this.objectMode || !!options.writableObjectMode;
        this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
        this.finalCalled = false;
        this.needDrain = false;
        this.ending = false;
        this.ended = false;
        this.finished = false;
        this.destroyed = false;
        var noDecode = options.decodeStrings === false;
        this.decodeStrings = !noDecode;
        this.defaultEncoding = options.defaultEncoding || "utf8";
        this.length = 0;
        this.writing = false;
        this.corked = 0;
        this.sync = true;
        this.bufferProcessing = false;
        this.onwrite = function(er) {
          onwrite(stream, er);
        };
        this.writecb = null;
        this.writelen = 0;
        this.bufferedRequest = null;
        this.lastBufferedRequest = null;
        this.pendingcb = 0;
        this.prefinished = false;
        this.errorEmitted = false;
        this.emitClose = options.emitClose !== false;
        this.autoDestroy = !!options.autoDestroy;
        this.bufferedRequestCount = 0;
        this.corkedRequestsFree = new CorkedRequest(this);
      }
      WritableState.prototype.getBuffer = function getBuffer() {
        var current = this.bufferedRequest;
        var out = [];
        while (current) {
          out.push(current);
          current = current.next;
        }
        return out;
      };
      (function() {
        try {
          Object.defineProperty(WritableState.prototype, "buffer", {
            get: internalUtil.deprecate(function writableStateBufferGetter() {
              return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
          });
        } catch (_) {
        }
      })();
      var realHasInstance;
      if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
        realHasInstance = Function.prototype[Symbol.hasInstance];
        Object.defineProperty(Writable5, Symbol.hasInstance, {
          value: function value(object) {
            if (realHasInstance.call(this, object))
              return true;
            if (this !== Writable5)
              return false;
            return object && object._writableState instanceof WritableState;
          }
        });
      } else {
        realHasInstance = function realHasInstance2(object) {
          return object instanceof this;
        };
      }
      function Writable5(options) {
        Duplex = Duplex || require_stream_duplex();
        var isDuplex = this instanceof Duplex;
        if (!isDuplex && !realHasInstance.call(Writable5, this))
          return new Writable5(options);
        this._writableState = new WritableState(options, this, isDuplex);
        this.writable = true;
        if (options) {
          if (typeof options.write === "function")
            this._write = options.write;
          if (typeof options.writev === "function")
            this._writev = options.writev;
          if (typeof options.destroy === "function")
            this._destroy = options.destroy;
          if (typeof options.final === "function")
            this._final = options.final;
        }
        Stream.call(this);
      }
      Writable5.prototype.pipe = function() {
        errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
      };
      function writeAfterEnd(stream, cb) {
        var er = new ERR_STREAM_WRITE_AFTER_END();
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
      }
      function validChunk(stream, state, chunk, cb) {
        var er;
        if (chunk === null) {
          er = new ERR_STREAM_NULL_VALUES();
        } else if (typeof chunk !== "string" && !state.objectMode) {
          er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
        }
        if (er) {
          errorOrDestroy(stream, er);
          process.nextTick(cb, er);
          return false;
        }
        return true;
      }
      Writable5.prototype.write = function(chunk, encoding, cb) {
        var state = this._writableState;
        var ret = false;
        var isBuf = !state.objectMode && _isUint8Array(chunk);
        if (isBuf && !Buffer2.isBuffer(chunk)) {
          chunk = _uint8ArrayToBuffer(chunk);
        }
        if (typeof encoding === "function") {
          cb = encoding;
          encoding = null;
        }
        if (isBuf)
          encoding = "buffer";
        else if (!encoding)
          encoding = state.defaultEncoding;
        if (typeof cb !== "function")
          cb = nop;
        if (state.ending)
          writeAfterEnd(this, cb);
        else if (isBuf || validChunk(this, state, chunk, cb)) {
          state.pendingcb++;
          ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
        }
        return ret;
      };
      Writable5.prototype.cork = function() {
        this._writableState.corked++;
      };
      Writable5.prototype.uncork = function() {
        var state = this._writableState;
        if (state.corked) {
          state.corked--;
          if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest)
            clearBuffer(this, state);
        }
      };
      Writable5.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
        if (typeof encoding === "string")
          encoding = encoding.toLowerCase();
        if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
          throw new ERR_UNKNOWN_ENCODING(encoding);
        this._writableState.defaultEncoding = encoding;
        return this;
      };
      Object.defineProperty(Writable5.prototype, "writableBuffer", {
        enumerable: false,
        get: function get3() {
          return this._writableState && this._writableState.getBuffer();
        }
      });
      function decodeChunk(state, chunk, encoding) {
        if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
          chunk = Buffer2.from(chunk, encoding);
        }
        return chunk;
      }
      Object.defineProperty(Writable5.prototype, "writableHighWaterMark", {
        enumerable: false,
        get: function get3() {
          return this._writableState.highWaterMark;
        }
      });
      function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
        if (!isBuf) {
          var newChunk = decodeChunk(state, chunk, encoding);
          if (chunk !== newChunk) {
            isBuf = true;
            encoding = "buffer";
            chunk = newChunk;
          }
        }
        var len = state.objectMode ? 1 : chunk.length;
        state.length += len;
        var ret = state.length < state.highWaterMark;
        if (!ret)
          state.needDrain = true;
        if (state.writing || state.corked) {
          var last = state.lastBufferedRequest;
          state.lastBufferedRequest = {
            chunk,
            encoding,
            isBuf,
            callback: cb,
            next: null
          };
          if (last) {
            last.next = state.lastBufferedRequest;
          } else {
            state.bufferedRequest = state.lastBufferedRequest;
          }
          state.bufferedRequestCount += 1;
        } else {
          doWrite(stream, state, false, len, chunk, encoding, cb);
        }
        return ret;
      }
      function doWrite(stream, state, writev, len, chunk, encoding, cb) {
        state.writelen = len;
        state.writecb = cb;
        state.writing = true;
        state.sync = true;
        if (state.destroyed)
          state.onwrite(new ERR_STREAM_DESTROYED("write"));
        else if (writev)
          stream._writev(chunk, state.onwrite);
        else
          stream._write(chunk, encoding, state.onwrite);
        state.sync = false;
      }
      function onwriteError(stream, state, sync, er, cb) {
        --state.pendingcb;
        if (sync) {
          process.nextTick(cb, er);
          process.nextTick(finishMaybe, stream, state);
          stream._writableState.errorEmitted = true;
          errorOrDestroy(stream, er);
        } else {
          cb(er);
          stream._writableState.errorEmitted = true;
          errorOrDestroy(stream, er);
          finishMaybe(stream, state);
        }
      }
      function onwriteStateUpdate(state) {
        state.writing = false;
        state.writecb = null;
        state.length -= state.writelen;
        state.writelen = 0;
      }
      function onwrite(stream, er) {
        var state = stream._writableState;
        var sync = state.sync;
        var cb = state.writecb;
        if (typeof cb !== "function")
          throw new ERR_MULTIPLE_CALLBACK();
        onwriteStateUpdate(state);
        if (er)
          onwriteError(stream, state, sync, er, cb);
        else {
          var finished = needFinish(state) || stream.destroyed;
          if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
            clearBuffer(stream, state);
          }
          if (sync) {
            process.nextTick(afterWrite, stream, state, finished, cb);
          } else {
            afterWrite(stream, state, finished, cb);
          }
        }
      }
      function afterWrite(stream, state, finished, cb) {
        if (!finished)
          onwriteDrain(stream, state);
        state.pendingcb--;
        cb();
        finishMaybe(stream, state);
      }
      function onwriteDrain(stream, state) {
        if (state.length === 0 && state.needDrain) {
          state.needDrain = false;
          stream.emit("drain");
        }
      }
      function clearBuffer(stream, state) {
        state.bufferProcessing = true;
        var entry = state.bufferedRequest;
        if (stream._writev && entry && entry.next) {
          var l = state.bufferedRequestCount;
          var buffer = new Array(l);
          var holder = state.corkedRequestsFree;
          holder.entry = entry;
          var count = 0;
          var allBuffers = true;
          while (entry) {
            buffer[count] = entry;
            if (!entry.isBuf)
              allBuffers = false;
            entry = entry.next;
            count += 1;
          }
          buffer.allBuffers = allBuffers;
          doWrite(stream, state, true, state.length, buffer, "", holder.finish);
          state.pendingcb++;
          state.lastBufferedRequest = null;
          if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
          } else {
            state.corkedRequestsFree = new CorkedRequest(state);
          }
          state.bufferedRequestCount = 0;
        } else {
          while (entry) {
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--;
            if (state.writing) {
              break;
            }
          }
          if (entry === null)
            state.lastBufferedRequest = null;
        }
        state.bufferedRequest = entry;
        state.bufferProcessing = false;
      }
      Writable5.prototype._write = function(chunk, encoding, cb) {
        cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
      };
      Writable5.prototype._writev = null;
      Writable5.prototype.end = function(chunk, encoding, cb) {
        var state = this._writableState;
        if (typeof chunk === "function") {
          cb = chunk;
          chunk = null;
          encoding = null;
        } else if (typeof encoding === "function") {
          cb = encoding;
          encoding = null;
        }
        if (chunk !== null && chunk !== void 0)
          this.write(chunk, encoding);
        if (state.corked) {
          state.corked = 1;
          this.uncork();
        }
        if (!state.ending)
          endWritable(this, state, cb);
        return this;
      };
      Object.defineProperty(Writable5.prototype, "writableLength", {
        enumerable: false,
        get: function get3() {
          return this._writableState.length;
        }
      });
      function needFinish(state) {
        return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
      }
      function callFinal(stream, state) {
        stream._final(function(err) {
          state.pendingcb--;
          if (err) {
            errorOrDestroy(stream, err);
          }
          state.prefinished = true;
          stream.emit("prefinish");
          finishMaybe(stream, state);
        });
      }
      function prefinish(stream, state) {
        if (!state.prefinished && !state.finalCalled) {
          if (typeof stream._final === "function" && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            process.nextTick(callFinal, stream, state);
          } else {
            state.prefinished = true;
            stream.emit("prefinish");
          }
        }
      }
      function finishMaybe(stream, state) {
        var need = needFinish(state);
        if (need) {
          prefinish(stream, state);
          if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit("finish");
            if (state.autoDestroy) {
              var rState = stream._readableState;
              if (!rState || rState.autoDestroy && rState.endEmitted) {
                stream.destroy();
              }
            }
          }
        }
        return need;
      }
      function endWritable(stream, state, cb) {
        state.ending = true;
        finishMaybe(stream, state);
        if (cb) {
          if (state.finished)
            process.nextTick(cb);
          else
            stream.once("finish", cb);
        }
        state.ended = true;
        stream.writable = false;
      }
      function onCorkedFinish(corkReq, state, err) {
        var entry = corkReq.entry;
        corkReq.entry = null;
        while (entry) {
          var cb = entry.callback;
          state.pendingcb--;
          cb(err);
          entry = entry.next;
        }
        state.corkedRequestsFree.next = corkReq;
      }
      Object.defineProperty(Writable5.prototype, "destroyed", {
        enumerable: false,
        get: function get3() {
          if (this._writableState === void 0) {
            return false;
          }
          return this._writableState.destroyed;
        },
        set: function set(value) {
          if (!this._writableState) {
            return;
          }
          this._writableState.destroyed = value;
        }
      });
      Writable5.prototype.destroy = destroyImpl.destroy;
      Writable5.prototype._undestroy = destroyImpl.undestroy;
      Writable5.prototype._destroy = function(err, cb) {
        cb(err);
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/readable-stream-npm-3.6.0-23a4a5eb56-d4ea81502d.zip/node_modules/readable-stream/lib/_stream_duplex.js
  var require_stream_duplex = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/readable-stream-npm-3.6.0-23a4a5eb56-d4ea81502d.zip/node_modules/readable-stream/lib/_stream_duplex.js"(exports, module) {
      "use strict";
      var objectKeys = Object.keys || function(obj) {
        var keys2 = [];
        for (var key in obj) {
          keys2.push(key);
        }
        return keys2;
      };
      module.exports = Duplex;
      var Readable6 = require_stream_readable();
      var Writable5 = require_stream_writable();
      require_inherits()(Duplex, Readable6);
      {
        keys = objectKeys(Writable5.prototype);
        for (v = 0; v < keys.length; v++) {
          method = keys[v];
          if (!Duplex.prototype[method])
            Duplex.prototype[method] = Writable5.prototype[method];
        }
      }
      var keys;
      var method;
      var v;
      function Duplex(options) {
        if (!(this instanceof Duplex))
          return new Duplex(options);
        Readable6.call(this, options);
        Writable5.call(this, options);
        this.allowHalfOpen = true;
        if (options) {
          if (options.readable === false)
            this.readable = false;
          if (options.writable === false)
            this.writable = false;
          if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once("end", onend);
          }
        }
      }
      Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
        enumerable: false,
        get: function get3() {
          return this._writableState.highWaterMark;
        }
      });
      Object.defineProperty(Duplex.prototype, "writableBuffer", {
        enumerable: false,
        get: function get3() {
          return this._writableState && this._writableState.getBuffer();
        }
      });
      Object.defineProperty(Duplex.prototype, "writableLength", {
        enumerable: false,
        get: function get3() {
          return this._writableState.length;
        }
      });
      function onend() {
        if (this._writableState.ended)
          return;
        process.nextTick(onEndNT, this);
      }
      function onEndNT(self2) {
        self2.end();
      }
      Object.defineProperty(Duplex.prototype, "destroyed", {
        enumerable: false,
        get: function get3() {
          if (this._readableState === void 0 || this._writableState === void 0) {
            return false;
          }
          return this._readableState.destroyed && this._writableState.destroyed;
        },
        set: function set(value) {
          if (this._readableState === void 0 || this._writableState === void 0) {
            return;
          }
          this._readableState.destroyed = value;
          this._writableState.destroyed = value;
        }
      });
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/safe-buffer-npm-5.1.2-c27fedf6c4-f2f1f7943c.zip/node_modules/safe-buffer/index.js
  var require_safe_buffer = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/safe-buffer-npm-5.1.2-c27fedf6c4-f2f1f7943c.zip/node_modules/safe-buffer/index.js"(exports, module) {
      var buffer = require("buffer");
      var Buffer2 = buffer.Buffer;
      function copyProps(src, dst) {
        for (var key in src) {
          dst[key] = src[key];
        }
      }
      if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
        module.exports = buffer;
      } else {
        copyProps(buffer, exports);
        exports.Buffer = SafeBuffer;
      }
      function SafeBuffer(arg, encodingOrOffset, length) {
        return Buffer2(arg, encodingOrOffset, length);
      }
      copyProps(Buffer2, SafeBuffer);
      SafeBuffer.from = function(arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          throw new TypeError("Argument must not be a number");
        }
        return Buffer2(arg, encodingOrOffset, length);
      };
      SafeBuffer.alloc = function(size, fill, encoding) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        var buf = Buffer2(size);
        if (fill !== void 0) {
          if (typeof encoding === "string") {
            buf.fill(fill, encoding);
          } else {
            buf.fill(fill);
          }
        } else {
          buf.fill(0);
        }
        return buf;
      };
      SafeBuffer.allocUnsafe = function(size) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return Buffer2(size);
      };
      SafeBuffer.allocUnsafeSlow = function(size) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return buffer.SlowBuffer(size);
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/string_decoder-npm-1.2.0-5624097b10-7a36a08f12.zip/node_modules/string_decoder/lib/string_decoder.js
  var require_string_decoder = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/string_decoder-npm-1.2.0-5624097b10-7a36a08f12.zip/node_modules/string_decoder/lib/string_decoder.js"(exports) {
      "use strict";
      var Buffer2 = require_safe_buffer().Buffer;
      var isEncoding = Buffer2.isEncoding || function(encoding) {
        encoding = "" + encoding;
        switch (encoding && encoding.toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
          case "raw":
            return true;
          default:
            return false;
        }
      };
      function _normalizeEncoding(enc) {
        if (!enc)
          return "utf8";
        var retried;
        while (true) {
          switch (enc) {
            case "utf8":
            case "utf-8":
              return "utf8";
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return "utf16le";
            case "latin1":
            case "binary":
              return "latin1";
            case "base64":
            case "ascii":
            case "hex":
              return enc;
            default:
              if (retried)
                return;
              enc = ("" + enc).toLowerCase();
              retried = true;
          }
        }
      }
      function normalizeEncoding(enc) {
        var nenc = _normalizeEncoding(enc);
        if (typeof nenc !== "string" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc)))
          throw new Error("Unknown encoding: " + enc);
        return nenc || enc;
      }
      exports.StringDecoder = StringDecoder3;
      function StringDecoder3(encoding) {
        this.encoding = normalizeEncoding(encoding);
        var nb;
        switch (this.encoding) {
          case "utf16le":
            this.text = utf16Text;
            this.end = utf16End;
            nb = 4;
            break;
          case "utf8":
            this.fillLast = utf8FillLast;
            nb = 4;
            break;
          case "base64":
            this.text = base64Text;
            this.end = base64End;
            nb = 3;
            break;
          default:
            this.write = simpleWrite;
            this.end = simpleEnd;
            return;
        }
        this.lastNeed = 0;
        this.lastTotal = 0;
        this.lastChar = Buffer2.allocUnsafe(nb);
      }
      StringDecoder3.prototype.write = function(buf) {
        if (buf.length === 0)
          return "";
        var r;
        var i;
        if (this.lastNeed) {
          r = this.fillLast(buf);
          if (r === void 0)
            return "";
          i = this.lastNeed;
          this.lastNeed = 0;
        } else {
          i = 0;
        }
        if (i < buf.length)
          return r ? r + this.text(buf, i) : this.text(buf, i);
        return r || "";
      };
      StringDecoder3.prototype.end = utf8End;
      StringDecoder3.prototype.text = utf8Text;
      StringDecoder3.prototype.fillLast = function(buf) {
        if (this.lastNeed <= buf.length) {
          buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
          return this.lastChar.toString(this.encoding, 0, this.lastTotal);
        }
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
        this.lastNeed -= buf.length;
      };
      function utf8CheckByte(byte) {
        if (byte <= 127)
          return 0;
        else if (byte >> 5 === 6)
          return 2;
        else if (byte >> 4 === 14)
          return 3;
        else if (byte >> 3 === 30)
          return 4;
        return byte >> 6 === 2 ? -1 : -2;
      }
      function utf8CheckIncomplete(self2, buf, i) {
        var j = buf.length - 1;
        if (j < i)
          return 0;
        var nb = utf8CheckByte(buf[j]);
        if (nb >= 0) {
          if (nb > 0)
            self2.lastNeed = nb - 1;
          return nb;
        }
        if (--j < i || nb === -2)
          return 0;
        nb = utf8CheckByte(buf[j]);
        if (nb >= 0) {
          if (nb > 0)
            self2.lastNeed = nb - 2;
          return nb;
        }
        if (--j < i || nb === -2)
          return 0;
        nb = utf8CheckByte(buf[j]);
        if (nb >= 0) {
          if (nb > 0) {
            if (nb === 2)
              nb = 0;
            else
              self2.lastNeed = nb - 3;
          }
          return nb;
        }
        return 0;
      }
      function utf8CheckExtraBytes(self2, buf, p) {
        if ((buf[0] & 192) !== 128) {
          self2.lastNeed = 0;
          return "\uFFFD";
        }
        if (self2.lastNeed > 1 && buf.length > 1) {
          if ((buf[1] & 192) !== 128) {
            self2.lastNeed = 1;
            return "\uFFFD";
          }
          if (self2.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 192) !== 128) {
              self2.lastNeed = 2;
              return "\uFFFD";
            }
          }
        }
      }
      function utf8FillLast(buf) {
        var p = this.lastTotal - this.lastNeed;
        var r = utf8CheckExtraBytes(this, buf, p);
        if (r !== void 0)
          return r;
        if (this.lastNeed <= buf.length) {
          buf.copy(this.lastChar, p, 0, this.lastNeed);
          return this.lastChar.toString(this.encoding, 0, this.lastTotal);
        }
        buf.copy(this.lastChar, p, 0, buf.length);
        this.lastNeed -= buf.length;
      }
      function utf8Text(buf, i) {
        var total = utf8CheckIncomplete(this, buf, i);
        if (!this.lastNeed)
          return buf.toString("utf8", i);
        this.lastTotal = total;
        var end = buf.length - (total - this.lastNeed);
        buf.copy(this.lastChar, 0, end);
        return buf.toString("utf8", i, end);
      }
      function utf8End(buf) {
        var r = buf && buf.length ? this.write(buf) : "";
        if (this.lastNeed)
          return r + "\uFFFD";
        return r;
      }
      function utf16Text(buf, i) {
        if ((buf.length - i) % 2 === 0) {
          var r = buf.toString("utf16le", i);
          if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 55296 && c <= 56319) {
              this.lastNeed = 2;
              this.lastTotal = 4;
              this.lastChar[0] = buf[buf.length - 2];
              this.lastChar[1] = buf[buf.length - 1];
              return r.slice(0, -1);
            }
          }
          return r;
        }
        this.lastNeed = 1;
        this.lastTotal = 2;
        this.lastChar[0] = buf[buf.length - 1];
        return buf.toString("utf16le", i, buf.length - 1);
      }
      function utf16End(buf) {
        var r = buf && buf.length ? this.write(buf) : "";
        if (this.lastNeed) {
          var end = this.lastTotal - this.lastNeed;
          return r + this.lastChar.toString("utf16le", 0, end);
        }
        return r;
      }
      function base64Text(buf, i) {
        var n = (buf.length - i) % 3;
        if (n === 0)
          return buf.toString("base64", i);
        this.lastNeed = 3 - n;
        this.lastTotal = 3;
        if (n === 1) {
          this.lastChar[0] = buf[buf.length - 1];
        } else {
          this.lastChar[0] = buf[buf.length - 2];
          this.lastChar[1] = buf[buf.length - 1];
        }
        return buf.toString("base64", i, buf.length - n);
      }
      function base64End(buf) {
        var r = buf && buf.length ? this.write(buf) : "";
        if (this.lastNeed)
          return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
        return r;
      }
      function simpleWrite(buf) {
        return buf.toString(this.encoding);
      }
      function simpleEnd(buf) {
        return buf && buf.length ? this.write(buf) : "";
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/readable-stream-npm-3.6.0-23a4a5eb56-d4ea81502d.zip/node_modules/readable-stream/lib/internal/streams/end-of-stream.js
  var require_end_of_stream2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/readable-stream-npm-3.6.0-23a4a5eb56-d4ea81502d.zip/node_modules/readable-stream/lib/internal/streams/end-of-stream.js"(exports, module) {
      "use strict";
      var ERR_STREAM_PREMATURE_CLOSE = require_errors2().codes.ERR_STREAM_PREMATURE_CLOSE;
      function once(callback) {
        var called = false;
        return function() {
          if (called)
            return;
          called = true;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          callback.apply(this, args);
        };
      }
      function noop() {
      }
      function isRequest(stream) {
        return stream.setHeader && typeof stream.abort === "function";
      }
      function eos(stream, opts, callback) {
        if (typeof opts === "function")
          return eos(stream, null, opts);
        if (!opts)
          opts = {};
        callback = once(callback || noop);
        var readable = opts.readable || opts.readable !== false && stream.readable;
        var writable = opts.writable || opts.writable !== false && stream.writable;
        var onlegacyfinish = function onlegacyfinish2() {
          if (!stream.writable)
            onfinish();
        };
        var writableEnded = stream._writableState && stream._writableState.finished;
        var onfinish = function onfinish2() {
          writable = false;
          writableEnded = true;
          if (!readable)
            callback.call(stream);
        };
        var readableEnded = stream._readableState && stream._readableState.endEmitted;
        var onend = function onend2() {
          readable = false;
          readableEnded = true;
          if (!writable)
            callback.call(stream);
        };
        var onerror = function onerror2(err) {
          callback.call(stream, err);
        };
        var onclose = function onclose2() {
          var err;
          if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended)
              err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
          }
          if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended)
              err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
          }
        };
        var onrequest = function onrequest2() {
          stream.req.on("finish", onfinish);
        };
        if (isRequest(stream)) {
          stream.on("complete", onfinish);
          stream.on("abort", onclose);
          if (stream.req)
            onrequest();
          else
            stream.on("request", onrequest);
        } else if (writable && !stream._writableState) {
          stream.on("end", onlegacyfinish);
          stream.on("close", onlegacyfinish);
        }
        stream.on("end", onend);
        stream.on("finish", onfinish);
        if (opts.error !== false)
          stream.on("error", onerror);
        stream.on("close", onclose);
        return function() {
          stream.removeListener("complete", onfinish);
          stream.removeListener("abort", onclose);
          stream.removeListener("request", onrequest);
          if (stream.req)
            stream.req.removeListener("finish", onfinish);
          stream.removeListener("end", onlegacyfinish);
          stream.removeListener("close", onlegacyfinish);
          stream.removeListener("finish", onfinish);
          stream.removeListener("end", onend);
          stream.removeListener("error", onerror);
          stream.removeListener("close", onclose);
        };
      }
      module.exports = eos;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/readable-stream-npm-3.6.0-23a4a5eb56-d4ea81502d.zip/node_modules/readable-stream/lib/internal/streams/async_iterator.js
  var require_async_iterator = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/readable-stream-npm-3.6.0-23a4a5eb56-d4ea81502d.zip/node_modules/readable-stream/lib/internal/streams/async_iterator.js"(exports, module) {
      "use strict";
      var _Object$setPrototypeO;
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
        } else {
          obj[key] = value;
        }
        return obj;
      }
      var finished = require_end_of_stream2();
      var kLastResolve = Symbol("lastResolve");
      var kLastReject = Symbol("lastReject");
      var kError = Symbol("error");
      var kEnded = Symbol("ended");
      var kLastPromise = Symbol("lastPromise");
      var kHandlePromise = Symbol("handlePromise");
      var kStream = Symbol("stream");
      function createIterResult(value, done) {
        return {
          value,
          done
        };
      }
      function readAndResolve(iter) {
        var resolve = iter[kLastResolve];
        if (resolve !== null) {
          var data = iter[kStream].read();
          if (data !== null) {
            iter[kLastPromise] = null;
            iter[kLastResolve] = null;
            iter[kLastReject] = null;
            resolve(createIterResult(data, false));
          }
        }
      }
      function onReadable(iter) {
        process.nextTick(readAndResolve, iter);
      }
      function wrapForNext(lastPromise, iter) {
        return function(resolve, reject) {
          lastPromise.then(function() {
            if (iter[kEnded]) {
              resolve(createIterResult(void 0, true));
              return;
            }
            iter[kHandlePromise](resolve, reject);
          }, reject);
        };
      }
      var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
      });
      var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
        get stream() {
          return this[kStream];
        },
        next: function next() {
          var _this = this;
          var error = this[kError];
          if (error !== null) {
            return Promise.reject(error);
          }
          if (this[kEnded]) {
            return Promise.resolve(createIterResult(void 0, true));
          }
          if (this[kStream].destroyed) {
            return new Promise(function(resolve, reject) {
              process.nextTick(function() {
                if (_this[kError]) {
                  reject(_this[kError]);
                } else {
                  resolve(createIterResult(void 0, true));
                }
              });
            });
          }
          var lastPromise = this[kLastPromise];
          var promise;
          if (lastPromise) {
            promise = new Promise(wrapForNext(lastPromise, this));
          } else {
            var data = this[kStream].read();
            if (data !== null) {
              return Promise.resolve(createIterResult(data, false));
            }
            promise = new Promise(this[kHandlePromise]);
          }
          this[kLastPromise] = promise;
          return promise;
        }
      }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
        return this;
      }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
        var _this2 = this;
        return new Promise(function(resolve, reject) {
          _this2[kStream].destroy(null, function(err) {
            if (err) {
              reject(err);
              return;
            }
            resolve(createIterResult(void 0, true));
          });
        });
      }), _Object$setPrototypeO), AsyncIteratorPrototype);
      var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {
        var _Object$create;
        var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
          value: stream,
          writable: true
        }), _defineProperty(_Object$create, kLastResolve, {
          value: null,
          writable: true
        }), _defineProperty(_Object$create, kLastReject, {
          value: null,
          writable: true
        }), _defineProperty(_Object$create, kError, {
          value: null,
          writable: true
        }), _defineProperty(_Object$create, kEnded, {
          value: stream._readableState.endEmitted,
          writable: true
        }), _defineProperty(_Object$create, kHandlePromise, {
          value: function value(resolve, reject) {
            var data = iterator[kStream].read();
            if (data) {
              iterator[kLastPromise] = null;
              iterator[kLastResolve] = null;
              iterator[kLastReject] = null;
              resolve(createIterResult(data, false));
            } else {
              iterator[kLastResolve] = resolve;
              iterator[kLastReject] = reject;
            }
          },
          writable: true
        }), _Object$create));
        iterator[kLastPromise] = null;
        finished(stream, function(err) {
          if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
            var reject = iterator[kLastReject];
            if (reject !== null) {
              iterator[kLastPromise] = null;
              iterator[kLastResolve] = null;
              iterator[kLastReject] = null;
              reject(err);
            }
            iterator[kError] = err;
            return;
          }
          var resolve = iterator[kLastResolve];
          if (resolve !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(void 0, true));
          }
          iterator[kEnded] = true;
        });
        stream.on("readable", onReadable.bind(null, iterator));
        return iterator;
      };
      module.exports = createReadableStreamAsyncIterator;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/readable-stream-npm-3.6.0-23a4a5eb56-d4ea81502d.zip/node_modules/readable-stream/lib/internal/streams/from.js
  var require_from = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/readable-stream-npm-3.6.0-23a4a5eb56-d4ea81502d.zip/node_modules/readable-stream/lib/internal/streams/from.js"(exports, module) {
      "use strict";
      function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }
        if (info.done) {
          resolve(value);
        } else {
          Promise.resolve(value).then(_next, _throw);
        }
      }
      function _asyncToGenerator(fn) {
        return function() {
          var self2 = this, args = arguments;
          return new Promise(function(resolve, reject) {
            var gen = fn.apply(self2, args);
            function _next(value) {
              asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
              asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(void 0);
          });
        };
      }
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly)
            symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};
          if (i % 2) {
            ownKeys(Object(source), true).forEach(function(key) {
              _defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }
        return target;
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
        } else {
          obj[key] = value;
        }
        return obj;
      }
      var ERR_INVALID_ARG_TYPE = require_errors2().codes.ERR_INVALID_ARG_TYPE;
      function from(Readable6, iterable, opts) {
        var iterator;
        if (iterable && typeof iterable.next === "function") {
          iterator = iterable;
        } else if (iterable && iterable[Symbol.asyncIterator])
          iterator = iterable[Symbol.asyncIterator]();
        else if (iterable && iterable[Symbol.iterator])
          iterator = iterable[Symbol.iterator]();
        else
          throw new ERR_INVALID_ARG_TYPE("iterable", ["Iterable"], iterable);
        var readable = new Readable6(_objectSpread({
          objectMode: true
        }, opts));
        var reading = false;
        readable._read = function() {
          if (!reading) {
            reading = true;
            next();
          }
        };
        function next() {
          return _next2.apply(this, arguments);
        }
        function _next2() {
          _next2 = _asyncToGenerator(function* () {
            try {
              var _ref = yield iterator.next(), value = _ref.value, done = _ref.done;
              if (done) {
                readable.push(null);
              } else if (readable.push(yield value)) {
                next();
              } else {
                reading = false;
              }
            } catch (err) {
              readable.destroy(err);
            }
          });
          return _next2.apply(this, arguments);
        }
        return readable;
      }
      module.exports = from;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/readable-stream-npm-3.6.0-23a4a5eb56-d4ea81502d.zip/node_modules/readable-stream/lib/_stream_readable.js
  var require_stream_readable = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/readable-stream-npm-3.6.0-23a4a5eb56-d4ea81502d.zip/node_modules/readable-stream/lib/_stream_readable.js"(exports, module) {
      "use strict";
      module.exports = Readable6;
      var Duplex;
      Readable6.ReadableState = ReadableState;
      var EE = require("events").EventEmitter;
      var EElistenerCount = function EElistenerCount2(emitter, type) {
        return emitter.listeners(type).length;
      };
      var Stream = require_stream5();
      var Buffer2 = require("buffer").Buffer;
      var OurUint8Array = global.Uint8Array || function() {
      };
      function _uint8ArrayToBuffer(chunk) {
        return Buffer2.from(chunk);
      }
      function _isUint8Array(obj) {
        return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
      }
      var debugUtil = require("util");
      var debug2;
      if (debugUtil && debugUtil.debuglog) {
        debug2 = debugUtil.debuglog("stream");
      } else {
        debug2 = function debug3() {
        };
      }
      var BufferList = require_buffer_list();
      var destroyImpl = require_destroy();
      var _require = require_state2();
      var getHighWaterMark = _require.getHighWaterMark;
      var _require$codes = require_errors2().codes;
      var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
      var ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF;
      var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
      var ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
      var StringDecoder3;
      var createReadableStreamAsyncIterator;
      var from;
      require_inherits()(Readable6, Stream);
      var errorOrDestroy = destroyImpl.errorOrDestroy;
      var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
      function prependListener(emitter, event, fn) {
        if (typeof emitter.prependListener === "function")
          return emitter.prependListener(event, fn);
        if (!emitter._events || !emitter._events[event])
          emitter.on(event, fn);
        else if (Array.isArray(emitter._events[event]))
          emitter._events[event].unshift(fn);
        else
          emitter._events[event] = [fn, emitter._events[event]];
      }
      function ReadableState(options, stream, isDuplex) {
        Duplex = Duplex || require_stream_duplex();
        options = options || {};
        if (typeof isDuplex !== "boolean")
          isDuplex = stream instanceof Duplex;
        this.objectMode = !!options.objectMode;
        if (isDuplex)
          this.objectMode = this.objectMode || !!options.readableObjectMode;
        this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
        this.buffer = new BufferList();
        this.length = 0;
        this.pipes = null;
        this.pipesCount = 0;
        this.flowing = null;
        this.ended = false;
        this.endEmitted = false;
        this.reading = false;
        this.sync = true;
        this.needReadable = false;
        this.emittedReadable = false;
        this.readableListening = false;
        this.resumeScheduled = false;
        this.paused = true;
        this.emitClose = options.emitClose !== false;
        this.autoDestroy = !!options.autoDestroy;
        this.destroyed = false;
        this.defaultEncoding = options.defaultEncoding || "utf8";
        this.awaitDrain = 0;
        this.readingMore = false;
        this.decoder = null;
        this.encoding = null;
        if (options.encoding) {
          if (!StringDecoder3)
            StringDecoder3 = require_string_decoder().StringDecoder;
          this.decoder = new StringDecoder3(options.encoding);
          this.encoding = options.encoding;
        }
      }
      function Readable6(options) {
        Duplex = Duplex || require_stream_duplex();
        if (!(this instanceof Readable6))
          return new Readable6(options);
        var isDuplex = this instanceof Duplex;
        this._readableState = new ReadableState(options, this, isDuplex);
        this.readable = true;
        if (options) {
          if (typeof options.read === "function")
            this._read = options.read;
          if (typeof options.destroy === "function")
            this._destroy = options.destroy;
        }
        Stream.call(this);
      }
      Object.defineProperty(Readable6.prototype, "destroyed", {
        enumerable: false,
        get: function get3() {
          if (this._readableState === void 0) {
            return false;
          }
          return this._readableState.destroyed;
        },
        set: function set(value) {
          if (!this._readableState) {
            return;
          }
          this._readableState.destroyed = value;
        }
      });
      Readable6.prototype.destroy = destroyImpl.destroy;
      Readable6.prototype._undestroy = destroyImpl.undestroy;
      Readable6.prototype._destroy = function(err, cb) {
        cb(err);
      };
      Readable6.prototype.push = function(chunk, encoding) {
        var state = this._readableState;
        var skipChunkCheck;
        if (!state.objectMode) {
          if (typeof chunk === "string") {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
              chunk = Buffer2.from(chunk, encoding);
              encoding = "";
            }
            skipChunkCheck = true;
          }
        } else {
          skipChunkCheck = true;
        }
        return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
      };
      Readable6.prototype.unshift = function(chunk) {
        return readableAddChunk(this, chunk, null, true, false);
      };
      function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
        debug2("readableAddChunk", chunk);
        var state = stream._readableState;
        if (chunk === null) {
          state.reading = false;
          onEofChunk(stream, state);
        } else {
          var er;
          if (!skipChunkCheck)
            er = chunkInvalid(state, chunk);
          if (er) {
            errorOrDestroy(stream, er);
          } else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
              chunk = _uint8ArrayToBuffer(chunk);
            }
            if (addToFront) {
              if (state.endEmitted)
                errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
              else
                addChunk(stream, state, chunk, true);
            } else if (state.ended) {
              errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
            } else if (state.destroyed) {
              return false;
            } else {
              state.reading = false;
              if (state.decoder && !encoding) {
                chunk = state.decoder.write(chunk);
                if (state.objectMode || chunk.length !== 0)
                  addChunk(stream, state, chunk, false);
                else
                  maybeReadMore(stream, state);
              } else {
                addChunk(stream, state, chunk, false);
              }
            }
          } else if (!addToFront) {
            state.reading = false;
            maybeReadMore(stream, state);
          }
        }
        return !state.ended && (state.length < state.highWaterMark || state.length === 0);
      }
      function addChunk(stream, state, chunk, addToFront) {
        if (state.flowing && state.length === 0 && !state.sync) {
          state.awaitDrain = 0;
          stream.emit("data", chunk);
        } else {
          state.length += state.objectMode ? 1 : chunk.length;
          if (addToFront)
            state.buffer.unshift(chunk);
          else
            state.buffer.push(chunk);
          if (state.needReadable)
            emitReadable(stream);
        }
        maybeReadMore(stream, state);
      }
      function chunkInvalid(state, chunk) {
        var er;
        if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
          er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk);
        }
        return er;
      }
      Readable6.prototype.isPaused = function() {
        return this._readableState.flowing === false;
      };
      Readable6.prototype.setEncoding = function(enc) {
        if (!StringDecoder3)
          StringDecoder3 = require_string_decoder().StringDecoder;
        var decoder = new StringDecoder3(enc);
        this._readableState.decoder = decoder;
        this._readableState.encoding = this._readableState.decoder.encoding;
        var p = this._readableState.buffer.head;
        var content = "";
        while (p !== null) {
          content += decoder.write(p.data);
          p = p.next;
        }
        this._readableState.buffer.clear();
        if (content !== "")
          this._readableState.buffer.push(content);
        this._readableState.length = content.length;
        return this;
      };
      var MAX_HWM = 1073741824;
      function computeNewHighWaterMark(n) {
        if (n >= MAX_HWM) {
          n = MAX_HWM;
        } else {
          n--;
          n |= n >>> 1;
          n |= n >>> 2;
          n |= n >>> 4;
          n |= n >>> 8;
          n |= n >>> 16;
          n++;
        }
        return n;
      }
      function howMuchToRead(n, state) {
        if (n <= 0 || state.length === 0 && state.ended)
          return 0;
        if (state.objectMode)
          return 1;
        if (n !== n) {
          if (state.flowing && state.length)
            return state.buffer.head.data.length;
          else
            return state.length;
        }
        if (n > state.highWaterMark)
          state.highWaterMark = computeNewHighWaterMark(n);
        if (n <= state.length)
          return n;
        if (!state.ended) {
          state.needReadable = true;
          return 0;
        }
        return state.length;
      }
      Readable6.prototype.read = function(n) {
        debug2("read", n);
        n = parseInt(n, 10);
        var state = this._readableState;
        var nOrig = n;
        if (n !== 0)
          state.emittedReadable = false;
        if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
          debug2("read: emitReadable", state.length, state.ended);
          if (state.length === 0 && state.ended)
            endReadable(this);
          else
            emitReadable(this);
          return null;
        }
        n = howMuchToRead(n, state);
        if (n === 0 && state.ended) {
          if (state.length === 0)
            endReadable(this);
          return null;
        }
        var doRead = state.needReadable;
        debug2("need readable", doRead);
        if (state.length === 0 || state.length - n < state.highWaterMark) {
          doRead = true;
          debug2("length less than watermark", doRead);
        }
        if (state.ended || state.reading) {
          doRead = false;
          debug2("reading or ended", doRead);
        } else if (doRead) {
          debug2("do read");
          state.reading = true;
          state.sync = true;
          if (state.length === 0)
            state.needReadable = true;
          this._read(state.highWaterMark);
          state.sync = false;
          if (!state.reading)
            n = howMuchToRead(nOrig, state);
        }
        var ret;
        if (n > 0)
          ret = fromList(n, state);
        else
          ret = null;
        if (ret === null) {
          state.needReadable = state.length <= state.highWaterMark;
          n = 0;
        } else {
          state.length -= n;
          state.awaitDrain = 0;
        }
        if (state.length === 0) {
          if (!state.ended)
            state.needReadable = true;
          if (nOrig !== n && state.ended)
            endReadable(this);
        }
        if (ret !== null)
          this.emit("data", ret);
        return ret;
      };
      function onEofChunk(stream, state) {
        debug2("onEofChunk");
        if (state.ended)
          return;
        if (state.decoder) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
          }
        }
        state.ended = true;
        if (state.sync) {
          emitReadable(stream);
        } else {
          state.needReadable = false;
          if (!state.emittedReadable) {
            state.emittedReadable = true;
            emitReadable_(stream);
          }
        }
      }
      function emitReadable(stream) {
        var state = stream._readableState;
        debug2("emitReadable", state.needReadable, state.emittedReadable);
        state.needReadable = false;
        if (!state.emittedReadable) {
          debug2("emitReadable", state.flowing);
          state.emittedReadable = true;
          process.nextTick(emitReadable_, stream);
        }
      }
      function emitReadable_(stream) {
        var state = stream._readableState;
        debug2("emitReadable_", state.destroyed, state.length, state.ended);
        if (!state.destroyed && (state.length || state.ended)) {
          stream.emit("readable");
          state.emittedReadable = false;
        }
        state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
        flow(stream);
      }
      function maybeReadMore(stream, state) {
        if (!state.readingMore) {
          state.readingMore = true;
          process.nextTick(maybeReadMore_, stream, state);
        }
      }
      function maybeReadMore_(stream, state) {
        while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
          var len = state.length;
          debug2("maybeReadMore read 0");
          stream.read(0);
          if (len === state.length)
            break;
        }
        state.readingMore = false;
      }
      Readable6.prototype._read = function(n) {
        errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
      };
      Readable6.prototype.pipe = function(dest, pipeOpts) {
        var src = this;
        var state = this._readableState;
        switch (state.pipesCount) {
          case 0:
            state.pipes = dest;
            break;
          case 1:
            state.pipes = [state.pipes, dest];
            break;
          default:
            state.pipes.push(dest);
            break;
        }
        state.pipesCount += 1;
        debug2("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
        var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
        var endFn = doEnd ? onend : unpipe;
        if (state.endEmitted)
          process.nextTick(endFn);
        else
          src.once("end", endFn);
        dest.on("unpipe", onunpipe);
        function onunpipe(readable, unpipeInfo) {
          debug2("onunpipe");
          if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
              unpipeInfo.hasUnpiped = true;
              cleanup();
            }
          }
        }
        function onend() {
          debug2("onend");
          dest.end();
        }
        var ondrain = pipeOnDrain(src);
        dest.on("drain", ondrain);
        var cleanedUp = false;
        function cleanup() {
          debug2("cleanup");
          dest.removeListener("close", onclose);
          dest.removeListener("finish", onfinish);
          dest.removeListener("drain", ondrain);
          dest.removeListener("error", onerror);
          dest.removeListener("unpipe", onunpipe);
          src.removeListener("end", onend);
          src.removeListener("end", unpipe);
          src.removeListener("data", ondata);
          cleanedUp = true;
          if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
            ondrain();
        }
        src.on("data", ondata);
        function ondata(chunk) {
          debug2("ondata");
          var ret = dest.write(chunk);
          debug2("dest.write", ret);
          if (ret === false) {
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
              debug2("false write response, pause", state.awaitDrain);
              state.awaitDrain++;
            }
            src.pause();
          }
        }
        function onerror(er) {
          debug2("onerror", er);
          unpipe();
          dest.removeListener("error", onerror);
          if (EElistenerCount(dest, "error") === 0)
            errorOrDestroy(dest, er);
        }
        prependListener(dest, "error", onerror);
        function onclose() {
          dest.removeListener("finish", onfinish);
          unpipe();
        }
        dest.once("close", onclose);
        function onfinish() {
          debug2("onfinish");
          dest.removeListener("close", onclose);
          unpipe();
        }
        dest.once("finish", onfinish);
        function unpipe() {
          debug2("unpipe");
          src.unpipe(dest);
        }
        dest.emit("pipe", src);
        if (!state.flowing) {
          debug2("pipe resume");
          src.resume();
        }
        return dest;
      };
      function pipeOnDrain(src) {
        return function pipeOnDrainFunctionResult() {
          var state = src._readableState;
          debug2("pipeOnDrain", state.awaitDrain);
          if (state.awaitDrain)
            state.awaitDrain--;
          if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
            state.flowing = true;
            flow(src);
          }
        };
      }
      Readable6.prototype.unpipe = function(dest) {
        var state = this._readableState;
        var unpipeInfo = {
          hasUnpiped: false
        };
        if (state.pipesCount === 0)
          return this;
        if (state.pipesCount === 1) {
          if (dest && dest !== state.pipes)
            return this;
          if (!dest)
            dest = state.pipes;
          state.pipes = null;
          state.pipesCount = 0;
          state.flowing = false;
          if (dest)
            dest.emit("unpipe", this, unpipeInfo);
          return this;
        }
        if (!dest) {
          var dests = state.pipes;
          var len = state.pipesCount;
          state.pipes = null;
          state.pipesCount = 0;
          state.flowing = false;
          for (var i = 0; i < len; i++) {
            dests[i].emit("unpipe", this, {
              hasUnpiped: false
            });
          }
          return this;
        }
        var index = indexOf(state.pipes, dest);
        if (index === -1)
          return this;
        state.pipes.splice(index, 1);
        state.pipesCount -= 1;
        if (state.pipesCount === 1)
          state.pipes = state.pipes[0];
        dest.emit("unpipe", this, unpipeInfo);
        return this;
      };
      Readable6.prototype.on = function(ev, fn) {
        var res = Stream.prototype.on.call(this, ev, fn);
        var state = this._readableState;
        if (ev === "data") {
          state.readableListening = this.listenerCount("readable") > 0;
          if (state.flowing !== false)
            this.resume();
        } else if (ev === "readable") {
          if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            debug2("on readable", state.length, state.reading);
            if (state.length) {
              emitReadable(this);
            } else if (!state.reading) {
              process.nextTick(nReadingNextTick, this);
            }
          }
        }
        return res;
      };
      Readable6.prototype.addListener = Readable6.prototype.on;
      Readable6.prototype.removeListener = function(ev, fn) {
        var res = Stream.prototype.removeListener.call(this, ev, fn);
        if (ev === "readable") {
          process.nextTick(updateReadableListening, this);
        }
        return res;
      };
      Readable6.prototype.removeAllListeners = function(ev) {
        var res = Stream.prototype.removeAllListeners.apply(this, arguments);
        if (ev === "readable" || ev === void 0) {
          process.nextTick(updateReadableListening, this);
        }
        return res;
      };
      function updateReadableListening(self2) {
        var state = self2._readableState;
        state.readableListening = self2.listenerCount("readable") > 0;
        if (state.resumeScheduled && !state.paused) {
          state.flowing = true;
        } else if (self2.listenerCount("data") > 0) {
          self2.resume();
        }
      }
      function nReadingNextTick(self2) {
        debug2("readable nexttick read 0");
        self2.read(0);
      }
      Readable6.prototype.resume = function() {
        var state = this._readableState;
        if (!state.flowing) {
          debug2("resume");
          state.flowing = !state.readableListening;
          resume(this, state);
        }
        state.paused = false;
        return this;
      };
      function resume(stream, state) {
        if (!state.resumeScheduled) {
          state.resumeScheduled = true;
          process.nextTick(resume_, stream, state);
        }
      }
      function resume_(stream, state) {
        debug2("resume", state.reading);
        if (!state.reading) {
          stream.read(0);
        }
        state.resumeScheduled = false;
        stream.emit("resume");
        flow(stream);
        if (state.flowing && !state.reading)
          stream.read(0);
      }
      Readable6.prototype.pause = function() {
        debug2("call pause flowing=%j", this._readableState.flowing);
        if (this._readableState.flowing !== false) {
          debug2("pause");
          this._readableState.flowing = false;
          this.emit("pause");
        }
        this._readableState.paused = true;
        return this;
      };
      function flow(stream) {
        var state = stream._readableState;
        debug2("flow", state.flowing);
        while (state.flowing && stream.read() !== null) {
          ;
        }
      }
      Readable6.prototype.wrap = function(stream) {
        var _this = this;
        var state = this._readableState;
        var paused = false;
        stream.on("end", function() {
          debug2("wrapped end");
          if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length)
              _this.push(chunk);
          }
          _this.push(null);
        });
        stream.on("data", function(chunk) {
          debug2("wrapped data");
          if (state.decoder)
            chunk = state.decoder.write(chunk);
          if (state.objectMode && (chunk === null || chunk === void 0))
            return;
          else if (!state.objectMode && (!chunk || !chunk.length))
            return;
          var ret = _this.push(chunk);
          if (!ret) {
            paused = true;
            stream.pause();
          }
        });
        for (var i in stream) {
          if (this[i] === void 0 && typeof stream[i] === "function") {
            this[i] = function methodWrap(method) {
              return function methodWrapReturnFunction() {
                return stream[method].apply(stream, arguments);
              };
            }(i);
          }
        }
        for (var n = 0; n < kProxyEvents.length; n++) {
          stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
        }
        this._read = function(n2) {
          debug2("wrapped _read", n2);
          if (paused) {
            paused = false;
            stream.resume();
          }
        };
        return this;
      };
      if (typeof Symbol === "function") {
        Readable6.prototype[Symbol.asyncIterator] = function() {
          if (createReadableStreamAsyncIterator === void 0) {
            createReadableStreamAsyncIterator = require_async_iterator();
          }
          return createReadableStreamAsyncIterator(this);
        };
      }
      Object.defineProperty(Readable6.prototype, "readableHighWaterMark", {
        enumerable: false,
        get: function get3() {
          return this._readableState.highWaterMark;
        }
      });
      Object.defineProperty(Readable6.prototype, "readableBuffer", {
        enumerable: false,
        get: function get3() {
          return this._readableState && this._readableState.buffer;
        }
      });
      Object.defineProperty(Readable6.prototype, "readableFlowing", {
        enumerable: false,
        get: function get3() {
          return this._readableState.flowing;
        },
        set: function set(state) {
          if (this._readableState) {
            this._readableState.flowing = state;
          }
        }
      });
      Readable6._fromList = fromList;
      Object.defineProperty(Readable6.prototype, "readableLength", {
        enumerable: false,
        get: function get3() {
          return this._readableState.length;
        }
      });
      function fromList(n, state) {
        if (state.length === 0)
          return null;
        var ret;
        if (state.objectMode)
          ret = state.buffer.shift();
        else if (!n || n >= state.length) {
          if (state.decoder)
            ret = state.buffer.join("");
          else if (state.buffer.length === 1)
            ret = state.buffer.first();
          else
            ret = state.buffer.concat(state.length);
          state.buffer.clear();
        } else {
          ret = state.buffer.consume(n, state.decoder);
        }
        return ret;
      }
      function endReadable(stream) {
        var state = stream._readableState;
        debug2("endReadable", state.endEmitted);
        if (!state.endEmitted) {
          state.ended = true;
          process.nextTick(endReadableNT, state, stream);
        }
      }
      function endReadableNT(state, stream) {
        debug2("endReadableNT", state.endEmitted, state.length);
        if (!state.endEmitted && state.length === 0) {
          state.endEmitted = true;
          stream.readable = false;
          stream.emit("end");
          if (state.autoDestroy) {
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) {
              stream.destroy();
            }
          }
        }
      }
      if (typeof Symbol === "function") {
        Readable6.from = function(iterable, opts) {
          if (from === void 0) {
            from = require_from();
          }
          return from(Readable6, iterable, opts);
        };
      }
      function indexOf(xs, x) {
        for (var i = 0, l = xs.length; i < l; i++) {
          if (xs[i] === x)
            return i;
        }
        return -1;
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/readable-stream-npm-3.6.0-23a4a5eb56-d4ea81502d.zip/node_modules/readable-stream/lib/_stream_transform.js
  var require_stream_transform = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/readable-stream-npm-3.6.0-23a4a5eb56-d4ea81502d.zip/node_modules/readable-stream/lib/_stream_transform.js"(exports, module) {
      "use strict";
      module.exports = Transform3;
      var _require$codes = require_errors2().codes;
      var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
      var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
      var ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING;
      var ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
      var Duplex = require_stream_duplex();
      require_inherits()(Transform3, Duplex);
      function afterTransform(er, data) {
        var ts = this._transformState;
        ts.transforming = false;
        var cb = ts.writecb;
        if (cb === null) {
          return this.emit("error", new ERR_MULTIPLE_CALLBACK());
        }
        ts.writechunk = null;
        ts.writecb = null;
        if (data != null)
          this.push(data);
        cb(er);
        var rs = this._readableState;
        rs.reading = false;
        if (rs.needReadable || rs.length < rs.highWaterMark) {
          this._read(rs.highWaterMark);
        }
      }
      function Transform3(options) {
        if (!(this instanceof Transform3))
          return new Transform3(options);
        Duplex.call(this, options);
        this._transformState = {
          afterTransform: afterTransform.bind(this),
          needTransform: false,
          transforming: false,
          writecb: null,
          writechunk: null,
          writeencoding: null
        };
        this._readableState.needReadable = true;
        this._readableState.sync = false;
        if (options) {
          if (typeof options.transform === "function")
            this._transform = options.transform;
          if (typeof options.flush === "function")
            this._flush = options.flush;
        }
        this.on("prefinish", prefinish);
      }
      function prefinish() {
        var _this = this;
        if (typeof this._flush === "function" && !this._readableState.destroyed) {
          this._flush(function(er, data) {
            done(_this, er, data);
          });
        } else {
          done(this, null, null);
        }
      }
      Transform3.prototype.push = function(chunk, encoding) {
        this._transformState.needTransform = false;
        return Duplex.prototype.push.call(this, chunk, encoding);
      };
      Transform3.prototype._transform = function(chunk, encoding, cb) {
        cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
      };
      Transform3.prototype._write = function(chunk, encoding, cb) {
        var ts = this._transformState;
        ts.writecb = cb;
        ts.writechunk = chunk;
        ts.writeencoding = encoding;
        if (!ts.transforming) {
          var rs = this._readableState;
          if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
            this._read(rs.highWaterMark);
        }
      };
      Transform3.prototype._read = function(n) {
        var ts = this._transformState;
        if (ts.writechunk !== null && !ts.transforming) {
          ts.transforming = true;
          this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
        } else {
          ts.needTransform = true;
        }
      };
      Transform3.prototype._destroy = function(err, cb) {
        Duplex.prototype._destroy.call(this, err, function(err2) {
          cb(err2);
        });
      };
      function done(stream, er, data) {
        if (er)
          return stream.emit("error", er);
        if (data != null)
          stream.push(data);
        if (stream._writableState.length)
          throw new ERR_TRANSFORM_WITH_LENGTH_0();
        if (stream._transformState.transforming)
          throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
        return stream.push(null);
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/readable-stream-npm-3.6.0-23a4a5eb56-d4ea81502d.zip/node_modules/readable-stream/lib/_stream_passthrough.js
  var require_stream_passthrough = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/readable-stream-npm-3.6.0-23a4a5eb56-d4ea81502d.zip/node_modules/readable-stream/lib/_stream_passthrough.js"(exports, module) {
      "use strict";
      module.exports = PassThrough8;
      var Transform3 = require_stream_transform();
      require_inherits()(PassThrough8, Transform3);
      function PassThrough8(options) {
        if (!(this instanceof PassThrough8))
          return new PassThrough8(options);
        Transform3.call(this, options);
      }
      PassThrough8.prototype._transform = function(chunk, encoding, cb) {
        cb(null, chunk);
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/readable-stream-npm-3.6.0-23a4a5eb56-d4ea81502d.zip/node_modules/readable-stream/lib/internal/streams/pipeline.js
  var require_pipeline = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/readable-stream-npm-3.6.0-23a4a5eb56-d4ea81502d.zip/node_modules/readable-stream/lib/internal/streams/pipeline.js"(exports, module) {
      "use strict";
      var eos;
      function once(callback) {
        var called = false;
        return function() {
          if (called)
            return;
          called = true;
          callback.apply(void 0, arguments);
        };
      }
      var _require$codes = require_errors2().codes;
      var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
      var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
      function noop(err) {
        if (err)
          throw err;
      }
      function isRequest(stream) {
        return stream.setHeader && typeof stream.abort === "function";
      }
      function destroyer(stream, reading, writing, callback) {
        callback = once(callback);
        var closed = false;
        stream.on("close", function() {
          closed = true;
        });
        if (eos === void 0)
          eos = require_end_of_stream2();
        eos(stream, {
          readable: reading,
          writable: writing
        }, function(err) {
          if (err)
            return callback(err);
          closed = true;
          callback();
        });
        var destroyed = false;
        return function(err) {
          if (closed)
            return;
          if (destroyed)
            return;
          destroyed = true;
          if (isRequest(stream))
            return stream.abort();
          if (typeof stream.destroy === "function")
            return stream.destroy();
          callback(err || new ERR_STREAM_DESTROYED("pipe"));
        };
      }
      function call(fn) {
        fn();
      }
      function pipe(from, to) {
        return from.pipe(to);
      }
      function popCallback(streams) {
        if (!streams.length)
          return noop;
        if (typeof streams[streams.length - 1] !== "function")
          return noop;
        return streams.pop();
      }
      function pipeline() {
        for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
          streams[_key] = arguments[_key];
        }
        var callback = popCallback(streams);
        if (Array.isArray(streams[0]))
          streams = streams[0];
        if (streams.length < 2) {
          throw new ERR_MISSING_ARGS("streams");
        }
        var error;
        var destroys = streams.map(function(stream, i) {
          var reading = i < streams.length - 1;
          var writing = i > 0;
          return destroyer(stream, reading, writing, function(err) {
            if (!error)
              error = err;
            if (err)
              destroys.forEach(call);
            if (reading)
              return;
            destroys.forEach(call);
            callback(error);
          });
        });
        return streams.reduce(pipe);
      }
      module.exports = pipeline;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/readable-stream-npm-3.6.0-23a4a5eb56-d4ea81502d.zip/node_modules/readable-stream/readable.js
  var require_readable = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/readable-stream-npm-3.6.0-23a4a5eb56-d4ea81502d.zip/node_modules/readable-stream/readable.js"(exports, module) {
      var Stream = require("stream");
      if (process.env.READABLE_STREAM === "disable" && Stream) {
        module.exports = Stream.Readable;
        Object.assign(module.exports, Stream);
        module.exports.Stream = Stream;
      } else {
        exports = module.exports = require_stream_readable();
        exports.Stream = Stream || exports;
        exports.Readable = exports;
        exports.Writable = require_stream_writable();
        exports.Duplex = require_stream_duplex();
        exports.Transform = require_stream_transform();
        exports.PassThrough = require_stream_passthrough();
        exports.finished = require_end_of_stream2();
        exports.pipeline = require_pipeline();
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/bl-npm-4.1.0-7f94cdcf3f-9e8521fa7e.zip/node_modules/bl/BufferList.js
  var require_BufferList = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/bl-npm-4.1.0-7f94cdcf3f-9e8521fa7e.zip/node_modules/bl/BufferList.js"(exports, module) {
      "use strict";
      var {Buffer: Buffer2} = require("buffer");
      var symbol = Symbol.for("BufferList");
      function BufferList(buf) {
        if (!(this instanceof BufferList)) {
          return new BufferList(buf);
        }
        BufferList._init.call(this, buf);
      }
      BufferList._init = function _init(buf) {
        Object.defineProperty(this, symbol, {value: true});
        this._bufs = [];
        this.length = 0;
        if (buf) {
          this.append(buf);
        }
      };
      BufferList.prototype._new = function _new(buf) {
        return new BufferList(buf);
      };
      BufferList.prototype._offset = function _offset(offset) {
        if (offset === 0) {
          return [0, 0];
        }
        let tot = 0;
        for (let i = 0; i < this._bufs.length; i++) {
          const _t = tot + this._bufs[i].length;
          if (offset < _t || i === this._bufs.length - 1) {
            return [i, offset - tot];
          }
          tot = _t;
        }
      };
      BufferList.prototype._reverseOffset = function(blOffset) {
        const bufferId = blOffset[0];
        let offset = blOffset[1];
        for (let i = 0; i < bufferId; i++) {
          offset += this._bufs[i].length;
        }
        return offset;
      };
      BufferList.prototype.get = function get3(index) {
        if (index > this.length || index < 0) {
          return void 0;
        }
        const offset = this._offset(index);
        return this._bufs[offset[0]][offset[1]];
      };
      BufferList.prototype.slice = function slice(start2, end) {
        if (typeof start2 === "number" && start2 < 0) {
          start2 += this.length;
        }
        if (typeof end === "number" && end < 0) {
          end += this.length;
        }
        return this.copy(null, 0, start2, end);
      };
      BufferList.prototype.copy = function copy(dst, dstStart, srcStart, srcEnd) {
        if (typeof srcStart !== "number" || srcStart < 0) {
          srcStart = 0;
        }
        if (typeof srcEnd !== "number" || srcEnd > this.length) {
          srcEnd = this.length;
        }
        if (srcStart >= this.length) {
          return dst || Buffer2.alloc(0);
        }
        if (srcEnd <= 0) {
          return dst || Buffer2.alloc(0);
        }
        const copy2 = !!dst;
        const off = this._offset(srcStart);
        const len = srcEnd - srcStart;
        let bytes = len;
        let bufoff = copy2 && dstStart || 0;
        let start2 = off[1];
        if (srcStart === 0 && srcEnd === this.length) {
          if (!copy2) {
            return this._bufs.length === 1 ? this._bufs[0] : Buffer2.concat(this._bufs, this.length);
          }
          for (let i = 0; i < this._bufs.length; i++) {
            this._bufs[i].copy(dst, bufoff);
            bufoff += this._bufs[i].length;
          }
          return dst;
        }
        if (bytes <= this._bufs[off[0]].length - start2) {
          return copy2 ? this._bufs[off[0]].copy(dst, dstStart, start2, start2 + bytes) : this._bufs[off[0]].slice(start2, start2 + bytes);
        }
        if (!copy2) {
          dst = Buffer2.allocUnsafe(len);
        }
        for (let i = off[0]; i < this._bufs.length; i++) {
          const l = this._bufs[i].length - start2;
          if (bytes > l) {
            this._bufs[i].copy(dst, bufoff, start2);
            bufoff += l;
          } else {
            this._bufs[i].copy(dst, bufoff, start2, start2 + bytes);
            bufoff += l;
            break;
          }
          bytes -= l;
          if (start2) {
            start2 = 0;
          }
        }
        if (dst.length > bufoff)
          return dst.slice(0, bufoff);
        return dst;
      };
      BufferList.prototype.shallowSlice = function shallowSlice(start2, end) {
        start2 = start2 || 0;
        end = typeof end !== "number" ? this.length : end;
        if (start2 < 0) {
          start2 += this.length;
        }
        if (end < 0) {
          end += this.length;
        }
        if (start2 === end) {
          return this._new();
        }
        const startOffset = this._offset(start2);
        const endOffset = this._offset(end);
        const buffers = this._bufs.slice(startOffset[0], endOffset[0] + 1);
        if (endOffset[1] === 0) {
          buffers.pop();
        } else {
          buffers[buffers.length - 1] = buffers[buffers.length - 1].slice(0, endOffset[1]);
        }
        if (startOffset[1] !== 0) {
          buffers[0] = buffers[0].slice(startOffset[1]);
        }
        return this._new(buffers);
      };
      BufferList.prototype.toString = function toString(encoding, start2, end) {
        return this.slice(start2, end).toString(encoding);
      };
      BufferList.prototype.consume = function consume(bytes) {
        bytes = Math.trunc(bytes);
        if (Number.isNaN(bytes) || bytes <= 0)
          return this;
        while (this._bufs.length) {
          if (bytes >= this._bufs[0].length) {
            bytes -= this._bufs[0].length;
            this.length -= this._bufs[0].length;
            this._bufs.shift();
          } else {
            this._bufs[0] = this._bufs[0].slice(bytes);
            this.length -= bytes;
            break;
          }
        }
        return this;
      };
      BufferList.prototype.duplicate = function duplicate() {
        const copy = this._new();
        for (let i = 0; i < this._bufs.length; i++) {
          copy.append(this._bufs[i]);
        }
        return copy;
      };
      BufferList.prototype.append = function append(buf) {
        if (buf == null) {
          return this;
        }
        if (buf.buffer) {
          this._appendBuffer(Buffer2.from(buf.buffer, buf.byteOffset, buf.byteLength));
        } else if (Array.isArray(buf)) {
          for (let i = 0; i < buf.length; i++) {
            this.append(buf[i]);
          }
        } else if (this._isBufferList(buf)) {
          for (let i = 0; i < buf._bufs.length; i++) {
            this.append(buf._bufs[i]);
          }
        } else {
          if (typeof buf === "number") {
            buf = buf.toString();
          }
          this._appendBuffer(Buffer2.from(buf));
        }
        return this;
      };
      BufferList.prototype._appendBuffer = function appendBuffer(buf) {
        this._bufs.push(buf);
        this.length += buf.length;
      };
      BufferList.prototype.indexOf = function(search, offset, encoding) {
        if (encoding === void 0 && typeof offset === "string") {
          encoding = offset;
          offset = void 0;
        }
        if (typeof search === "function" || Array.isArray(search)) {
          throw new TypeError('The "value" argument must be one of type string, Buffer, BufferList, or Uint8Array.');
        } else if (typeof search === "number") {
          search = Buffer2.from([search]);
        } else if (typeof search === "string") {
          search = Buffer2.from(search, encoding);
        } else if (this._isBufferList(search)) {
          search = search.slice();
        } else if (Array.isArray(search.buffer)) {
          search = Buffer2.from(search.buffer, search.byteOffset, search.byteLength);
        } else if (!Buffer2.isBuffer(search)) {
          search = Buffer2.from(search);
        }
        offset = Number(offset || 0);
        if (isNaN(offset)) {
          offset = 0;
        }
        if (offset < 0) {
          offset = this.length + offset;
        }
        if (offset < 0) {
          offset = 0;
        }
        if (search.length === 0) {
          return offset > this.length ? this.length : offset;
        }
        const blOffset = this._offset(offset);
        let blIndex = blOffset[0];
        let buffOffset = blOffset[1];
        for (; blIndex < this._bufs.length; blIndex++) {
          const buff = this._bufs[blIndex];
          while (buffOffset < buff.length) {
            const availableWindow = buff.length - buffOffset;
            if (availableWindow >= search.length) {
              const nativeSearchResult = buff.indexOf(search, buffOffset);
              if (nativeSearchResult !== -1) {
                return this._reverseOffset([blIndex, nativeSearchResult]);
              }
              buffOffset = buff.length - search.length + 1;
            } else {
              const revOffset = this._reverseOffset([blIndex, buffOffset]);
              if (this._match(revOffset, search)) {
                return revOffset;
              }
              buffOffset++;
            }
          }
          buffOffset = 0;
        }
        return -1;
      };
      BufferList.prototype._match = function(offset, search) {
        if (this.length - offset < search.length) {
          return false;
        }
        for (let searchOffset = 0; searchOffset < search.length; searchOffset++) {
          if (this.get(offset + searchOffset) !== search[searchOffset]) {
            return false;
          }
        }
        return true;
      };
      (function() {
        const methods = {
          readDoubleBE: 8,
          readDoubleLE: 8,
          readFloatBE: 4,
          readFloatLE: 4,
          readInt32BE: 4,
          readInt32LE: 4,
          readUInt32BE: 4,
          readUInt32LE: 4,
          readInt16BE: 2,
          readInt16LE: 2,
          readUInt16BE: 2,
          readUInt16LE: 2,
          readInt8: 1,
          readUInt8: 1,
          readIntBE: null,
          readIntLE: null,
          readUIntBE: null,
          readUIntLE: null
        };
        for (const m in methods) {
          (function(m2) {
            if (methods[m2] === null) {
              BufferList.prototype[m2] = function(offset, byteLength) {
                return this.slice(offset, offset + byteLength)[m2](0, byteLength);
              };
            } else {
              BufferList.prototype[m2] = function(offset = 0) {
                return this.slice(offset, offset + methods[m2])[m2](0);
              };
            }
          })(m);
        }
      })();
      BufferList.prototype._isBufferList = function _isBufferList(b) {
        return b instanceof BufferList || BufferList.isBufferList(b);
      };
      BufferList.isBufferList = function isBufferList(b) {
        return b != null && b[symbol];
      };
      module.exports = BufferList;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/bl-npm-4.1.0-7f94cdcf3f-9e8521fa7e.zip/node_modules/bl/bl.js
  var require_bl = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/bl-npm-4.1.0-7f94cdcf3f-9e8521fa7e.zip/node_modules/bl/bl.js"(exports, module) {
      "use strict";
      var DuplexStream = require_readable().Duplex;
      var inherits = require_inherits();
      var BufferList = require_BufferList();
      function BufferListStream(callback) {
        if (!(this instanceof BufferListStream)) {
          return new BufferListStream(callback);
        }
        if (typeof callback === "function") {
          this._callback = callback;
          const piper = function piper2(err) {
            if (this._callback) {
              this._callback(err);
              this._callback = null;
            }
          }.bind(this);
          this.on("pipe", function onPipe(src) {
            src.on("error", piper);
          });
          this.on("unpipe", function onUnpipe(src) {
            src.removeListener("error", piper);
          });
          callback = null;
        }
        BufferList._init.call(this, callback);
        DuplexStream.call(this);
      }
      inherits(BufferListStream, DuplexStream);
      Object.assign(BufferListStream.prototype, BufferList.prototype);
      BufferListStream.prototype._new = function _new(callback) {
        return new BufferListStream(callback);
      };
      BufferListStream.prototype._write = function _write(buf, encoding, callback) {
        this._appendBuffer(buf);
        if (typeof callback === "function") {
          callback();
        }
      };
      BufferListStream.prototype._read = function _read(size) {
        if (!this.length) {
          return this.push(null);
        }
        size = Math.min(size, this.length);
        this.push(this.slice(0, size));
        this.consume(size);
      };
      BufferListStream.prototype.end = function end(chunk) {
        DuplexStream.prototype.end.call(this, chunk);
        if (this._callback) {
          this._callback(null, this.slice());
          this._callback = null;
        }
      };
      BufferListStream.prototype._destroy = function _destroy(err, cb) {
        this._bufs.length = 0;
        this.length = 0;
        cb(err);
      };
      BufferListStream.prototype._isBufferList = function _isBufferList(b) {
        return b instanceof BufferListStream || b instanceof BufferList || BufferListStream.isBufferList(b);
      };
      BufferListStream.isBufferList = BufferList.isBufferList;
      module.exports = BufferListStream;
      module.exports.BufferListStream = BufferListStream;
      module.exports.BufferList = BufferList;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-stream-npm-2.2.0-884c79b510-699831a8b9.zip/node_modules/tar-stream/headers.js
  var require_headers = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-stream-npm-2.2.0-884c79b510-699831a8b9.zip/node_modules/tar-stream/headers.js"(exports) {
      var alloc = Buffer.alloc;
      var ZEROS = "0000000000000000000";
      var SEVENS = "7777777777777777777";
      var ZERO_OFFSET = "0".charCodeAt(0);
      var USTAR_MAGIC = Buffer.from("ustar\0", "binary");
      var USTAR_VER = Buffer.from("00", "binary");
      var GNU_MAGIC = Buffer.from("ustar ", "binary");
      var GNU_VER = Buffer.from(" \0", "binary");
      var MASK = parseInt("7777", 8);
      var MAGIC_OFFSET = 257;
      var VERSION_OFFSET = 263;
      var clamp = function(index, len, defaultValue) {
        if (typeof index !== "number")
          return defaultValue;
        index = ~~index;
        if (index >= len)
          return len;
        if (index >= 0)
          return index;
        index += len;
        if (index >= 0)
          return index;
        return 0;
      };
      var toType = function(flag) {
        switch (flag) {
          case 0:
            return "file";
          case 1:
            return "link";
          case 2:
            return "symlink";
          case 3:
            return "character-device";
          case 4:
            return "block-device";
          case 5:
            return "directory";
          case 6:
            return "fifo";
          case 7:
            return "contiguous-file";
          case 72:
            return "pax-header";
          case 55:
            return "pax-global-header";
          case 27:
            return "gnu-long-link-path";
          case 28:
          case 30:
            return "gnu-long-path";
        }
        return null;
      };
      var toTypeflag = function(flag) {
        switch (flag) {
          case "file":
            return 0;
          case "link":
            return 1;
          case "symlink":
            return 2;
          case "character-device":
            return 3;
          case "block-device":
            return 4;
          case "directory":
            return 5;
          case "fifo":
            return 6;
          case "contiguous-file":
            return 7;
          case "pax-header":
            return 72;
        }
        return 0;
      };
      var indexOf = function(block, num, offset, end) {
        for (; offset < end; offset++) {
          if (block[offset] === num)
            return offset;
        }
        return end;
      };
      var cksum = function(block) {
        var sum = 8 * 32;
        for (var i = 0; i < 148; i++)
          sum += block[i];
        for (var j = 156; j < 512; j++)
          sum += block[j];
        return sum;
      };
      var encodeOct = function(val, n) {
        val = val.toString(8);
        if (val.length > n)
          return SEVENS.slice(0, n) + " ";
        else
          return ZEROS.slice(0, n - val.length) + val + " ";
      };
      function parse256(buf) {
        var positive;
        if (buf[0] === 128)
          positive = true;
        else if (buf[0] === 255)
          positive = false;
        else
          return null;
        var tuple2 = [];
        for (var i = buf.length - 1; i > 0; i--) {
          var byte = buf[i];
          if (positive)
            tuple2.push(byte);
          else
            tuple2.push(255 - byte);
        }
        var sum = 0;
        var l = tuple2.length;
        for (i = 0; i < l; i++) {
          sum += tuple2[i] * Math.pow(256, i);
        }
        return positive ? sum : -1 * sum;
      }
      var decodeOct = function(val, offset, length) {
        val = val.slice(offset, offset + length);
        offset = 0;
        if (val[offset] & 128) {
          return parse256(val);
        } else {
          while (offset < val.length && val[offset] === 32)
            offset++;
          var end = clamp(indexOf(val, 32, offset, val.length), val.length, val.length);
          while (offset < end && val[offset] === 0)
            offset++;
          if (end === offset)
            return 0;
          return parseInt(val.slice(offset, end).toString(), 8);
        }
      };
      var decodeStr = function(val, offset, length, encoding) {
        return val.slice(offset, indexOf(val, 0, offset, offset + length)).toString(encoding);
      };
      var addLength = function(str) {
        var len = Buffer.byteLength(str);
        var digits = Math.floor(Math.log(len) / Math.log(10)) + 1;
        if (len + digits >= Math.pow(10, digits))
          digits++;
        return len + digits + str;
      };
      exports.decodeLongPath = function(buf, encoding) {
        return decodeStr(buf, 0, buf.length, encoding);
      };
      exports.encodePax = function(opts) {
        var result = "";
        if (opts.name)
          result += addLength(" path=" + opts.name + "\n");
        if (opts.linkname)
          result += addLength(" linkpath=" + opts.linkname + "\n");
        var pax = opts.pax;
        if (pax) {
          for (var key in pax) {
            result += addLength(" " + key + "=" + pax[key] + "\n");
          }
        }
        return Buffer.from(result);
      };
      exports.decodePax = function(buf) {
        var result = {};
        while (buf.length) {
          var i = 0;
          while (i < buf.length && buf[i] !== 32)
            i++;
          var len = parseInt(buf.slice(0, i).toString(), 10);
          if (!len)
            return result;
          var b = buf.slice(i + 1, len - 1).toString();
          var keyIndex = b.indexOf("=");
          if (keyIndex === -1)
            return result;
          result[b.slice(0, keyIndex)] = b.slice(keyIndex + 1);
          buf = buf.slice(len);
        }
        return result;
      };
      exports.encode = function(opts) {
        var buf = alloc(512);
        var name = opts.name;
        var prefix = "";
        if (opts.typeflag === 5 && name[name.length - 1] !== "/")
          name += "/";
        if (Buffer.byteLength(name) !== name.length)
          return null;
        while (Buffer.byteLength(name) > 100) {
          var i = name.indexOf("/");
          if (i === -1)
            return null;
          prefix += prefix ? "/" + name.slice(0, i) : name.slice(0, i);
          name = name.slice(i + 1);
        }
        if (Buffer.byteLength(name) > 100 || Buffer.byteLength(prefix) > 155)
          return null;
        if (opts.linkname && Buffer.byteLength(opts.linkname) > 100)
          return null;
        buf.write(name);
        buf.write(encodeOct(opts.mode & MASK, 6), 100);
        buf.write(encodeOct(opts.uid, 6), 108);
        buf.write(encodeOct(opts.gid, 6), 116);
        buf.write(encodeOct(opts.size, 11), 124);
        buf.write(encodeOct(opts.mtime.getTime() / 1e3 | 0, 11), 136);
        buf[156] = ZERO_OFFSET + toTypeflag(opts.type);
        if (opts.linkname)
          buf.write(opts.linkname, 157);
        USTAR_MAGIC.copy(buf, MAGIC_OFFSET);
        USTAR_VER.copy(buf, VERSION_OFFSET);
        if (opts.uname)
          buf.write(opts.uname, 265);
        if (opts.gname)
          buf.write(opts.gname, 297);
        buf.write(encodeOct(opts.devmajor || 0, 6), 329);
        buf.write(encodeOct(opts.devminor || 0, 6), 337);
        if (prefix)
          buf.write(prefix, 345);
        buf.write(encodeOct(cksum(buf), 6), 148);
        return buf;
      };
      exports.decode = function(buf, filenameEncoding, allowUnknownFormat) {
        var typeflag = buf[156] === 0 ? 0 : buf[156] - ZERO_OFFSET;
        var name = decodeStr(buf, 0, 100, filenameEncoding);
        var mode = decodeOct(buf, 100, 8);
        var uid = decodeOct(buf, 108, 8);
        var gid = decodeOct(buf, 116, 8);
        var size = decodeOct(buf, 124, 12);
        var mtime = decodeOct(buf, 136, 12);
        var type = toType(typeflag);
        var linkname = buf[157] === 0 ? null : decodeStr(buf, 157, 100, filenameEncoding);
        var uname = decodeStr(buf, 265, 32);
        var gname = decodeStr(buf, 297, 32);
        var devmajor = decodeOct(buf, 329, 8);
        var devminor = decodeOct(buf, 337, 8);
        var c = cksum(buf);
        if (c === 8 * 32)
          return null;
        if (c !== decodeOct(buf, 148, 8))
          throw new Error("Invalid tar header. Maybe the tar is corrupted or it needs to be gunzipped?");
        if (USTAR_MAGIC.compare(buf, MAGIC_OFFSET, MAGIC_OFFSET + 6) === 0) {
          if (buf[345])
            name = decodeStr(buf, 345, 155, filenameEncoding) + "/" + name;
        } else if (GNU_MAGIC.compare(buf, MAGIC_OFFSET, MAGIC_OFFSET + 6) === 0 && GNU_VER.compare(buf, VERSION_OFFSET, VERSION_OFFSET + 2) === 0) {
        } else {
          if (!allowUnknownFormat) {
            throw new Error("Invalid tar header: unknown format.");
          }
        }
        if (typeflag === 0 && name && name[name.length - 1] === "/")
          typeflag = 5;
        return {
          name,
          mode,
          uid,
          gid,
          size,
          mtime: new Date(1e3 * mtime),
          type,
          linkname,
          uname,
          gname,
          devmajor,
          devminor
        };
      };
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-stream-npm-2.2.0-884c79b510-699831a8b9.zip/node_modules/tar-stream/extract.js
  var require_extract2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-stream-npm-2.2.0-884c79b510-699831a8b9.zip/node_modules/tar-stream/extract.js"(exports, module) {
      var util = require("util");
      var bl = require_bl();
      var headers = require_headers();
      var Writable5 = require_readable().Writable;
      var PassThrough8 = require_readable().PassThrough;
      var noop = function() {
      };
      var overflow = function(size) {
        size &= 511;
        return size && 512 - size;
      };
      var emptyStream = function(self2, offset) {
        var s = new Source(self2, offset);
        s.end();
        return s;
      };
      var mixinPax = function(header, pax) {
        if (pax.path)
          header.name = pax.path;
        if (pax.linkpath)
          header.linkname = pax.linkpath;
        if (pax.size)
          header.size = parseInt(pax.size, 10);
        header.pax = pax;
        return header;
      };
      var Source = function(self2, offset) {
        this._parent = self2;
        this.offset = offset;
        PassThrough8.call(this, {autoDestroy: false});
      };
      util.inherits(Source, PassThrough8);
      Source.prototype.destroy = function(err) {
        this._parent.destroy(err);
      };
      var Extract = function(opts) {
        if (!(this instanceof Extract))
          return new Extract(opts);
        Writable5.call(this, opts);
        opts = opts || {};
        this._offset = 0;
        this._buffer = bl();
        this._missing = 0;
        this._partial = false;
        this._onparse = noop;
        this._header = null;
        this._stream = null;
        this._overflow = null;
        this._cb = null;
        this._locked = false;
        this._destroyed = false;
        this._pax = null;
        this._paxGlobal = null;
        this._gnuLongPath = null;
        this._gnuLongLinkPath = null;
        var self2 = this;
        var b = self2._buffer;
        var oncontinue = function() {
          self2._continue();
        };
        var onunlock = function(err) {
          self2._locked = false;
          if (err)
            return self2.destroy(err);
          if (!self2._stream)
            oncontinue();
        };
        var onstreamend = function() {
          self2._stream = null;
          var drain = overflow(self2._header.size);
          if (drain)
            self2._parse(drain, ondrain);
          else
            self2._parse(512, onheader);
          if (!self2._locked)
            oncontinue();
        };
        var ondrain = function() {
          self2._buffer.consume(overflow(self2._header.size));
          self2._parse(512, onheader);
          oncontinue();
        };
        var onpaxglobalheader = function() {
          var size = self2._header.size;
          self2._paxGlobal = headers.decodePax(b.slice(0, size));
          b.consume(size);
          onstreamend();
        };
        var onpaxheader = function() {
          var size = self2._header.size;
          self2._pax = headers.decodePax(b.slice(0, size));
          if (self2._paxGlobal)
            self2._pax = Object.assign({}, self2._paxGlobal, self2._pax);
          b.consume(size);
          onstreamend();
        };
        var ongnulongpath = function() {
          var size = self2._header.size;
          this._gnuLongPath = headers.decodeLongPath(b.slice(0, size), opts.filenameEncoding);
          b.consume(size);
          onstreamend();
        };
        var ongnulonglinkpath = function() {
          var size = self2._header.size;
          this._gnuLongLinkPath = headers.decodeLongPath(b.slice(0, size), opts.filenameEncoding);
          b.consume(size);
          onstreamend();
        };
        var onheader = function() {
          var offset = self2._offset;
          var header;
          try {
            header = self2._header = headers.decode(b.slice(0, 512), opts.filenameEncoding, opts.allowUnknownFormat);
          } catch (err) {
            self2.emit("error", err);
          }
          b.consume(512);
          if (!header) {
            self2._parse(512, onheader);
            oncontinue();
            return;
          }
          if (header.type === "gnu-long-path") {
            self2._parse(header.size, ongnulongpath);
            oncontinue();
            return;
          }
          if (header.type === "gnu-long-link-path") {
            self2._parse(header.size, ongnulonglinkpath);
            oncontinue();
            return;
          }
          if (header.type === "pax-global-header") {
            self2._parse(header.size, onpaxglobalheader);
            oncontinue();
            return;
          }
          if (header.type === "pax-header") {
            self2._parse(header.size, onpaxheader);
            oncontinue();
            return;
          }
          if (self2._gnuLongPath) {
            header.name = self2._gnuLongPath;
            self2._gnuLongPath = null;
          }
          if (self2._gnuLongLinkPath) {
            header.linkname = self2._gnuLongLinkPath;
            self2._gnuLongLinkPath = null;
          }
          if (self2._pax) {
            self2._header = header = mixinPax(header, self2._pax);
            self2._pax = null;
          }
          self2._locked = true;
          if (!header.size || header.type === "directory") {
            self2._parse(512, onheader);
            self2.emit("entry", header, emptyStream(self2, offset), onunlock);
            return;
          }
          self2._stream = new Source(self2, offset);
          self2.emit("entry", header, self2._stream, onunlock);
          self2._parse(header.size, onstreamend);
          oncontinue();
        };
        this._onheader = onheader;
        this._parse(512, onheader);
      };
      util.inherits(Extract, Writable5);
      Extract.prototype.destroy = function(err) {
        if (this._destroyed)
          return;
        this._destroyed = true;
        if (err)
          this.emit("error", err);
        this.emit("close");
        if (this._stream)
          this._stream.emit("close");
      };
      Extract.prototype._parse = function(size, onparse) {
        if (this._destroyed)
          return;
        this._offset += size;
        this._missing = size;
        if (onparse === this._onheader)
          this._partial = false;
        this._onparse = onparse;
      };
      Extract.prototype._continue = function() {
        if (this._destroyed)
          return;
        var cb = this._cb;
        this._cb = noop;
        if (this._overflow)
          this._write(this._overflow, void 0, cb);
        else
          cb();
      };
      Extract.prototype._write = function(data, enc, cb) {
        if (this._destroyed)
          return;
        var s = this._stream;
        var b = this._buffer;
        var missing = this._missing;
        if (data.length)
          this._partial = true;
        if (data.length < missing) {
          this._missing -= data.length;
          this._overflow = null;
          if (s)
            return s.write(data, cb);
          b.append(data);
          return cb();
        }
        this._cb = cb;
        this._missing = 0;
        var overflow2 = null;
        if (data.length > missing) {
          overflow2 = data.slice(missing);
          data = data.slice(0, missing);
        }
        if (s)
          s.end(data);
        else
          b.append(data);
        this._overflow = overflow2;
        this._onparse();
      };
      Extract.prototype._final = function(cb) {
        if (this._partial)
          return this.destroy(new Error("Unexpected end of data"));
        cb();
      };
      module.exports = Extract;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fs-constants-npm-1.0.0-59576b2177-18f5b71837.zip/node_modules/fs-constants/index.js
  var require_fs_constants = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/fs-constants-npm-1.0.0-59576b2177-18f5b71837.zip/node_modules/fs-constants/index.js"(exports, module) {
      module.exports = require("fs").constants || require("constants");
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-stream-npm-2.2.0-884c79b510-699831a8b9.zip/node_modules/tar-stream/pack.js
  var require_pack2 = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-stream-npm-2.2.0-884c79b510-699831a8b9.zip/node_modules/tar-stream/pack.js"(exports, module) {
      var constants3 = require_fs_constants();
      var eos = require_end_of_stream();
      var inherits = require_inherits();
      var alloc = Buffer.alloc;
      var Readable6 = require_readable().Readable;
      var Writable5 = require_readable().Writable;
      var StringDecoder3 = require("string_decoder").StringDecoder;
      var headers = require_headers();
      var DMODE = parseInt("755", 8);
      var FMODE = parseInt("644", 8);
      var END_OF_TAR = alloc(1024);
      var noop = function() {
      };
      var overflow = function(self2, size) {
        size &= 511;
        if (size)
          self2.push(END_OF_TAR.slice(0, 512 - size));
      };
      function modeToType(mode) {
        switch (mode & constants3.S_IFMT) {
          case constants3.S_IFBLK:
            return "block-device";
          case constants3.S_IFCHR:
            return "character-device";
          case constants3.S_IFDIR:
            return "directory";
          case constants3.S_IFIFO:
            return "fifo";
          case constants3.S_IFLNK:
            return "symlink";
        }
        return "file";
      }
      var Sink = function(to) {
        Writable5.call(this);
        this.written = 0;
        this._to = to;
        this._destroyed = false;
      };
      inherits(Sink, Writable5);
      Sink.prototype._write = function(data, enc, cb) {
        this.written += data.length;
        if (this._to.push(data))
          return cb();
        this._to._drain = cb;
      };
      Sink.prototype.destroy = function() {
        if (this._destroyed)
          return;
        this._destroyed = true;
        this.emit("close");
      };
      var LinkSink = function() {
        Writable5.call(this);
        this.linkname = "";
        this._decoder = new StringDecoder3("utf-8");
        this._destroyed = false;
      };
      inherits(LinkSink, Writable5);
      LinkSink.prototype._write = function(data, enc, cb) {
        this.linkname += this._decoder.write(data);
        cb();
      };
      LinkSink.prototype.destroy = function() {
        if (this._destroyed)
          return;
        this._destroyed = true;
        this.emit("close");
      };
      var Void = function() {
        Writable5.call(this);
        this._destroyed = false;
      };
      inherits(Void, Writable5);
      Void.prototype._write = function(data, enc, cb) {
        cb(new Error("No body allowed for this entry"));
      };
      Void.prototype.destroy = function() {
        if (this._destroyed)
          return;
        this._destroyed = true;
        this.emit("close");
      };
      var Pack = function(opts) {
        if (!(this instanceof Pack))
          return new Pack(opts);
        Readable6.call(this, opts);
        this._drain = noop;
        this._finalized = false;
        this._finalizing = false;
        this._destroyed = false;
        this._stream = null;
      };
      inherits(Pack, Readable6);
      Pack.prototype.entry = function(header, buffer, callback) {
        if (this._stream)
          throw new Error("already piping an entry");
        if (this._finalized || this._destroyed)
          return;
        if (typeof buffer === "function") {
          callback = buffer;
          buffer = null;
        }
        if (!callback)
          callback = noop;
        var self2 = this;
        if (!header.size || header.type === "symlink")
          header.size = 0;
        if (!header.type)
          header.type = modeToType(header.mode);
        if (!header.mode)
          header.mode = header.type === "directory" ? DMODE : FMODE;
        if (!header.uid)
          header.uid = 0;
        if (!header.gid)
          header.gid = 0;
        if (!header.mtime)
          header.mtime = new Date();
        if (typeof buffer === "string")
          buffer = Buffer.from(buffer);
        if (Buffer.isBuffer(buffer)) {
          header.size = buffer.length;
          this._encode(header);
          var ok = this.push(buffer);
          overflow(self2, header.size);
          if (ok)
            process.nextTick(callback);
          else
            this._drain = callback;
          return new Void();
        }
        if (header.type === "symlink" && !header.linkname) {
          var linkSink = new LinkSink();
          eos(linkSink, function(err) {
            if (err) {
              self2.destroy();
              return callback(err);
            }
            header.linkname = linkSink.linkname;
            self2._encode(header);
            callback();
          });
          return linkSink;
        }
        this._encode(header);
        if (header.type !== "file" && header.type !== "contiguous-file") {
          process.nextTick(callback);
          return new Void();
        }
        var sink = new Sink(this);
        this._stream = sink;
        eos(sink, function(err) {
          self2._stream = null;
          if (err) {
            self2.destroy();
            return callback(err);
          }
          if (sink.written !== header.size) {
            self2.destroy();
            return callback(new Error("size mismatch"));
          }
          overflow(self2, header.size);
          if (self2._finalizing)
            self2.finalize();
          callback();
        });
        return sink;
      };
      Pack.prototype.finalize = function() {
        if (this._stream) {
          this._finalizing = true;
          return;
        }
        if (this._finalized)
          return;
        this._finalized = true;
        this.push(END_OF_TAR);
        this.push(null);
      };
      Pack.prototype.destroy = function(err) {
        if (this._destroyed)
          return;
        this._destroyed = true;
        if (err)
          this.emit("error", err);
        this.emit("close");
        if (this._stream && this._stream.destroy)
          this._stream.destroy();
      };
      Pack.prototype._encode = function(header) {
        if (!header.pax) {
          var buf = headers.encode(header);
          if (buf) {
            this.push(buf);
            return;
          }
        }
        this._encodePax(header);
      };
      Pack.prototype._encodePax = function(header) {
        var paxHeader = headers.encodePax({
          name: header.name,
          linkname: header.linkname,
          pax: header.pax
        });
        var newHeader = {
          name: "PaxHeader",
          mode: header.mode,
          uid: header.uid,
          gid: header.gid,
          size: paxHeader.length,
          mtime: header.mtime,
          type: "pax-header",
          linkname: header.linkname && "PaxHeader",
          uname: header.uname,
          gname: header.gname,
          devmajor: header.devmajor,
          devminor: header.devminor
        };
        this.push(headers.encode(newHeader));
        this.push(paxHeader);
        overflow(this, paxHeader.length);
        newHeader.size = header.size;
        newHeader.type = header.type;
        this.push(headers.encode(newHeader));
      };
      Pack.prototype._read = function(n) {
        var drain = this._drain;
        this._drain = noop;
        drain();
      };
      module.exports = Pack;
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-stream-npm-2.2.0-884c79b510-699831a8b9.zip/node_modules/tar-stream/index.js
  var require_tar_stream = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/tar-stream-npm-2.2.0-884c79b510-699831a8b9.zip/node_modules/tar-stream/index.js"(exports) {
      exports.extract = require_extract2();
      exports.pack = require_pack2();
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/figgy-pudding-npm-3.5.1-6fe250523e-9f70794631.zip/node_modules/figgy-pudding/index.js
  var require_figgy_pudding = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/figgy-pudding-npm-3.5.1-6fe250523e-9f70794631.zip/node_modules/figgy-pudding/index.js"(exports, module) {
      "use strict";
      var FiggyPudding = class {
        constructor(specs, opts, providers) {
          this.__specs = specs || {};
          Object.keys(this.__specs).forEach((alias) => {
            if (typeof this.__specs[alias] === "string") {
              const key = this.__specs[alias];
              const realSpec = this.__specs[key];
              if (realSpec) {
                const aliasArr = realSpec.aliases || [];
                aliasArr.push(alias, key);
                realSpec.aliases = [...new Set(aliasArr)];
                this.__specs[alias] = realSpec;
              } else {
                throw new Error(`Alias refers to invalid key: ${key} -> ${alias}`);
              }
            }
          });
          this.__opts = opts || {};
          this.__providers = reverse(providers.filter((x) => x != null && typeof x === "object"));
          this.__isFiggyPudding = true;
        }
        get(key) {
          return pudGet(this, key, true);
        }
        get [Symbol.toStringTag]() {
          return "FiggyPudding";
        }
        forEach(fn, thisArg = this) {
          for (let [key, value] of this.entries()) {
            fn.call(thisArg, value, key, this);
          }
        }
        toJSON() {
          const obj = {};
          this.forEach((val, key) => {
            obj[key] = val;
          });
          return obj;
        }
        *entries(_matcher) {
          for (let key of Object.keys(this.__specs)) {
            yield [key, this.get(key)];
          }
          const matcher = _matcher || this.__opts.other;
          if (matcher) {
            const seen = new Set();
            for (let p of this.__providers) {
              const iter = p.entries ? p.entries(matcher) : entries(p);
              for (let [key, val] of iter) {
                if (matcher(key) && !seen.has(key)) {
                  seen.add(key);
                  yield [key, val];
                }
              }
            }
          }
        }
        *[Symbol.iterator]() {
          for (let [key, value] of this.entries()) {
            yield [key, value];
          }
        }
        *keys() {
          for (let [key] of this.entries()) {
            yield key;
          }
        }
        *values() {
          for (let [, value] of this.entries()) {
            yield value;
          }
        }
        concat(...moreConfig) {
          return new Proxy(new FiggyPudding(this.__specs, this.__opts, reverse(this.__providers).concat(moreConfig)), proxyHandler);
        }
      };
      try {
        const util = require("util");
        FiggyPudding.prototype[util.inspect.custom] = function(depth, opts) {
          return this[Symbol.toStringTag] + " " + util.inspect(this.toJSON(), opts);
        };
      } catch (e) {
      }
      function BadKeyError(key) {
        throw Object.assign(new Error(`invalid config key requested: ${key}`), {code: "EBADKEY"});
      }
      function pudGet(pud, key, validate) {
        let spec = pud.__specs[key];
        if (validate && !spec && (!pud.__opts.other || !pud.__opts.other(key))) {
          BadKeyError(key);
        } else {
          if (!spec) {
            spec = {};
          }
          let ret;
          for (let p of pud.__providers) {
            ret = tryGet(key, p);
            if (ret === void 0 && spec.aliases && spec.aliases.length) {
              for (let alias of spec.aliases) {
                if (alias === key) {
                  continue;
                }
                ret = tryGet(alias, p);
                if (ret !== void 0) {
                  break;
                }
              }
            }
            if (ret !== void 0) {
              break;
            }
          }
          if (ret === void 0 && spec.default !== void 0) {
            if (typeof spec.default === "function") {
              return spec.default(pud);
            } else {
              return spec.default;
            }
          } else {
            return ret;
          }
        }
      }
      function tryGet(key, p) {
        let ret;
        if (p.__isFiggyPudding) {
          ret = pudGet(p, key, false);
        } else if (typeof p.get === "function") {
          ret = p.get(key);
        } else {
          ret = p[key];
        }
        return ret;
      }
      var proxyHandler = {
        has(obj, prop) {
          return prop in obj.__specs && pudGet(obj, prop, false) !== void 0;
        },
        ownKeys(obj) {
          return Object.keys(obj.__specs);
        },
        get(obj, prop) {
          if (typeof prop === "symbol" || prop.slice(0, 2) === "__" || prop in FiggyPudding.prototype) {
            return obj[prop];
          }
          return obj.get(prop);
        },
        set(obj, prop, value) {
          if (typeof prop === "symbol" || prop.slice(0, 2) === "__") {
            obj[prop] = value;
            return true;
          } else {
            throw new Error("figgyPudding options cannot be modified. Use .concat() instead.");
          }
        },
        deleteProperty() {
          throw new Error("figgyPudding options cannot be deleted. Use .concat() and shadow them instead.");
        }
      };
      module.exports = figgyPudding;
      function figgyPudding(specs, opts) {
        function factory(...providers) {
          return new Proxy(new FiggyPudding(specs, opts, providers), proxyHandler);
        }
        return factory;
      }
      function reverse(arr) {
        const ret = [];
        arr.forEach((x) => ret.unshift(x));
        return ret;
      }
      function entries(obj) {
        return Object.keys(obj).map((k) => [k, obj[k]]);
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/ssri-npm-6.0.1-a40d823fc9-9520acadfe.zip/node_modules/ssri/index.js
  var require_ssri = __commonJS({
    "pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/cache/ssri-npm-6.0.1-a40d823fc9-9520acadfe.zip/node_modules/ssri/index.js"(exports, module) {
      "use strict";
      var crypto3 = require("crypto");
      var figgyPudding = require_figgy_pudding();
      var Transform3 = require("stream").Transform;
      var SPEC_ALGORITHMS = ["sha256", "sha384", "sha512"];
      var BASE64_REGEX = /^[a-z0-9+/]+(?:=?=?)$/i;
      var SRI_REGEX = /^([^-]+)-([^?]+)([?\S*]*)$/;
      var STRICT_SRI_REGEX = /^([^-]+)-([A-Za-z0-9+/=]{44,88})(\?[\x21-\x7E]*)*$/;
      var VCHAR_REGEX = /^[\x21-\x7E]+$/;
      var SsriOpts = figgyPudding({
        algorithms: {default: ["sha512"]},
        error: {default: false},
        integrity: {},
        options: {default: []},
        pickAlgorithm: {default: () => getPrioritizedHash},
        Promise: {default: () => Promise},
        sep: {default: " "},
        single: {default: false},
        size: {},
        strict: {default: false}
      });
      var Hash = class {
        get isHash() {
          return true;
        }
        constructor(hash, opts) {
          opts = SsriOpts(opts);
          const strict = !!opts.strict;
          this.source = hash.trim();
          const match2 = this.source.match(strict ? STRICT_SRI_REGEX : SRI_REGEX);
          if (!match2) {
            return;
          }
          if (strict && !SPEC_ALGORITHMS.some((a) => a === match2[1])) {
            return;
          }
          this.algorithm = match2[1];
          this.digest = match2[2];
          const rawOpts = match2[3];
          this.options = rawOpts ? rawOpts.slice(1).split("?") : [];
        }
        hexDigest() {
          return this.digest && Buffer.from(this.digest, "base64").toString("hex");
        }
        toJSON() {
          return this.toString();
        }
        toString(opts) {
          opts = SsriOpts(opts);
          if (opts.strict) {
            if (!(SPEC_ALGORITHMS.some((x) => x === this.algorithm) && this.digest.match(BASE64_REGEX) && (this.options || []).every((opt) => opt.match(VCHAR_REGEX)))) {
              return "";
            }
          }
          const options = this.options && this.options.length ? `?${this.options.join("?")}` : "";
          return `${this.algorithm}-${this.digest}${options}`;
        }
      };
      var Integrity = class {
        get isIntegrity() {
          return true;
        }
        toJSON() {
          return this.toString();
        }
        toString(opts) {
          opts = SsriOpts(opts);
          let sep = opts.sep || " ";
          if (opts.strict) {
            sep = sep.replace(/\S+/g, " ");
          }
          return Object.keys(this).map((k) => {
            return this[k].map((hash) => {
              return Hash.prototype.toString.call(hash, opts);
            }).filter((x) => x.length).join(sep);
          }).filter((x) => x.length).join(sep);
        }
        concat(integrity, opts) {
          opts = SsriOpts(opts);
          const other = typeof integrity === "string" ? integrity : stringify(integrity, opts);
          return parse4(`${this.toString(opts)} ${other}`, opts);
        }
        hexDigest() {
          return parse4(this, {single: true}).hexDigest();
        }
        match(integrity, opts) {
          opts = SsriOpts(opts);
          const other = parse4(integrity, opts);
          const algo = other.pickAlgorithm(opts);
          return this[algo] && other[algo] && this[algo].find((hash) => other[algo].find((otherhash) => hash.digest === otherhash.digest)) || false;
        }
        pickAlgorithm(opts) {
          opts = SsriOpts(opts);
          const pickAlgorithm = opts.pickAlgorithm;
          const keys = Object.keys(this);
          if (!keys.length) {
            throw new Error(`No algorithms available for ${JSON.stringify(this.toString())}`);
          }
          return keys.reduce((acc, algo) => {
            return pickAlgorithm(acc, algo) || acc;
          });
        }
      };
      module.exports.parse = parse4;
      function parse4(sri, opts) {
        opts = SsriOpts(opts);
        if (typeof sri === "string") {
          return _parse(sri, opts);
        } else if (sri.algorithm && sri.digest) {
          const fullSri = new Integrity();
          fullSri[sri.algorithm] = [sri];
          return _parse(stringify(fullSri, opts), opts);
        } else {
          return _parse(stringify(sri, opts), opts);
        }
      }
      function _parse(integrity, opts) {
        if (opts.single) {
          return new Hash(integrity, opts);
        }
        return integrity.trim().split(/\s+/).reduce((acc, string) => {
          const hash = new Hash(string, opts);
          if (hash.algorithm && hash.digest) {
            const algo = hash.algorithm;
            if (!acc[algo]) {
              acc[algo] = [];
            }
            acc[algo].push(hash);
          }
          return acc;
        }, new Integrity());
      }
      module.exports.stringify = stringify;
      function stringify(obj, opts) {
        opts = SsriOpts(opts);
        if (obj.algorithm && obj.digest) {
          return Hash.prototype.toString.call(obj, opts);
        } else if (typeof obj === "string") {
          return stringify(parse4(obj, opts), opts);
        } else {
          return Integrity.prototype.toString.call(obj, opts);
        }
      }
      module.exports.fromHex = fromHex;
      function fromHex(hexDigest, algorithm, opts) {
        opts = SsriOpts(opts);
        const optString = opts.options && opts.options.length ? `?${opts.options.join("?")}` : "";
        return parse4(`${algorithm}-${Buffer.from(hexDigest, "hex").toString("base64")}${optString}`, opts);
      }
      module.exports.fromData = fromData;
      function fromData(data, opts) {
        opts = SsriOpts(opts);
        const algorithms = opts.algorithms;
        const optString = opts.options && opts.options.length ? `?${opts.options.join("?")}` : "";
        return algorithms.reduce((acc, algo) => {
          const digest = crypto3.createHash(algo).update(data).digest("base64");
          const hash = new Hash(`${algo}-${digest}${optString}`, opts);
          if (hash.algorithm && hash.digest) {
            const algo2 = hash.algorithm;
            if (!acc[algo2]) {
              acc[algo2] = [];
            }
            acc[algo2].push(hash);
          }
          return acc;
        }, new Integrity());
      }
      module.exports.fromStream = fromStream;
      function fromStream(stream, opts) {
        opts = SsriOpts(opts);
        const P = opts.Promise || Promise;
        const istream = integrityStream(opts);
        return new P((resolve, reject) => {
          stream.pipe(istream);
          stream.on("error", reject);
          istream.on("error", reject);
          let sri;
          istream.on("integrity", (s) => {
            sri = s;
          });
          istream.on("end", () => resolve(sri));
          istream.on("data", () => {
          });
        });
      }
      module.exports.checkData = checkData;
      function checkData(data, sri, opts) {
        opts = SsriOpts(opts);
        sri = parse4(sri, opts);
        if (!Object.keys(sri).length) {
          if (opts.error) {
            throw Object.assign(new Error("No valid integrity hashes to check against"), {
              code: "EINTEGRITY"
            });
          } else {
            return false;
          }
        }
        const algorithm = sri.pickAlgorithm(opts);
        const digest = crypto3.createHash(algorithm).update(data).digest("base64");
        const newSri = parse4({algorithm, digest});
        const match2 = newSri.match(sri, opts);
        if (match2 || !opts.error) {
          return match2;
        } else if (typeof opts.size === "number" && data.length !== opts.size) {
          const err = new Error(`data size mismatch when checking ${sri}.
  Wanted: ${opts.size}
  Found: ${data.length}`);
          err.code = "EBADSIZE";
          err.found = data.length;
          err.expected = opts.size;
          err.sri = sri;
          throw err;
        } else {
          const err = new Error(`Integrity checksum failed when using ${algorithm}: Wanted ${sri}, but got ${newSri}. (${data.length} bytes)`);
          err.code = "EINTEGRITY";
          err.found = newSri;
          err.expected = sri;
          err.algorithm = algorithm;
          err.sri = sri;
          throw err;
        }
      }
      module.exports.checkStream = checkStream;
      function checkStream(stream, sri, opts) {
        opts = SsriOpts(opts);
        const P = opts.Promise || Promise;
        const checker = integrityStream(opts.concat({
          integrity: sri
        }));
        return new P((resolve, reject) => {
          stream.pipe(checker);
          stream.on("error", reject);
          checker.on("error", reject);
          let sri2;
          checker.on("verified", (s) => {
            sri2 = s;
          });
          checker.on("end", () => resolve(sri2));
          checker.on("data", () => {
          });
        });
      }
      module.exports.integrityStream = integrityStream;
      function integrityStream(opts) {
        opts = SsriOpts(opts);
        const sri = opts.integrity && parse4(opts.integrity, opts);
        const goodSri = sri && Object.keys(sri).length;
        const algorithm = goodSri && sri.pickAlgorithm(opts);
        const digests = goodSri && sri[algorithm];
        const algorithms = Array.from(new Set(opts.algorithms.concat(algorithm ? [algorithm] : [])));
        const hashes = algorithms.map(crypto3.createHash);
        let streamSize = 0;
        const stream = new Transform3({
          transform(chunk, enc, cb) {
            streamSize += chunk.length;
            hashes.forEach((h) => h.update(chunk, enc));
            cb(null, chunk, enc);
          }
        }).on("end", () => {
          const optString = opts.options && opts.options.length ? `?${opts.options.join("?")}` : "";
          const newSri = parse4(hashes.map((h, i) => {
            return `${algorithms[i]}-${h.digest("base64")}${optString}`;
          }).join(" "), opts);
          const match2 = goodSri && newSri.match(sri, opts);
          if (typeof opts.size === "number" && streamSize !== opts.size) {
            const err = new Error(`stream size mismatch when checking ${sri}.
  Wanted: ${opts.size}
  Found: ${streamSize}`);
            err.code = "EBADSIZE";
            err.found = streamSize;
            err.expected = opts.size;
            err.sri = sri;
            stream.emit("error", err);
          } else if (opts.integrity && !match2) {
            const err = new Error(`${sri} integrity checksum failed when using ${algorithm}: wanted ${digests} but got ${newSri}. (${streamSize} bytes)`);
            err.code = "EINTEGRITY";
            err.found = newSri;
            err.expected = digests;
            err.algorithm = algorithm;
            err.sri = sri;
            stream.emit("error", err);
          } else {
            stream.emit("size", streamSize);
            stream.emit("integrity", newSri);
            match2 && stream.emit("verified", match2);
          }
        });
        return stream;
      }
      module.exports.create = createIntegrity;
      function createIntegrity(opts) {
        opts = SsriOpts(opts);
        const algorithms = opts.algorithms;
        const optString = opts.options.length ? `?${opts.options.join("?")}` : "";
        const hashes = algorithms.map(crypto3.createHash);
        return {
          update: function(chunk, enc) {
            hashes.forEach((h) => h.update(chunk, enc));
            return this;
          },
          digest: function(enc) {
            const integrity = algorithms.reduce((acc, algo) => {
              const digest = hashes.shift().digest("base64");
              const hash = new Hash(`${algo}-${digest}${optString}`, opts);
              if (hash.algorithm && hash.digest) {
                const algo2 = hash.algorithm;
                if (!acc[algo2]) {
                  acc[algo2] = [];
                }
                acc[algo2].push(hash);
              }
              return acc;
            }, new Integrity());
            return integrity;
          }
        };
      }
      var NODE_HASHES = new Set(crypto3.getHashes());
      var DEFAULT_PRIORITY = [
        "md5",
        "whirlpool",
        "sha1",
        "sha224",
        "sha256",
        "sha384",
        "sha512",
        "sha3",
        "sha3-256",
        "sha3-384",
        "sha3-512",
        "sha3_256",
        "sha3_384",
        "sha3_512"
      ].filter((algo) => NODE_HASHES.has(algo));
      function getPrioritizedHash(algo1, algo2) {
        return DEFAULT_PRIORITY.indexOf(algo1.toLowerCase()) >= DEFAULT_PRIORITY.indexOf(algo2.toLowerCase()) ? algo1 : algo2;
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/index.ts
  var sources_exports4 = {};
  __export(sources_exports4, {
    BuildType: () => BuildType,
    Cache: () => Cache,
    Configuration: () => Configuration,
    DEFAULT_LOCK_FILENAME: () => DEFAULT_LOCK_FILENAME,
    DEFAULT_RC_FILENAME: () => DEFAULT_RC_FILENAME,
    FormatType: () => FormatType,
    LightReport: () => LightReport,
    LinkType: () => LinkType,
    Manifest: () => Manifest,
    MessageName: () => MessageName,
    PackageExtensionStatus: () => PackageExtensionStatus,
    PackageExtensionType: () => PackageExtensionType,
    Project: () => Project,
    ProjectLookup: () => ProjectLookup,
    Report: () => Report,
    ReportError: () => ReportError,
    SettingsType: () => SettingsType,
    StreamReport: () => StreamReport,
    TAG_REGEXP: () => TAG_REGEXP,
    TelemetryManager: () => TelemetryManager,
    ThrowReport: () => ThrowReport,
    VirtualFetcher: () => VirtualFetcher,
    Workspace: () => Workspace,
    WorkspaceResolver: () => WorkspaceResolver,
    YarnVersion: () => YarnVersion,
    execUtils: () => execUtils_exports,
    folderUtils: () => folderUtils_exports,
    formatUtils: () => formatUtils_exports,
    hashUtils: () => hashUtils_exports,
    httpUtils: () => httpUtils_exports,
    miscUtils: () => miscUtils_exports,
    scriptUtils: () => scriptUtils_exports,
    semverUtils: () => semverUtils_exports,
    structUtils: () => structUtils_exports,
    tgzUtils: () => tgzUtils_exports,
    treeUtils: () => treeUtils_exports
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/execUtils.ts
  var execUtils_exports = {};
  __export(execUtils_exports, {
    EndStrategy: () => EndStrategy,
    execvp: () => execvp,
    pipevp: () => pipevp
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-fslib/sources/index.ts
  var sources_exports = {};
  __export(sources_exports, {
    AliasFS: () => AliasFS,
    CwdFS: () => CwdFS,
    DEFAULT_COMPRESSION_LEVEL: () => DEFAULT_COMPRESSION_LEVEL,
    FakeFS: () => FakeFS,
    Filename: () => Filename,
    JailFS: () => JailFS,
    LazyFS: () => LazyFS,
    LinkStrategy: () => LinkStrategy,
    NoFS: () => NoFS,
    NodeFS: () => NodeFS,
    PortablePath: () => PortablePath,
    PosixFS: () => PosixFS,
    ProxiedFS: () => ProxiedFS,
    VirtualFS: () => VirtualFS,
    ZipFS: () => ZipFS,
    ZipOpenFS: () => ZipOpenFS,
    extendFs: () => extendFs,
    normalizeLineEndings: () => normalizeLineEndings,
    npath: () => npath,
    opendir: () => opendir,
    patchFs: () => patchFs,
    ppath: () => ppath,
    statUtils: () => statUtils_exports,
    toFilename: () => toFilename,
    xfs: () => xfs
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-fslib/sources/statUtils.ts
  var statUtils_exports = {};
  __export(statUtils_exports, {
    BigIntStatsEntry: () => BigIntStatsEntry,
    DirEntry: () => DirEntry,
    StatEntry: () => StatEntry,
    areStatsEqual: () => areStatsEqual,
    clearStats: () => clearStats,
    convertToBigIntStats: () => convertToBigIntStats,
    makeDefaultStats: () => makeDefaultStats,
    makeEmptyStats: () => makeEmptyStats
  });
  var nodeUtils = __toModule(require("util"));

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-fslib/sources/constants.ts
  var S_IFMT = 61440;
  var S_IFDIR = 16384;
  var S_IFREG = 32768;
  var S_IFLNK = 40960;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-fslib/sources/statUtils.ts
  var DirEntry = class {
    constructor() {
      this.name = ``;
      this.mode = 0;
    }
    isBlockDevice() {
      return false;
    }
    isCharacterDevice() {
      return false;
    }
    isDirectory() {
      return (this.mode & S_IFMT) === S_IFDIR;
    }
    isFIFO() {
      return false;
    }
    isFile() {
      return (this.mode & S_IFMT) === S_IFREG;
    }
    isSocket() {
      return false;
    }
    isSymbolicLink() {
      return (this.mode & S_IFMT) === S_IFLNK;
    }
  };
  var StatEntry = class {
    constructor() {
      this.uid = 0;
      this.gid = 0;
      this.size = 0;
      this.blksize = 0;
      this.atimeMs = 0;
      this.mtimeMs = 0;
      this.ctimeMs = 0;
      this.birthtimeMs = 0;
      this.atime = new Date(0);
      this.mtime = new Date(0);
      this.ctime = new Date(0);
      this.birthtime = new Date(0);
      this.dev = 0;
      this.ino = 0;
      this.mode = S_IFREG | 420;
      this.nlink = 1;
      this.rdev = 0;
      this.blocks = 1;
    }
    isBlockDevice() {
      return false;
    }
    isCharacterDevice() {
      return false;
    }
    isDirectory() {
      return (this.mode & S_IFMT) === S_IFDIR;
    }
    isFIFO() {
      return false;
    }
    isFile() {
      return (this.mode & S_IFMT) === S_IFREG;
    }
    isSocket() {
      return false;
    }
    isSymbolicLink() {
      return (this.mode & S_IFMT) === S_IFLNK;
    }
  };
  var BigIntStatsEntry = class {
    constructor() {
      this.uid = BigInt(0);
      this.gid = BigInt(0);
      this.size = BigInt(0);
      this.blksize = BigInt(0);
      this.atimeMs = BigInt(0);
      this.mtimeMs = BigInt(0);
      this.ctimeMs = BigInt(0);
      this.birthtimeMs = BigInt(0);
      this.atimeNs = BigInt(0);
      this.mtimeNs = BigInt(0);
      this.ctimeNs = BigInt(0);
      this.birthtimeNs = BigInt(0);
      this.atime = new Date(0);
      this.mtime = new Date(0);
      this.ctime = new Date(0);
      this.birthtime = new Date(0);
      this.dev = BigInt(0);
      this.ino = BigInt(0);
      this.mode = BigInt(S_IFREG | 420);
      this.nlink = BigInt(1);
      this.rdev = BigInt(0);
      this.blocks = BigInt(1);
    }
    isBlockDevice() {
      return false;
    }
    isCharacterDevice() {
      return false;
    }
    isDirectory() {
      return (this.mode & BigInt(S_IFMT)) === BigInt(S_IFDIR);
    }
    isFIFO() {
      return false;
    }
    isFile() {
      return (this.mode & BigInt(S_IFMT)) === BigInt(S_IFREG);
    }
    isSocket() {
      return false;
    }
    isSymbolicLink() {
      return (this.mode & BigInt(S_IFMT)) === BigInt(S_IFLNK);
    }
  };
  function makeDefaultStats() {
    return new StatEntry();
  }
  function makeEmptyStats() {
    return clearStats(makeDefaultStats());
  }
  function clearStats(stats) {
    for (const key in stats) {
      if (Object.prototype.hasOwnProperty.call(stats, key)) {
        const element = stats[key];
        if (typeof element === `number`) {
          stats[key] = 0;
        } else if (typeof element === `bigint`) {
          stats[key] = BigInt(0);
        } else if (nodeUtils.types.isDate(element)) {
          stats[key] = new Date(0);
        }
      }
    }
    return stats;
  }
  function convertToBigIntStats(stats) {
    const bigintStats = new BigIntStatsEntry();
    for (const key in stats) {
      if (Object.prototype.hasOwnProperty.call(stats, key)) {
        const element = stats[key];
        if (typeof element === `number`) {
          bigintStats[key] = BigInt(element);
        } else if (nodeUtils.types.isDate(element)) {
          bigintStats[key] = new Date(element);
        }
      }
    }
    bigintStats.atimeNs = bigintStats.atimeMs * BigInt(1e6);
    bigintStats.mtimeNs = bigintStats.mtimeMs * BigInt(1e6);
    bigintStats.ctimeNs = bigintStats.ctimeMs * BigInt(1e6);
    bigintStats.birthtimeNs = bigintStats.birthtimeMs * BigInt(1e6);
    return bigintStats;
  }
  function areStatsEqual(a, b) {
    if (a.atimeMs !== b.atimeMs)
      return false;
    if (a.birthtimeMs !== b.birthtimeMs)
      return false;
    if (a.blksize !== b.blksize)
      return false;
    if (a.blocks !== b.blocks)
      return false;
    if (a.ctimeMs !== b.ctimeMs)
      return false;
    if (a.dev !== b.dev)
      return false;
    if (a.gid !== b.gid)
      return false;
    if (a.ino !== b.ino)
      return false;
    if (a.isBlockDevice() !== b.isBlockDevice())
      return false;
    if (a.isCharacterDevice() !== b.isCharacterDevice())
      return false;
    if (a.isDirectory() !== b.isDirectory())
      return false;
    if (a.isFIFO() !== b.isFIFO())
      return false;
    if (a.isFile() !== b.isFile())
      return false;
    if (a.isSocket() !== b.isSocket())
      return false;
    if (a.isSymbolicLink() !== b.isSymbolicLink())
      return false;
    if (a.mode !== b.mode)
      return false;
    if (a.mtimeMs !== b.mtimeMs)
      return false;
    if (a.nlink !== b.nlink)
      return false;
    if (a.rdev !== b.rdev)
      return false;
    if (a.size !== b.size)
      return false;
    if (a.uid !== b.uid)
      return false;
    const aN = a;
    const bN = b;
    if (aN.atimeNs !== bN.atimeNs)
      return false;
    if (aN.mtimeNs !== bN.mtimeNs)
      return false;
    if (aN.ctimeNs !== bN.ctimeNs)
      return false;
    if (aN.birthtimeNs !== bN.birthtimeNs)
      return false;
    return true;
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-fslib/sources/algorithms/copyPromise.ts
  var import_fs = __toModule(require("fs"));

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-fslib/sources/path.ts
  var import_path = __toModule(require("path"));
  var PathType;
  (function(PathType2) {
    PathType2[PathType2["File"] = 0] = "File";
    PathType2[PathType2["Portable"] = 1] = "Portable";
    PathType2[PathType2["Native"] = 2] = "Native";
  })(PathType || (PathType = {}));
  var PortablePath = {
    root: `/`,
    dot: `.`
  };
  var Filename = {
    nodeModules: `node_modules`,
    manifest: `package.json`,
    lockfile: `yarn.lock`,
    virtual: `__virtual__`,
    pnpJs: `.pnp.js`,
    pnpCjs: `.pnp.cjs`,
    rc: `.yarnrc.yml`
  };
  var npath = Object.create(import_path.default);
  var ppath = Object.create(import_path.default.posix);
  npath.cwd = () => process.cwd();
  ppath.cwd = () => toPortablePath(process.cwd());
  ppath.resolve = (...segments) => {
    if (segments.length > 0 && ppath.isAbsolute(segments[0])) {
      return import_path.default.posix.resolve(...segments);
    } else {
      return import_path.default.posix.resolve(ppath.cwd(), ...segments);
    }
  };
  var contains = function(pathUtils, from, to) {
    from = pathUtils.normalize(from);
    to = pathUtils.normalize(to);
    if (from === to)
      return `.`;
    if (!from.endsWith(pathUtils.sep))
      from = from + pathUtils.sep;
    if (to.startsWith(from)) {
      return to.slice(from.length);
    } else {
      return null;
    }
  };
  npath.fromPortablePath = fromPortablePath;
  npath.toPortablePath = toPortablePath;
  npath.contains = (from, to) => contains(npath, from, to);
  ppath.contains = (from, to) => contains(ppath, from, to);
  var WINDOWS_PATH_REGEXP = /^([a-zA-Z]:.*)$/;
  var UNC_WINDOWS_PATH_REGEXP = /^\\\\(\.\\)?(.*)$/;
  var PORTABLE_PATH_REGEXP = /^\/([a-zA-Z]:.*)$/;
  var UNC_PORTABLE_PATH_REGEXP = /^\/unc\/(\.dot\/)?(.*)$/;
  function fromPortablePath(p) {
    if (process.platform !== `win32`)
      return p;
    if (p.match(PORTABLE_PATH_REGEXP))
      p = p.replace(PORTABLE_PATH_REGEXP, `$1`);
    else if (p.match(UNC_PORTABLE_PATH_REGEXP))
      p = p.replace(UNC_PORTABLE_PATH_REGEXP, (match2, p1, p2) => `\\\\${p1 ? `.\\` : ``}${p2}`);
    else
      return p;
    return p.replace(/\//g, `\\`);
  }
  function toPortablePath(p) {
    if (process.platform !== `win32`)
      return p;
    if (p.match(WINDOWS_PATH_REGEXP))
      p = p.replace(WINDOWS_PATH_REGEXP, `/$1`);
    else if (p.match(UNC_WINDOWS_PATH_REGEXP))
      p = p.replace(UNC_WINDOWS_PATH_REGEXP, (match2, p1, p2) => `/unc/${p1 ? `.dot/` : ``}${p2}`);
    return p.replace(/\\/g, `/`);
  }
  function convertPath(targetPathUtils, sourcePath) {
    return targetPathUtils === npath ? fromPortablePath(sourcePath) : toPortablePath(sourcePath);
  }
  function toFilename(filename) {
    if (npath.parse(filename).dir !== `` || ppath.parse(filename).dir !== ``)
      throw new Error(`Invalid filename: "${filename}"`);
    return filename;
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-fslib/sources/algorithms/copyPromise.ts
  var defaultTime = new Date(315532800 * 1e3);
  var LinkStrategy;
  (function(LinkStrategy3) {
    LinkStrategy3["Allow"] = `allow`;
    LinkStrategy3["ReadOnly"] = `readOnly`;
  })(LinkStrategy || (LinkStrategy = {}));
  async function copyPromise(destinationFs, destination, sourceFs, source, opts) {
    const normalizedDestination = destinationFs.pathUtils.normalize(destination);
    const normalizedSource = sourceFs.pathUtils.normalize(source);
    const prelayout = [];
    const postlayout = [];
    await destinationFs.mkdirPromise(destinationFs.pathUtils.dirname(destination), {recursive: true});
    const updateTime = typeof destinationFs.lutimesPromise === `function` ? destinationFs.lutimesPromise.bind(destinationFs) : destinationFs.utimesPromise.bind(destinationFs);
    await copyImpl(prelayout, postlayout, updateTime, destinationFs, normalizedDestination, sourceFs, normalizedSource, opts);
    for (const operation of prelayout)
      await operation();
    await Promise.all(postlayout.map((operation) => {
      return operation();
    }));
  }
  async function copyImpl(prelayout, postlayout, updateTime, destinationFs, destination, sourceFs, source, opts) {
    var _a2, _b;
    const destinationStat = await maybeLStat(destinationFs, destination);
    const sourceStat = await sourceFs.lstatPromise(source);
    const referenceTime = opts.stableTime ? {mtime: defaultTime, atime: defaultTime} : sourceStat;
    let updated;
    switch (true) {
      case sourceStat.isDirectory():
        {
          updated = await copyFolder(prelayout, postlayout, updateTime, destinationFs, destination, destinationStat, sourceFs, source, sourceStat, opts);
        }
        break;
      case sourceStat.isFile():
        {
          updated = await copyFile(prelayout, postlayout, updateTime, destinationFs, destination, destinationStat, sourceFs, source, sourceStat, opts);
        }
        break;
      case sourceStat.isSymbolicLink():
        {
          updated = await copySymlink(prelayout, postlayout, updateTime, destinationFs, destination, destinationStat, sourceFs, source, sourceStat, opts);
        }
        break;
      default:
        {
          throw new Error(`Unsupported file type (${sourceStat.mode})`);
        }
        break;
    }
    if (updated || ((_a2 = destinationStat == null ? void 0 : destinationStat.mtime) == null ? void 0 : _a2.getTime()) !== referenceTime.mtime.getTime() || ((_b = destinationStat == null ? void 0 : destinationStat.atime) == null ? void 0 : _b.getTime()) !== referenceTime.atime.getTime()) {
      postlayout.push(() => updateTime(destination, referenceTime.atime, referenceTime.mtime));
      updated = true;
    }
    if (destinationStat === null || (destinationStat.mode & 511) !== (sourceStat.mode & 511)) {
      postlayout.push(() => destinationFs.chmodPromise(destination, sourceStat.mode & 511));
      updated = true;
    }
    return updated;
  }
  async function maybeLStat(baseFs, p) {
    try {
      return await baseFs.lstatPromise(p);
    } catch (e) {
      return null;
    }
  }
  async function copyFolder(prelayout, postlayout, updateTime, destinationFs, destination, destinationStat, sourceFs, source, sourceStat, opts) {
    if (destinationStat !== null && !destinationStat.isDirectory()) {
      if (opts.overwrite) {
        prelayout.push(async () => destinationFs.removePromise(destination));
        destinationStat = null;
      } else {
        return false;
      }
    }
    let updated = false;
    if (destinationStat === null) {
      prelayout.push(async () => destinationFs.mkdirPromise(destination, {mode: sourceStat.mode}));
      updated = true;
    }
    const entries = await sourceFs.readdirPromise(source);
    if (opts.stableSort) {
      for (const entry of entries.sort()) {
        if (await copyImpl(prelayout, postlayout, updateTime, destinationFs, destinationFs.pathUtils.join(destination, entry), sourceFs, sourceFs.pathUtils.join(source, entry), opts)) {
          updated = true;
        }
      }
    } else {
      const entriesUpdateStatus = await Promise.all(entries.map(async (entry) => {
        await copyImpl(prelayout, postlayout, updateTime, destinationFs, destinationFs.pathUtils.join(destination, entry), sourceFs, sourceFs.pathUtils.join(source, entry), opts);
      }));
      if (entriesUpdateStatus.some((status) => status)) {
        updated = true;
      }
    }
    return updated;
  }
  var isCloneSupportedCache = new WeakMap();
  function makeLinkOperation(opFs, destination, source, sourceStat, linkStrategy) {
    return async () => {
      await opFs.linkPromise(source, destination);
      if (linkStrategy === LinkStrategy.ReadOnly) {
        sourceStat.mode &= ~146;
        await opFs.chmodPromise(destination, sourceStat.mode);
      }
    };
  }
  function makeCloneLinkOperation(opFs, destination, source, sourceStat, linkStrategy) {
    const isCloneSupported = isCloneSupportedCache.get(opFs);
    if (typeof isCloneSupported === `undefined`) {
      return async () => {
        try {
          await opFs.copyFilePromise(source, destination, import_fs.default.constants.COPYFILE_FICLONE_FORCE);
          isCloneSupportedCache.set(opFs, true);
        } catch (err) {
          if (err.code === `ENOSYS` || err.code === `ENOTSUP`) {
            isCloneSupportedCache.set(opFs, false);
            await makeLinkOperation(opFs, destination, source, sourceStat, linkStrategy)();
          } else {
            throw err;
          }
        }
      };
    } else {
      if (isCloneSupported) {
        return async () => opFs.copyFilePromise(source, destination, import_fs.default.constants.COPYFILE_FICLONE_FORCE);
      } else {
        return makeLinkOperation(opFs, destination, source, sourceStat, linkStrategy);
      }
    }
  }
  async function copyFile(prelayout, postlayout, updateTime, destinationFs, destination, destinationStat, sourceFs, source, sourceStat, opts) {
    var _a2;
    if (destinationStat !== null) {
      if (opts.overwrite) {
        prelayout.push(async () => destinationFs.removePromise(destination));
        destinationStat = null;
      } else {
        return false;
      }
    }
    const linkStrategy = (_a2 = opts.linkStrategy) != null ? _a2 : null;
    const op = destinationFs === sourceFs ? linkStrategy !== null ? makeCloneLinkOperation(destinationFs, destination, source, sourceStat, linkStrategy) : async () => destinationFs.copyFilePromise(source, destination, import_fs.default.constants.COPYFILE_FICLONE) : linkStrategy !== null ? makeLinkOperation(destinationFs, destination, source, sourceStat, linkStrategy) : async () => destinationFs.writeFilePromise(destination, await sourceFs.readFilePromise(source));
    prelayout.push(async () => op());
    return true;
  }
  async function copySymlink(prelayout, postlayout, updateTime, destinationFs, destination, destinationStat, sourceFs, source, sourceStat, opts) {
    if (destinationStat !== null) {
      if (opts.overwrite) {
        prelayout.push(async () => destinationFs.removePromise(destination));
        destinationStat = null;
      } else {
        return false;
      }
    }
    prelayout.push(async () => {
      await destinationFs.symlinkPromise(convertPath(destinationFs.pathUtils, await sourceFs.readlinkPromise(source)), destination);
    });
    return true;
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-fslib/sources/errors.ts
  function makeError(code, message) {
    return Object.assign(new Error(`${code}: ${message}`), {code});
  }
  function EBUSY(message) {
    return makeError(`EBUSY`, message);
  }
  function ENOSYS(message, reason) {
    return makeError(`ENOSYS`, `${message}, ${reason}`);
  }
  function EINVAL(reason) {
    return makeError(`EINVAL`, `invalid argument, ${reason}`);
  }
  function EBADF(reason) {
    return makeError(`EBADF`, `bad file descriptor, ${reason}`);
  }
  function ENOENT(reason) {
    return makeError(`ENOENT`, `no such file or directory, ${reason}`);
  }
  function ENOTDIR(reason) {
    return makeError(`ENOTDIR`, `not a directory, ${reason}`);
  }
  function EISDIR(reason) {
    return makeError(`EISDIR`, `illegal operation on a directory, ${reason}`);
  }
  function EEXIST(reason) {
    return makeError(`EEXIST`, `file already exists, ${reason}`);
  }
  function EROFS(reason) {
    return makeError(`EROFS`, `read-only filesystem, ${reason}`);
  }
  function ENOTEMPTY(reason) {
    return makeError(`ENOTEMPTY`, `directory not empty, ${reason}`);
  }
  function EOPNOTSUPP(reason) {
    return makeError(`EOPNOTSUPP`, `operation not supported, ${reason}`);
  }
  function ERR_DIR_CLOSED() {
    return makeError(`ERR_DIR_CLOSED`, `Directory handle was closed`);
  }
  var LibzipError = class extends Error {
    constructor(message, code) {
      super(message);
      this.name = `Libzip Error`;
      this.code = code;
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-fslib/sources/algorithms/opendir.ts
  var CustomDir = class {
    constructor(path3, nextDirent, opts = {}) {
      this.path = path3;
      this.nextDirent = nextDirent;
      this.opts = opts;
      this.closed = false;
    }
    throwIfClosed() {
      if (this.closed) {
        throw ERR_DIR_CLOSED();
      }
    }
    async *[Symbol.asyncIterator]() {
      try {
        let dirent;
        while ((dirent = await this.read()) !== null) {
          yield dirent;
        }
      } finally {
        await this.close();
      }
    }
    read(cb) {
      const dirent = this.readSync();
      if (typeof cb !== `undefined`)
        return cb(null, dirent);
      return Promise.resolve(dirent);
    }
    readSync() {
      this.throwIfClosed();
      return this.nextDirent();
    }
    close(cb) {
      this.closeSync();
      if (typeof cb !== `undefined`)
        return cb(null);
      return Promise.resolve();
    }
    closeSync() {
      var _a2, _b;
      this.throwIfClosed();
      (_b = (_a2 = this.opts).onClose) == null ? void 0 : _b.call(_a2);
      this.closed = true;
    }
  };
  function opendir(fakeFs, path3, entries, opts) {
    const nextDirent = () => {
      const filename = entries.shift();
      if (typeof filename === `undefined`)
        return null;
      return Object.assign(fakeFs.statSync(fakeFs.pathUtils.join(path3, filename)), {
        name: filename
      });
    };
    return new CustomDir(path3, nextDirent, opts);
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-fslib/sources/FakeFS.ts
  var import_os = __toModule(require("os"));
  var FakeFS = class {
    constructor(pathUtils) {
      this.pathUtils = pathUtils;
    }
    async *genTraversePromise(init, {stableSort = false} = {}) {
      const stack = [init];
      while (stack.length > 0) {
        const p = stack.shift();
        const entry = await this.lstatPromise(p);
        if (entry.isDirectory()) {
          const entries = await this.readdirPromise(p);
          if (stableSort) {
            for (const entry2 of entries.sort()) {
              stack.push(this.pathUtils.join(p, entry2));
            }
          } else {
            throw new Error(`Not supported`);
          }
        } else {
          yield p;
        }
      }
    }
    async removePromise(p, {recursive = true, maxRetries = 5} = {}) {
      let stat;
      try {
        stat = await this.lstatPromise(p);
      } catch (error) {
        if (error.code === `ENOENT`) {
          return;
        } else {
          throw error;
        }
      }
      if (stat.isDirectory()) {
        if (recursive) {
          const entries = await this.readdirPromise(p);
          await Promise.all(entries.map((entry) => {
            return this.removePromise(this.pathUtils.resolve(p, entry));
          }));
        }
        let t5 = 0;
        do {
          try {
            await this.rmdirPromise(p);
            break;
          } catch (error) {
            if (error.code === `EBUSY` || error.code === `ENOTEMPTY`) {
              if (maxRetries === 0) {
                break;
              } else {
                await new Promise((resolve) => setTimeout(resolve, t5 * 100));
                continue;
              }
            } else {
              throw error;
            }
          }
        } while (t5++ < maxRetries);
      } else {
        await this.unlinkPromise(p);
      }
    }
    removeSync(p, {recursive = true} = {}) {
      let stat;
      try {
        stat = this.lstatSync(p);
      } catch (error) {
        if (error.code === `ENOENT`) {
          return;
        } else {
          throw error;
        }
      }
      if (stat.isDirectory()) {
        if (recursive)
          for (const entry of this.readdirSync(p))
            this.removeSync(this.pathUtils.resolve(p, entry));
        this.rmdirSync(p);
      } else {
        this.unlinkSync(p);
      }
    }
    async mkdirpPromise(p, {chmod, utimes} = {}) {
      p = this.resolve(p);
      if (p === this.pathUtils.dirname(p))
        return;
      const parts = p.split(this.pathUtils.sep);
      for (let u = 2; u <= parts.length; ++u) {
        const subPath = parts.slice(0, u).join(this.pathUtils.sep);
        if (!this.existsSync(subPath)) {
          try {
            await this.mkdirPromise(subPath);
          } catch (error) {
            if (error.code === `EEXIST`) {
              continue;
            } else {
              throw error;
            }
          }
          if (chmod != null)
            await this.chmodPromise(subPath, chmod);
          if (utimes != null) {
            await this.utimesPromise(subPath, utimes[0], utimes[1]);
          } else {
            const parentStat = await this.statPromise(this.pathUtils.dirname(subPath));
            await this.utimesPromise(subPath, parentStat.atime, parentStat.mtime);
          }
        }
      }
    }
    mkdirpSync(p, {chmod, utimes} = {}) {
      p = this.resolve(p);
      if (p === this.pathUtils.dirname(p))
        return;
      const parts = p.split(this.pathUtils.sep);
      for (let u = 2; u <= parts.length; ++u) {
        const subPath = parts.slice(0, u).join(this.pathUtils.sep);
        if (!this.existsSync(subPath)) {
          try {
            this.mkdirSync(subPath);
          } catch (error) {
            if (error.code === `EEXIST`) {
              continue;
            } else {
              throw error;
            }
          }
          if (chmod != null)
            this.chmodSync(subPath, chmod);
          if (utimes != null) {
            this.utimesSync(subPath, utimes[0], utimes[1]);
          } else {
            const parentStat = this.statSync(this.pathUtils.dirname(subPath));
            this.utimesSync(subPath, parentStat.atime, parentStat.mtime);
          }
        }
      }
    }
    async copyPromise(destination, source, {baseFs = this, overwrite = true, stableSort = false, stableTime = false, linkStrategy = null} = {}) {
      return await copyPromise(this, destination, baseFs, source, {overwrite, stableSort, stableTime, linkStrategy});
    }
    copySync(destination, source, {baseFs = this, overwrite = true} = {}) {
      const stat = baseFs.lstatSync(source);
      const exists = this.existsSync(destination);
      if (stat.isDirectory()) {
        this.mkdirpSync(destination);
        const directoryListing = baseFs.readdirSync(source);
        for (const entry of directoryListing) {
          this.copySync(this.pathUtils.join(destination, entry), baseFs.pathUtils.join(source, entry), {baseFs, overwrite});
        }
      } else if (stat.isFile()) {
        if (!exists || overwrite) {
          if (exists)
            this.removeSync(destination);
          const content = baseFs.readFileSync(source);
          this.writeFileSync(destination, content);
        }
      } else if (stat.isSymbolicLink()) {
        if (!exists || overwrite) {
          if (exists)
            this.removeSync(destination);
          const target = baseFs.readlinkSync(source);
          this.symlinkSync(convertPath(this.pathUtils, target), destination);
        }
      } else {
        throw new Error(`Unsupported file type (file: ${source}, mode: 0o${stat.mode.toString(8).padStart(6, `0`)})`);
      }
      const mode = stat.mode & 511;
      this.chmodSync(destination, mode);
    }
    async changeFilePromise(p, content, opts = {}) {
      if (Buffer.isBuffer(content)) {
        return this.changeFileBufferPromise(p, content);
      } else {
        return this.changeFileTextPromise(p, content, opts);
      }
    }
    async changeFileBufferPromise(p, content) {
      let current = Buffer.alloc(0);
      try {
        current = await this.readFilePromise(p);
      } catch (error) {
      }
      if (Buffer.compare(current, content) === 0)
        return;
      await this.writeFilePromise(p, content);
    }
    async changeFileTextPromise(p, content, {automaticNewlines} = {}) {
      let current = ``;
      try {
        current = await this.readFilePromise(p, `utf8`);
      } catch (error) {
      }
      const normalizedContent = automaticNewlines ? normalizeLineEndings(current, content) : content;
      if (current === normalizedContent)
        return;
      await this.writeFilePromise(p, normalizedContent);
    }
    changeFileSync(p, content, opts = {}) {
      if (Buffer.isBuffer(content)) {
        return this.changeFileBufferSync(p, content);
      } else {
        return this.changeFileTextSync(p, content, opts);
      }
    }
    changeFileBufferSync(p, content) {
      let current = Buffer.alloc(0);
      try {
        current = this.readFileSync(p);
      } catch (error) {
      }
      if (Buffer.compare(current, content) === 0)
        return;
      this.writeFileSync(p, content);
    }
    changeFileTextSync(p, content, {automaticNewlines = false} = {}) {
      let current = ``;
      try {
        current = this.readFileSync(p, `utf8`);
      } catch (error) {
      }
      const normalizedContent = automaticNewlines ? normalizeLineEndings(current, content) : content;
      if (current === normalizedContent)
        return;
      this.writeFileSync(p, normalizedContent);
    }
    async movePromise(fromP, toP) {
      try {
        await this.renamePromise(fromP, toP);
      } catch (error) {
        if (error.code === `EXDEV`) {
          await this.copyPromise(toP, fromP);
          await this.removePromise(fromP);
        } else {
          throw error;
        }
      }
    }
    moveSync(fromP, toP) {
      try {
        this.renameSync(fromP, toP);
      } catch (error) {
        if (error.code === `EXDEV`) {
          this.copySync(toP, fromP);
          this.removeSync(fromP);
        } else {
          throw error;
        }
      }
    }
    async lockPromise(affectedPath, callback) {
      const lockPath = `${affectedPath}.flock`;
      const interval = 1e3 / 60;
      const startTime = Date.now();
      let fd = null;
      const isAlive = async () => {
        let pid;
        try {
          [pid] = await this.readJsonPromise(lockPath);
        } catch (error) {
          return Date.now() - startTime < 500;
        }
        try {
          process.kill(pid, 0);
          return true;
        } catch (error) {
          return false;
        }
      };
      while (fd === null) {
        try {
          fd = await this.openPromise(lockPath, `wx`);
        } catch (error) {
          if (error.code === `EEXIST`) {
            if (!await isAlive()) {
              try {
                await this.unlinkPromise(lockPath);
                continue;
              } catch (error2) {
              }
            }
            if (Date.now() - startTime < 60 * 1e3) {
              await new Promise((resolve) => setTimeout(resolve, interval));
            } else {
              throw new Error(`Couldn't acquire a lock in a reasonable time (via ${lockPath})`);
            }
          } else {
            throw error;
          }
        }
      }
      await this.writePromise(fd, JSON.stringify([process.pid]));
      try {
        return await callback();
      } finally {
        try {
          await this.closePromise(fd);
          await this.unlinkPromise(lockPath);
        } catch (error) {
        }
      }
    }
    async readJsonPromise(p) {
      const content = await this.readFilePromise(p, `utf8`);
      try {
        return JSON.parse(content);
      } catch (error) {
        error.message += ` (in ${p})`;
        throw error;
      }
    }
    readJsonSync(p) {
      const content = this.readFileSync(p, `utf8`);
      try {
        return JSON.parse(content);
      } catch (error) {
        error.message += ` (in ${p})`;
        throw error;
      }
    }
    async writeJsonPromise(p, data) {
      return await this.writeFilePromise(p, `${JSON.stringify(data, null, 2)}
`);
    }
    writeJsonSync(p, data) {
      return this.writeFileSync(p, `${JSON.stringify(data, null, 2)}
`);
    }
    async preserveTimePromise(p, cb) {
      const stat = await this.lstatPromise(p);
      const result = await cb();
      if (typeof result !== `undefined`)
        p = result;
      if (this.lutimesPromise) {
        await this.lutimesPromise(p, stat.atime, stat.mtime);
      } else if (!stat.isSymbolicLink()) {
        await this.utimesPromise(p, stat.atime, stat.mtime);
      }
    }
    async preserveTimeSync(p, cb) {
      const stat = this.lstatSync(p);
      const result = cb();
      if (typeof result !== `undefined`)
        p = result;
      if (this.lutimesSync) {
        this.lutimesSync(p, stat.atime, stat.mtime);
      } else if (!stat.isSymbolicLink()) {
        this.utimesSync(p, stat.atime, stat.mtime);
      }
    }
  };
  FakeFS.DEFAULT_TIME = 315532800;
  var BasePortableFakeFS = class extends FakeFS {
    constructor() {
      super(ppath);
    }
  };
  function getEndOfLine(content) {
    const matches = content.match(/\r?\n/g);
    if (matches === null)
      return import_os.EOL;
    const crlf = matches.filter((nl) => nl === `\r
`).length;
    const lf = matches.length - crlf;
    return crlf > lf ? `\r
` : `
`;
  }
  function normalizeLineEndings(originalContent, newContent) {
    return newContent.replace(/\r?\n/g, getEndOfLine(originalContent));
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-fslib/sources/ZipFS.ts
  var import_fs3 = __toModule(require("fs"));
  var import_stream = __toModule(require("stream"));
  var import_util = __toModule(require("util"));
  var import_zlib = __toModule(require("zlib"));

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-fslib/sources/NodeFS.ts
  var import_fs2 = __toModule(require("fs"));
  var NodeFS = class extends BasePortableFakeFS {
    constructor(realFs = import_fs2.default) {
      super();
      this.realFs = realFs;
      if (typeof this.realFs.lutimes !== `undefined`) {
        this.lutimesPromise = this.lutimesPromiseImpl;
        this.lutimesSync = this.lutimesSyncImpl;
      }
    }
    getExtractHint() {
      return false;
    }
    getRealPath() {
      return PortablePath.root;
    }
    resolve(p) {
      return ppath.resolve(p);
    }
    async openPromise(p, flags, mode) {
      return await new Promise((resolve, reject) => {
        this.realFs.open(npath.fromPortablePath(p), flags, mode, this.makeCallback(resolve, reject));
      });
    }
    openSync(p, flags, mode) {
      return this.realFs.openSync(npath.fromPortablePath(p), flags, mode);
    }
    async opendirPromise(p, opts) {
      return await new Promise((resolve, reject) => {
        if (typeof opts !== `undefined`) {
          this.realFs.opendir(npath.fromPortablePath(p), opts, this.makeCallback(resolve, reject));
        } else {
          this.realFs.opendir(npath.fromPortablePath(p), this.makeCallback(resolve, reject));
        }
      }).then((dir) => {
        return Object.defineProperty(dir, `path`, {value: p, configurable: true, writable: true});
      });
    }
    opendirSync(p, opts) {
      const dir = typeof opts !== `undefined` ? this.realFs.opendirSync(npath.fromPortablePath(p), opts) : this.realFs.opendirSync(npath.fromPortablePath(p));
      return Object.defineProperty(dir, `path`, {value: p, configurable: true, writable: true});
    }
    async readPromise(fd, buffer, offset = 0, length = 0, position = -1) {
      return await new Promise((resolve, reject) => {
        this.realFs.read(fd, buffer, offset, length, position, (error, bytesRead) => {
          if (error) {
            reject(error);
          } else {
            resolve(bytesRead);
          }
        });
      });
    }
    readSync(fd, buffer, offset, length, position) {
      return this.realFs.readSync(fd, buffer, offset, length, position);
    }
    async writePromise(fd, buffer, offset, length, position) {
      return await new Promise((resolve, reject) => {
        if (typeof buffer === `string`) {
          return this.realFs.write(fd, buffer, offset, this.makeCallback(resolve, reject));
        } else {
          return this.realFs.write(fd, buffer, offset, length, position, this.makeCallback(resolve, reject));
        }
      });
    }
    writeSync(fd, buffer, offset, length, position) {
      if (typeof buffer === `string`) {
        return this.realFs.writeSync(fd, buffer, offset);
      } else {
        return this.realFs.writeSync(fd, buffer, offset, length, position);
      }
    }
    async closePromise(fd) {
      await new Promise((resolve, reject) => {
        this.realFs.close(fd, this.makeCallback(resolve, reject));
      });
    }
    closeSync(fd) {
      this.realFs.closeSync(fd);
    }
    createReadStream(p, opts) {
      const realPath = p !== null ? npath.fromPortablePath(p) : p;
      return this.realFs.createReadStream(realPath, opts);
    }
    createWriteStream(p, opts) {
      const realPath = p !== null ? npath.fromPortablePath(p) : p;
      return this.realFs.createWriteStream(realPath, opts);
    }
    async realpathPromise(p) {
      return await new Promise((resolve, reject) => {
        this.realFs.realpath(npath.fromPortablePath(p), {}, this.makeCallback(resolve, reject));
      }).then((path3) => {
        return npath.toPortablePath(path3);
      });
    }
    realpathSync(p) {
      return npath.toPortablePath(this.realFs.realpathSync(npath.fromPortablePath(p), {}));
    }
    async existsPromise(p) {
      return await new Promise((resolve) => {
        this.realFs.exists(npath.fromPortablePath(p), resolve);
      });
    }
    accessSync(p, mode) {
      return this.realFs.accessSync(npath.fromPortablePath(p), mode);
    }
    async accessPromise(p, mode) {
      return await new Promise((resolve, reject) => {
        this.realFs.access(npath.fromPortablePath(p), mode, this.makeCallback(resolve, reject));
      });
    }
    existsSync(p) {
      return this.realFs.existsSync(npath.fromPortablePath(p));
    }
    async statPromise(p, opts) {
      return await new Promise((resolve, reject) => {
        if (opts) {
          this.realFs.stat(npath.fromPortablePath(p), opts, this.makeCallback(resolve, reject));
        } else {
          this.realFs.stat(npath.fromPortablePath(p), this.makeCallback(resolve, reject));
        }
      });
    }
    statSync(p, opts) {
      if (opts) {
        return this.realFs.statSync(npath.fromPortablePath(p), opts);
      } else {
        return this.realFs.statSync(npath.fromPortablePath(p));
      }
    }
    async fstatPromise(fd, opts) {
      return await new Promise((resolve, reject) => {
        if (opts) {
          this.realFs.fstat(fd, opts, this.makeCallback(resolve, reject));
        } else {
          this.realFs.fstat(fd, this.makeCallback(resolve, reject));
        }
      });
    }
    fstatSync(fd, opts) {
      if (opts) {
        return this.realFs.fstatSync(fd, opts);
      } else {
        return this.realFs.fstatSync(fd);
      }
    }
    async lstatPromise(p, opts) {
      return await new Promise((resolve, reject) => {
        if (opts) {
          this.realFs.lstat(npath.fromPortablePath(p), opts, this.makeCallback(resolve, reject));
        } else {
          this.realFs.lstat(npath.fromPortablePath(p), this.makeCallback(resolve, reject));
        }
      });
    }
    lstatSync(p, opts) {
      if (opts) {
        return this.realFs.lstatSync(npath.fromPortablePath(p), opts);
      } else {
        return this.realFs.lstatSync(npath.fromPortablePath(p));
      }
    }
    async chmodPromise(p, mask) {
      return await new Promise((resolve, reject) => {
        this.realFs.chmod(npath.fromPortablePath(p), mask, this.makeCallback(resolve, reject));
      });
    }
    chmodSync(p, mask) {
      return this.realFs.chmodSync(npath.fromPortablePath(p), mask);
    }
    async chownPromise(p, uid, gid) {
      return await new Promise((resolve, reject) => {
        this.realFs.chown(npath.fromPortablePath(p), uid, gid, this.makeCallback(resolve, reject));
      });
    }
    chownSync(p, uid, gid) {
      return this.realFs.chownSync(npath.fromPortablePath(p), uid, gid);
    }
    async renamePromise(oldP, newP) {
      return await new Promise((resolve, reject) => {
        this.realFs.rename(npath.fromPortablePath(oldP), npath.fromPortablePath(newP), this.makeCallback(resolve, reject));
      });
    }
    renameSync(oldP, newP) {
      return this.realFs.renameSync(npath.fromPortablePath(oldP), npath.fromPortablePath(newP));
    }
    async copyFilePromise(sourceP, destP, flags = 0) {
      return await new Promise((resolve, reject) => {
        this.realFs.copyFile(npath.fromPortablePath(sourceP), npath.fromPortablePath(destP), flags, this.makeCallback(resolve, reject));
      });
    }
    copyFileSync(sourceP, destP, flags = 0) {
      return this.realFs.copyFileSync(npath.fromPortablePath(sourceP), npath.fromPortablePath(destP), flags);
    }
    async appendFilePromise(p, content, opts) {
      return await new Promise((resolve, reject) => {
        const fsNativePath = typeof p === `string` ? npath.fromPortablePath(p) : p;
        if (opts) {
          this.realFs.appendFile(fsNativePath, content, opts, this.makeCallback(resolve, reject));
        } else {
          this.realFs.appendFile(fsNativePath, content, this.makeCallback(resolve, reject));
        }
      });
    }
    appendFileSync(p, content, opts) {
      const fsNativePath = typeof p === `string` ? npath.fromPortablePath(p) : p;
      if (opts) {
        this.realFs.appendFileSync(fsNativePath, content, opts);
      } else {
        this.realFs.appendFileSync(fsNativePath, content);
      }
    }
    async writeFilePromise(p, content, opts) {
      return await new Promise((resolve, reject) => {
        const fsNativePath = typeof p === `string` ? npath.fromPortablePath(p) : p;
        if (opts) {
          this.realFs.writeFile(fsNativePath, content, opts, this.makeCallback(resolve, reject));
        } else {
          this.realFs.writeFile(fsNativePath, content, this.makeCallback(resolve, reject));
        }
      });
    }
    writeFileSync(p, content, opts) {
      const fsNativePath = typeof p === `string` ? npath.fromPortablePath(p) : p;
      if (opts) {
        this.realFs.writeFileSync(fsNativePath, content, opts);
      } else {
        this.realFs.writeFileSync(fsNativePath, content);
      }
    }
    async unlinkPromise(p) {
      return await new Promise((resolve, reject) => {
        this.realFs.unlink(npath.fromPortablePath(p), this.makeCallback(resolve, reject));
      });
    }
    unlinkSync(p) {
      return this.realFs.unlinkSync(npath.fromPortablePath(p));
    }
    async utimesPromise(p, atime, mtime) {
      return await new Promise((resolve, reject) => {
        this.realFs.utimes(npath.fromPortablePath(p), atime, mtime, this.makeCallback(resolve, reject));
      });
    }
    utimesSync(p, atime, mtime) {
      this.realFs.utimesSync(npath.fromPortablePath(p), atime, mtime);
    }
    async lutimesPromiseImpl(p, atime, mtime) {
      const lutimes = this.realFs.lutimes;
      if (typeof lutimes === `undefined`)
        throw ENOSYS(`unavailable Node binding`, `lutimes '${p}'`);
      return await new Promise((resolve, reject) => {
        lutimes.call(this.realFs, npath.fromPortablePath(p), atime, mtime, this.makeCallback(resolve, reject));
      });
    }
    lutimesSyncImpl(p, atime, mtime) {
      const lutimesSync = this.realFs.lutimesSync;
      if (typeof lutimesSync === `undefined`)
        throw ENOSYS(`unavailable Node binding`, `lutimes '${p}'`);
      lutimesSync.call(this.realFs, npath.fromPortablePath(p), atime, mtime);
    }
    async mkdirPromise(p, opts) {
      return await new Promise((resolve, reject) => {
        this.realFs.mkdir(npath.fromPortablePath(p), opts, this.makeCallback(resolve, reject));
      });
    }
    mkdirSync(p, opts) {
      return this.realFs.mkdirSync(npath.fromPortablePath(p), opts);
    }
    async rmdirPromise(p, opts) {
      return await new Promise((resolve, reject) => {
        if (opts) {
          this.realFs.rmdir(npath.fromPortablePath(p), opts, this.makeCallback(resolve, reject));
        } else {
          this.realFs.rmdir(npath.fromPortablePath(p), this.makeCallback(resolve, reject));
        }
      });
    }
    rmdirSync(p, opts) {
      return this.realFs.rmdirSync(npath.fromPortablePath(p), opts);
    }
    async linkPromise(existingP, newP) {
      return await new Promise((resolve, reject) => {
        this.realFs.link(npath.fromPortablePath(existingP), npath.fromPortablePath(newP), this.makeCallback(resolve, reject));
      });
    }
    linkSync(existingP, newP) {
      return this.realFs.linkSync(npath.fromPortablePath(existingP), npath.fromPortablePath(newP));
    }
    async symlinkPromise(target, p, type) {
      return await new Promise((resolve, reject) => {
        this.realFs.symlink(npath.fromPortablePath(target.replace(/\/+$/, ``)), npath.fromPortablePath(p), type, this.makeCallback(resolve, reject));
      });
    }
    symlinkSync(target, p, type) {
      return this.realFs.symlinkSync(npath.fromPortablePath(target.replace(/\/+$/, ``)), npath.fromPortablePath(p), type);
    }
    async readFilePromise(p, encoding) {
      return await new Promise((resolve, reject) => {
        const fsNativePath = typeof p === `string` ? npath.fromPortablePath(p) : p;
        this.realFs.readFile(fsNativePath, encoding, this.makeCallback(resolve, reject));
      });
    }
    readFileSync(p, encoding) {
      const fsNativePath = typeof p === `string` ? npath.fromPortablePath(p) : p;
      return this.realFs.readFileSync(fsNativePath, encoding);
    }
    async readdirPromise(p, {withFileTypes} = {}) {
      return await new Promise((resolve, reject) => {
        if (withFileTypes) {
          this.realFs.readdir(npath.fromPortablePath(p), {withFileTypes: true}, this.makeCallback(resolve, reject));
        } else {
          this.realFs.readdir(npath.fromPortablePath(p), this.makeCallback((value) => resolve(value), reject));
        }
      });
    }
    readdirSync(p, {withFileTypes} = {}) {
      if (withFileTypes) {
        return this.realFs.readdirSync(npath.fromPortablePath(p), {withFileTypes: true});
      } else {
        return this.realFs.readdirSync(npath.fromPortablePath(p));
      }
    }
    async readlinkPromise(p) {
      return await new Promise((resolve, reject) => {
        this.realFs.readlink(npath.fromPortablePath(p), this.makeCallback(resolve, reject));
      }).then((path3) => {
        return npath.toPortablePath(path3);
      });
    }
    readlinkSync(p) {
      return npath.toPortablePath(this.realFs.readlinkSync(npath.fromPortablePath(p)));
    }
    async truncatePromise(p, len) {
      return await new Promise((resolve, reject) => {
        this.realFs.truncate(npath.fromPortablePath(p), len, this.makeCallback(resolve, reject));
      });
    }
    truncateSync(p, len) {
      return this.realFs.truncateSync(npath.fromPortablePath(p), len);
    }
    watch(p, a, b) {
      return this.realFs.watch(npath.fromPortablePath(p), a, b);
    }
    watchFile(p, a, b) {
      return this.realFs.watchFile(npath.fromPortablePath(p), a, b);
    }
    unwatchFile(p, cb) {
      return this.realFs.unwatchFile(npath.fromPortablePath(p), cb);
    }
    makeCallback(resolve, reject) {
      return (err, result) => {
        if (err) {
          reject(err);
        } else {
          resolve(result);
        }
      };
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-fslib/sources/algorithms/watchFile/CustomStatWatcher.ts
  var import_events = __toModule(require("events"));
  var Event;
  (function(Event2) {
    Event2["Change"] = `change`;
    Event2["Stop"] = `stop`;
  })(Event || (Event = {}));
  var Status;
  (function(Status2) {
    Status2["Ready"] = `ready`;
    Status2["Running"] = `running`;
    Status2["Stopped"] = `stopped`;
  })(Status || (Status = {}));
  function assertStatus(current, expected) {
    if (current !== expected) {
      throw new Error(`Invalid StatWatcher status: expected '${expected}', got '${current}'`);
    }
  }
  var CustomStatWatcher = class extends import_events.EventEmitter {
    constructor(fakeFs, path3, {bigint = false} = {}) {
      super();
      this.status = Status.Ready;
      this.changeListeners = new Map();
      this.startTimeout = null;
      this.fakeFs = fakeFs;
      this.path = path3;
      this.bigint = bigint;
      this.lastStats = this.stat();
    }
    static create(fakeFs, path3, opts) {
      const statWatcher = new CustomStatWatcher(fakeFs, path3, opts);
      statWatcher.start();
      return statWatcher;
    }
    start() {
      assertStatus(this.status, Status.Ready);
      this.status = Status.Running;
      this.startTimeout = setTimeout(() => {
        this.startTimeout = null;
        if (!this.fakeFs.existsSync(this.path)) {
          this.emit(Event.Change, this.lastStats, this.lastStats);
        }
      }, 3);
    }
    stop() {
      assertStatus(this.status, Status.Running);
      this.status = Status.Stopped;
      if (this.startTimeout !== null) {
        clearTimeout(this.startTimeout);
        this.startTimeout = null;
      }
      this.emit(Event.Stop);
    }
    stat() {
      try {
        return this.fakeFs.statSync(this.path, {bigint: this.bigint});
      } catch (error) {
        if (error.code === `ENOENT`) {
          const statInstance = this.bigint ? new BigIntStatsEntry() : new StatEntry();
          return clearStats(statInstance);
        } else {
          throw error;
        }
      }
    }
    makeInterval(opts) {
      const interval = setInterval(() => {
        const currentStats = this.stat();
        const previousStats = this.lastStats;
        if (areStatsEqual(currentStats, previousStats))
          return;
        this.lastStats = currentStats;
        this.emit(Event.Change, currentStats, previousStats);
      }, opts.interval);
      return opts.persistent ? interval : interval.unref();
    }
    registerChangeListener(listener, opts) {
      this.addListener(Event.Change, listener);
      this.changeListeners.set(listener, this.makeInterval(opts));
    }
    unregisterChangeListener(listener) {
      this.removeListener(Event.Change, listener);
      const interval = this.changeListeners.get(listener);
      if (typeof interval !== `undefined`)
        clearInterval(interval);
      this.changeListeners.delete(listener);
    }
    unregisterAllChangeListeners() {
      for (const listener of this.changeListeners.keys()) {
        this.unregisterChangeListener(listener);
      }
    }
    hasChangeListeners() {
      return this.changeListeners.size > 0;
    }
    ref() {
      for (const interval of this.changeListeners.values())
        interval.ref();
      return this;
    }
    unref() {
      for (const interval of this.changeListeners.values())
        interval.unref();
      return this;
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-fslib/sources/algorithms/watchFile.ts
  var statWatchersByFakeFS = new WeakMap();
  function watchFile(fakeFs, path3, a, b) {
    let bigint;
    let persistent;
    let interval;
    let listener;
    switch (typeof a) {
      case `function`:
        {
          bigint = false;
          persistent = true;
          interval = 5007;
          listener = a;
        }
        break;
      default:
        {
          ({
            bigint = false,
            persistent = true,
            interval = 5007
          } = a);
          listener = b;
        }
        break;
    }
    let statWatchers = statWatchersByFakeFS.get(fakeFs);
    if (typeof statWatchers === `undefined`)
      statWatchersByFakeFS.set(fakeFs, statWatchers = new Map());
    let statWatcher = statWatchers.get(path3);
    if (typeof statWatcher === `undefined`) {
      statWatcher = CustomStatWatcher.create(fakeFs, path3, {bigint});
      statWatchers.set(path3, statWatcher);
    }
    statWatcher.registerChangeListener(listener, {persistent, interval});
    return statWatcher;
  }
  function unwatchFile(fakeFs, path3, cb) {
    const statWatchers = statWatchersByFakeFS.get(fakeFs);
    if (typeof statWatchers === `undefined`)
      return;
    const statWatcher = statWatchers.get(path3);
    if (typeof statWatcher === `undefined`)
      return;
    if (typeof cb === `undefined`)
      statWatcher.unregisterAllChangeListeners();
    else
      statWatcher.unregisterChangeListener(cb);
    if (!statWatcher.hasChangeListeners()) {
      statWatcher.stop();
      statWatchers.delete(path3);
    }
  }
  function unwatchAllFiles(fakeFs) {
    const statWatchers = statWatchersByFakeFS.get(fakeFs);
    if (typeof statWatchers === `undefined`)
      return;
    for (const path3 of statWatchers.keys()) {
      unwatchFile(fakeFs, path3);
    }
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-fslib/sources/ZipFS.ts
  var DEFAULT_COMPRESSION_LEVEL = `mixed`;
  function toUnixTimestamp(time) {
    if (typeof time === `string` && String(+time) === time)
      return +time;
    if (Number.isFinite(time)) {
      if (time < 0) {
        return Date.now() / 1e3;
      } else {
        return time;
      }
    }
    if ((0, import_util.isDate)(time))
      return time.getTime() / 1e3;
    throw new Error(`Invalid time`);
  }
  var ZipFS = class extends BasePortableFakeFS {
    constructor(source, opts) {
      super();
      this.lzSource = null;
      this.listings = new Map();
      this.entries = new Map();
      this.fileSources = new Map();
      this.fds = new Map();
      this.nextFd = 0;
      this.ready = false;
      this.readOnly = false;
      this.libzip = opts.libzip;
      const pathOptions = opts;
      this.level = typeof pathOptions.level !== `undefined` ? pathOptions.level : DEFAULT_COMPRESSION_LEVEL;
      if (source === null) {
        source = Buffer.from([
          80,
          75,
          5,
          6,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]);
      }
      if (typeof source === `string`) {
        const {baseFs = new NodeFS()} = pathOptions;
        this.baseFs = baseFs;
        this.path = source;
      } else {
        this.path = null;
        this.baseFs = null;
      }
      if (opts.stats) {
        this.stats = opts.stats;
      } else {
        if (typeof source === `string`) {
          try {
            this.stats = this.baseFs.statSync(source);
          } catch (error) {
            if (error.code === `ENOENT` && pathOptions.create) {
              this.stats = makeDefaultStats();
            } else {
              throw error;
            }
          }
        } else {
          this.stats = makeDefaultStats();
        }
      }
      const errPtr = this.libzip.malloc(4);
      try {
        let flags = 0;
        if (typeof source === `string` && pathOptions.create)
          flags |= this.libzip.ZIP_CREATE | this.libzip.ZIP_TRUNCATE;
        if (opts.readOnly) {
          flags |= this.libzip.ZIP_RDONLY;
          this.readOnly = true;
        }
        if (typeof source === `string`) {
          this.zip = this.libzip.open(npath.fromPortablePath(source), flags, errPtr);
        } else {
          const lzSource = this.allocateUnattachedSource(source);
          try {
            this.zip = this.libzip.openFromSource(lzSource, flags, errPtr);
            this.lzSource = lzSource;
          } catch (error) {
            this.libzip.source.free(lzSource);
            throw error;
          }
        }
        if (this.zip === 0) {
          const error = this.libzip.struct.errorS();
          this.libzip.error.initWithCode(error, this.libzip.getValue(errPtr, `i32`));
          throw this.makeLibzipError(error);
        }
      } finally {
        this.libzip.free(errPtr);
      }
      this.listings.set(PortablePath.root, new Set());
      const entryCount = this.libzip.getNumEntries(this.zip, 0);
      for (let t5 = 0; t5 < entryCount; ++t5) {
        const raw = this.libzip.getName(this.zip, t5, 0);
        if (ppath.isAbsolute(raw))
          continue;
        const p = ppath.resolve(PortablePath.root, raw);
        this.registerEntry(p, t5);
        if (raw.endsWith(`/`)) {
          this.registerListing(p);
        }
      }
      this.symlinkCount = this.libzip.ext.countSymlinks(this.zip);
      if (this.symlinkCount === -1)
        throw this.makeLibzipError(this.libzip.getError(this.zip));
      this.ready = true;
    }
    makeLibzipError(error) {
      const errorCode = this.libzip.struct.errorCodeZip(error);
      const strerror = this.libzip.error.strerror(error);
      const libzipError = new LibzipError(strerror, this.libzip.errors[errorCode]);
      if (errorCode === this.libzip.errors.ZIP_ER_CHANGED)
        throw new Error(`Assertion failed: Unexpected libzip error: ${libzipError.message}`);
      return libzipError;
    }
    getExtractHint(hints) {
      for (const fileName of this.entries.keys()) {
        const ext = this.pathUtils.extname(fileName);
        if (hints.relevantExtensions.has(ext)) {
          return true;
        }
      }
      return false;
    }
    getAllFiles() {
      return Array.from(this.entries.keys());
    }
    getRealPath() {
      if (!this.path)
        throw new Error(`ZipFS don't have real paths when loaded from a buffer`);
      return this.path;
    }
    getBufferAndClose() {
      this.prepareClose();
      if (!this.lzSource)
        throw new Error(`ZipFS was not created from a Buffer`);
      try {
        this.libzip.source.keep(this.lzSource);
        if (this.libzip.close(this.zip) === -1)
          throw this.makeLibzipError(this.libzip.getError(this.zip));
        if (this.libzip.source.open(this.lzSource) === -1)
          throw this.makeLibzipError(this.libzip.source.error(this.lzSource));
        if (this.libzip.source.seek(this.lzSource, 0, 0, this.libzip.SEEK_END) === -1)
          throw this.makeLibzipError(this.libzip.source.error(this.lzSource));
        const size = this.libzip.source.tell(this.lzSource);
        if (size === -1)
          throw this.makeLibzipError(this.libzip.source.error(this.lzSource));
        if (this.libzip.source.seek(this.lzSource, 0, 0, this.libzip.SEEK_SET) === -1)
          throw this.makeLibzipError(this.libzip.source.error(this.lzSource));
        const buffer = this.libzip.malloc(size);
        if (!buffer)
          throw new Error(`Couldn't allocate enough memory`);
        try {
          const rc = this.libzip.source.read(this.lzSource, buffer, size);
          if (rc === -1)
            throw this.makeLibzipError(this.libzip.source.error(this.lzSource));
          else if (rc < size)
            throw new Error(`Incomplete read`);
          else if (rc > size)
            throw new Error(`Overread`);
          const memory = this.libzip.HEAPU8.subarray(buffer, buffer + size);
          return Buffer.from(memory);
        } finally {
          this.libzip.free(buffer);
        }
      } finally {
        this.libzip.source.close(this.lzSource);
        this.libzip.source.free(this.lzSource);
        this.ready = false;
      }
    }
    prepareClose() {
      if (!this.ready)
        throw EBUSY(`archive closed, close`);
      unwatchAllFiles(this);
    }
    saveAndClose() {
      if (!this.path || !this.baseFs)
        throw new Error(`ZipFS cannot be saved and must be discarded when loaded from a buffer`);
      this.prepareClose();
      if (this.readOnly) {
        this.discardAndClose();
        return;
      }
      const previousMod = this.baseFs.existsSync(this.path) ? this.baseFs.statSync(this.path).mode & 511 : null;
      const rc = this.libzip.close(this.zip);
      if (rc === -1)
        throw this.makeLibzipError(this.libzip.getError(this.zip));
      if (previousMod === null)
        this.baseFs.chmodSync(this.path, this.stats.mode);
      else if (previousMod !== (this.baseFs.statSync(this.path).mode & 511))
        this.baseFs.chmodSync(this.path, previousMod);
      this.ready = false;
    }
    discardAndClose() {
      this.prepareClose();
      this.libzip.discard(this.zip);
      this.ready = false;
    }
    resolve(p) {
      return ppath.resolve(PortablePath.root, p);
    }
    async openPromise(p, flags, mode) {
      return this.openSync(p, flags, mode);
    }
    openSync(p, flags, mode) {
      const fd = this.nextFd++;
      this.fds.set(fd, {cursor: 0, p});
      return fd;
    }
    hasOpenFileHandles() {
      return !!this.fds.size;
    }
    async opendirPromise(p, opts) {
      return this.opendirSync(p, opts);
    }
    opendirSync(p, opts = {}) {
      const resolvedP = this.resolveFilename(`opendir '${p}'`, p);
      if (!this.entries.has(resolvedP) && !this.listings.has(resolvedP))
        throw ENOENT(`opendir '${p}'`);
      const directoryListing = this.listings.get(resolvedP);
      if (!directoryListing)
        throw ENOTDIR(`opendir '${p}'`);
      const entries = [...directoryListing];
      const fd = this.openSync(resolvedP, `r`);
      const onClose = () => {
        this.closeSync(fd);
      };
      return opendir(this, resolvedP, entries, {onClose});
    }
    async readPromise(fd, buffer, offset, length, position) {
      return this.readSync(fd, buffer, offset, length, position);
    }
    readSync(fd, buffer, offset = 0, length = 0, position = -1) {
      const entry = this.fds.get(fd);
      if (typeof entry === `undefined`)
        throw EBADF(`read`);
      let realPosition;
      if (position === -1 || position === null)
        realPosition = entry.cursor;
      else
        realPosition = position;
      const source = this.readFileSync(entry.p);
      source.copy(buffer, offset, realPosition, realPosition + length);
      const bytesRead = Math.max(0, Math.min(source.length - realPosition, length));
      if (position === -1 || position === null)
        entry.cursor += bytesRead;
      return bytesRead;
    }
    async writePromise(fd, buffer, offset, length, position) {
      if (typeof buffer === `string`) {
        return this.writeSync(fd, buffer, position);
      } else {
        return this.writeSync(fd, buffer, offset, length, position);
      }
    }
    writeSync(fd, buffer, offset, length, position) {
      const entry = this.fds.get(fd);
      if (typeof entry === `undefined`)
        throw EBADF(`read`);
      throw new Error(`Unimplemented`);
    }
    async closePromise(fd) {
      return this.closeSync(fd);
    }
    closeSync(fd) {
      const entry = this.fds.get(fd);
      if (typeof entry === `undefined`)
        throw EBADF(`read`);
      this.fds.delete(fd);
    }
    createReadStream(p, {encoding} = {}) {
      if (p === null)
        throw new Error(`Unimplemented`);
      const fd = this.openSync(p, `r`);
      const stream = Object.assign(new import_stream.PassThrough({
        emitClose: true,
        autoDestroy: true,
        destroy: (error, callback) => {
          clearImmediate(immediate);
          this.closeSync(fd);
          callback(error);
        }
      }), {
        close() {
          stream.destroy();
        },
        bytesRead: 0,
        path: p
      });
      const immediate = setImmediate(async () => {
        try {
          const data = await this.readFilePromise(p, encoding);
          stream.bytesRead = data.length;
          stream.end(data);
        } catch (error) {
          stream.destroy(error);
        }
      });
      return stream;
    }
    createWriteStream(p, {encoding} = {}) {
      if (this.readOnly)
        throw EROFS(`open '${p}'`);
      if (p === null)
        throw new Error(`Unimplemented`);
      const chunks = [];
      const fd = this.openSync(p, `w`);
      const stream = Object.assign(new import_stream.PassThrough({
        autoDestroy: true,
        emitClose: true,
        destroy: (error, callback) => {
          try {
            if (error) {
              callback(error);
            } else {
              this.writeFileSync(p, Buffer.concat(chunks), encoding);
              callback(null);
            }
          } catch (err) {
            callback(err);
          } finally {
            this.closeSync(fd);
          }
        }
      }), {
        bytesWritten: 0,
        path: p,
        close() {
          stream.destroy();
        }
      });
      stream.on(`data`, (chunk) => {
        const chunkBuffer = Buffer.from(chunk);
        stream.bytesWritten += chunkBuffer.length;
        chunks.push(chunkBuffer);
      });
      return stream;
    }
    async realpathPromise(p) {
      return this.realpathSync(p);
    }
    realpathSync(p) {
      const resolvedP = this.resolveFilename(`lstat '${p}'`, p);
      if (!this.entries.has(resolvedP) && !this.listings.has(resolvedP))
        throw ENOENT(`lstat '${p}'`);
      return resolvedP;
    }
    async existsPromise(p) {
      return this.existsSync(p);
    }
    existsSync(p) {
      if (!this.ready)
        throw EBUSY(`archive closed, existsSync '${p}'`);
      if (this.symlinkCount === 0) {
        const resolvedP2 = ppath.resolve(PortablePath.root, p);
        return this.entries.has(resolvedP2) || this.listings.has(resolvedP2);
      }
      let resolvedP;
      try {
        resolvedP = this.resolveFilename(`stat '${p}'`, p);
      } catch (error) {
        return false;
      }
      return this.entries.has(resolvedP) || this.listings.has(resolvedP);
    }
    async accessPromise(p, mode) {
      return this.accessSync(p, mode);
    }
    accessSync(p, mode = import_fs3.constants.F_OK) {
      const resolvedP = this.resolveFilename(`access '${p}'`, p);
      if (!this.entries.has(resolvedP) && !this.listings.has(resolvedP))
        throw ENOENT(`access '${p}'`);
      if (this.readOnly && mode & import_fs3.constants.W_OK) {
        throw EROFS(`access '${p}'`);
      }
    }
    async statPromise(p, opts) {
      return this.statSync(p, opts);
    }
    statSync(p, opts) {
      const resolvedP = this.resolveFilename(`stat '${p}'`, p);
      if (!this.entries.has(resolvedP) && !this.listings.has(resolvedP))
        throw ENOENT(`stat '${p}'`);
      if (p[p.length - 1] === `/` && !this.listings.has(resolvedP))
        throw ENOTDIR(`stat '${p}'`);
      return this.statImpl(`stat '${p}'`, resolvedP, opts);
    }
    async fstatPromise(fd, opts) {
      return this.fstatSync(fd, opts);
    }
    fstatSync(fd, opts) {
      const entry = this.fds.get(fd);
      if (typeof entry === `undefined`)
        throw EBADF(`fstatSync`);
      const {p} = entry;
      const resolvedP = this.resolveFilename(`stat '${p}'`, p);
      if (!this.entries.has(resolvedP) && !this.listings.has(resolvedP))
        throw ENOENT(`stat '${p}'`);
      if (p[p.length - 1] === `/` && !this.listings.has(resolvedP))
        throw ENOTDIR(`stat '${p}'`);
      return this.statImpl(`fstat '${p}'`, resolvedP, opts);
    }
    async lstatPromise(p, opts) {
      return this.lstatSync(p, opts);
    }
    lstatSync(p, opts) {
      const resolvedP = this.resolveFilename(`lstat '${p}'`, p, false);
      if (!this.entries.has(resolvedP) && !this.listings.has(resolvedP))
        throw ENOENT(`lstat '${p}'`);
      if (p[p.length - 1] === `/` && !this.listings.has(resolvedP))
        throw ENOTDIR(`lstat '${p}'`);
      return this.statImpl(`lstat '${p}'`, resolvedP, opts);
    }
    statImpl(reason, p, opts = {}) {
      const entry = this.entries.get(p);
      if (typeof entry !== `undefined`) {
        const stat = this.libzip.struct.statS();
        const rc = this.libzip.statIndex(this.zip, entry, 0, 0, stat);
        if (rc === -1)
          throw this.makeLibzipError(this.libzip.getError(this.zip));
        const uid = this.stats.uid;
        const gid = this.stats.gid;
        const size = this.libzip.struct.statSize(stat) >>> 0;
        const blksize = 512;
        const blocks = Math.ceil(size / blksize);
        const mtimeMs = (this.libzip.struct.statMtime(stat) >>> 0) * 1e3;
        const atimeMs = mtimeMs;
        const birthtimeMs = mtimeMs;
        const ctimeMs = mtimeMs;
        const atime = new Date(atimeMs);
        const birthtime = new Date(birthtimeMs);
        const ctime = new Date(ctimeMs);
        const mtime = new Date(mtimeMs);
        const type = this.listings.has(p) ? S_IFDIR : this.isSymbolicLink(entry) ? S_IFLNK : S_IFREG;
        const defaultMode = type === S_IFDIR ? 493 : 420;
        const mode = type | this.getUnixMode(entry, defaultMode) & 511;
        const crc = this.libzip.struct.statCrc(stat);
        const statInstance = Object.assign(new StatEntry(), {uid, gid, size, blksize, blocks, atime, birthtime, ctime, mtime, atimeMs, birthtimeMs, ctimeMs, mtimeMs, mode, crc});
        return opts.bigint === true ? convertToBigIntStats(statInstance) : statInstance;
      }
      if (this.listings.has(p)) {
        const uid = this.stats.uid;
        const gid = this.stats.gid;
        const size = 0;
        const blksize = 512;
        const blocks = 0;
        const atimeMs = this.stats.mtimeMs;
        const birthtimeMs = this.stats.mtimeMs;
        const ctimeMs = this.stats.mtimeMs;
        const mtimeMs = this.stats.mtimeMs;
        const atime = new Date(atimeMs);
        const birthtime = new Date(birthtimeMs);
        const ctime = new Date(ctimeMs);
        const mtime = new Date(mtimeMs);
        const mode = S_IFDIR | 493;
        const crc = 0;
        const statInstance = Object.assign(new StatEntry(), {uid, gid, size, blksize, blocks, atime, birthtime, ctime, mtime, atimeMs, birthtimeMs, ctimeMs, mtimeMs, mode, crc});
        return opts.bigint === true ? convertToBigIntStats(statInstance) : statInstance;
      }
      throw new Error(`Unreachable`);
    }
    getUnixMode(index, defaultMode) {
      const rc = this.libzip.file.getExternalAttributes(this.zip, index, 0, 0, this.libzip.uint08S, this.libzip.uint32S);
      if (rc === -1)
        throw this.makeLibzipError(this.libzip.getError(this.zip));
      const opsys = this.libzip.getValue(this.libzip.uint08S, `i8`) >>> 0;
      if (opsys !== this.libzip.ZIP_OPSYS_UNIX)
        return defaultMode;
      return this.libzip.getValue(this.libzip.uint32S, `i32`) >>> 16;
    }
    registerListing(p) {
      let listing = this.listings.get(p);
      if (listing)
        return listing;
      const parentListing = this.registerListing(ppath.dirname(p));
      listing = new Set();
      parentListing.add(ppath.basename(p));
      this.listings.set(p, listing);
      return listing;
    }
    registerEntry(p, index) {
      const parentListing = this.registerListing(ppath.dirname(p));
      parentListing.add(ppath.basename(p));
      this.entries.set(p, index);
    }
    unregisterListing(p) {
      this.listings.delete(p);
      const parentListing = this.listings.get(ppath.dirname(p));
      parentListing == null ? void 0 : parentListing.delete(ppath.basename(p));
    }
    unregisterEntry(p) {
      this.unregisterListing(p);
      const entry = this.entries.get(p);
      this.entries.delete(p);
      if (typeof entry === `undefined`)
        return;
      this.fileSources.delete(entry);
      if (this.isSymbolicLink(entry)) {
        this.symlinkCount--;
      }
    }
    deleteEntry(p, index) {
      this.unregisterEntry(p);
      const rc = this.libzip.delete(this.zip, index);
      if (rc === -1) {
        throw this.makeLibzipError(this.libzip.getError(this.zip));
      }
    }
    resolveFilename(reason, p, resolveLastComponent = true) {
      if (!this.ready)
        throw EBUSY(`archive closed, ${reason}`);
      let resolvedP = ppath.resolve(PortablePath.root, p);
      if (resolvedP === `/`)
        return PortablePath.root;
      const fileIndex = this.entries.get(resolvedP);
      if (resolveLastComponent && fileIndex !== void 0) {
        if (this.symlinkCount !== 0 && this.isSymbolicLink(fileIndex)) {
          const target = this.getFileSource(fileIndex).toString();
          return this.resolveFilename(reason, ppath.resolve(ppath.dirname(resolvedP), target), true);
        } else {
          return resolvedP;
        }
      }
      while (true) {
        const parentP = this.resolveFilename(reason, ppath.dirname(resolvedP), true);
        const isDir = this.listings.has(parentP);
        const doesExist = this.entries.has(parentP);
        if (!isDir && !doesExist)
          throw ENOENT(reason);
        if (!isDir)
          throw ENOTDIR(reason);
        resolvedP = ppath.resolve(parentP, ppath.basename(resolvedP));
        if (!resolveLastComponent || this.symlinkCount === 0)
          break;
        const index = this.libzip.name.locate(this.zip, resolvedP.slice(1));
        if (index === -1)
          break;
        if (this.isSymbolicLink(index)) {
          const target = this.getFileSource(index).toString();
          resolvedP = ppath.resolve(ppath.dirname(resolvedP), target);
        } else {
          break;
        }
      }
      return resolvedP;
    }
    allocateBuffer(content) {
      if (!Buffer.isBuffer(content))
        content = Buffer.from(content);
      const buffer = this.libzip.malloc(content.byteLength);
      if (!buffer)
        throw new Error(`Couldn't allocate enough memory`);
      const heap = new Uint8Array(this.libzip.HEAPU8.buffer, buffer, content.byteLength);
      heap.set(content);
      return {buffer, byteLength: content.byteLength};
    }
    allocateUnattachedSource(content) {
      const error = this.libzip.struct.errorS();
      const {buffer, byteLength} = this.allocateBuffer(content);
      const source = this.libzip.source.fromUnattachedBuffer(buffer, byteLength, 0, true, error);
      if (source === 0) {
        this.libzip.free(error);
        throw this.makeLibzipError(error);
      }
      return source;
    }
    allocateSource(content) {
      const {buffer, byteLength} = this.allocateBuffer(content);
      const source = this.libzip.source.fromBuffer(this.zip, buffer, byteLength, 0, true);
      if (source === 0) {
        this.libzip.free(buffer);
        throw this.makeLibzipError(this.libzip.getError(this.zip));
      }
      return source;
    }
    setFileSource(p, content) {
      const buffer = Buffer.isBuffer(content) ? content : Buffer.from(content);
      const target = ppath.relative(PortablePath.root, p);
      const lzSource = this.allocateSource(content);
      try {
        const newIndex = this.libzip.file.add(this.zip, target, lzSource, this.libzip.ZIP_FL_OVERWRITE);
        if (newIndex === -1)
          throw this.makeLibzipError(this.libzip.getError(this.zip));
        if (this.level !== `mixed`) {
          let method;
          if (this.level === 0)
            method = this.libzip.ZIP_CM_STORE;
          else
            method = this.libzip.ZIP_CM_DEFLATE;
          const rc = this.libzip.file.setCompression(this.zip, newIndex, 0, method, this.level);
          if (rc === -1) {
            throw this.makeLibzipError(this.libzip.getError(this.zip));
          }
        }
        this.fileSources.set(newIndex, buffer);
        return newIndex;
      } catch (error) {
        this.libzip.source.free(lzSource);
        throw error;
      }
    }
    isSymbolicLink(index) {
      if (this.symlinkCount === 0)
        return false;
      const attrs = this.libzip.file.getExternalAttributes(this.zip, index, 0, 0, this.libzip.uint08S, this.libzip.uint32S);
      if (attrs === -1)
        throw this.makeLibzipError(this.libzip.getError(this.zip));
      const opsys = this.libzip.getValue(this.libzip.uint08S, `i8`) >>> 0;
      if (opsys !== this.libzip.ZIP_OPSYS_UNIX)
        return false;
      const attributes = this.libzip.getValue(this.libzip.uint32S, `i32`) >>> 16;
      return (attributes & S_IFMT) === S_IFLNK;
    }
    getFileSource(index, opts = {asyncDecompress: false}) {
      const cachedFileSource = this.fileSources.get(index);
      if (typeof cachedFileSource !== `undefined`)
        return cachedFileSource;
      const stat = this.libzip.struct.statS();
      const rc = this.libzip.statIndex(this.zip, index, 0, 0, stat);
      if (rc === -1)
        throw this.makeLibzipError(this.libzip.getError(this.zip));
      const size = this.libzip.struct.statCompSize(stat);
      const compressionMethod = this.libzip.struct.statCompMethod(stat);
      const buffer = this.libzip.malloc(size);
      try {
        const file = this.libzip.fopenIndex(this.zip, index, 0, this.libzip.ZIP_FL_COMPRESSED);
        if (file === 0)
          throw this.makeLibzipError(this.libzip.getError(this.zip));
        try {
          const rc2 = this.libzip.fread(file, buffer, size, 0);
          if (rc2 === -1)
            throw this.makeLibzipError(this.libzip.file.getError(file));
          else if (rc2 < size)
            throw new Error(`Incomplete read`);
          else if (rc2 > size)
            throw new Error(`Overread`);
          const memory = this.libzip.HEAPU8.subarray(buffer, buffer + size);
          const data = Buffer.from(memory);
          if (compressionMethod === 0) {
            this.fileSources.set(index, data);
            return data;
          } else if (opts.asyncDecompress) {
            return new Promise((resolve, reject) => {
              import_zlib.default.inflateRaw(data, (error, result) => {
                if (error) {
                  reject(error);
                } else {
                  this.fileSources.set(index, result);
                  resolve(result);
                }
              });
            });
          } else {
            const decompressedData = import_zlib.default.inflateRawSync(data);
            this.fileSources.set(index, decompressedData);
            return decompressedData;
          }
        } finally {
          this.libzip.fclose(file);
        }
      } finally {
        this.libzip.free(buffer);
      }
    }
    async chmodPromise(p, mask) {
      return this.chmodSync(p, mask);
    }
    chmodSync(p, mask) {
      if (this.readOnly)
        throw EROFS(`chmod '${p}'`);
      mask &= 493;
      const resolvedP = this.resolveFilename(`chmod '${p}'`, p, false);
      const entry = this.entries.get(resolvedP);
      if (typeof entry === `undefined`)
        throw new Error(`Assertion failed: The entry should have been registered (${resolvedP})`);
      const oldMod = this.getUnixMode(entry, S_IFREG | 0);
      const newMod = oldMod & ~511 | mask;
      const rc = this.libzip.file.setExternalAttributes(this.zip, entry, 0, 0, this.libzip.ZIP_OPSYS_UNIX, newMod << 16);
      if (rc === -1) {
        throw this.makeLibzipError(this.libzip.getError(this.zip));
      }
    }
    async chownPromise(p, uid, gid) {
      return this.chownSync(p, uid, gid);
    }
    chownSync(p, uid, gid) {
      throw new Error(`Unimplemented`);
    }
    async renamePromise(oldP, newP) {
      return this.renameSync(oldP, newP);
    }
    renameSync(oldP, newP) {
      throw new Error(`Unimplemented`);
    }
    async copyFilePromise(sourceP, destP, flags) {
      const {indexSource, indexDest, resolvedDestP} = this.prepareCopyFile(sourceP, destP, flags);
      const source = await this.getFileSource(indexSource, {asyncDecompress: true});
      const newIndex = this.setFileSource(resolvedDestP, source);
      if (newIndex !== indexDest) {
        this.registerEntry(resolvedDestP, newIndex);
      }
    }
    copyFileSync(sourceP, destP, flags = 0) {
      const {indexSource, indexDest, resolvedDestP} = this.prepareCopyFile(sourceP, destP, flags);
      const source = this.getFileSource(indexSource);
      const newIndex = this.setFileSource(resolvedDestP, source);
      if (newIndex !== indexDest) {
        this.registerEntry(resolvedDestP, newIndex);
      }
    }
    prepareCopyFile(sourceP, destP, flags = 0) {
      if (this.readOnly)
        throw EROFS(`copyfile '${sourceP} -> '${destP}'`);
      if ((flags & import_fs3.constants.COPYFILE_FICLONE_FORCE) !== 0)
        throw ENOSYS(`unsupported clone operation`, `copyfile '${sourceP}' -> ${destP}'`);
      const resolvedSourceP = this.resolveFilename(`copyfile '${sourceP} -> ${destP}'`, sourceP);
      const indexSource = this.entries.get(resolvedSourceP);
      if (typeof indexSource === `undefined`)
        throw EINVAL(`copyfile '${sourceP}' -> '${destP}'`);
      const resolvedDestP = this.resolveFilename(`copyfile '${sourceP}' -> ${destP}'`, destP);
      const indexDest = this.entries.get(resolvedDestP);
      if ((flags & (import_fs3.constants.COPYFILE_EXCL | import_fs3.constants.COPYFILE_FICLONE_FORCE)) !== 0 && typeof indexDest !== `undefined`)
        throw EEXIST(`copyfile '${sourceP}' -> '${destP}'`);
      return {
        indexSource,
        resolvedDestP,
        indexDest
      };
    }
    async appendFilePromise(p, content, opts) {
      if (this.readOnly)
        throw EROFS(`open '${p}'`);
      if (typeof opts === `undefined`)
        opts = {flag: `a`};
      else if (typeof opts === `string`)
        opts = {flag: `a`, encoding: opts};
      else if (typeof opts.flag === `undefined`)
        opts = __spreadValues({flag: `a`}, opts);
      return this.writeFilePromise(p, content, opts);
    }
    appendFileSync(p, content, opts = {}) {
      if (this.readOnly)
        throw EROFS(`open '${p}'`);
      if (typeof opts === `undefined`)
        opts = {flag: `a`};
      else if (typeof opts === `string`)
        opts = {flag: `a`, encoding: opts};
      else if (typeof opts.flag === `undefined`)
        opts = __spreadValues({flag: `a`}, opts);
      return this.writeFileSync(p, content, opts);
    }
    async writeFilePromise(p, content, opts) {
      const {encoding, index, resolvedP} = this.prepareWriteFile(p, opts);
      if (index !== void 0 && typeof opts === `object` && opts.flag && opts.flag.includes(`a`))
        content = Buffer.concat([await this.getFileSource(index, {asyncDecompress: true}), Buffer.from(content)]);
      if (encoding !== null)
        content = content.toString(encoding);
      const newIndex = this.setFileSource(resolvedP, content);
      if (newIndex !== index) {
        this.registerEntry(resolvedP, newIndex);
      }
    }
    writeFileSync(p, content, opts) {
      const {encoding, index, resolvedP} = this.prepareWriteFile(p, opts);
      if (index !== void 0 && typeof opts === `object` && opts.flag && opts.flag.includes(`a`))
        content = Buffer.concat([this.getFileSource(index), Buffer.from(content)]);
      if (encoding !== null)
        content = content.toString(encoding);
      const newIndex = this.setFileSource(resolvedP, content);
      if (newIndex !== index) {
        this.registerEntry(resolvedP, newIndex);
      }
    }
    prepareWriteFile(p, opts) {
      if (typeof p !== `string`)
        throw EBADF(`read`);
      if (this.readOnly)
        throw EROFS(`open '${p}'`);
      const resolvedP = this.resolveFilename(`open '${p}'`, p);
      if (this.listings.has(resolvedP))
        throw EISDIR(`open '${p}'`);
      let encoding = null;
      if (typeof opts === `string`)
        encoding = opts;
      else if (typeof opts === `object` && opts.encoding)
        encoding = opts.encoding;
      const index = this.entries.get(resolvedP);
      return {
        encoding,
        resolvedP,
        index
      };
    }
    async unlinkPromise(p) {
      return this.unlinkSync(p);
    }
    unlinkSync(p) {
      if (this.readOnly)
        throw EROFS(`unlink '${p}'`);
      const resolvedP = this.resolveFilename(`unlink '${p}'`, p);
      if (this.listings.has(resolvedP))
        throw EISDIR(`unlink '${p}'`);
      const index = this.entries.get(resolvedP);
      if (typeof index === `undefined`)
        throw EINVAL(`unlink '${p}'`);
      this.deleteEntry(resolvedP, index);
    }
    async utimesPromise(p, atime, mtime) {
      return this.utimesSync(p, atime, mtime);
    }
    utimesSync(p, atime, mtime) {
      if (this.readOnly)
        throw EROFS(`utimes '${p}'`);
      const resolvedP = this.resolveFilename(`utimes '${p}'`, p);
      this.utimesImpl(resolvedP, mtime);
    }
    async lutimesPromise(p, atime, mtime) {
      return this.lutimesSync(p, atime, mtime);
    }
    lutimesSync(p, atime, mtime) {
      if (this.readOnly)
        throw EROFS(`lutimes '${p}'`);
      const resolvedP = this.resolveFilename(`utimes '${p}'`, p, false);
      this.utimesImpl(resolvedP, mtime);
    }
    utimesImpl(resolvedP, mtime) {
      if (this.listings.has(resolvedP)) {
        if (!this.entries.has(resolvedP))
          this.hydrateDirectory(resolvedP);
      }
      const entry = this.entries.get(resolvedP);
      if (entry === void 0)
        throw new Error(`Unreachable`);
      const rc = this.libzip.file.setMtime(this.zip, entry, 0, toUnixTimestamp(mtime), 0);
      if (rc === -1) {
        throw this.makeLibzipError(this.libzip.getError(this.zip));
      }
    }
    async mkdirPromise(p, opts) {
      return this.mkdirSync(p, opts);
    }
    mkdirSync(p, {mode = 493, recursive = false} = {}) {
      if (recursive) {
        this.mkdirpSync(p, {chmod: mode});
        return;
      }
      if (this.readOnly)
        throw EROFS(`mkdir '${p}'`);
      const resolvedP = this.resolveFilename(`mkdir '${p}'`, p);
      if (this.entries.has(resolvedP) || this.listings.has(resolvedP))
        throw EEXIST(`mkdir '${p}'`);
      this.hydrateDirectory(resolvedP);
      this.chmodSync(resolvedP, mode);
    }
    async rmdirPromise(p, opts) {
      return this.rmdirSync(p, opts);
    }
    rmdirSync(p, {recursive = false} = {}) {
      if (this.readOnly)
        throw EROFS(`rmdir '${p}'`);
      if (recursive) {
        this.removeSync(p);
        return;
      }
      const resolvedP = this.resolveFilename(`rmdir '${p}'`, p);
      const directoryListing = this.listings.get(resolvedP);
      if (!directoryListing)
        throw ENOTDIR(`rmdir '${p}'`);
      if (directoryListing.size > 0)
        throw ENOTEMPTY(`rmdir '${p}'`);
      const index = this.entries.get(resolvedP);
      if (typeof index === `undefined`)
        throw EINVAL(`rmdir '${p}'`);
      this.deleteEntry(p, index);
    }
    hydrateDirectory(resolvedP) {
      const index = this.libzip.dir.add(this.zip, ppath.relative(PortablePath.root, resolvedP));
      if (index === -1)
        throw this.makeLibzipError(this.libzip.getError(this.zip));
      this.registerListing(resolvedP);
      this.registerEntry(resolvedP, index);
      return index;
    }
    async linkPromise(existingP, newP) {
      return this.linkSync(existingP, newP);
    }
    linkSync(existingP, newP) {
      throw EOPNOTSUPP(`link '${existingP}' -> '${newP}'`);
    }
    async symlinkPromise(target, p) {
      return this.symlinkSync(target, p);
    }
    symlinkSync(target, p) {
      if (this.readOnly)
        throw EROFS(`symlink '${target}' -> '${p}'`);
      const resolvedP = this.resolveFilename(`symlink '${target}' -> '${p}'`, p);
      if (this.listings.has(resolvedP))
        throw EISDIR(`symlink '${target}' -> '${p}'`);
      if (this.entries.has(resolvedP))
        throw EEXIST(`symlink '${target}' -> '${p}'`);
      const index = this.setFileSource(resolvedP, target);
      this.registerEntry(resolvedP, index);
      const rc = this.libzip.file.setExternalAttributes(this.zip, index, 0, 0, this.libzip.ZIP_OPSYS_UNIX, (S_IFLNK | 511) << 16);
      if (rc === -1)
        throw this.makeLibzipError(this.libzip.getError(this.zip));
      this.symlinkCount += 1;
    }
    async readFilePromise(p, encoding) {
      if (typeof encoding === `object`)
        encoding = encoding ? encoding.encoding : void 0;
      const data = await this.readFileBuffer(p, {asyncDecompress: true});
      return encoding ? data.toString(encoding) : data;
    }
    readFileSync(p, encoding) {
      if (typeof encoding === `object`)
        encoding = encoding ? encoding.encoding : void 0;
      const data = this.readFileBuffer(p);
      return encoding ? data.toString(encoding) : data;
    }
    readFileBuffer(p, opts = {asyncDecompress: false}) {
      const resolvedP = this.resolveFilename(`open '${p}'`, p);
      if (!this.entries.has(resolvedP) && !this.listings.has(resolvedP))
        throw ENOENT(`open '${p}'`);
      if (p[p.length - 1] === `/` && !this.listings.has(resolvedP))
        throw ENOTDIR(`open '${p}'`);
      if (this.listings.has(resolvedP))
        throw EISDIR(`read`);
      const entry = this.entries.get(resolvedP);
      if (entry === void 0)
        throw new Error(`Unreachable`);
      return this.getFileSource(entry, opts);
    }
    async readdirPromise(p, {withFileTypes} = {}) {
      return this.readdirSync(p, {withFileTypes});
    }
    readdirSync(p, {withFileTypes} = {}) {
      const resolvedP = this.resolveFilename(`scandir '${p}'`, p);
      if (!this.entries.has(resolvedP) && !this.listings.has(resolvedP))
        throw ENOENT(`scandir '${p}'`);
      const directoryListing = this.listings.get(resolvedP);
      if (!directoryListing)
        throw ENOTDIR(`scandir '${p}'`);
      const entries = [...directoryListing];
      if (!withFileTypes)
        return entries;
      return entries.map((name) => {
        return Object.assign(this.statImpl(`lstat`, ppath.join(p, name)), {
          name
        });
      });
    }
    async readlinkPromise(p) {
      const entry = this.prepareReadlink(p);
      return (await this.getFileSource(entry, {asyncDecompress: true})).toString();
    }
    readlinkSync(p) {
      const entry = this.prepareReadlink(p);
      return this.getFileSource(entry).toString();
    }
    prepareReadlink(p) {
      const resolvedP = this.resolveFilename(`readlink '${p}'`, p, false);
      if (!this.entries.has(resolvedP) && !this.listings.has(resolvedP))
        throw ENOENT(`readlink '${p}'`);
      if (p[p.length - 1] === `/` && !this.listings.has(resolvedP))
        throw ENOTDIR(`open '${p}'`);
      if (this.listings.has(resolvedP))
        throw EINVAL(`readlink '${p}'`);
      const entry = this.entries.get(resolvedP);
      if (entry === void 0)
        throw new Error(`Unreachable`);
      if (!this.isSymbolicLink(entry))
        throw EINVAL(`readlink '${p}'`);
      return entry;
    }
    async truncatePromise(p, len = 0) {
      const resolvedP = this.resolveFilename(`open '${p}'`, p);
      const index = this.entries.get(resolvedP);
      if (typeof index === `undefined`)
        throw EINVAL(`open '${p}'`);
      const source = await this.getFileSource(index, {asyncDecompress: true});
      const truncated = Buffer.alloc(len, 0);
      source.copy(truncated);
      return await this.writeFilePromise(p, truncated);
    }
    truncateSync(p, len = 0) {
      const resolvedP = this.resolveFilename(`open '${p}'`, p);
      const index = this.entries.get(resolvedP);
      if (typeof index === `undefined`)
        throw EINVAL(`open '${p}'`);
      const source = this.getFileSource(index);
      const truncated = Buffer.alloc(len, 0);
      source.copy(truncated);
      return this.writeFileSync(p, truncated);
    }
    watch(p, a, b) {
      let persistent;
      switch (typeof a) {
        case `function`:
        case `string`:
        case `undefined`:
          {
            persistent = true;
          }
          break;
        default:
          {
            ({persistent = true} = a);
          }
          break;
      }
      if (!persistent)
        return {on: () => {
        }, close: () => {
        }};
      const interval = setInterval(() => {
      }, 24 * 60 * 60 * 1e3);
      return {on: () => {
      }, close: () => {
        clearInterval(interval);
      }};
    }
    watchFile(p, a, b) {
      const resolvedP = this.resolveFilename(`open '${p}'`, p);
      return watchFile(this, resolvedP, a, b);
    }
    unwatchFile(p, cb) {
      const resolvedP = this.resolveFilename(`open '${p}'`, p);
      return unwatchFile(this, resolvedP, cb);
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-fslib/sources/ProxiedFS.ts
  var ProxiedFS = class extends FakeFS {
    getExtractHint(hints) {
      return this.baseFs.getExtractHint(hints);
    }
    resolve(path3) {
      return this.mapFromBase(this.baseFs.resolve(this.mapToBase(path3)));
    }
    getRealPath() {
      return this.mapFromBase(this.baseFs.getRealPath());
    }
    async openPromise(p, flags, mode) {
      return this.baseFs.openPromise(this.mapToBase(p), flags, mode);
    }
    openSync(p, flags, mode) {
      return this.baseFs.openSync(this.mapToBase(p), flags, mode);
    }
    async opendirPromise(p, opts) {
      return Object.assign(await this.baseFs.opendirPromise(this.mapToBase(p), opts), {path: p});
    }
    opendirSync(p, opts) {
      return Object.assign(this.baseFs.opendirSync(this.mapToBase(p), opts), {path: p});
    }
    async readPromise(fd, buffer, offset, length, position) {
      return await this.baseFs.readPromise(fd, buffer, offset, length, position);
    }
    readSync(fd, buffer, offset, length, position) {
      return this.baseFs.readSync(fd, buffer, offset, length, position);
    }
    async writePromise(fd, buffer, offset, length, position) {
      if (typeof buffer === `string`) {
        return await this.baseFs.writePromise(fd, buffer, offset);
      } else {
        return await this.baseFs.writePromise(fd, buffer, offset, length, position);
      }
    }
    writeSync(fd, buffer, offset, length, position) {
      if (typeof buffer === `string`) {
        return this.baseFs.writeSync(fd, buffer, offset);
      } else {
        return this.baseFs.writeSync(fd, buffer, offset, length, position);
      }
    }
    async closePromise(fd) {
      return this.baseFs.closePromise(fd);
    }
    closeSync(fd) {
      this.baseFs.closeSync(fd);
    }
    createReadStream(p, opts) {
      return this.baseFs.createReadStream(p !== null ? this.mapToBase(p) : p, opts);
    }
    createWriteStream(p, opts) {
      return this.baseFs.createWriteStream(p !== null ? this.mapToBase(p) : p, opts);
    }
    async realpathPromise(p) {
      return this.mapFromBase(await this.baseFs.realpathPromise(this.mapToBase(p)));
    }
    realpathSync(p) {
      return this.mapFromBase(this.baseFs.realpathSync(this.mapToBase(p)));
    }
    async existsPromise(p) {
      return this.baseFs.existsPromise(this.mapToBase(p));
    }
    existsSync(p) {
      return this.baseFs.existsSync(this.mapToBase(p));
    }
    accessSync(p, mode) {
      return this.baseFs.accessSync(this.mapToBase(p), mode);
    }
    async accessPromise(p, mode) {
      return this.baseFs.accessPromise(this.mapToBase(p), mode);
    }
    async statPromise(p, opts) {
      return this.baseFs.statPromise(this.mapToBase(p), opts);
    }
    statSync(p, opts) {
      return this.baseFs.statSync(this.mapToBase(p), opts);
    }
    async fstatPromise(fd, opts) {
      return this.baseFs.fstatPromise(fd, opts);
    }
    fstatSync(fd, opts) {
      return this.baseFs.fstatSync(fd, opts);
    }
    async lstatPromise(p, opts) {
      return this.baseFs.lstatPromise(this.mapToBase(p), opts);
    }
    lstatSync(p, opts) {
      return this.baseFs.lstatSync(this.mapToBase(p), opts);
    }
    async chmodPromise(p, mask) {
      return this.baseFs.chmodPromise(this.mapToBase(p), mask);
    }
    chmodSync(p, mask) {
      return this.baseFs.chmodSync(this.mapToBase(p), mask);
    }
    async chownPromise(p, uid, gid) {
      return this.baseFs.chownPromise(this.mapToBase(p), uid, gid);
    }
    chownSync(p, uid, gid) {
      return this.baseFs.chownSync(this.mapToBase(p), uid, gid);
    }
    async renamePromise(oldP, newP) {
      return this.baseFs.renamePromise(this.mapToBase(oldP), this.mapToBase(newP));
    }
    renameSync(oldP, newP) {
      return this.baseFs.renameSync(this.mapToBase(oldP), this.mapToBase(newP));
    }
    async copyFilePromise(sourceP, destP, flags = 0) {
      return this.baseFs.copyFilePromise(this.mapToBase(sourceP), this.mapToBase(destP), flags);
    }
    copyFileSync(sourceP, destP, flags = 0) {
      return this.baseFs.copyFileSync(this.mapToBase(sourceP), this.mapToBase(destP), flags);
    }
    async appendFilePromise(p, content, opts) {
      return this.baseFs.appendFilePromise(this.fsMapToBase(p), content, opts);
    }
    appendFileSync(p, content, opts) {
      return this.baseFs.appendFileSync(this.fsMapToBase(p), content, opts);
    }
    async writeFilePromise(p, content, opts) {
      return this.baseFs.writeFilePromise(this.fsMapToBase(p), content, opts);
    }
    writeFileSync(p, content, opts) {
      return this.baseFs.writeFileSync(this.fsMapToBase(p), content, opts);
    }
    async unlinkPromise(p) {
      return this.baseFs.unlinkPromise(this.mapToBase(p));
    }
    unlinkSync(p) {
      return this.baseFs.unlinkSync(this.mapToBase(p));
    }
    async utimesPromise(p, atime, mtime) {
      return this.baseFs.utimesPromise(this.mapToBase(p), atime, mtime);
    }
    utimesSync(p, atime, mtime) {
      return this.baseFs.utimesSync(this.mapToBase(p), atime, mtime);
    }
    async mkdirPromise(p, opts) {
      return this.baseFs.mkdirPromise(this.mapToBase(p), opts);
    }
    mkdirSync(p, opts) {
      return this.baseFs.mkdirSync(this.mapToBase(p), opts);
    }
    async rmdirPromise(p, opts) {
      return this.baseFs.rmdirPromise(this.mapToBase(p), opts);
    }
    rmdirSync(p, opts) {
      return this.baseFs.rmdirSync(this.mapToBase(p), opts);
    }
    async linkPromise(existingP, newP) {
      return this.baseFs.linkPromise(this.mapToBase(existingP), this.mapToBase(newP));
    }
    linkSync(existingP, newP) {
      return this.baseFs.linkSync(this.mapToBase(existingP), this.mapToBase(newP));
    }
    async symlinkPromise(target, p, type) {
      const mappedP = this.mapToBase(p);
      if (this.pathUtils.isAbsolute(target))
        return this.baseFs.symlinkPromise(this.mapToBase(target), mappedP, type);
      const mappedAbsoluteTarget = this.mapToBase(this.pathUtils.join(this.pathUtils.dirname(p), target));
      const mappedTarget = this.baseFs.pathUtils.relative(this.baseFs.pathUtils.dirname(mappedP), mappedAbsoluteTarget);
      return this.baseFs.symlinkPromise(mappedTarget, mappedP, type);
    }
    symlinkSync(target, p, type) {
      const mappedP = this.mapToBase(p);
      if (this.pathUtils.isAbsolute(target))
        return this.baseFs.symlinkSync(this.mapToBase(target), mappedP, type);
      const mappedAbsoluteTarget = this.mapToBase(this.pathUtils.join(this.pathUtils.dirname(p), target));
      const mappedTarget = this.baseFs.pathUtils.relative(this.baseFs.pathUtils.dirname(mappedP), mappedAbsoluteTarget);
      return this.baseFs.symlinkSync(mappedTarget, mappedP, type);
    }
    async readFilePromise(p, encoding) {
      if (encoding === `utf8`) {
        return this.baseFs.readFilePromise(this.fsMapToBase(p), encoding);
      } else {
        return this.baseFs.readFilePromise(this.fsMapToBase(p), encoding);
      }
    }
    readFileSync(p, encoding) {
      if (encoding === `utf8`) {
        return this.baseFs.readFileSync(this.fsMapToBase(p), encoding);
      } else {
        return this.baseFs.readFileSync(this.fsMapToBase(p), encoding);
      }
    }
    async readdirPromise(p, {withFileTypes} = {}) {
      return this.baseFs.readdirPromise(this.mapToBase(p), {withFileTypes});
    }
    readdirSync(p, {withFileTypes} = {}) {
      return this.baseFs.readdirSync(this.mapToBase(p), {withFileTypes});
    }
    async readlinkPromise(p) {
      return this.mapFromBase(await this.baseFs.readlinkPromise(this.mapToBase(p)));
    }
    readlinkSync(p) {
      return this.mapFromBase(this.baseFs.readlinkSync(this.mapToBase(p)));
    }
    async truncatePromise(p, len) {
      return this.baseFs.truncatePromise(this.mapToBase(p), len);
    }
    truncateSync(p, len) {
      return this.baseFs.truncateSync(this.mapToBase(p), len);
    }
    watch(p, a, b) {
      return this.baseFs.watch(this.mapToBase(p), a, b);
    }
    watchFile(p, a, b) {
      return this.baseFs.watchFile(this.mapToBase(p), a, b);
    }
    unwatchFile(p, cb) {
      return this.baseFs.unwatchFile(this.mapToBase(p), cb);
    }
    fsMapToBase(p) {
      if (typeof p === `number`) {
        return p;
      } else {
        return this.mapToBase(p);
      }
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-fslib/sources/AliasFS.ts
  var AliasFS = class extends ProxiedFS {
    constructor(target, {baseFs, pathUtils}) {
      super(pathUtils);
      this.target = target;
      this.baseFs = baseFs;
    }
    getRealPath() {
      return this.target;
    }
    getBaseFs() {
      return this.baseFs;
    }
    mapFromBase(p) {
      return p;
    }
    mapToBase(p) {
      return p;
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-fslib/sources/CwdFS.ts
  var CwdFS = class extends ProxiedFS {
    constructor(target, {baseFs = new NodeFS()} = {}) {
      super(ppath);
      this.target = this.pathUtils.normalize(target);
      this.baseFs = baseFs;
    }
    getRealPath() {
      return this.pathUtils.resolve(this.baseFs.getRealPath(), this.target);
    }
    resolve(p) {
      if (this.pathUtils.isAbsolute(p)) {
        return ppath.normalize(p);
      } else {
        return this.baseFs.resolve(ppath.join(this.target, p));
      }
    }
    mapFromBase(path3) {
      return path3;
    }
    mapToBase(path3) {
      if (this.pathUtils.isAbsolute(path3)) {
        return path3;
      } else {
        return this.pathUtils.join(this.target, path3);
      }
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-fslib/sources/JailFS.ts
  var JAIL_ROOT = PortablePath.root;
  var JailFS = class extends ProxiedFS {
    constructor(target, {baseFs = new NodeFS()} = {}) {
      super(ppath);
      this.target = this.pathUtils.resolve(PortablePath.root, target);
      this.baseFs = baseFs;
    }
    getRealPath() {
      return this.pathUtils.resolve(this.baseFs.getRealPath(), this.pathUtils.relative(PortablePath.root, this.target));
    }
    getTarget() {
      return this.target;
    }
    getBaseFs() {
      return this.baseFs;
    }
    mapToBase(p) {
      const normalized = this.pathUtils.normalize(p);
      if (this.pathUtils.isAbsolute(p))
        return this.pathUtils.resolve(this.target, this.pathUtils.relative(JAIL_ROOT, p));
      if (normalized.match(/^\.\.\/?/))
        throw new Error(`Resolving this path (${p}) would escape the jail`);
      return this.pathUtils.resolve(this.target, p);
    }
    mapFromBase(p) {
      return this.pathUtils.resolve(JAIL_ROOT, this.pathUtils.relative(this.target, p));
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-fslib/sources/LazyFS.ts
  var LazyFS = class extends ProxiedFS {
    constructor(factory, pathUtils) {
      super(pathUtils);
      this.instance = null;
      this.factory = factory;
    }
    get baseFs() {
      if (!this.instance)
        this.instance = this.factory();
      return this.instance;
    }
    set baseFs(value) {
      this.instance = value;
    }
    mapFromBase(p) {
      return p;
    }
    mapToBase(p) {
      return p;
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-fslib/sources/NoFS.ts
  var makeError2 = () => Object.assign(new Error(`ENOSYS: unsupported filesystem access`), {code: `ENOSYS`});
  var _NoFS = class extends FakeFS {
    constructor() {
      super(ppath);
    }
    getExtractHint() {
      throw makeError2();
    }
    getRealPath() {
      throw makeError2();
    }
    resolve() {
      throw makeError2();
    }
    async openPromise() {
      throw makeError2();
    }
    openSync() {
      throw makeError2();
    }
    async opendirPromise() {
      throw makeError2();
    }
    opendirSync() {
      throw makeError2();
    }
    async readPromise() {
      throw makeError2();
    }
    readSync() {
      throw makeError2();
    }
    async writePromise() {
      throw makeError2();
    }
    writeSync() {
      throw makeError2();
    }
    async closePromise() {
      throw makeError2();
    }
    closeSync() {
      throw makeError2();
    }
    createWriteStream() {
      throw makeError2();
    }
    createReadStream() {
      throw makeError2();
    }
    async realpathPromise() {
      throw makeError2();
    }
    realpathSync() {
      throw makeError2();
    }
    async readdirPromise() {
      throw makeError2();
    }
    readdirSync() {
      throw makeError2();
    }
    async existsPromise(p) {
      throw makeError2();
    }
    existsSync(p) {
      throw makeError2();
    }
    async accessPromise() {
      throw makeError2();
    }
    accessSync() {
      throw makeError2();
    }
    async statPromise() {
      throw makeError2();
    }
    statSync() {
      throw makeError2();
    }
    async fstatPromise(fd) {
      throw makeError2();
    }
    fstatSync(fd) {
      throw makeError2();
    }
    async lstatPromise(p) {
      throw makeError2();
    }
    lstatSync(p) {
      throw makeError2();
    }
    async chmodPromise() {
      throw makeError2();
    }
    chmodSync() {
      throw makeError2();
    }
    async chownPromise() {
      throw makeError2();
    }
    chownSync() {
      throw makeError2();
    }
    async mkdirPromise() {
      throw makeError2();
    }
    mkdirSync() {
      throw makeError2();
    }
    async rmdirPromise() {
      throw makeError2();
    }
    rmdirSync() {
      throw makeError2();
    }
    async linkPromise() {
      throw makeError2();
    }
    linkSync() {
      throw makeError2();
    }
    async symlinkPromise() {
      throw makeError2();
    }
    symlinkSync() {
      throw makeError2();
    }
    async renamePromise() {
      throw makeError2();
    }
    renameSync() {
      throw makeError2();
    }
    async copyFilePromise() {
      throw makeError2();
    }
    copyFileSync() {
      throw makeError2();
    }
    async appendFilePromise() {
      throw makeError2();
    }
    appendFileSync() {
      throw makeError2();
    }
    async writeFilePromise() {
      throw makeError2();
    }
    writeFileSync() {
      throw makeError2();
    }
    async unlinkPromise() {
      throw makeError2();
    }
    unlinkSync() {
      throw makeError2();
    }
    async utimesPromise() {
      throw makeError2();
    }
    utimesSync() {
      throw makeError2();
    }
    async readFilePromise() {
      throw makeError2();
    }
    readFileSync() {
      throw makeError2();
    }
    async readlinkPromise() {
      throw makeError2();
    }
    readlinkSync() {
      throw makeError2();
    }
    async truncatePromise() {
      throw makeError2();
    }
    truncateSync() {
      throw makeError2();
    }
    watch() {
      throw makeError2();
    }
    watchFile() {
      throw makeError2();
    }
    unwatchFile() {
      throw makeError2();
    }
  };
  var NoFS = _NoFS;
  NoFS.instance = new _NoFS();

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-fslib/sources/PosixFS.ts
  var PosixFS = class extends ProxiedFS {
    constructor(baseFs) {
      super(npath);
      this.baseFs = baseFs;
    }
    mapFromBase(path3) {
      return npath.fromPortablePath(path3);
    }
    mapToBase(path3) {
      return npath.toPortablePath(path3);
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-fslib/sources/VirtualFS.ts
  var NUMBER_REGEXP = /^[0-9]+$/;
  var VIRTUAL_REGEXP = /^(\/(?:[^/]+\/)*?(?:\$\$virtual|__virtual__))((?:\/((?:[^/]+-)?[a-f0-9]+)(?:\/([^/]+))?)?((?:\/.*)?))$/;
  var VALID_COMPONENT = /^([^/]+-)?[a-f0-9]+$/;
  var VirtualFS = class extends ProxiedFS {
    static makeVirtualPath(base, component, to) {
      if (ppath.basename(base) !== `__virtual__`)
        throw new Error(`Assertion failed: Virtual folders must be named "__virtual__"`);
      if (!ppath.basename(component).match(VALID_COMPONENT))
        throw new Error(`Assertion failed: Virtual components must be ended by an hexadecimal hash`);
      const target = ppath.relative(ppath.dirname(base), to);
      const segments = target.split(`/`);
      let depth = 0;
      while (depth < segments.length && segments[depth] === `..`)
        depth += 1;
      const finalSegments = segments.slice(depth);
      const fullVirtualPath = ppath.join(base, component, String(depth), ...finalSegments);
      return fullVirtualPath;
    }
    static resolveVirtual(p) {
      const match2 = p.match(VIRTUAL_REGEXP);
      if (!match2 || !match2[3] && match2[5])
        return p;
      const target = ppath.dirname(match2[1]);
      if (!match2[3] || !match2[4])
        return target;
      const isnum = NUMBER_REGEXP.test(match2[4]);
      if (!isnum)
        return p;
      const depth = Number(match2[4]);
      const backstep = `../`.repeat(depth);
      const subpath = match2[5] || `.`;
      return VirtualFS.resolveVirtual(ppath.join(target, backstep, subpath));
    }
    constructor({baseFs = new NodeFS()} = {}) {
      super(ppath);
      this.baseFs = baseFs;
    }
    getExtractHint(hints) {
      return this.baseFs.getExtractHint(hints);
    }
    getRealPath() {
      return this.baseFs.getRealPath();
    }
    realpathSync(p) {
      const match2 = p.match(VIRTUAL_REGEXP);
      if (!match2)
        return this.baseFs.realpathSync(p);
      if (!match2[5])
        return p;
      const realpath = this.baseFs.realpathSync(this.mapToBase(p));
      return VirtualFS.makeVirtualPath(match2[1], match2[3], realpath);
    }
    async realpathPromise(p) {
      const match2 = p.match(VIRTUAL_REGEXP);
      if (!match2)
        return await this.baseFs.realpathPromise(p);
      if (!match2[5])
        return p;
      const realpath = await this.baseFs.realpathPromise(this.mapToBase(p));
      return VirtualFS.makeVirtualPath(match2[1], match2[3], realpath);
    }
    mapToBase(p) {
      if (this.pathUtils.isAbsolute(p))
        return VirtualFS.resolveVirtual(p);
      const resolvedRoot = VirtualFS.resolveVirtual(this.baseFs.resolve(PortablePath.dot));
      const resolvedP = VirtualFS.resolveVirtual(this.baseFs.resolve(p));
      return ppath.relative(resolvedRoot, resolvedP);
    }
    mapFromBase(p) {
      return p;
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-fslib/sources/ZipOpenFS.ts
  var import_fs4 = __toModule(require("fs"));
  var ZIP_FD = 2147483648;
  var DOT_ZIP = `.zip`;
  var getArchivePart = (path3) => {
    const idx = path3.indexOf(DOT_ZIP);
    if (idx <= 0)
      return null;
    if (path3[idx - 1] === ppath.sep)
      return null;
    const nextCharIdx = idx + DOT_ZIP.length;
    if (path3.length > nextCharIdx && path3[nextCharIdx] !== ppath.sep)
      return null;
    return path3.slice(0, nextCharIdx);
  };
  var ZipOpenFS = class extends BasePortableFakeFS {
    constructor({libzip, baseFs = new NodeFS(), filter = null, maxOpenFiles = Infinity, readOnlyArchives = false, useCache = true, maxAge = 5e3}) {
      super();
      this.fdMap = new Map();
      this.nextFd = 3;
      this.isZip = new Set();
      this.notZip = new Set();
      this.realPaths = new Map();
      this.limitOpenFilesTimeout = null;
      this.libzipFactory = typeof libzip !== `function` ? () => libzip : libzip;
      this.baseFs = baseFs;
      this.zipInstances = useCache ? new Map() : null;
      this.filter = filter;
      this.maxOpenFiles = maxOpenFiles;
      this.readOnlyArchives = readOnlyArchives;
      this.maxAge = maxAge;
    }
    static async openPromise(fn, opts) {
      const zipOpenFs = new ZipOpenFS(opts);
      try {
        return await fn(zipOpenFs);
      } finally {
        zipOpenFs.saveAndClose();
      }
    }
    get libzip() {
      if (typeof this.libzipInstance === `undefined`)
        this.libzipInstance = this.libzipFactory();
      return this.libzipInstance;
    }
    getExtractHint(hints) {
      return this.baseFs.getExtractHint(hints);
    }
    getRealPath() {
      return this.baseFs.getRealPath();
    }
    saveAndClose() {
      unwatchAllFiles(this);
      if (this.zipInstances) {
        for (const [path3, {zipFs}] of this.zipInstances.entries()) {
          zipFs.saveAndClose();
          this.zipInstances.delete(path3);
        }
      }
    }
    discardAndClose() {
      unwatchAllFiles(this);
      if (this.zipInstances) {
        for (const [path3, {zipFs}] of this.zipInstances.entries()) {
          zipFs.discardAndClose();
          this.zipInstances.delete(path3);
        }
      }
    }
    resolve(p) {
      return this.baseFs.resolve(p);
    }
    remapFd(zipFs, fd) {
      const remappedFd = this.nextFd++ | ZIP_FD;
      this.fdMap.set(remappedFd, [zipFs, fd]);
      return remappedFd;
    }
    async openPromise(p, flags, mode) {
      return await this.makeCallPromise(p, async () => {
        return await this.baseFs.openPromise(p, flags, mode);
      }, async (zipFs, {subPath}) => {
        return this.remapFd(zipFs, await zipFs.openPromise(subPath, flags, mode));
      });
    }
    openSync(p, flags, mode) {
      return this.makeCallSync(p, () => {
        return this.baseFs.openSync(p, flags, mode);
      }, (zipFs, {subPath}) => {
        return this.remapFd(zipFs, zipFs.openSync(subPath, flags, mode));
      });
    }
    async opendirPromise(p, opts) {
      return await this.makeCallPromise(p, async () => {
        return await this.baseFs.opendirPromise(p, opts);
      }, async (zipFs, {subPath}) => {
        return await zipFs.opendirPromise(subPath, opts);
      }, {
        requireSubpath: false
      });
    }
    opendirSync(p, opts) {
      return this.makeCallSync(p, () => {
        return this.baseFs.opendirSync(p, opts);
      }, (zipFs, {subPath}) => {
        return zipFs.opendirSync(subPath, opts);
      }, {
        requireSubpath: false
      });
    }
    async readPromise(fd, buffer, offset, length, position) {
      if ((fd & ZIP_FD) === 0)
        return await this.baseFs.readPromise(fd, buffer, offset, length, position);
      const entry = this.fdMap.get(fd);
      if (typeof entry === `undefined`)
        throw EBADF(`read`);
      const [zipFs, realFd] = entry;
      return await zipFs.readPromise(realFd, buffer, offset, length, position);
    }
    readSync(fd, buffer, offset, length, position) {
      if ((fd & ZIP_FD) === 0)
        return this.baseFs.readSync(fd, buffer, offset, length, position);
      const entry = this.fdMap.get(fd);
      if (typeof entry === `undefined`)
        throw EBADF(`readSync`);
      const [zipFs, realFd] = entry;
      return zipFs.readSync(realFd, buffer, offset, length, position);
    }
    async writePromise(fd, buffer, offset, length, position) {
      if ((fd & ZIP_FD) === 0) {
        if (typeof buffer === `string`) {
          return await this.baseFs.writePromise(fd, buffer, offset);
        } else {
          return await this.baseFs.writePromise(fd, buffer, offset, length, position);
        }
      }
      const entry = this.fdMap.get(fd);
      if (typeof entry === `undefined`)
        throw EBADF(`write`);
      const [zipFs, realFd] = entry;
      if (typeof buffer === `string`) {
        return await zipFs.writePromise(realFd, buffer, offset);
      } else {
        return await zipFs.writePromise(realFd, buffer, offset, length, position);
      }
    }
    writeSync(fd, buffer, offset, length, position) {
      if ((fd & ZIP_FD) === 0) {
        if (typeof buffer === `string`) {
          return this.baseFs.writeSync(fd, buffer, offset);
        } else {
          return this.baseFs.writeSync(fd, buffer, offset, length, position);
        }
      }
      const entry = this.fdMap.get(fd);
      if (typeof entry === `undefined`)
        throw EBADF(`writeSync`);
      const [zipFs, realFd] = entry;
      if (typeof buffer === `string`) {
        return zipFs.writeSync(realFd, buffer, offset);
      } else {
        return zipFs.writeSync(realFd, buffer, offset, length, position);
      }
    }
    async closePromise(fd) {
      if ((fd & ZIP_FD) === 0)
        return await this.baseFs.closePromise(fd);
      const entry = this.fdMap.get(fd);
      if (typeof entry === `undefined`)
        throw EBADF(`close`);
      this.fdMap.delete(fd);
      const [zipFs, realFd] = entry;
      return await zipFs.closePromise(realFd);
    }
    closeSync(fd) {
      if ((fd & ZIP_FD) === 0)
        return this.baseFs.closeSync(fd);
      const entry = this.fdMap.get(fd);
      if (typeof entry === `undefined`)
        throw EBADF(`closeSync`);
      this.fdMap.delete(fd);
      const [zipFs, realFd] = entry;
      return zipFs.closeSync(realFd);
    }
    createReadStream(p, opts) {
      if (p === null)
        return this.baseFs.createReadStream(p, opts);
      return this.makeCallSync(p, () => {
        return this.baseFs.createReadStream(p, opts);
      }, (zipFs, {subPath}) => {
        return zipFs.createReadStream(subPath, opts);
      });
    }
    createWriteStream(p, opts) {
      if (p === null)
        return this.baseFs.createWriteStream(p, opts);
      return this.makeCallSync(p, () => {
        return this.baseFs.createWriteStream(p, opts);
      }, (zipFs, {subPath}) => {
        return zipFs.createWriteStream(subPath, opts);
      });
    }
    async realpathPromise(p) {
      return await this.makeCallPromise(p, async () => {
        return await this.baseFs.realpathPromise(p);
      }, async (zipFs, {archivePath, subPath}) => {
        let realArchivePath = this.realPaths.get(archivePath);
        if (typeof realArchivePath === `undefined`) {
          realArchivePath = await this.baseFs.realpathPromise(archivePath);
          this.realPaths.set(archivePath, realArchivePath);
        }
        return this.pathUtils.join(realArchivePath, this.pathUtils.relative(PortablePath.root, await zipFs.realpathPromise(subPath)));
      });
    }
    realpathSync(p) {
      return this.makeCallSync(p, () => {
        return this.baseFs.realpathSync(p);
      }, (zipFs, {archivePath, subPath}) => {
        let realArchivePath = this.realPaths.get(archivePath);
        if (typeof realArchivePath === `undefined`) {
          realArchivePath = this.baseFs.realpathSync(archivePath);
          this.realPaths.set(archivePath, realArchivePath);
        }
        return this.pathUtils.join(realArchivePath, this.pathUtils.relative(PortablePath.root, zipFs.realpathSync(subPath)));
      });
    }
    async existsPromise(p) {
      return await this.makeCallPromise(p, async () => {
        return await this.baseFs.existsPromise(p);
      }, async (zipFs, {subPath}) => {
        return await zipFs.existsPromise(subPath);
      });
    }
    existsSync(p) {
      return this.makeCallSync(p, () => {
        return this.baseFs.existsSync(p);
      }, (zipFs, {subPath}) => {
        return zipFs.existsSync(subPath);
      });
    }
    async accessPromise(p, mode) {
      return await this.makeCallPromise(p, async () => {
        return await this.baseFs.accessPromise(p, mode);
      }, async (zipFs, {subPath}) => {
        return await zipFs.accessPromise(subPath, mode);
      });
    }
    accessSync(p, mode) {
      return this.makeCallSync(p, () => {
        return this.baseFs.accessSync(p, mode);
      }, (zipFs, {subPath}) => {
        return zipFs.accessSync(subPath, mode);
      });
    }
    async statPromise(p, opts) {
      return await this.makeCallPromise(p, async () => {
        return await this.baseFs.statPromise(p, opts);
      }, async (zipFs, {subPath}) => {
        return await zipFs.statPromise(subPath, opts);
      });
    }
    statSync(p, opts) {
      return this.makeCallSync(p, () => {
        return this.baseFs.statSync(p, opts);
      }, (zipFs, {subPath}) => {
        return zipFs.statSync(subPath, opts);
      });
    }
    async fstatPromise(fd, opts) {
      if ((fd & ZIP_FD) === 0)
        return this.baseFs.fstatPromise(fd, opts);
      const entry = this.fdMap.get(fd);
      if (typeof entry === `undefined`)
        throw EBADF(`fstat`);
      const [zipFs, realFd] = entry;
      return zipFs.fstatPromise(realFd, opts);
    }
    fstatSync(fd, opts) {
      if ((fd & ZIP_FD) === 0)
        return this.baseFs.fstatSync(fd, opts);
      const entry = this.fdMap.get(fd);
      if (typeof entry === `undefined`)
        throw EBADF(`fstatSync`);
      const [zipFs, realFd] = entry;
      return zipFs.fstatSync(realFd, opts);
    }
    async lstatPromise(p, opts) {
      return await this.makeCallPromise(p, async () => {
        return await this.baseFs.lstatPromise(p, opts);
      }, async (zipFs, {subPath}) => {
        return await zipFs.lstatPromise(subPath, opts);
      });
    }
    lstatSync(p, opts) {
      return this.makeCallSync(p, () => {
        return this.baseFs.lstatSync(p, opts);
      }, (zipFs, {subPath}) => {
        return zipFs.lstatSync(subPath, opts);
      });
    }
    async chmodPromise(p, mask) {
      return await this.makeCallPromise(p, async () => {
        return await this.baseFs.chmodPromise(p, mask);
      }, async (zipFs, {subPath}) => {
        return await zipFs.chmodPromise(subPath, mask);
      });
    }
    chmodSync(p, mask) {
      return this.makeCallSync(p, () => {
        return this.baseFs.chmodSync(p, mask);
      }, (zipFs, {subPath}) => {
        return zipFs.chmodSync(subPath, mask);
      });
    }
    async chownPromise(p, uid, gid) {
      return await this.makeCallPromise(p, async () => {
        return await this.baseFs.chownPromise(p, uid, gid);
      }, async (zipFs, {subPath}) => {
        return await zipFs.chownPromise(subPath, uid, gid);
      });
    }
    chownSync(p, uid, gid) {
      return this.makeCallSync(p, () => {
        return this.baseFs.chownSync(p, uid, gid);
      }, (zipFs, {subPath}) => {
        return zipFs.chownSync(subPath, uid, gid);
      });
    }
    async renamePromise(oldP, newP) {
      return await this.makeCallPromise(oldP, async () => {
        return await this.makeCallPromise(newP, async () => {
          return await this.baseFs.renamePromise(oldP, newP);
        }, async () => {
          throw Object.assign(new Error(`EEXDEV: cross-device link not permitted`), {code: `EEXDEV`});
        });
      }, async (zipFsO, {subPath: subPathO}) => {
        return await this.makeCallPromise(newP, async () => {
          throw Object.assign(new Error(`EEXDEV: cross-device link not permitted`), {code: `EEXDEV`});
        }, async (zipFsN, {subPath: subPathN}) => {
          if (zipFsO !== zipFsN) {
            throw Object.assign(new Error(`EEXDEV: cross-device link not permitted`), {code: `EEXDEV`});
          } else {
            return await zipFsO.renamePromise(subPathO, subPathN);
          }
        });
      });
    }
    renameSync(oldP, newP) {
      return this.makeCallSync(oldP, () => {
        return this.makeCallSync(newP, () => {
          return this.baseFs.renameSync(oldP, newP);
        }, async () => {
          throw Object.assign(new Error(`EEXDEV: cross-device link not permitted`), {code: `EEXDEV`});
        });
      }, (zipFsO, {subPath: subPathO}) => {
        return this.makeCallSync(newP, () => {
          throw Object.assign(new Error(`EEXDEV: cross-device link not permitted`), {code: `EEXDEV`});
        }, (zipFsN, {subPath: subPathN}) => {
          if (zipFsO !== zipFsN) {
            throw Object.assign(new Error(`EEXDEV: cross-device link not permitted`), {code: `EEXDEV`});
          } else {
            return zipFsO.renameSync(subPathO, subPathN);
          }
        });
      });
    }
    async copyFilePromise(sourceP, destP, flags = 0) {
      const fallback = async (sourceFs, sourceP2, destFs, destP2) => {
        if ((flags & import_fs4.constants.COPYFILE_FICLONE_FORCE) !== 0)
          throw Object.assign(new Error(`EXDEV: cross-device clone not permitted, copyfile '${sourceP2}' -> ${destP2}'`), {code: `EXDEV`});
        if (flags & import_fs4.constants.COPYFILE_EXCL && await this.existsPromise(sourceP2))
          throw Object.assign(new Error(`EEXIST: file already exists, copyfile '${sourceP2}' -> '${destP2}'`), {code: `EEXIST`});
        let content;
        try {
          content = await sourceFs.readFilePromise(sourceP2);
        } catch (error) {
          throw Object.assign(new Error(`EINVAL: invalid argument, copyfile '${sourceP2}' -> '${destP2}'`), {code: `EINVAL`});
        }
        await destFs.writeFilePromise(destP2, content);
      };
      return await this.makeCallPromise(sourceP, async () => {
        return await this.makeCallPromise(destP, async () => {
          return await this.baseFs.copyFilePromise(sourceP, destP, flags);
        }, async (zipFsD, {subPath: subPathD}) => {
          return await fallback(this.baseFs, sourceP, zipFsD, subPathD);
        });
      }, async (zipFsS, {subPath: subPathS}) => {
        return await this.makeCallPromise(destP, async () => {
          return await fallback(zipFsS, subPathS, this.baseFs, destP);
        }, async (zipFsD, {subPath: subPathD}) => {
          if (zipFsS !== zipFsD) {
            return await fallback(zipFsS, subPathS, zipFsD, subPathD);
          } else {
            return await zipFsS.copyFilePromise(subPathS, subPathD, flags);
          }
        });
      });
    }
    copyFileSync(sourceP, destP, flags = 0) {
      const fallback = (sourceFs, sourceP2, destFs, destP2) => {
        if ((flags & import_fs4.constants.COPYFILE_FICLONE_FORCE) !== 0)
          throw Object.assign(new Error(`EXDEV: cross-device clone not permitted, copyfile '${sourceP2}' -> ${destP2}'`), {code: `EXDEV`});
        if (flags & import_fs4.constants.COPYFILE_EXCL && this.existsSync(sourceP2))
          throw Object.assign(new Error(`EEXIST: file already exists, copyfile '${sourceP2}' -> '${destP2}'`), {code: `EEXIST`});
        let content;
        try {
          content = sourceFs.readFileSync(sourceP2);
        } catch (error) {
          throw Object.assign(new Error(`EINVAL: invalid argument, copyfile '${sourceP2}' -> '${destP2}'`), {code: `EINVAL`});
        }
        destFs.writeFileSync(destP2, content);
      };
      return this.makeCallSync(sourceP, () => {
        return this.makeCallSync(destP, () => {
          return this.baseFs.copyFileSync(sourceP, destP, flags);
        }, (zipFsD, {subPath: subPathD}) => {
          return fallback(this.baseFs, sourceP, zipFsD, subPathD);
        });
      }, (zipFsS, {subPath: subPathS}) => {
        return this.makeCallSync(destP, () => {
          return fallback(zipFsS, subPathS, this.baseFs, destP);
        }, (zipFsD, {subPath: subPathD}) => {
          if (zipFsS !== zipFsD) {
            return fallback(zipFsS, subPathS, zipFsD, subPathD);
          } else {
            return zipFsS.copyFileSync(subPathS, subPathD, flags);
          }
        });
      });
    }
    async appendFilePromise(p, content, opts) {
      return await this.makeCallPromise(p, async () => {
        return await this.baseFs.appendFilePromise(p, content, opts);
      }, async (zipFs, {subPath}) => {
        return await zipFs.appendFilePromise(subPath, content, opts);
      });
    }
    appendFileSync(p, content, opts) {
      return this.makeCallSync(p, () => {
        return this.baseFs.appendFileSync(p, content, opts);
      }, (zipFs, {subPath}) => {
        return zipFs.appendFileSync(subPath, content, opts);
      });
    }
    async writeFilePromise(p, content, opts) {
      return await this.makeCallPromise(p, async () => {
        return await this.baseFs.writeFilePromise(p, content, opts);
      }, async (zipFs, {subPath}) => {
        return await zipFs.writeFilePromise(subPath, content, opts);
      });
    }
    writeFileSync(p, content, opts) {
      return this.makeCallSync(p, () => {
        return this.baseFs.writeFileSync(p, content, opts);
      }, (zipFs, {subPath}) => {
        return zipFs.writeFileSync(subPath, content, opts);
      });
    }
    async unlinkPromise(p) {
      return await this.makeCallPromise(p, async () => {
        return await this.baseFs.unlinkPromise(p);
      }, async (zipFs, {subPath}) => {
        return await zipFs.unlinkPromise(subPath);
      });
    }
    unlinkSync(p) {
      return this.makeCallSync(p, () => {
        return this.baseFs.unlinkSync(p);
      }, (zipFs, {subPath}) => {
        return zipFs.unlinkSync(subPath);
      });
    }
    async utimesPromise(p, atime, mtime) {
      return await this.makeCallPromise(p, async () => {
        return await this.baseFs.utimesPromise(p, atime, mtime);
      }, async (zipFs, {subPath}) => {
        return await zipFs.utimesPromise(subPath, atime, mtime);
      });
    }
    utimesSync(p, atime, mtime) {
      return this.makeCallSync(p, () => {
        return this.baseFs.utimesSync(p, atime, mtime);
      }, (zipFs, {subPath}) => {
        return zipFs.utimesSync(subPath, atime, mtime);
      });
    }
    async mkdirPromise(p, opts) {
      return await this.makeCallPromise(p, async () => {
        return await this.baseFs.mkdirPromise(p, opts);
      }, async (zipFs, {subPath}) => {
        return await zipFs.mkdirPromise(subPath, opts);
      });
    }
    mkdirSync(p, opts) {
      return this.makeCallSync(p, () => {
        return this.baseFs.mkdirSync(p, opts);
      }, (zipFs, {subPath}) => {
        return zipFs.mkdirSync(subPath, opts);
      });
    }
    async rmdirPromise(p, opts) {
      return await this.makeCallPromise(p, async () => {
        return await this.baseFs.rmdirPromise(p, opts);
      }, async (zipFs, {subPath}) => {
        return await zipFs.rmdirPromise(subPath, opts);
      });
    }
    rmdirSync(p, opts) {
      return this.makeCallSync(p, () => {
        return this.baseFs.rmdirSync(p, opts);
      }, (zipFs, {subPath}) => {
        return zipFs.rmdirSync(subPath, opts);
      });
    }
    async linkPromise(existingP, newP) {
      return await this.makeCallPromise(newP, async () => {
        return await this.baseFs.linkPromise(existingP, newP);
      }, async (zipFs, {subPath}) => {
        return await zipFs.linkPromise(existingP, subPath);
      });
    }
    linkSync(existingP, newP) {
      return this.makeCallSync(newP, () => {
        return this.baseFs.linkSync(existingP, newP);
      }, (zipFs, {subPath}) => {
        return zipFs.linkSync(existingP, subPath);
      });
    }
    async symlinkPromise(target, p, type) {
      return await this.makeCallPromise(p, async () => {
        return await this.baseFs.symlinkPromise(target, p, type);
      }, async (zipFs, {subPath}) => {
        return await zipFs.symlinkPromise(target, subPath);
      });
    }
    symlinkSync(target, p, type) {
      return this.makeCallSync(p, () => {
        return this.baseFs.symlinkSync(target, p, type);
      }, (zipFs, {subPath}) => {
        return zipFs.symlinkSync(target, subPath);
      });
    }
    async readFilePromise(p, encoding) {
      return this.makeCallPromise(p, async () => {
        switch (encoding) {
          case `utf8`:
            return await this.baseFs.readFilePromise(p, encoding);
          default:
            return await this.baseFs.readFilePromise(p, encoding);
        }
      }, async (zipFs, {subPath}) => {
        return await zipFs.readFilePromise(subPath, encoding);
      });
    }
    readFileSync(p, encoding) {
      return this.makeCallSync(p, () => {
        switch (encoding) {
          case `utf8`:
            return this.baseFs.readFileSync(p, encoding);
          default:
            return this.baseFs.readFileSync(p, encoding);
        }
      }, (zipFs, {subPath}) => {
        return zipFs.readFileSync(subPath, encoding);
      });
    }
    async readdirPromise(p, {withFileTypes} = {}) {
      return await this.makeCallPromise(p, async () => {
        return await this.baseFs.readdirPromise(p, {withFileTypes});
      }, async (zipFs, {subPath}) => {
        return await zipFs.readdirPromise(subPath, {withFileTypes});
      }, {
        requireSubpath: false
      });
    }
    readdirSync(p, {withFileTypes} = {}) {
      return this.makeCallSync(p, () => {
        return this.baseFs.readdirSync(p, {withFileTypes});
      }, (zipFs, {subPath}) => {
        return zipFs.readdirSync(subPath, {withFileTypes});
      }, {
        requireSubpath: false
      });
    }
    async readlinkPromise(p) {
      return await this.makeCallPromise(p, async () => {
        return await this.baseFs.readlinkPromise(p);
      }, async (zipFs, {subPath}) => {
        return await zipFs.readlinkPromise(subPath);
      });
    }
    readlinkSync(p) {
      return this.makeCallSync(p, () => {
        return this.baseFs.readlinkSync(p);
      }, (zipFs, {subPath}) => {
        return zipFs.readlinkSync(subPath);
      });
    }
    async truncatePromise(p, len) {
      return await this.makeCallPromise(p, async () => {
        return await this.baseFs.truncatePromise(p, len);
      }, async (zipFs, {subPath}) => {
        return await zipFs.truncatePromise(subPath, len);
      });
    }
    truncateSync(p, len) {
      return this.makeCallSync(p, () => {
        return this.baseFs.truncateSync(p, len);
      }, (zipFs, {subPath}) => {
        return zipFs.truncateSync(subPath, len);
      });
    }
    watch(p, a, b) {
      return this.makeCallSync(p, () => {
        return this.baseFs.watch(p, a, b);
      }, (zipFs, {subPath}) => {
        return zipFs.watch(subPath, a, b);
      });
    }
    watchFile(p, a, b) {
      return this.makeCallSync(p, () => {
        return this.baseFs.watchFile(p, a, b);
      }, () => {
        return watchFile(this, p, a, b);
      });
    }
    unwatchFile(p, cb) {
      return this.makeCallSync(p, () => {
        return this.baseFs.unwatchFile(p, cb);
      }, () => {
        return unwatchFile(this, p, cb);
      });
    }
    async makeCallPromise(p, discard, accept, {requireSubpath = true} = {}) {
      if (typeof p !== `string`)
        return await discard();
      const normalizedP = this.resolve(p);
      const zipInfo = this.findZip(normalizedP);
      if (!zipInfo)
        return await discard();
      if (requireSubpath && zipInfo.subPath === `/`)
        return await discard();
      return await this.getZipPromise(zipInfo.archivePath, async (zipFs) => await accept(zipFs, zipInfo));
    }
    makeCallSync(p, discard, accept, {requireSubpath = true} = {}) {
      if (typeof p !== `string`)
        return discard();
      const normalizedP = this.resolve(p);
      const zipInfo = this.findZip(normalizedP);
      if (!zipInfo)
        return discard();
      if (requireSubpath && zipInfo.subPath === `/`)
        return discard();
      return this.getZipSync(zipInfo.archivePath, (zipFs) => accept(zipFs, zipInfo));
    }
    findZip(p) {
      if (this.filter && !this.filter.test(p))
        return null;
      let filePath = ``;
      while (true) {
        const archivePart = getArchivePart(p.substr(filePath.length));
        if (!archivePart)
          return null;
        filePath = this.pathUtils.join(filePath, archivePart);
        if (this.isZip.has(filePath) === false) {
          if (this.notZip.has(filePath))
            continue;
          try {
            if (!this.baseFs.lstatSync(filePath).isFile()) {
              this.notZip.add(filePath);
              continue;
            }
          } catch {
            return null;
          }
          this.isZip.add(filePath);
        }
        return {
          archivePath: filePath,
          subPath: this.pathUtils.join(PortablePath.root, p.substr(filePath.length))
        };
      }
    }
    limitOpenFiles(max) {
      if (this.zipInstances === null)
        return;
      const now2 = Date.now();
      let nextExpiresAt = now2 + this.maxAge;
      let closeCount = max === null ? 0 : this.zipInstances.size - max;
      for (const [path3, {zipFs, expiresAt, refCount}] of this.zipInstances.entries()) {
        if (refCount !== 0 || zipFs.hasOpenFileHandles()) {
          continue;
        } else if (now2 >= expiresAt) {
          zipFs.saveAndClose();
          this.zipInstances.delete(path3);
          closeCount -= 1;
          continue;
        } else if (max === null || closeCount <= 0) {
          nextExpiresAt = expiresAt;
          break;
        }
        zipFs.saveAndClose();
        this.zipInstances.delete(path3);
        closeCount -= 1;
      }
      if (this.limitOpenFilesTimeout === null && (max === null && this.zipInstances.size > 0 || max !== null)) {
        this.limitOpenFilesTimeout = setTimeout(() => {
          this.limitOpenFilesTimeout = null;
          this.limitOpenFiles(null);
        }, nextExpiresAt - now2).unref();
      }
    }
    async getZipPromise(p, accept) {
      const getZipOptions = async () => ({
        baseFs: this.baseFs,
        libzip: this.libzip,
        readOnly: this.readOnlyArchives,
        stats: await this.baseFs.statPromise(p)
      });
      if (this.zipInstances) {
        let cachedZipFs = this.zipInstances.get(p);
        if (!cachedZipFs) {
          const zipOptions = await getZipOptions();
          cachedZipFs = this.zipInstances.get(p);
          if (!cachedZipFs) {
            cachedZipFs = {
              zipFs: new ZipFS(p, zipOptions),
              expiresAt: 0,
              refCount: 0
            };
          }
        }
        this.zipInstances.delete(p);
        this.limitOpenFiles(this.maxOpenFiles - 1);
        this.zipInstances.set(p, cachedZipFs);
        cachedZipFs.expiresAt = Date.now() + this.maxAge;
        cachedZipFs.refCount += 1;
        try {
          return await accept(cachedZipFs.zipFs);
        } finally {
          cachedZipFs.refCount -= 1;
        }
      } else {
        const zipFs = new ZipFS(p, await getZipOptions());
        try {
          return await accept(zipFs);
        } finally {
          zipFs.saveAndClose();
        }
      }
    }
    getZipSync(p, accept) {
      const getZipOptions = () => ({
        baseFs: this.baseFs,
        libzip: this.libzip,
        readOnly: this.readOnlyArchives,
        stats: this.baseFs.statSync(p)
      });
      if (this.zipInstances) {
        let cachedZipFs = this.zipInstances.get(p);
        if (!cachedZipFs) {
          cachedZipFs = {
            zipFs: new ZipFS(p, getZipOptions()),
            expiresAt: 0,
            refCount: 0
          };
        }
        this.zipInstances.delete(p);
        this.limitOpenFiles(this.maxOpenFiles - 1);
        this.zipInstances.set(p, cachedZipFs);
        cachedZipFs.expiresAt = Date.now() + this.maxAge;
        return accept(cachedZipFs.zipFs);
      } else {
        const zipFs = new ZipFS(p, getZipOptions());
        try {
          return accept(zipFs);
        } finally {
          zipFs.saveAndClose();
        }
      }
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-fslib/sources/patchFs.ts
  var import_util2 = __toModule(require("util"));

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-fslib/sources/URLFS.ts
  var import_url = __toModule(require("url"));
  var URLFS = class extends ProxiedFS {
    constructor(baseFs) {
      super(npath);
      this.baseFs = baseFs;
    }
    mapFromBase(path3) {
      return path3;
    }
    mapToBase(path3) {
      if (path3 instanceof import_url.URL)
        return (0, import_url.fileURLToPath)(path3);
      return path3;
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-fslib/sources/patchFs.ts
  var SYNC_IMPLEMENTATIONS = new Set([
    `accessSync`,
    `appendFileSync`,
    `createReadStream`,
    `chmodSync`,
    `chownSync`,
    `closeSync`,
    `copyFileSync`,
    `linkSync`,
    `lstatSync`,
    `fstatSync`,
    `lutimesSync`,
    `mkdirSync`,
    `openSync`,
    `opendirSync`,
    `readSync`,
    `readlinkSync`,
    `readFileSync`,
    `readdirSync`,
    `readlinkSync`,
    `realpathSync`,
    `renameSync`,
    `rmdirSync`,
    `statSync`,
    `symlinkSync`,
    `truncateSync`,
    `unlinkSync`,
    `unwatchFile`,
    `utimesSync`,
    `watch`,
    `watchFile`,
    `writeFileSync`,
    `writeSync`
  ]);
  var ASYNC_IMPLEMENTATIONS = new Set([
    `accessPromise`,
    `appendFilePromise`,
    `chmodPromise`,
    `chownPromise`,
    `closePromise`,
    `copyFilePromise`,
    `linkPromise`,
    `fstatPromise`,
    `lstatPromise`,
    `lutimesPromise`,
    `mkdirPromise`,
    `openPromise`,
    `opendirPromise`,
    `readdirPromise`,
    `realpathPromise`,
    `readFilePromise`,
    `readdirPromise`,
    `readlinkPromise`,
    `renamePromise`,
    `rmdirPromise`,
    `statPromise`,
    `symlinkPromise`,
    `truncatePromise`,
    `unlinkPromise`,
    `utimesPromise`,
    `writeFilePromise`,
    `writeSync`
  ]);
  var FILEHANDLE_IMPLEMENTATIONS = new Set([
    `appendFilePromise`,
    `chmodPromise`,
    `chownPromise`,
    `closePromise`,
    `readPromise`,
    `readFilePromise`,
    `statPromise`,
    `truncatePromise`,
    `utimesPromise`,
    `writePromise`,
    `writeFilePromise`
  ]);
  function patchFs(patchedFs, fakeFs) {
    fakeFs = new URLFS(fakeFs);
    const setupFn = (target, name, replacement) => {
      const orig = target[name];
      target[name] = replacement;
      if (typeof (orig == null ? void 0 : orig[import_util2.promisify.custom]) !== `undefined`) {
        replacement[import_util2.promisify.custom] = orig[import_util2.promisify.custom];
      }
    };
    {
      setupFn(patchedFs, `exists`, (p, ...args) => {
        const hasCallback = typeof args[args.length - 1] === `function`;
        const callback = hasCallback ? args.pop() : () => {
        };
        process.nextTick(() => {
          fakeFs.existsPromise(p).then((exists) => {
            callback(exists);
          }, () => {
            callback(false);
          });
        });
      });
      setupFn(patchedFs, `read`, (p, buffer, ...args) => {
        const hasCallback = typeof args[args.length - 1] === `function`;
        const callback = hasCallback ? args.pop() : () => {
        };
        process.nextTick(() => {
          fakeFs.readPromise(p, buffer, ...args).then((bytesRead) => {
            callback(null, bytesRead, buffer);
          }, (error) => {
            callback(error);
          });
        });
      });
      for (const fnName of ASYNC_IMPLEMENTATIONS) {
        const origName = fnName.replace(/Promise$/, ``);
        if (typeof patchedFs[origName] === `undefined`)
          continue;
        const fakeImpl = fakeFs[fnName];
        if (typeof fakeImpl === `undefined`)
          continue;
        const wrapper = (...args) => {
          const hasCallback = typeof args[args.length - 1] === `function`;
          const callback = hasCallback ? args.pop() : () => {
          };
          process.nextTick(() => {
            fakeImpl.apply(fakeFs, args).then((result) => {
              callback(null, result);
            }, (error) => {
              callback(error);
            });
          });
        };
        setupFn(patchedFs, origName, wrapper);
      }
      patchedFs.realpath.native = patchedFs.realpath;
    }
    {
      setupFn(patchedFs, `existsSync`, (p) => {
        try {
          return fakeFs.existsSync(p);
        } catch (error) {
          return false;
        }
      });
      for (const fnName of SYNC_IMPLEMENTATIONS) {
        const origName = fnName;
        if (typeof patchedFs[origName] === `undefined`)
          continue;
        const fakeImpl = fakeFs[fnName];
        if (typeof fakeImpl === `undefined`)
          continue;
        setupFn(patchedFs, origName, fakeImpl.bind(fakeFs));
      }
      patchedFs.realpathSync.native = patchedFs.realpathSync;
    }
    {
      const origEmitWarning = process.emitWarning;
      process.emitWarning = () => {
      };
      let patchedFsPromises;
      try {
        patchedFsPromises = patchedFs.promises;
      } finally {
        process.emitWarning = origEmitWarning;
      }
      if (typeof patchedFsPromises !== `undefined`) {
        for (const fnName of ASYNC_IMPLEMENTATIONS) {
          const origName = fnName.replace(/Promise$/, ``);
          if (typeof patchedFsPromises[origName] === `undefined`)
            continue;
          const fakeImpl = fakeFs[fnName];
          if (typeof fakeImpl === `undefined`)
            continue;
          if (fnName === `open`)
            continue;
          setupFn(patchedFsPromises, origName, fakeImpl.bind(fakeFs));
        }
        class FileHandle {
          constructor(fd) {
            this.fd = fd;
          }
        }
        for (const fnName of FILEHANDLE_IMPLEMENTATIONS) {
          const origName = fnName.replace(/Promise$/, ``);
          const fakeImpl = fakeFs[fnName];
          if (typeof fakeImpl === `undefined`)
            continue;
          setupFn(FileHandle.prototype, origName, function(...args) {
            return fakeImpl.call(fakeFs, this.fd, ...args);
          });
        }
        setupFn(patchedFsPromises, `open`, async (...args) => {
          const fd = await fakeFs.openPromise(...args);
          return new FileHandle(fd);
        });
      }
    }
    {
      patchedFs.read[import_util2.promisify.custom] = async (p, buffer, ...args) => {
        const res = fakeFs.readPromise(p, buffer, ...args);
        return {bytesRead: await res, buffer};
      };
    }
  }
  function extendFs(realFs, fakeFs) {
    const patchedFs = Object.create(realFs);
    patchFs(patchedFs, fakeFs);
    return patchedFs;
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-fslib/sources/xfs.ts
  var import_os2 = __toModule(require("os"));
  function getTempName(prefix) {
    const tmpdir3 = npath.toPortablePath(import_os2.default.tmpdir());
    const hash = Math.ceil(Math.random() * 4294967296).toString(16).padStart(8, `0`);
    return ppath.join(tmpdir3, `${prefix}${hash}`);
  }
  var tmpdirs = new Set();
  var cleanExitRegistered = false;
  function registerCleanExit() {
    if (cleanExitRegistered)
      return;
    cleanExitRegistered = true;
    process.once(`exit`, () => {
      xfs.rmtempSync();
    });
  }
  var xfs = Object.assign(new NodeFS(), {
    detachTemp(p) {
      tmpdirs.delete(p);
    },
    mktempSync(cb) {
      registerCleanExit();
      while (true) {
        const p = getTempName(`xfs-`);
        try {
          this.mkdirSync(p);
        } catch (error) {
          if (error.code === `EEXIST`) {
            continue;
          } else {
            throw error;
          }
        }
        const realP = this.realpathSync(p);
        tmpdirs.add(realP);
        if (typeof cb !== `undefined`) {
          try {
            return cb(realP);
          } finally {
            if (tmpdirs.has(realP)) {
              tmpdirs.delete(realP);
              try {
                this.removeSync(realP);
              } catch {
              }
            }
          }
        } else {
          return realP;
        }
      }
    },
    async mktempPromise(cb) {
      registerCleanExit();
      while (true) {
        const p = getTempName(`xfs-`);
        try {
          await this.mkdirPromise(p);
        } catch (error) {
          if (error.code === `EEXIST`) {
            continue;
          } else {
            throw error;
          }
        }
        const realP = await this.realpathPromise(p);
        tmpdirs.add(realP);
        if (typeof cb !== `undefined`) {
          try {
            return await cb(realP);
          } finally {
            if (tmpdirs.has(realP)) {
              tmpdirs.delete(realP);
              try {
                await this.removePromise(realP);
              } catch {
              }
            }
          }
        } else {
          return realP;
        }
      }
    },
    async rmtempPromise() {
      await Promise.all(Array.from(tmpdirs.values()).map(async (p) => {
        try {
          await xfs.removePromise(p, {maxRetries: 0});
          tmpdirs.delete(p);
        } catch {
        }
      }));
    },
    rmtempSync() {
      for (const p of tmpdirs) {
        try {
          xfs.removeSync(p);
          tmpdirs.delete(p);
        } catch {
        }
      }
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/execUtils.ts
  var import_cross_spawn = __toModule(require_cross_spawn());
  var EndStrategy;
  (function(EndStrategy2) {
    EndStrategy2[EndStrategy2["Never"] = 0] = "Never";
    EndStrategy2[EndStrategy2["ErrorCode"] = 1] = "ErrorCode";
    EndStrategy2[EndStrategy2["Always"] = 2] = "Always";
  })(EndStrategy || (EndStrategy = {}));
  function hasFd(stream) {
    return stream !== null && typeof stream.fd === `number`;
  }
  var activeChildren = new Set();
  function sigintHandler() {
  }
  function sigtermHandler() {
    for (const child of activeChildren) {
      child.kill();
    }
  }
  async function pipevp(fileName, args, {cwd, env = process.env, strict = false, stdin = null, stdout, stderr, end = 2}) {
    const stdio = [`pipe`, `pipe`, `pipe`];
    if (stdin === null)
      stdio[0] = `ignore`;
    else if (hasFd(stdin))
      stdio[0] = stdin;
    if (hasFd(stdout))
      stdio[1] = stdout;
    if (hasFd(stderr))
      stdio[2] = stderr;
    const child = (0, import_cross_spawn.default)(fileName, args, {
      cwd: npath.fromPortablePath(cwd),
      env: __spreadProps(__spreadValues({}, env), {
        PWD: npath.fromPortablePath(cwd)
      }),
      stdio
    });
    activeChildren.add(child);
    if (activeChildren.size === 1) {
      process.on(`SIGINT`, sigintHandler);
      process.on(`SIGTERM`, sigtermHandler);
    }
    if (!hasFd(stdin) && stdin !== null)
      stdin.pipe(child.stdin);
    if (!hasFd(stdout))
      child.stdout.pipe(stdout, {end: false});
    if (!hasFd(stderr))
      child.stderr.pipe(stderr, {end: false});
    const closeStreams = () => {
      for (const stream of new Set([stdout, stderr])) {
        if (!hasFd(stream)) {
          stream.end();
        }
      }
    };
    return new Promise((resolve, reject) => {
      child.on(`error`, (error) => {
        activeChildren.delete(child);
        if (activeChildren.size === 0) {
          process.off(`SIGINT`, sigintHandler);
          process.off(`SIGTERM`, sigtermHandler);
        }
        if (end === 2 || end === 1)
          closeStreams();
        reject(error);
      });
      child.on(`close`, (code, sig) => {
        activeChildren.delete(child);
        if (activeChildren.size === 0) {
          process.off(`SIGINT`, sigintHandler);
          process.off(`SIGTERM`, sigtermHandler);
        }
        if (end === 2 || end === 1 && code > 0)
          closeStreams();
        if (code === 0 || !strict) {
          resolve({code: getExitCode(code, sig)});
        } else if (code !== null) {
          reject(new Error(`Child "${fileName}" exited with exit code ${code}`));
        } else {
          reject(new Error(`Child "${fileName}" exited with signal ${sig}`));
        }
      });
    });
  }
  async function execvp(fileName, args, {cwd, env = process.env, encoding = `utf8`, strict = false}) {
    const stdio = [`ignore`, `pipe`, `pipe`];
    const stdoutChunks = [];
    const stderrChunks = [];
    const nativeCwd = npath.fromPortablePath(cwd);
    if (typeof env.PWD !== `undefined`)
      env = __spreadProps(__spreadValues({}, env), {PWD: nativeCwd});
    const subprocess = (0, import_cross_spawn.default)(fileName, args, {
      cwd: nativeCwd,
      env,
      stdio
    });
    subprocess.stdout.on(`data`, (chunk) => {
      stdoutChunks.push(chunk);
    });
    subprocess.stderr.on(`data`, (chunk) => {
      stderrChunks.push(chunk);
    });
    return await new Promise((resolve, reject) => {
      subprocess.on(`error`, () => {
        reject();
      });
      subprocess.on(`close`, (code, signal) => {
        const stdout = encoding === `buffer` ? Buffer.concat(stdoutChunks) : Buffer.concat(stdoutChunks).toString(encoding);
        const stderr = encoding === `buffer` ? Buffer.concat(stderrChunks) : Buffer.concat(stderrChunks).toString(encoding);
        if (code === 0 || !strict) {
          resolve({
            code: getExitCode(code, signal),
            stdout,
            stderr
          });
        } else {
          reject(Object.assign(new Error(`Child "${fileName}" exited with exit code ${code}

${stderr}`), {
            code: getExitCode(code, signal),
            stdout,
            stderr
          }));
        }
      });
    });
  }
  var signalToCodeMap = new Map([
    [`SIGINT`, 2],
    [`SIGQUIT`, 3],
    [`SIGKILL`, 9],
    [`SIGTERM`, 15]
  ]);
  function getExitCode(code, signal) {
    const signalCode = signalToCodeMap.get(signal);
    if (typeof signalCode !== `undefined`) {
      return 128 + signalCode;
    } else {
      return code != null ? code : 1;
    }
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/folderUtils.ts
  var folderUtils_exports = {};
  __export(folderUtils_exports, {
    getDefaultGlobalFolder: () => getDefaultGlobalFolder,
    getHomeFolder: () => getHomeFolder,
    isFolderInside: () => isFolderInside
  });
  var import_os3 = __toModule(require("os"));
  function getDefaultGlobalFolder() {
    if (process.platform === `win32`) {
      const base = npath.toPortablePath(process.env.LOCALAPPDATA || npath.join((0, import_os3.homedir)(), `AppData`, `Local`));
      return ppath.resolve(base, `Yarn/Berry`);
    }
    if (process.env.XDG_DATA_HOME) {
      const base = npath.toPortablePath(process.env.XDG_DATA_HOME);
      return ppath.resolve(base, `yarn/berry`);
    }
    return ppath.resolve(getHomeFolder(), `.yarn/berry`);
  }
  function getHomeFolder() {
    return npath.toPortablePath((0, import_os3.homedir)() || `/usr/local/share`);
  }
  function isFolderInside(target, parent) {
    const relative = ppath.relative(parent, target);
    return relative && !relative.startsWith(`..`) && !ppath.isAbsolute(relative);
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/formatUtils.ts
  var formatUtils_exports = {};
  __export(formatUtils_exports, {
    LogLevel: () => LogLevel,
    Style: () => Style,
    Type: () => Type,
    addLogFilterSupport: () => addLogFilterSupport,
    applyColor: () => applyColor,
    applyHyperlink: () => applyHyperlink,
    applyStyle: () => applyStyle,
    json: () => json,
    mark: () => mark,
    pretty: () => pretty,
    prettyField: () => prettyField,
    prettyList: () => prettyList,
    supportsColor: () => supportsColor,
    supportsHyperlinks: () => supportsHyperlinks,
    tuple: () => tuple
  });
  var import_chalk = __toModule(require_source());
  var import_ci_info = __toModule(require_ci_info());
  var import_strip_ansi = __toModule(require_strip_ansi());

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/MessageName.ts
  var MessageName;
  (function(MessageName2) {
    MessageName2[MessageName2["UNNAMED"] = 0] = "UNNAMED";
    MessageName2[MessageName2["EXCEPTION"] = 1] = "EXCEPTION";
    MessageName2[MessageName2["MISSING_PEER_DEPENDENCY"] = 2] = "MISSING_PEER_DEPENDENCY";
    MessageName2[MessageName2["CYCLIC_DEPENDENCIES"] = 3] = "CYCLIC_DEPENDENCIES";
    MessageName2[MessageName2["DISABLED_BUILD_SCRIPTS"] = 4] = "DISABLED_BUILD_SCRIPTS";
    MessageName2[MessageName2["BUILD_DISABLED"] = 5] = "BUILD_DISABLED";
    MessageName2[MessageName2["SOFT_LINK_BUILD"] = 6] = "SOFT_LINK_BUILD";
    MessageName2[MessageName2["MUST_BUILD"] = 7] = "MUST_BUILD";
    MessageName2[MessageName2["MUST_REBUILD"] = 8] = "MUST_REBUILD";
    MessageName2[MessageName2["BUILD_FAILED"] = 9] = "BUILD_FAILED";
    MessageName2[MessageName2["RESOLVER_NOT_FOUND"] = 10] = "RESOLVER_NOT_FOUND";
    MessageName2[MessageName2["FETCHER_NOT_FOUND"] = 11] = "FETCHER_NOT_FOUND";
    MessageName2[MessageName2["LINKER_NOT_FOUND"] = 12] = "LINKER_NOT_FOUND";
    MessageName2[MessageName2["FETCH_NOT_CACHED"] = 13] = "FETCH_NOT_CACHED";
    MessageName2[MessageName2["YARN_IMPORT_FAILED"] = 14] = "YARN_IMPORT_FAILED";
    MessageName2[MessageName2["REMOTE_INVALID"] = 15] = "REMOTE_INVALID";
    MessageName2[MessageName2["REMOTE_NOT_FOUND"] = 16] = "REMOTE_NOT_FOUND";
    MessageName2[MessageName2["RESOLUTION_PACK"] = 17] = "RESOLUTION_PACK";
    MessageName2[MessageName2["CACHE_CHECKSUM_MISMATCH"] = 18] = "CACHE_CHECKSUM_MISMATCH";
    MessageName2[MessageName2["UNUSED_CACHE_ENTRY"] = 19] = "UNUSED_CACHE_ENTRY";
    MessageName2[MessageName2["MISSING_LOCKFILE_ENTRY"] = 20] = "MISSING_LOCKFILE_ENTRY";
    MessageName2[MessageName2["WORKSPACE_NOT_FOUND"] = 21] = "WORKSPACE_NOT_FOUND";
    MessageName2[MessageName2["TOO_MANY_MATCHING_WORKSPACES"] = 22] = "TOO_MANY_MATCHING_WORKSPACES";
    MessageName2[MessageName2["CONSTRAINTS_MISSING_DEPENDENCY"] = 23] = "CONSTRAINTS_MISSING_DEPENDENCY";
    MessageName2[MessageName2["CONSTRAINTS_INCOMPATIBLE_DEPENDENCY"] = 24] = "CONSTRAINTS_INCOMPATIBLE_DEPENDENCY";
    MessageName2[MessageName2["CONSTRAINTS_EXTRANEOUS_DEPENDENCY"] = 25] = "CONSTRAINTS_EXTRANEOUS_DEPENDENCY";
    MessageName2[MessageName2["CONSTRAINTS_INVALID_DEPENDENCY"] = 26] = "CONSTRAINTS_INVALID_DEPENDENCY";
    MessageName2[MessageName2["CANT_SUGGEST_RESOLUTIONS"] = 27] = "CANT_SUGGEST_RESOLUTIONS";
    MessageName2[MessageName2["FROZEN_LOCKFILE_EXCEPTION"] = 28] = "FROZEN_LOCKFILE_EXCEPTION";
    MessageName2[MessageName2["CROSS_DRIVE_VIRTUAL_LOCAL"] = 29] = "CROSS_DRIVE_VIRTUAL_LOCAL";
    MessageName2[MessageName2["FETCH_FAILED"] = 30] = "FETCH_FAILED";
    MessageName2[MessageName2["DANGEROUS_NODE_MODULES"] = 31] = "DANGEROUS_NODE_MODULES";
    MessageName2[MessageName2["NODE_GYP_INJECTED"] = 32] = "NODE_GYP_INJECTED";
    MessageName2[MessageName2["AUTHENTICATION_NOT_FOUND"] = 33] = "AUTHENTICATION_NOT_FOUND";
    MessageName2[MessageName2["INVALID_CONFIGURATION_KEY"] = 34] = "INVALID_CONFIGURATION_KEY";
    MessageName2[MessageName2["NETWORK_ERROR"] = 35] = "NETWORK_ERROR";
    MessageName2[MessageName2["LIFECYCLE_SCRIPT"] = 36] = "LIFECYCLE_SCRIPT";
    MessageName2[MessageName2["CONSTRAINTS_MISSING_FIELD"] = 37] = "CONSTRAINTS_MISSING_FIELD";
    MessageName2[MessageName2["CONSTRAINTS_INCOMPATIBLE_FIELD"] = 38] = "CONSTRAINTS_INCOMPATIBLE_FIELD";
    MessageName2[MessageName2["CONSTRAINTS_EXTRANEOUS_FIELD"] = 39] = "CONSTRAINTS_EXTRANEOUS_FIELD";
    MessageName2[MessageName2["CONSTRAINTS_INVALID_FIELD"] = 40] = "CONSTRAINTS_INVALID_FIELD";
    MessageName2[MessageName2["AUTHENTICATION_INVALID"] = 41] = "AUTHENTICATION_INVALID";
    MessageName2[MessageName2["PROLOG_UNKNOWN_ERROR"] = 42] = "PROLOG_UNKNOWN_ERROR";
    MessageName2[MessageName2["PROLOG_SYNTAX_ERROR"] = 43] = "PROLOG_SYNTAX_ERROR";
    MessageName2[MessageName2["PROLOG_EXISTENCE_ERROR"] = 44] = "PROLOG_EXISTENCE_ERROR";
    MessageName2[MessageName2["STACK_OVERFLOW_RESOLUTION"] = 45] = "STACK_OVERFLOW_RESOLUTION";
    MessageName2[MessageName2["AUTOMERGE_FAILED_TO_PARSE"] = 46] = "AUTOMERGE_FAILED_TO_PARSE";
    MessageName2[MessageName2["AUTOMERGE_IMMUTABLE"] = 47] = "AUTOMERGE_IMMUTABLE";
    MessageName2[MessageName2["AUTOMERGE_SUCCESS"] = 48] = "AUTOMERGE_SUCCESS";
    MessageName2[MessageName2["AUTOMERGE_REQUIRED"] = 49] = "AUTOMERGE_REQUIRED";
    MessageName2[MessageName2["DEPRECATED_CLI_SETTINGS"] = 50] = "DEPRECATED_CLI_SETTINGS";
    MessageName2[MessageName2["PLUGIN_NAME_NOT_FOUND"] = 51] = "PLUGIN_NAME_NOT_FOUND";
    MessageName2[MessageName2["INVALID_PLUGIN_REFERENCE"] = 52] = "INVALID_PLUGIN_REFERENCE";
    MessageName2[MessageName2["CONSTRAINTS_AMBIGUITY"] = 53] = "CONSTRAINTS_AMBIGUITY";
    MessageName2[MessageName2["CACHE_OUTSIDE_PROJECT"] = 54] = "CACHE_OUTSIDE_PROJECT";
    MessageName2[MessageName2["IMMUTABLE_INSTALL"] = 55] = "IMMUTABLE_INSTALL";
    MessageName2[MessageName2["IMMUTABLE_CACHE"] = 56] = "IMMUTABLE_CACHE";
    MessageName2[MessageName2["INVALID_MANIFEST"] = 57] = "INVALID_MANIFEST";
    MessageName2[MessageName2["PACKAGE_PREPARATION_FAILED"] = 58] = "PACKAGE_PREPARATION_FAILED";
    MessageName2[MessageName2["INVALID_RANGE_PEER_DEPENDENCY"] = 59] = "INVALID_RANGE_PEER_DEPENDENCY";
    MessageName2[MessageName2["INCOMPATIBLE_PEER_DEPENDENCY"] = 60] = "INCOMPATIBLE_PEER_DEPENDENCY";
    MessageName2[MessageName2["DEPRECATED_PACKAGE"] = 61] = "DEPRECATED_PACKAGE";
    MessageName2[MessageName2["INCOMPATIBLE_OS"] = 62] = "INCOMPATIBLE_OS";
    MessageName2[MessageName2["INCOMPATIBLE_CPU"] = 63] = "INCOMPATIBLE_CPU";
    MessageName2[MessageName2["FROZEN_ARTIFACT_EXCEPTION"] = 64] = "FROZEN_ARTIFACT_EXCEPTION";
    MessageName2[MessageName2["TELEMETRY_NOTICE"] = 65] = "TELEMETRY_NOTICE";
    MessageName2[MessageName2["PATCH_HUNK_FAILED"] = 66] = "PATCH_HUNK_FAILED";
    MessageName2[MessageName2["INVALID_CONFIGURATION_VALUE"] = 67] = "INVALID_CONFIGURATION_VALUE";
    MessageName2[MessageName2["UNUSED_PACKAGE_EXTENSION"] = 68] = "UNUSED_PACKAGE_EXTENSION";
    MessageName2[MessageName2["REDUNDANT_PACKAGE_EXTENSION"] = 69] = "REDUNDANT_PACKAGE_EXTENSION";
    MessageName2[MessageName2["AUTO_NM_SUCCESS"] = 70] = "AUTO_NM_SUCCESS";
    MessageName2[MessageName2["NM_CANT_INSTALL_EXTERNAL_SOFT_LINK"] = 71] = "NM_CANT_INSTALL_EXTERNAL_SOFT_LINK";
    MessageName2[MessageName2["NM_PRESERVE_SYMLINKS_REQUIRED"] = 72] = "NM_PRESERVE_SYMLINKS_REQUIRED";
  })(MessageName || (MessageName = {}));
  function stringifyMessageName(name) {
    return `YN${name.toString(10).padStart(4, `0`)}`;
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/miscUtils.ts
  var miscUtils_exports = {};
  __export(miscUtils_exports, {
    BufferStream: () => BufferStream,
    DefaultStream: () => DefaultStream,
    assertNever: () => assertNever,
    bufferStream: () => bufferStream,
    buildIgnorePattern: () => buildIgnorePattern,
    convertMapsToIndexableObjects: () => convertMapsToIndexableObjects,
    dynamicRequire: () => dynamicRequire,
    dynamicRequireNoCache: () => dynamicRequireNoCache,
    escapeRegExp: () => escapeRegExp,
    getArrayWithDefault: () => getArrayWithDefault,
    getFactoryWithDefault: () => getFactoryWithDefault,
    getMapWithDefault: () => getMapWithDefault,
    getSetWithDefault: () => getSetWithDefault,
    isIndexableObject: () => isIndexableObject,
    isPathLike: () => isPathLike,
    mapAndFilter: () => mapAndFilter,
    mapAndFind: () => mapAndFind,
    overrideType: () => overrideType,
    parseBoolean: () => parseBoolean,
    parseOptionalBoolean: () => parseOptionalBoolean,
    prettifyAsyncErrors: () => prettifyAsyncErrors,
    prettifySyncErrors: () => prettifySyncErrors,
    releaseAfterUseAsync: () => releaseAfterUseAsync,
    replaceEnvVariables: () => replaceEnvVariables,
    sortMap: () => sortMap,
    tryParseOptionalBoolean: () => tryParseOptionalBoolean,
    validateEnum: () => validateEnum
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/clipanion-virtual-22ae250095/0/cache/clipanion-npm-3.0.0-rc.10-397b8032cb-b08ff3d507.zip/node_modules/clipanion/lib/advanced/index.mjs
  var advanced_exports = {};
  __export(advanced_exports, {
    Builtins: () => builtins_exports,
    Cli: () => Cli,
    Command: () => Command,
    Option: () => options_exports,
    UsageError: () => UsageError
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/clipanion-virtual-22ae250095/0/cache/clipanion-npm-3.0.0-rc.10-397b8032cb-b08ff3d507.zip/node_modules/clipanion/lib/constants.mjs
  var NODE_INITIAL = 0;
  var NODE_SUCCESS = 1;
  var NODE_ERRORED = 2;
  var START_OF_INPUT = ``;
  var END_OF_INPUT = `\0`;
  var HELP_COMMAND_INDEX = -1;
  var HELP_REGEX = /^(-h|--help)(?:=([0-9]+))?$/;
  var OPTION_REGEX = /^(--[a-z]+(?:-[a-z]+)*|-[a-zA-Z]+)$/;
  var BATCH_REGEX = /^-[a-zA-Z]{2,}$/;
  var BINDING_REGEX = /^([^=]+)=([\s\S]*)$/;
  var DEBUG = process.env.DEBUG_CLI === `1`;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/clipanion-virtual-22ae250095/0/cache/clipanion-npm-3.0.0-rc.10-397b8032cb-b08ff3d507.zip/node_modules/clipanion/lib/errors.mjs
  var UsageError = class extends Error {
    constructor(message) {
      super(message);
      this.clipanion = {type: `usage`};
      this.name = `UsageError`;
    }
  };
  var UnknownSyntaxError = class extends Error {
    constructor(input, candidates) {
      super();
      this.input = input;
      this.candidates = candidates;
      this.clipanion = {type: `none`};
      this.name = `UnknownSyntaxError`;
      if (this.candidates.length === 0) {
        this.message = `Command not found, but we're not sure what's the alternative.`;
      } else if (this.candidates.every((candidate) => candidate.reason !== null && candidate.reason === candidates[0].reason)) {
        const [{reason}] = this.candidates;
        this.message = `${reason}

${this.candidates.map(({usage}) => `$ ${usage}`).join(`
`)}`;
      } else if (this.candidates.length === 1) {
        const [{usage}] = this.candidates;
        this.message = `Command not found; did you mean:

$ ${usage}
${whileRunning(input)}`;
      } else {
        this.message = `Command not found; did you mean one of:

${this.candidates.map(({usage}, index) => {
          return `${`${index}.`.padStart(4)} ${usage}`;
        }).join(`
`)}

${whileRunning(input)}`;
      }
    }
  };
  var AmbiguousSyntaxError = class extends Error {
    constructor(input, usages) {
      super();
      this.input = input;
      this.usages = usages;
      this.clipanion = {type: `none`};
      this.name = `AmbiguousSyntaxError`;
      this.message = `Cannot find which to pick amongst the following alternatives:

${this.usages.map((usage, index) => {
        return `${`${index}.`.padStart(4)} ${usage}`;
      }).join(`
`)}

${whileRunning(input)}`;
    }
  };
  var whileRunning = (input) => `While running ${input.filter((token) => {
    return token !== END_OF_INPUT;
  }).map((token) => {
    const json2 = JSON.stringify(token);
    if (token.match(/\s/) || token.length === 0 || json2 !== `"${token}"`) {
      return json2;
    } else {
      return token;
    }
  }).join(` `)}`;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/clipanion-virtual-22ae250095/0/cache/clipanion-npm-3.0.0-rc.10-397b8032cb-b08ff3d507.zip/node_modules/clipanion/lib/advanced/options/utils.mjs
  var isOptionSymbol = Symbol(`clipanion/isOption`);
  function makeCommandOption(spec) {
    return __spreadProps(__spreadValues({}, spec), {[isOptionSymbol]: true});
  }
  function rerouteArguments(a, b) {
    if (typeof a === `undefined`)
      return [a, b];
    if (typeof a === `object` && a !== null && !Array.isArray(a)) {
      return [void 0, a];
    } else {
      return [a, b];
    }
  }
  function cleanValidationError(message, lowerCase = false) {
    let cleaned = message.replace(/^\.: /, ``);
    if (lowerCase)
      cleaned = cleaned[0].toLowerCase() + cleaned.slice(1);
    return cleaned;
  }
  function formatError(message, errors4) {
    if (errors4.length === 1) {
      return new UsageError(`${message}: ${cleanValidationError(errors4[0], true)}`);
    } else {
      return new UsageError(`${message}:
${errors4.map((error) => `
- ${cleanValidationError(error)}`).join(``)}`);
    }
  }
  function applyValidator(name, value, validator) {
    if (typeof validator === `undefined`)
      return value;
    const errors4 = [];
    const coercions = [];
    const coercion = (v) => {
      const orig = value;
      value = v;
      return coercion.bind(null, orig);
    };
    const check = validator(value, {errors: errors4, coercions, coercion});
    if (!check)
      throw formatError(`Invalid value for ${name}`, errors4);
    for (const [, op] of coercions)
      op();
    return value;
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/clipanion-virtual-22ae250095/0/cache/clipanion-npm-3.0.0-rc.10-397b8032cb-b08ff3d507.zip/node_modules/clipanion/lib/advanced/Command.mjs
  var Command = class {
    constructor() {
      this.help = false;
    }
    static Usage(usage) {
      return usage;
    }
    async catch(error) {
      throw error;
    }
    async validateAndExecute() {
      const commandClass = this.constructor;
      const cascade = commandClass.schema;
      if (typeof cascade !== `undefined`) {
        const {isDict: isDict2, isUnknown: isUnknown2, applyCascade: applyCascade2} = await Promise.resolve().then(() => (init_lib(), lib_exports));
        const schema = applyCascade2(isDict2(isUnknown2()), cascade);
        const errors4 = [];
        const coercions = [];
        const check = schema(this, {errors: errors4, coercions});
        if (!check)
          throw formatError(`Invalid option schema`, errors4);
        for (const [, op] of coercions) {
          op();
        }
      }
      const exitCode = await this.execute();
      if (typeof exitCode !== `undefined`) {
        return exitCode;
      } else {
        return 0;
      }
    }
  };
  Command.isOption = isOptionSymbol;
  Command.Default = [];

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/clipanion-virtual-22ae250095/0/cache/clipanion-npm-3.0.0-rc.10-397b8032cb-b08ff3d507.zip/node_modules/clipanion/lib/core.mjs
  function debug(str) {
    if (DEBUG) {
      console.log(str);
    }
  }
  var basicHelpState = {
    candidateUsage: null,
    requiredOptions: [],
    errorMessage: null,
    ignoreOptions: false,
    path: [],
    positionals: [],
    options: [],
    remainder: null,
    selectedIndex: HELP_COMMAND_INDEX
  };
  function makeStateMachine() {
    return {
      nodes: [makeNode(), makeNode(), makeNode()]
    };
  }
  function makeAnyOfMachine(inputs) {
    const output = makeStateMachine();
    const heads = [];
    let offset = output.nodes.length;
    for (const input of inputs) {
      heads.push(offset);
      for (let t5 = 0; t5 < input.nodes.length; ++t5)
        if (!isTerminalNode(t5))
          output.nodes.push(cloneNode(input.nodes[t5], offset));
      offset += input.nodes.length - 2;
    }
    for (const head of heads)
      registerShortcut(output, NODE_INITIAL, head);
    return output;
  }
  function injectNode(machine, node) {
    machine.nodes.push(node);
    return machine.nodes.length - 1;
  }
  function simplifyMachine(input) {
    const visited = new Set();
    const process2 = (node) => {
      if (visited.has(node))
        return;
      visited.add(node);
      const nodeDef = input.nodes[node];
      for (const transitions of Object.values(nodeDef.statics))
        for (const {to} of transitions)
          process2(to);
      for (const [, {to}] of nodeDef.dynamics)
        process2(to);
      for (const {to} of nodeDef.shortcuts)
        process2(to);
      const shortcuts = new Set(nodeDef.shortcuts.map(({to}) => to));
      while (nodeDef.shortcuts.length > 0) {
        const {to} = nodeDef.shortcuts.shift();
        const toDef = input.nodes[to];
        for (const [segment, transitions] of Object.entries(toDef.statics)) {
          const store = !Object.prototype.hasOwnProperty.call(nodeDef.statics, segment) ? nodeDef.statics[segment] = [] : nodeDef.statics[segment];
          for (const transition of transitions) {
            if (!store.some(({to: to2}) => transition.to === to2)) {
              store.push(transition);
            }
          }
        }
        for (const [test, transition] of toDef.dynamics)
          if (!nodeDef.dynamics.some(([otherTest, {to: to2}]) => test === otherTest && transition.to === to2))
            nodeDef.dynamics.push([test, transition]);
        for (const transition of toDef.shortcuts) {
          if (!shortcuts.has(transition.to)) {
            nodeDef.shortcuts.push(transition);
            shortcuts.add(transition.to);
          }
        }
      }
    };
    process2(NODE_INITIAL);
  }
  function debugMachine(machine, {prefix = ``} = {}) {
    debug(`${prefix}Nodes are:`);
    for (let t5 = 0; t5 < machine.nodes.length; ++t5) {
      debug(`${prefix}  ${t5}: ${JSON.stringify(machine.nodes[t5])}`);
    }
  }
  function runMachineInternal(machine, input, partial = false) {
    debug(`Running a vm on ${JSON.stringify(input)}`);
    let branches = [{node: NODE_INITIAL, state: {
      candidateUsage: null,
      requiredOptions: [],
      errorMessage: null,
      ignoreOptions: false,
      options: [],
      path: [],
      positionals: [],
      remainder: null,
      selectedIndex: null
    }}];
    debugMachine(machine, {prefix: `  `});
    const tokens = [START_OF_INPUT, ...input];
    for (let t5 = 0; t5 < tokens.length; ++t5) {
      const segment = tokens[t5];
      debug(`  Processing ${JSON.stringify(segment)}`);
      const nextBranches = [];
      for (const {node, state} of branches) {
        debug(`    Current node is ${node}`);
        const nodeDef = machine.nodes[node];
        if (node === NODE_ERRORED) {
          nextBranches.push({node, state});
          continue;
        }
        console.assert(nodeDef.shortcuts.length === 0, `Shortcuts should have been eliminated by now`);
        const hasExactMatch = Object.prototype.hasOwnProperty.call(nodeDef.statics, segment);
        if (!partial || t5 < tokens.length - 1 || hasExactMatch) {
          if (hasExactMatch) {
            const transitions = nodeDef.statics[segment];
            for (const {to, reducer} of transitions) {
              nextBranches.push({node: to, state: typeof reducer !== `undefined` ? execute(reducers, reducer, state, segment) : state});
              debug(`      Static transition to ${to} found`);
            }
          } else {
            debug(`      No static transition found`);
          }
        } else {
          let hasMatches = false;
          for (const candidate of Object.keys(nodeDef.statics)) {
            if (!candidate.startsWith(segment))
              continue;
            if (segment === candidate) {
              for (const {to, reducer} of nodeDef.statics[candidate]) {
                nextBranches.push({node: to, state: typeof reducer !== `undefined` ? execute(reducers, reducer, state, segment) : state});
                debug(`      Static transition to ${to} found`);
              }
            } else {
              for (const {to} of nodeDef.statics[candidate]) {
                nextBranches.push({node: to, state: __spreadProps(__spreadValues({}, state), {remainder: candidate.slice(segment.length)})});
                debug(`      Static transition to ${to} found (partial match)`);
              }
            }
            hasMatches = true;
          }
          if (!hasMatches) {
            debug(`      No partial static transition found`);
          }
        }
        if (segment !== END_OF_INPUT) {
          for (const [test, {to, reducer}] of nodeDef.dynamics) {
            if (execute(tests, test, state, segment)) {
              nextBranches.push({node: to, state: typeof reducer !== `undefined` ? execute(reducers, reducer, state, segment) : state});
              debug(`      Dynamic transition to ${to} found (via ${test})`);
            }
          }
        }
      }
      if (nextBranches.length === 0 && segment === END_OF_INPUT && input.length === 1) {
        return [{
          node: NODE_INITIAL,
          state: basicHelpState
        }];
      }
      if (nextBranches.length === 0) {
        throw new UnknownSyntaxError(input, branches.filter(({node}) => {
          return node !== NODE_ERRORED;
        }).map(({state}) => {
          return {usage: state.candidateUsage, reason: null};
        }));
      }
      if (nextBranches.every(({node}) => node === NODE_ERRORED)) {
        throw new UnknownSyntaxError(input, nextBranches.map(({state}) => {
          return {usage: state.candidateUsage, reason: state.errorMessage};
        }));
      }
      branches = trimSmallerBranches(nextBranches);
    }
    if (branches.length > 0) {
      debug(`  Results:`);
      for (const branch of branches) {
        debug(`    - ${branch.node} -> ${JSON.stringify(branch.state)}`);
      }
    } else {
      debug(`  No results`);
    }
    return branches;
  }
  function checkIfNodeIsFinished(node, state) {
    if (state.selectedIndex !== null)
      return true;
    if (Object.prototype.hasOwnProperty.call(node.statics, END_OF_INPUT)) {
      for (const {to} of node.statics[END_OF_INPUT])
        if (to === NODE_SUCCESS)
          return true;
    }
    return false;
  }
  function suggestMachine(machine, input, partial) {
    const prefix = partial && input.length > 0 ? [``] : [];
    const branches = runMachineInternal(machine, input, partial);
    const suggestions = [];
    const suggestionsJson = new Set();
    const traverseSuggestion = (suggestion, node, skipFirst = true) => {
      let nextNodes = [node];
      while (nextNodes.length > 0) {
        const currentNodes = nextNodes;
        nextNodes = [];
        for (const node2 of currentNodes) {
          const nodeDef = machine.nodes[node2];
          const keys = Object.keys(nodeDef.statics);
          for (const key of Object.keys(nodeDef.statics)) {
            const segment = keys[0];
            for (const {to, reducer} of nodeDef.statics[segment]) {
              if (reducer !== `pushPath`)
                continue;
              if (!skipFirst)
                suggestion.push(segment);
              nextNodes.push(to);
            }
          }
        }
        skipFirst = false;
      }
      const json2 = JSON.stringify(suggestion);
      if (suggestionsJson.has(json2))
        return;
      suggestions.push(suggestion);
      suggestionsJson.add(json2);
    };
    for (const {node, state} of branches) {
      if (state.remainder !== null) {
        traverseSuggestion([state.remainder], node);
        continue;
      }
      const nodeDef = machine.nodes[node];
      const isFinished = checkIfNodeIsFinished(nodeDef, state);
      for (const [candidate, transitions] of Object.entries(nodeDef.statics))
        if (isFinished && candidate !== END_OF_INPUT || !candidate.startsWith(`-`) && transitions.some(({reducer}) => reducer === `pushPath`))
          traverseSuggestion([...prefix, candidate], node);
      if (!isFinished)
        continue;
      for (const [test, {to}] of nodeDef.dynamics) {
        if (to === NODE_ERRORED)
          continue;
        const tokens = suggest(test, state);
        if (tokens === null)
          continue;
        for (const token of tokens) {
          traverseSuggestion([...prefix, token], node);
        }
      }
    }
    return [...suggestions].sort();
  }
  function runMachine(machine, input) {
    const branches = runMachineInternal(machine, [...input, END_OF_INPUT]);
    return selectBestState(input, branches.map(({state}) => {
      return state;
    }));
  }
  function trimSmallerBranches(branches) {
    let maxPathSize = 0;
    for (const {state} of branches)
      if (state.path.length > maxPathSize)
        maxPathSize = state.path.length;
    return branches.filter(({state}) => {
      return state.path.length === maxPathSize;
    });
  }
  function selectBestState(input, states) {
    const terminalStates = states.filter((state) => {
      return state.selectedIndex !== null;
    });
    if (terminalStates.length === 0)
      throw new Error();
    const requiredOptionsSetStates = terminalStates.filter((state) => state.requiredOptions.every((names) => names.some((name) => state.options.find((opt) => opt.name === name))));
    if (requiredOptionsSetStates.length === 0) {
      throw new UnknownSyntaxError(input, terminalStates.map((state) => ({
        usage: state.candidateUsage,
        reason: null
      })));
    }
    let maxPathSize = 0;
    for (const state of requiredOptionsSetStates)
      if (state.path.length > maxPathSize)
        maxPathSize = state.path.length;
    const bestPathBranches = requiredOptionsSetStates.filter((state) => {
      return state.path.length === maxPathSize;
    });
    const getPositionalCount = (state) => state.positionals.filter(({extra}) => {
      return !extra;
    }).length + state.options.length;
    const statesWithPositionalCount = bestPathBranches.map((state) => {
      return {state, positionalCount: getPositionalCount(state)};
    });
    let maxPositionalCount = 0;
    for (const {positionalCount} of statesWithPositionalCount)
      if (positionalCount > maxPositionalCount)
        maxPositionalCount = positionalCount;
    const bestPositionalStates = statesWithPositionalCount.filter(({positionalCount}) => {
      return positionalCount === maxPositionalCount;
    }).map(({state}) => {
      return state;
    });
    const fixedStates = aggregateHelpStates(bestPositionalStates);
    if (fixedStates.length > 1)
      throw new AmbiguousSyntaxError(input, fixedStates.map((state) => state.candidateUsage));
    return fixedStates[0];
  }
  function aggregateHelpStates(states) {
    const notHelps = [];
    const helps = [];
    for (const state of states) {
      if (state.selectedIndex === HELP_COMMAND_INDEX) {
        helps.push(state);
      } else {
        notHelps.push(state);
      }
    }
    if (helps.length > 0) {
      notHelps.push(__spreadProps(__spreadValues({}, basicHelpState), {
        path: findCommonPrefix(...helps.map((state) => state.path)),
        options: helps.reduce((options, state) => options.concat(state.options), [])
      }));
    }
    return notHelps;
  }
  function findCommonPrefix(firstPath, secondPath, ...rest) {
    if (secondPath === void 0)
      return Array.from(firstPath);
    return findCommonPrefix(firstPath.filter((segment, i) => segment === secondPath[i]), ...rest);
  }
  function makeNode() {
    return {
      dynamics: [],
      shortcuts: [],
      statics: {}
    };
  }
  function isTerminalNode(node) {
    return node === NODE_SUCCESS || node === NODE_ERRORED;
  }
  function cloneTransition(input, offset = 0) {
    return {
      to: !isTerminalNode(input.to) ? input.to > 2 ? input.to + offset - 2 : input.to + offset : input.to,
      reducer: input.reducer
    };
  }
  function cloneNode(input, offset = 0) {
    const output = makeNode();
    for (const [test, transition] of input.dynamics)
      output.dynamics.push([test, cloneTransition(transition, offset)]);
    for (const transition of input.shortcuts)
      output.shortcuts.push(cloneTransition(transition, offset));
    for (const [segment, transitions] of Object.entries(input.statics))
      output.statics[segment] = transitions.map((transition) => cloneTransition(transition, offset));
    return output;
  }
  function registerDynamic(machine, from, test, to, reducer) {
    machine.nodes[from].dynamics.push([
      test,
      {to, reducer}
    ]);
  }
  function registerShortcut(machine, from, to, reducer) {
    machine.nodes[from].shortcuts.push({to, reducer});
  }
  function registerStatic(machine, from, test, to, reducer) {
    const store = !Object.prototype.hasOwnProperty.call(machine.nodes[from].statics, test) ? machine.nodes[from].statics[test] = [] : machine.nodes[from].statics[test];
    store.push({to, reducer});
  }
  function execute(store, callback, state, segment) {
    if (Array.isArray(callback)) {
      const [name, ...args] = callback;
      return store[name](state, segment, ...args);
    } else {
      return store[callback](state, segment);
    }
  }
  function suggest(callback, state) {
    const fn = Array.isArray(callback) ? tests[callback[0]] : tests[callback];
    if (typeof fn.suggest === `undefined`)
      return null;
    const args = Array.isArray(callback) ? callback.slice(1) : [];
    return fn.suggest(state, ...args);
  }
  var tests = {
    always: () => {
      return true;
    },
    isOptionLike: (state, segment) => {
      return !state.ignoreOptions && segment.startsWith(`-`);
    },
    isNotOptionLike: (state, segment) => {
      return state.ignoreOptions || !segment.startsWith(`-`);
    },
    isOption: (state, segment, name, hidden) => {
      return !state.ignoreOptions && segment === name;
    },
    isBatchOption: (state, segment, names) => {
      return !state.ignoreOptions && BATCH_REGEX.test(segment) && [...segment.slice(1)].every((name) => names.includes(`-${name}`));
    },
    isBoundOption: (state, segment, names, options) => {
      const optionParsing = segment.match(BINDING_REGEX);
      return !state.ignoreOptions && !!optionParsing && OPTION_REGEX.test(optionParsing[1]) && names.includes(optionParsing[1]) && options.filter((opt) => opt.names.includes(optionParsing[1])).every((opt) => opt.allowBinding);
    },
    isNegatedOption: (state, segment, name) => {
      return !state.ignoreOptions && segment === `--no-${name.slice(2)}`;
    },
    isHelp: (state, segment) => {
      return !state.ignoreOptions && HELP_REGEX.test(segment);
    },
    isUnsupportedOption: (state, segment, names) => {
      return !state.ignoreOptions && segment.startsWith(`-`) && OPTION_REGEX.test(segment) && !names.includes(segment);
    },
    isInvalidOption: (state, segment) => {
      return !state.ignoreOptions && segment.startsWith(`-`) && !OPTION_REGEX.test(segment);
    }
  };
  tests.isOption.suggest = (state, name, hidden = true) => {
    return !hidden ? [name] : null;
  };
  var reducers = {
    setCandidateState: (state, segment, candidateState) => {
      return __spreadValues(__spreadValues({}, state), candidateState);
    },
    setSelectedIndex: (state, segment, index) => {
      return __spreadProps(__spreadValues({}, state), {selectedIndex: index});
    },
    pushBatch: (state, segment) => {
      return __spreadProps(__spreadValues({}, state), {options: state.options.concat([...segment.slice(1)].map((name) => ({name: `-${name}`, value: true})))});
    },
    pushBound: (state, segment) => {
      const [, name, value] = segment.match(BINDING_REGEX);
      return __spreadProps(__spreadValues({}, state), {options: state.options.concat({name, value})});
    },
    pushPath: (state, segment) => {
      return __spreadProps(__spreadValues({}, state), {path: state.path.concat(segment)});
    },
    pushPositional: (state, segment) => {
      return __spreadProps(__spreadValues({}, state), {positionals: state.positionals.concat({value: segment, extra: false})});
    },
    pushExtra: (state, segment) => {
      return __spreadProps(__spreadValues({}, state), {positionals: state.positionals.concat({value: segment, extra: true})});
    },
    pushExtraNoLimits: (state, segment) => {
      return __spreadProps(__spreadValues({}, state), {positionals: state.positionals.concat({value: segment, extra: NoLimits})});
    },
    pushTrue: (state, segment, name = segment) => {
      return __spreadProps(__spreadValues({}, state), {options: state.options.concat({name: segment, value: true})});
    },
    pushFalse: (state, segment, name = segment) => {
      return __spreadProps(__spreadValues({}, state), {options: state.options.concat({name, value: false})});
    },
    pushUndefined: (state, segment) => {
      return __spreadProps(__spreadValues({}, state), {options: state.options.concat({name: segment, value: void 0})});
    },
    pushStringValue: (state, segment) => {
      var _a2;
      const copy = __spreadProps(__spreadValues({}, state), {options: [...state.options]});
      const lastOption = state.options[state.options.length - 1];
      lastOption.value = ((_a2 = lastOption.value) !== null && _a2 !== void 0 ? _a2 : []).concat([segment]);
      return copy;
    },
    setStringValue: (state, segment) => {
      const copy = __spreadProps(__spreadValues({}, state), {options: [...state.options]});
      const lastOption = state.options[state.options.length - 1];
      lastOption.value = segment;
      return copy;
    },
    inhibateOptions: (state) => {
      return __spreadProps(__spreadValues({}, state), {ignoreOptions: true});
    },
    useHelp: (state, segment, command) => {
      const [, , index] = segment.match(HELP_REGEX);
      if (typeof index !== `undefined`) {
        return __spreadProps(__spreadValues({}, state), {options: [{name: `-c`, value: String(command)}, {name: `-i`, value: index}]});
      } else {
        return __spreadProps(__spreadValues({}, state), {options: [{name: `-c`, value: String(command)}]});
      }
    },
    setError: (state, segment, errorMessage) => {
      if (segment === END_OF_INPUT) {
        return __spreadProps(__spreadValues({}, state), {errorMessage: `${errorMessage}.`});
      } else {
        return __spreadProps(__spreadValues({}, state), {errorMessage: `${errorMessage} ("${segment}").`});
      }
    },
    setOptionArityError: (state, segment) => {
      const lastOption = state.options[state.options.length - 1];
      return __spreadProps(__spreadValues({}, state), {errorMessage: `Not enough arguments to option ${lastOption.name}.`});
    }
  };
  var NoLimits = Symbol();
  var CommandBuilder = class {
    constructor(cliIndex, cliOpts) {
      this.allOptionNames = [];
      this.arity = {leading: [], trailing: [], extra: [], proxy: false};
      this.options = [];
      this.paths = [];
      this.cliIndex = cliIndex;
      this.cliOpts = cliOpts;
    }
    addPath(path3) {
      this.paths.push(path3);
    }
    setArity({leading = this.arity.leading, trailing = this.arity.trailing, extra = this.arity.extra, proxy = this.arity.proxy}) {
      Object.assign(this.arity, {leading, trailing, extra, proxy});
    }
    addPositional({name = `arg`, required = true} = {}) {
      if (!required && this.arity.extra === NoLimits)
        throw new Error(`Optional parameters cannot be declared when using .rest() or .proxy()`);
      if (!required && this.arity.trailing.length > 0)
        throw new Error(`Optional parameters cannot be declared after the required trailing positional arguments`);
      if (!required && this.arity.extra !== NoLimits) {
        this.arity.extra.push(name);
      } else if (this.arity.extra !== NoLimits && this.arity.extra.length === 0) {
        this.arity.leading.push(name);
      } else {
        this.arity.trailing.push(name);
      }
    }
    addRest({name = `arg`, required = 0} = {}) {
      if (this.arity.extra === NoLimits)
        throw new Error(`Infinite lists cannot be declared multiple times in the same command`);
      if (this.arity.trailing.length > 0)
        throw new Error(`Infinite lists cannot be declared after the required trailing positional arguments`);
      for (let t5 = 0; t5 < required; ++t5)
        this.addPositional({name});
      this.arity.extra = NoLimits;
    }
    addProxy({required = 0} = {}) {
      this.addRest({required});
      this.arity.proxy = true;
    }
    addOption({names, description, arity = 0, hidden = false, required = false, allowBinding = true}) {
      if (!allowBinding && arity > 1)
        throw new Error(`The arity cannot be higher than 1 when the option only supports the --arg=value syntax`);
      if (!Number.isInteger(arity))
        throw new Error(`The arity must be an integer, got ${arity}`);
      if (arity < 0)
        throw new Error(`The arity must be positive, got ${arity}`);
      this.allOptionNames.push(...names);
      this.options.push({names, description, arity, hidden, required, allowBinding});
    }
    setContext(context) {
      this.context = context;
    }
    usage({detailed = true, inlineOptions = true} = {}) {
      const segments = [this.cliOpts.binaryName];
      const detailedOptionList = [];
      if (this.paths.length > 0)
        segments.push(...this.paths[0]);
      if (detailed) {
        for (const {names, arity, hidden, description, required} of this.options) {
          if (hidden)
            continue;
          const args = [];
          for (let t5 = 0; t5 < arity; ++t5)
            args.push(` #${t5}`);
          const definition = `${names.join(`,`)}${args.join(``)}`;
          if (!inlineOptions && description) {
            detailedOptionList.push({definition, description, required});
          } else {
            segments.push(required ? `<${definition}>` : `[${definition}]`);
          }
        }
        segments.push(...this.arity.leading.map((name) => `<${name}>`));
        if (this.arity.extra === NoLimits)
          segments.push(`...`);
        else
          segments.push(...this.arity.extra.map((name) => `[${name}]`));
        segments.push(...this.arity.trailing.map((name) => `<${name}>`));
      }
      const usage = segments.join(` `);
      return {usage, options: detailedOptionList};
    }
    compile() {
      if (typeof this.context === `undefined`)
        throw new Error(`Assertion failed: No context attached`);
      const machine = makeStateMachine();
      let firstNode = NODE_INITIAL;
      const candidateUsage = this.usage().usage;
      const requiredOptions = this.options.filter((opt) => opt.required).map((opt) => opt.names);
      firstNode = injectNode(machine, makeNode());
      registerStatic(machine, NODE_INITIAL, START_OF_INPUT, firstNode, [`setCandidateState`, {candidateUsage, requiredOptions}]);
      const positionalArgument = this.arity.proxy ? `always` : `isNotOptionLike`;
      const paths = this.paths.length > 0 ? this.paths : [[]];
      for (const path3 of paths) {
        let lastPathNode = firstNode;
        if (path3.length > 0) {
          const optionPathNode = injectNode(machine, makeNode());
          registerShortcut(machine, lastPathNode, optionPathNode);
          this.registerOptions(machine, optionPathNode);
          lastPathNode = optionPathNode;
        }
        for (let t5 = 0; t5 < path3.length; ++t5) {
          const nextPathNode = injectNode(machine, makeNode());
          registerStatic(machine, lastPathNode, path3[t5], nextPathNode, `pushPath`);
          lastPathNode = nextPathNode;
        }
        if (this.arity.leading.length > 0 || !this.arity.proxy) {
          const helpNode = injectNode(machine, makeNode());
          registerDynamic(machine, lastPathNode, `isHelp`, helpNode, [`useHelp`, this.cliIndex]);
          registerStatic(machine, helpNode, END_OF_INPUT, NODE_SUCCESS, [`setSelectedIndex`, HELP_COMMAND_INDEX]);
          this.registerOptions(machine, lastPathNode);
        }
        if (this.arity.leading.length > 0)
          registerStatic(machine, lastPathNode, END_OF_INPUT, NODE_ERRORED, [`setError`, `Not enough positional arguments`]);
        let lastLeadingNode = lastPathNode;
        for (let t5 = 0; t5 < this.arity.leading.length; ++t5) {
          const nextLeadingNode = injectNode(machine, makeNode());
          if (!this.arity.proxy)
            this.registerOptions(machine, nextLeadingNode);
          if (this.arity.trailing.length > 0 || t5 + 1 !== this.arity.leading.length)
            registerStatic(machine, nextLeadingNode, END_OF_INPUT, NODE_ERRORED, [`setError`, `Not enough positional arguments`]);
          registerDynamic(machine, lastLeadingNode, `isNotOptionLike`, nextLeadingNode, `pushPositional`);
          lastLeadingNode = nextLeadingNode;
        }
        let lastExtraNode = lastLeadingNode;
        if (this.arity.extra === NoLimits || this.arity.extra.length > 0) {
          const extraShortcutNode = injectNode(machine, makeNode());
          registerShortcut(machine, lastLeadingNode, extraShortcutNode);
          if (this.arity.extra === NoLimits) {
            const extraNode = injectNode(machine, makeNode());
            if (!this.arity.proxy)
              this.registerOptions(machine, extraNode);
            registerDynamic(machine, lastLeadingNode, positionalArgument, extraNode, `pushExtraNoLimits`);
            registerDynamic(machine, extraNode, positionalArgument, extraNode, `pushExtraNoLimits`);
            registerShortcut(machine, extraNode, extraShortcutNode);
          } else {
            for (let t5 = 0; t5 < this.arity.extra.length; ++t5) {
              const nextExtraNode = injectNode(machine, makeNode());
              if (!this.arity.proxy)
                this.registerOptions(machine, nextExtraNode);
              registerDynamic(machine, lastExtraNode, positionalArgument, nextExtraNode, `pushExtra`);
              registerShortcut(machine, nextExtraNode, extraShortcutNode);
              lastExtraNode = nextExtraNode;
            }
          }
          lastExtraNode = extraShortcutNode;
        }
        if (this.arity.trailing.length > 0)
          registerStatic(machine, lastExtraNode, END_OF_INPUT, NODE_ERRORED, [`setError`, `Not enough positional arguments`]);
        let lastTrailingNode = lastExtraNode;
        for (let t5 = 0; t5 < this.arity.trailing.length; ++t5) {
          const nextTrailingNode = injectNode(machine, makeNode());
          if (!this.arity.proxy)
            this.registerOptions(machine, nextTrailingNode);
          if (t5 + 1 < this.arity.trailing.length)
            registerStatic(machine, nextTrailingNode, END_OF_INPUT, NODE_ERRORED, [`setError`, `Not enough positional arguments`]);
          registerDynamic(machine, lastTrailingNode, `isNotOptionLike`, nextTrailingNode, `pushPositional`);
          lastTrailingNode = nextTrailingNode;
        }
        registerDynamic(machine, lastTrailingNode, positionalArgument, NODE_ERRORED, [`setError`, `Extraneous positional argument`]);
        registerStatic(machine, lastTrailingNode, END_OF_INPUT, NODE_SUCCESS, [`setSelectedIndex`, this.cliIndex]);
      }
      return {
        machine,
        context: this.context
      };
    }
    registerOptions(machine, node) {
      registerDynamic(machine, node, [`isOption`, `--`], node, `inhibateOptions`);
      registerDynamic(machine, node, [`isBatchOption`, this.allOptionNames], node, `pushBatch`);
      registerDynamic(machine, node, [`isBoundOption`, this.allOptionNames, this.options], node, `pushBound`);
      registerDynamic(machine, node, [`isUnsupportedOption`, this.allOptionNames], NODE_ERRORED, [`setError`, `Unsupported option name`]);
      registerDynamic(machine, node, [`isInvalidOption`], NODE_ERRORED, [`setError`, `Invalid option name`]);
      for (const option of this.options) {
        const longestName = option.names.reduce((longestName2, name) => {
          return name.length > longestName2.length ? name : longestName2;
        }, ``);
        if (option.arity === 0) {
          for (const name of option.names) {
            registerDynamic(machine, node, [`isOption`, name, option.hidden || name !== longestName], node, `pushTrue`);
            if (name.startsWith(`--`) && !name.startsWith(`--no-`)) {
              registerDynamic(machine, node, [`isNegatedOption`, name], node, [`pushFalse`, name]);
            }
          }
        } else {
          let lastNode = injectNode(machine, makeNode());
          for (const name of option.names)
            registerDynamic(machine, node, [`isOption`, name, option.hidden || name !== longestName], lastNode, `pushUndefined`);
          for (let t5 = 0; t5 < option.arity; ++t5) {
            const nextNode = injectNode(machine, makeNode());
            registerStatic(machine, lastNode, END_OF_INPUT, NODE_ERRORED, `setOptionArityError`);
            registerDynamic(machine, lastNode, `isOptionLike`, NODE_ERRORED, `setOptionArityError`);
            const action = option.arity === 1 ? `setStringValue` : `pushStringValue`;
            registerDynamic(machine, lastNode, `isNotOptionLike`, nextNode, action);
            lastNode = nextNode;
          }
          registerShortcut(machine, lastNode, node);
        }
      }
    }
  };
  var CliBuilder = class {
    constructor({binaryName = `...`} = {}) {
      this.builders = [];
      this.opts = {binaryName};
    }
    static build(cbs, opts = {}) {
      return new CliBuilder(opts).commands(cbs).compile();
    }
    getBuilderByIndex(n) {
      if (!(n >= 0 && n < this.builders.length))
        throw new Error(`Assertion failed: Out-of-bound command index (${n})`);
      return this.builders[n];
    }
    commands(cbs) {
      for (const cb of cbs)
        cb(this.command());
      return this;
    }
    command() {
      const builder = new CommandBuilder(this.builders.length, this.opts);
      this.builders.push(builder);
      return builder;
    }
    compile() {
      const machines = [];
      const contexts = [];
      for (const builder of this.builders) {
        const {machine: machine2, context} = builder.compile();
        machines.push(machine2);
        contexts.push(context);
      }
      const machine = makeAnyOfMachine(machines);
      simplifyMachine(machine);
      return {
        machine,
        contexts,
        process: (input) => {
          return runMachine(machine, input);
        },
        suggest: (input, partial) => {
          return suggestMachine(machine, input, partial);
        }
      };
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/clipanion-virtual-22ae250095/0/cache/clipanion-npm-3.0.0-rc.10-397b8032cb-b08ff3d507.zip/node_modules/clipanion/lib/format.mjs
  var MAX_LINE_LENGTH = 80;
  var richLine = Array(MAX_LINE_LENGTH).fill(`\u2501`);
  for (let t5 = 0; t5 <= 24; ++t5)
    richLine[richLine.length - t5] = `[38;5;${232 + t5}m\u2501`;
  var richFormat = {
    header: (str) => `[1m\u2501\u2501\u2501 ${str}${str.length < MAX_LINE_LENGTH - 5 ? ` ${richLine.slice(str.length + 5).join(``)}` : `:`}[0m`,
    bold: (str) => `[1m${str}[22m`,
    error: (str) => `[31m[1m${str}[22m[39m`,
    code: (str) => `[36m${str}[39m`
  };
  var textFormat = {
    header: (str) => str,
    bold: (str) => str,
    error: (str) => str,
    code: (str) => str
  };
  function formatMarkdownish(text, {format, paragraphs}) {
    text = text.replace(/\r\n?/g, `
`);
    text = text.replace(/^[\t ]+|[\t ]+$/gm, ``);
    text = text.replace(/^\n+|\n+$/g, ``);
    text = text.replace(/^-([^\n]*?)\n+/gm, `-$1

`);
    text = text.replace(/\n(\n)?\n*/g, `$1`);
    if (paragraphs) {
      text = text.split(/\n/).map((paragraph) => {
        const bulletMatch = paragraph.match(/^[*-][\t ]+(.*)/);
        if (!bulletMatch)
          return paragraph.match(/(.{1,80})(?: |$)/g).join(`
`);
        return bulletMatch[1].match(/(.{1,78})(?: |$)/g).map((line, index) => {
          return (index === 0 ? `- ` : `  `) + line;
        }).join(`
`);
      }).join(`

`);
    }
    text = text.replace(/(`+)((?:.|[\n])*?)\1/g, ($0, $1, $2) => {
      return format.code($1 + $2 + $1);
    });
    text = text.replace(/(\*\*)((?:.|[\n])*?)\1/g, ($0, $1, $2) => {
      return format.bold($1 + $2 + $1);
    });
    return text ? `${text}
` : ``;
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/clipanion-virtual-22ae250095/0/cache/clipanion-npm-3.0.0-rc.10-397b8032cb-b08ff3d507.zip/node_modules/clipanion/lib/advanced/HelpCommand.mjs
  var HelpCommand = class extends Command {
    constructor(contexts) {
      super();
      this.contexts = contexts;
      this.commands = [];
    }
    static from(state, contexts) {
      const command = new HelpCommand(contexts);
      command.path = state.path;
      for (const opt of state.options) {
        switch (opt.name) {
          case `-c`:
            {
              command.commands.push(Number(opt.value));
            }
            break;
          case `-i`:
            {
              command.index = Number(opt.value);
            }
            break;
        }
      }
      return command;
    }
    async execute() {
      let commands = this.commands;
      if (typeof this.index !== `undefined` && this.index >= 0 && this.index < commands.length)
        commands = [commands[this.index]];
      if (commands.length === 0) {
        this.context.stdout.write(this.cli.usage());
      } else if (commands.length === 1) {
        this.context.stdout.write(this.cli.usage(this.contexts[commands[0]].commandClass, {detailed: true}));
      } else if (commands.length > 1) {
        this.context.stdout.write(`Multiple commands match your selection:
`);
        this.context.stdout.write(`
`);
        let index = 0;
        for (const command of this.commands)
          this.context.stdout.write(this.cli.usage(this.contexts[command].commandClass, {prefix: `${index++}. `.padStart(5)}));
        this.context.stdout.write(`
`);
        this.context.stdout.write(`Run again with -h=<index> to see the longer details of any of those commands.
`);
      }
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/clipanion-virtual-22ae250095/0/cache/clipanion-npm-3.0.0-rc.10-397b8032cb-b08ff3d507.zip/node_modules/clipanion/lib/advanced/Cli.mjs
  var errorCommandSymbol = Symbol(`clipanion/errorCommand`);
  function getDefaultColorSettings() {
    if (process.env.FORCE_COLOR === `0`)
      return false;
    if (process.env.FORCE_COLOR === `1`)
      return true;
    if (typeof process.stdout !== `undefined` && process.stdout.isTTY)
      return true;
    return false;
  }
  var Cli = class {
    constructor({binaryLabel, binaryName: binaryNameOpt = `...`, binaryVersion, enableColors = getDefaultColorSettings()} = {}) {
      this.registrations = new Map();
      this.builder = new CliBuilder({binaryName: binaryNameOpt});
      this.binaryLabel = binaryLabel;
      this.binaryName = binaryNameOpt;
      this.binaryVersion = binaryVersion;
      this.enableColors = enableColors;
    }
    static from(commandClasses, options = {}) {
      const cli = new Cli(options);
      for (const commandClass of commandClasses)
        cli.register(commandClass);
      return cli;
    }
    register(commandClass) {
      var _a2;
      const specs = new Map();
      const command = new commandClass();
      for (const key in command) {
        const value = command[key];
        if (typeof value === `object` && value !== null && value[Command.isOption]) {
          specs.set(key, value);
        }
      }
      const builder = this.builder.command();
      const index = builder.cliIndex;
      const paths = (_a2 = commandClass.paths) !== null && _a2 !== void 0 ? _a2 : command.paths;
      if (typeof paths !== `undefined`)
        for (const path3 of paths)
          builder.addPath(path3);
      this.registrations.set(commandClass, {specs, builder, index});
      for (const [key, {definition}] of specs.entries())
        definition(builder, key);
      builder.setContext({
        commandClass
      });
    }
    process(input) {
      const {contexts, process: process2} = this.builder.compile();
      const state = process2(input);
      switch (state.selectedIndex) {
        case HELP_COMMAND_INDEX: {
          return HelpCommand.from(state, contexts);
        }
        default:
          {
            const {commandClass} = contexts[state.selectedIndex];
            const record = this.registrations.get(commandClass);
            if (typeof record === `undefined`)
              throw new Error(`Assertion failed: Expected the command class to have been registered.`);
            const command = new commandClass();
            command.path = state.path;
            try {
              for (const [key, {transformer}] of record.specs.entries())
                command[key] = transformer(record.builder, key, state);
              return command;
            } catch (error) {
              error[errorCommandSymbol] = command;
              throw error;
            }
          }
          break;
      }
    }
    async run(input, context) {
      let command;
      if (!Array.isArray(input)) {
        command = input;
      } else {
        try {
          command = this.process(input);
        } catch (error) {
          context.stdout.write(this.error(error));
          return 1;
        }
      }
      if (command.help) {
        context.stdout.write(this.usage(command, {detailed: true}));
        return 0;
      }
      command.context = context;
      command.cli = {
        binaryLabel: this.binaryLabel,
        binaryName: this.binaryName,
        binaryVersion: this.binaryVersion,
        enableColors: this.enableColors,
        definitions: () => this.definitions(),
        error: (error, opts) => this.error(error, opts),
        process: (input2) => this.process(input2),
        run: (input2, subContext) => this.run(input2, __spreadValues(__spreadValues({}, context), subContext)),
        usage: (command2, opts) => this.usage(command2, opts)
      };
      let exitCode;
      try {
        exitCode = await command.validateAndExecute().catch((error) => command.catch(error).then(() => 0));
      } catch (error) {
        context.stdout.write(this.error(error, {command}));
        return 1;
      }
      return exitCode;
    }
    async runExit(input, context) {
      process.exitCode = await this.run(input, context);
    }
    suggest(input, partial) {
      const {suggest: suggest2} = this.builder.compile();
      return suggest2(input, partial);
    }
    definitions({colored = false} = {}) {
      const data = [];
      for (const [commandClass, {index}] of this.registrations) {
        if (typeof commandClass.usage === `undefined`)
          continue;
        const {usage: path3} = this.getUsageByIndex(index, {detailed: false});
        const {usage, options} = this.getUsageByIndex(index, {detailed: true, inlineOptions: false});
        const category = typeof commandClass.usage.category !== `undefined` ? formatMarkdownish(commandClass.usage.category, {format: this.format(colored), paragraphs: false}) : void 0;
        const description = typeof commandClass.usage.description !== `undefined` ? formatMarkdownish(commandClass.usage.description, {format: this.format(colored), paragraphs: false}) : void 0;
        const details = typeof commandClass.usage.details !== `undefined` ? formatMarkdownish(commandClass.usage.details, {format: this.format(colored), paragraphs: true}) : void 0;
        const examples = typeof commandClass.usage.examples !== `undefined` ? commandClass.usage.examples.map(([label, cli]) => [formatMarkdownish(label, {format: this.format(colored), paragraphs: false}), cli.replace(/\$0/g, this.binaryName)]) : void 0;
        data.push({path: path3, usage, category, description, details, examples, options});
      }
      return data;
    }
    usage(command = null, {colored, detailed = false, prefix = `$ `} = {}) {
      const commandClass = command !== null && command instanceof Command ? command.constructor : command;
      let result = ``;
      if (!commandClass) {
        const commandsByCategories = new Map();
        for (const [commandClass2, {index}] of this.registrations.entries()) {
          if (typeof commandClass2.usage === `undefined`)
            continue;
          const category = typeof commandClass2.usage.category !== `undefined` ? formatMarkdownish(commandClass2.usage.category, {format: this.format(colored), paragraphs: false}) : null;
          let categoryCommands = commandsByCategories.get(category);
          if (typeof categoryCommands === `undefined`)
            commandsByCategories.set(category, categoryCommands = []);
          const {usage} = this.getUsageByIndex(index);
          categoryCommands.push({commandClass: commandClass2, usage});
        }
        const categoryNames = Array.from(commandsByCategories.keys()).sort((a, b) => {
          if (a === null)
            return -1;
          if (b === null)
            return 1;
          return a.localeCompare(b, `en`, {usage: `sort`, caseFirst: `upper`});
        });
        const hasLabel = typeof this.binaryLabel !== `undefined`;
        const hasVersion = typeof this.binaryVersion !== `undefined`;
        if (hasLabel || hasVersion) {
          if (hasLabel && hasVersion)
            result += `${this.format(colored).header(`${this.binaryLabel} - ${this.binaryVersion}`)}

`;
          else if (hasLabel)
            result += `${this.format(colored).header(`${this.binaryLabel}`)}
`;
          else
            result += `${this.format(colored).header(`${this.binaryVersion}`)}
`;
          result += `  ${this.format(colored).bold(prefix)}${this.binaryName} <command>
`;
        } else {
          result += `${this.format(colored).bold(prefix)}${this.binaryName} <command>
`;
        }
        for (const categoryName of categoryNames) {
          const commands = commandsByCategories.get(categoryName).slice().sort((a, b) => {
            return a.usage.localeCompare(b.usage, `en`, {usage: `sort`, caseFirst: `upper`});
          });
          const header = categoryName !== null ? categoryName.trim() : `General commands`;
          result += `
`;
          result += `${this.format(colored).header(`${header}`)}
`;
          for (const {commandClass: commandClass2, usage} of commands) {
            const doc = commandClass2.usage.description || `undocumented`;
            result += `
`;
            result += `  ${this.format(colored).bold(usage)}
`;
            result += `    ${formatMarkdownish(doc, {format: this.format(colored), paragraphs: false})}`;
          }
        }
        result += `
`;
        result += formatMarkdownish(`You can also print more details about any of these commands by calling them with the \`-h,--help\` flag right after the command name.`, {format: this.format(colored), paragraphs: true});
      } else {
        if (!detailed) {
          const {usage} = this.getUsageByRegistration(commandClass);
          result += `${this.format(colored).bold(prefix)}${usage}
`;
        } else {
          const {description = ``, details = ``, examples = []} = commandClass.usage || {};
          if (description !== ``) {
            result += formatMarkdownish(description, {format: this.format(colored), paragraphs: false}).replace(/^./, ($0) => $0.toUpperCase());
            result += `
`;
          }
          if (details !== `` || examples.length > 0) {
            result += `${this.format(colored).header(`Usage`)}
`;
            result += `
`;
          }
          const {usage, options} = this.getUsageByRegistration(commandClass, {inlineOptions: false});
          result += `${this.format(colored).bold(prefix)}${usage}
`;
          if (options.length > 0) {
            result += `
`;
            result += `${richFormat.header(`Options`)}
`;
            const maxDefinitionLength = options.reduce((length, option) => {
              return Math.max(length, option.definition.length);
            }, 0);
            result += `
`;
            for (const {definition, description: description2} of options) {
              result += `  ${this.format(colored).bold(definition.padEnd(maxDefinitionLength))}    ${formatMarkdownish(description2, {format: this.format(colored), paragraphs: false})}`;
            }
          }
          if (details !== ``) {
            result += `
`;
            result += `${this.format(colored).header(`Details`)}
`;
            result += `
`;
            result += formatMarkdownish(details, {format: this.format(colored), paragraphs: true});
          }
          if (examples.length > 0) {
            result += `
`;
            result += `${this.format(colored).header(`Examples`)}
`;
            for (const [description2, example] of examples) {
              result += `
`;
              result += formatMarkdownish(description2, {format: this.format(colored), paragraphs: false});
              result += `${example.replace(/^/m, `  ${this.format(colored).bold(prefix)}`).replace(/\$0/g, this.binaryName)}
`;
            }
          }
        }
      }
      return result;
    }
    error(error, _a2) {
      var _b;
      var {colored, command = (_b = error[errorCommandSymbol]) !== null && _b !== void 0 ? _b : null} = _a2 === void 0 ? {} : _a2;
      if (!(error instanceof Error))
        error = new Error(`Execution failed with a non-error rejection (rejected value: ${JSON.stringify(error)})`);
      let result = ``;
      let name = error.name.replace(/([a-z])([A-Z])/g, `$1 $2`);
      if (name === `Error`)
        name = `Internal Error`;
      result += `${this.format(colored).error(name)}: ${error.message}
`;
      const meta = error.clipanion;
      if (typeof meta !== `undefined`) {
        if (meta.type === `usage`) {
          result += `
`;
          result += this.usage(command);
        }
      } else {
        if (error.stack) {
          result += `${error.stack.replace(/^.*\n/, ``)}
`;
        }
      }
      return result;
    }
    getUsageByRegistration(klass, opts) {
      const record = this.registrations.get(klass);
      if (typeof record === `undefined`)
        throw new Error(`Assertion failed: Unregistered command`);
      return this.getUsageByIndex(record.index, opts);
    }
    getUsageByIndex(n, opts) {
      return this.builder.getBuilderByIndex(n).usage(opts);
    }
    format(colored = this.enableColors) {
      return colored ? richFormat : textFormat;
    }
  };
  Cli.defaultContext = {
    stdin: process.stdin,
    stdout: process.stdout,
    stderr: process.stderr
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/clipanion-virtual-22ae250095/0/cache/clipanion-npm-3.0.0-rc.10-397b8032cb-b08ff3d507.zip/node_modules/clipanion/lib/advanced/builtins/index.mjs
  var builtins_exports = {};
  __export(builtins_exports, {
    DefinitionsCommand: () => DefinitionsCommand,
    HelpCommand: () => HelpCommand2,
    VersionCommand: () => VersionCommand
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/clipanion-virtual-22ae250095/0/cache/clipanion-npm-3.0.0-rc.10-397b8032cb-b08ff3d507.zip/node_modules/clipanion/lib/advanced/builtins/definitions.mjs
  var DefinitionsCommand = class extends Command {
    async execute() {
      this.context.stdout.write(`${JSON.stringify(this.cli.definitions(), null, 2)}
`);
    }
  };
  DefinitionsCommand.path = [[`--clipanion=definitions`]];

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/clipanion-virtual-22ae250095/0/cache/clipanion-npm-3.0.0-rc.10-397b8032cb-b08ff3d507.zip/node_modules/clipanion/lib/advanced/builtins/help.mjs
  var HelpCommand2 = class extends Command {
    async execute() {
      this.context.stdout.write(this.cli.usage(null));
    }
  };
  HelpCommand2.paths = [[`-h`], [`--help`]];

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/clipanion-virtual-22ae250095/0/cache/clipanion-npm-3.0.0-rc.10-397b8032cb-b08ff3d507.zip/node_modules/clipanion/lib/advanced/builtins/version.mjs
  var VersionCommand = class extends Command {
    async execute() {
      var _a2;
      this.context.stdout.write(`${(_a2 = this.cli.binaryVersion) !== null && _a2 !== void 0 ? _a2 : `<unknown>`}
`);
    }
  };
  VersionCommand.paths = [[`-v`], [`--version`]];

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/clipanion-virtual-22ae250095/0/cache/clipanion-npm-3.0.0-rc.10-397b8032cb-b08ff3d507.zip/node_modules/clipanion/lib/advanced/options/index.mjs
  var options_exports = {};
  __export(options_exports, {
    Array: () => Array2,
    Boolean: () => Boolean2,
    Counter: () => Counter,
    Proxy: () => Proxy2,
    Rest: () => Rest,
    String: () => String2,
    applyValidator: () => applyValidator,
    cleanValidationError: () => cleanValidationError,
    formatError: () => formatError,
    isOptionSymbol: () => isOptionSymbol,
    makeCommandOption: () => makeCommandOption,
    rerouteArguments: () => rerouteArguments
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/clipanion-virtual-22ae250095/0/cache/clipanion-npm-3.0.0-rc.10-397b8032cb-b08ff3d507.zip/node_modules/clipanion/lib/advanced/options/Array.mjs
  function Array2(descriptor, initialValueBase, optsBase) {
    const [initialValue, opts] = rerouteArguments(initialValueBase, optsBase !== null && optsBase !== void 0 ? optsBase : {});
    const {arity = 1} = opts;
    const optNames = descriptor.split(`,`);
    const nameSet = new Set(optNames);
    return makeCommandOption({
      definition(builder) {
        builder.addOption({
          names: optNames,
          arity,
          hidden: opts === null || opts === void 0 ? void 0 : opts.hidden,
          description: opts === null || opts === void 0 ? void 0 : opts.description,
          required: opts.required
        });
      },
      transformer(builder, key, state) {
        let currentValue = typeof initialValue !== `undefined` ? [...initialValue] : void 0;
        for (const {name, value} of state.options) {
          if (!nameSet.has(name))
            continue;
          currentValue = currentValue !== null && currentValue !== void 0 ? currentValue : [];
          currentValue.push(value);
        }
        return currentValue;
      }
    });
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/clipanion-virtual-22ae250095/0/cache/clipanion-npm-3.0.0-rc.10-397b8032cb-b08ff3d507.zip/node_modules/clipanion/lib/advanced/options/Boolean.mjs
  function Boolean2(descriptor, initialValueBase, optsBase) {
    const [initialValue, opts] = rerouteArguments(initialValueBase, optsBase !== null && optsBase !== void 0 ? optsBase : {});
    const optNames = descriptor.split(`,`);
    const nameSet = new Set(optNames);
    return makeCommandOption({
      definition(builder) {
        builder.addOption({
          names: optNames,
          allowBinding: false,
          arity: 0,
          hidden: opts.hidden,
          description: opts.description,
          required: opts.required
        });
      },
      transformer(builer, key, state) {
        let currentValue = initialValue;
        for (const {name, value} of state.options) {
          if (!nameSet.has(name))
            continue;
          currentValue = value;
        }
        return currentValue;
      }
    });
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/clipanion-virtual-22ae250095/0/cache/clipanion-npm-3.0.0-rc.10-397b8032cb-b08ff3d507.zip/node_modules/clipanion/lib/advanced/options/Counter.mjs
  function Counter(descriptor, initialValueBase, optsBase) {
    const [initialValue, opts] = rerouteArguments(initialValueBase, optsBase !== null && optsBase !== void 0 ? optsBase : {});
    const optNames = descriptor.split(`,`);
    const nameSet = new Set(optNames);
    return makeCommandOption({
      definition(builder) {
        builder.addOption({
          names: optNames,
          allowBinding: false,
          arity: 0,
          hidden: opts.hidden,
          description: opts.description,
          required: opts.required
        });
      },
      transformer(builder, key, state) {
        let currentValue = initialValue;
        for (const {name, value} of state.options) {
          if (!nameSet.has(name))
            continue;
          currentValue !== null && currentValue !== void 0 ? currentValue : currentValue = 0;
          if (!value) {
            currentValue = 0;
          } else {
            currentValue += 1;
          }
        }
        return currentValue;
      }
    });
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/clipanion-virtual-22ae250095/0/cache/clipanion-npm-3.0.0-rc.10-397b8032cb-b08ff3d507.zip/node_modules/clipanion/lib/advanced/options/Proxy.mjs
  function Proxy2(opts = {}) {
    return makeCommandOption({
      definition(builder, key) {
        var _a2;
        builder.addProxy({
          name: (_a2 = opts.name) !== null && _a2 !== void 0 ? _a2 : key,
          required: opts.required
        });
      },
      transformer(builder, key, state) {
        return state.positionals.map(({value}) => value);
      }
    });
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/clipanion-virtual-22ae250095/0/cache/clipanion-npm-3.0.0-rc.10-397b8032cb-b08ff3d507.zip/node_modules/clipanion/lib/advanced/options/Rest.mjs
  function Rest(opts = {}) {
    return makeCommandOption({
      definition(builder, key) {
        var _a2;
        builder.addRest({
          name: (_a2 = opts.name) !== null && _a2 !== void 0 ? _a2 : key,
          required: opts.required
        });
      },
      transformer(builder, key, state) {
        const isRestPositional = (index) => {
          const positional = state.positionals[index];
          if (positional.extra === NoLimits)
            return true;
          if (positional.extra === false && index < builder.arity.leading.length)
            return true;
          return false;
        };
        let count = 0;
        while (count < state.positionals.length && isRestPositional(count))
          count += 1;
        return state.positionals.splice(0, count).map(({value}) => value);
      }
    });
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/clipanion-virtual-22ae250095/0/cache/clipanion-npm-3.0.0-rc.10-397b8032cb-b08ff3d507.zip/node_modules/clipanion/lib/advanced/options/String.mjs
  function StringOption(descriptor, initialValueBase, optsBase) {
    const [initialValue, opts] = rerouteArguments(initialValueBase, optsBase !== null && optsBase !== void 0 ? optsBase : {});
    const {arity = 1} = opts;
    const optNames = descriptor.split(`,`);
    const nameSet = new Set(optNames);
    return makeCommandOption({
      definition(builder) {
        builder.addOption({
          names: optNames,
          arity: opts.tolerateBoolean ? 0 : arity,
          hidden: opts.hidden,
          description: opts.description,
          required: opts.required
        });
      },
      transformer(builder, key, state) {
        let usedName;
        let currentValue = initialValue;
        for (const {name, value} of state.options) {
          if (!nameSet.has(name))
            continue;
          usedName = name;
          currentValue = value;
        }
        if (typeof currentValue === `string`) {
          return applyValidator(usedName !== null && usedName !== void 0 ? usedName : key, currentValue, opts.validator);
        } else {
          return currentValue;
        }
      }
    });
  }
  function StringPositional(opts = {}) {
    const {required = true} = opts;
    return makeCommandOption({
      definition(builder, key) {
        var _a2;
        builder.addPositional({
          name: (_a2 = opts.name) !== null && _a2 !== void 0 ? _a2 : key,
          required: opts.required
        });
      },
      transformer(builder, key, state) {
        for (let i = 0; i < state.positionals.length; ++i) {
          if (state.positionals[i].extra === NoLimits)
            continue;
          if (required && state.positionals[i].extra === true)
            continue;
          if (!required && state.positionals[i].extra === false)
            continue;
          const [positional] = state.positionals.splice(i, 1);
          return positional.value;
        }
        return void 0;
      }
    });
  }
  function String2(descriptor, ...args) {
    if (typeof descriptor === `string`) {
      return StringOption(descriptor, ...args);
    } else {
      return StringPositional(descriptor);
    }
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/miscUtils.ts
  var import_micromatch = __toModule(require_micromatch());
  var import_stream2 = __toModule(require("stream"));
  function escapeRegExp(str) {
    return str.replace(/[.*+?^${}()|[\]\\]/g, `\\$&`);
  }
  function overrideType(val) {
  }
  function assertNever(arg) {
    throw new Error(`Assertion failed: Unexpected object '${arg}'`);
  }
  function validateEnum(def, value) {
    if (!Object.values(def).includes(value))
      throw new Error(`Assertion failed: Invalid value for enumeration`);
    return value;
  }
  function mapAndFilter(iterable, cb) {
    const output = [];
    for (const value of iterable) {
      const out = cb(value);
      if (out !== mapAndFilterSkip) {
        output.push(out);
      }
    }
    return output;
  }
  var mapAndFilterSkip = Symbol();
  mapAndFilter.skip = mapAndFilterSkip;
  function mapAndFind(iterable, cb) {
    for (const value of iterable) {
      const out = cb(value);
      if (out !== mapAndFindSkip) {
        return out;
      }
    }
    return void 0;
  }
  var mapAndFindSkip = Symbol();
  mapAndFind.skip = mapAndFindSkip;
  function isIndexableObject(value) {
    return typeof value === `object` && value !== null;
  }
  function convertMapsToIndexableObjects(arg) {
    if (arg instanceof Map)
      arg = Object.fromEntries(arg);
    if (isIndexableObject(arg)) {
      for (const key of Object.keys(arg)) {
        const value = arg[key];
        if (isIndexableObject(value)) {
          arg[key] = convertMapsToIndexableObjects(value);
        }
      }
    }
    return arg;
  }
  function getFactoryWithDefault(map, key, factory) {
    let value = map.get(key);
    if (typeof value === `undefined`)
      map.set(key, value = factory());
    return value;
  }
  function getArrayWithDefault(map, key) {
    let value = map.get(key);
    if (typeof value === `undefined`)
      map.set(key, value = []);
    return value;
  }
  function getSetWithDefault(map, key) {
    let value = map.get(key);
    if (typeof value === `undefined`)
      map.set(key, value = new Set());
    return value;
  }
  function getMapWithDefault(map, key) {
    let value = map.get(key);
    if (typeof value === `undefined`)
      map.set(key, value = new Map());
    return value;
  }
  async function releaseAfterUseAsync(fn, cleanup) {
    if (cleanup == null)
      return await fn();
    try {
      return await fn();
    } finally {
      await cleanup();
    }
  }
  async function prettifyAsyncErrors(fn, update) {
    try {
      return await fn();
    } catch (error) {
      error.message = update(error.message);
      throw error;
    }
  }
  function prettifySyncErrors(fn, update) {
    try {
      return fn();
    } catch (error) {
      error.message = update(error.message);
      throw error;
    }
  }
  async function bufferStream(stream) {
    return await new Promise((resolve, reject) => {
      const chunks = [];
      stream.on(`error`, (error) => {
        reject(error);
      });
      stream.on(`data`, (chunk) => {
        chunks.push(chunk);
      });
      stream.on(`end`, () => {
        resolve(Buffer.concat(chunks));
      });
    });
  }
  var BufferStream = class extends import_stream2.Transform {
    constructor() {
      super(...arguments);
      this.chunks = [];
    }
    _transform(chunk, encoding, cb) {
      if (encoding !== `buffer` || !Buffer.isBuffer(chunk))
        throw new Error(`Assertion failed: BufferStream only accept buffers`);
      this.chunks.push(chunk);
      cb(null, null);
    }
    _flush(cb) {
      cb(null, Buffer.concat(this.chunks));
    }
  };
  var DefaultStream = class extends import_stream2.Transform {
    constructor(ifEmpty = Buffer.alloc(0)) {
      super();
      this.active = true;
      this.ifEmpty = ifEmpty;
    }
    _transform(chunk, encoding, cb) {
      if (encoding !== `buffer` || !Buffer.isBuffer(chunk))
        throw new Error(`Assertion failed: DefaultStream only accept buffers`);
      this.active = false;
      cb(null, chunk);
    }
    _flush(cb) {
      if (this.active && this.ifEmpty.length > 0) {
        cb(null, this.ifEmpty);
      } else {
        cb(null);
      }
    }
  };
  var dynamicRequire = eval(`require`);
  function dynamicRequireNoCache(path) {
    const physicalPath = npath.fromPortablePath(path);
    const currentCacheEntry = dynamicRequire.cache[physicalPath];
    delete dynamicRequire.cache[physicalPath];
    let result;
    try {
      result = dynamicRequire(physicalPath);
      const freshCacheEntry = dynamicRequire.cache[physicalPath];
      const dynamicModule = eval(`module`);
      const freshCacheIndex = dynamicModule.children.indexOf(freshCacheEntry);
      if (freshCacheIndex !== -1) {
        dynamicModule.children.splice(freshCacheIndex, 1);
      }
    } finally {
      dynamicRequire.cache[physicalPath] = currentCacheEntry;
    }
    return result;
  }
  function sortMap(values, mappers) {
    const asArray = Array.from(values);
    if (!Array.isArray(mappers))
      mappers = [mappers];
    const stringified = [];
    for (const mapper of mappers)
      stringified.push(asArray.map((value) => mapper(value)));
    const indices = asArray.map((_, index) => index);
    indices.sort((a, b) => {
      for (const layer of stringified) {
        const comparison = layer[a] < layer[b] ? -1 : layer[a] > layer[b] ? 1 : 0;
        if (comparison !== 0) {
          return comparison;
        }
      }
      return 0;
    });
    return indices.map((index) => {
      return asArray[index];
    });
  }
  function buildIgnorePattern(ignorePatterns) {
    if (ignorePatterns.length === 0)
      return null;
    return ignorePatterns.map((pattern) => {
      return `(${import_micromatch.default.makeRe(pattern, {
        windows: false,
        dot: true
      }).source})`;
    }).join(`|`);
  }
  function replaceEnvVariables(value, {env}) {
    const regex = /\${(?<variableName>[\d\w_]+)(?<colon>:)?(?:-(?<fallback>[^}]*))?}/g;
    return value.replace(regex, (...args) => {
      const {variableName, colon, fallback} = args[args.length - 1];
      const variableExist = Object.prototype.hasOwnProperty.call(env, variableName);
      const variableValue = env[variableName];
      if (variableValue)
        return variableValue;
      if (variableExist && !colon)
        return variableValue;
      if (fallback != null)
        return fallback;
      throw new UsageError(`Environment variable not found (${variableName})`);
    });
  }
  function parseBoolean(value) {
    switch (value) {
      case `true`:
      case `1`:
      case 1:
      case true: {
        return true;
      }
      case `false`:
      case `0`:
      case 0:
      case false: {
        return false;
      }
      default: {
        throw new Error(`Couldn't parse "${value}" as a boolean`);
      }
    }
  }
  function parseOptionalBoolean(value) {
    if (typeof value === `undefined`)
      return value;
    return parseBoolean(value);
  }
  function tryParseOptionalBoolean(value) {
    try {
      return parseOptionalBoolean(value);
    } catch {
      return null;
    }
  }
  function isPathLike(value) {
    if (npath.isAbsolute(value) || value.match(/^(\.{1,2}|~)\//))
      return true;
    return false;
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/structUtils.ts
  var structUtils_exports = {};
  __export(structUtils_exports, {
    areDescriptorsEqual: () => areDescriptorsEqual,
    areIdentsEqual: () => areIdentsEqual,
    areLocatorsEqual: () => areLocatorsEqual,
    areVirtualPackagesEquivalent: () => areVirtualPackagesEquivalent,
    bindDescriptor: () => bindDescriptor,
    bindLocator: () => bindLocator,
    convertDescriptorToLocator: () => convertDescriptorToLocator,
    convertLocatorToDescriptor: () => convertLocatorToDescriptor,
    convertPackageToLocator: () => convertPackageToLocator,
    convertToIdent: () => convertToIdent,
    convertToManifestRange: () => convertToManifestRange,
    copyPackage: () => copyPackage,
    devirtualizeDescriptor: () => devirtualizeDescriptor,
    devirtualizeLocator: () => devirtualizeLocator,
    getIdentVendorPath: () => getIdentVendorPath,
    isVirtualDescriptor: () => isVirtualDescriptor,
    isVirtualLocator: () => isVirtualLocator,
    makeDescriptor: () => makeDescriptor,
    makeIdent: () => makeIdent,
    makeLocator: () => makeLocator,
    makeRange: () => makeRange,
    parseDescriptor: () => parseDescriptor,
    parseFileStyleRange: () => parseFileStyleRange,
    parseIdent: () => parseIdent,
    parseLocator: () => parseLocator,
    parseRange: () => parseRange,
    prettyDependent: () => prettyDependent,
    prettyDescriptor: () => prettyDescriptor,
    prettyIdent: () => prettyIdent,
    prettyLocator: () => prettyLocator,
    prettyLocatorNoColors: () => prettyLocatorNoColors,
    prettyRange: () => prettyRange,
    prettyReference: () => prettyReference,
    prettyResolution: () => prettyResolution,
    prettyWorkspace: () => prettyWorkspace,
    renamePackage: () => renamePackage,
    slugifyIdent: () => slugifyIdent,
    slugifyLocator: () => slugifyLocator,
    sortDescriptors: () => sortDescriptors,
    stringifyDescriptor: () => stringifyDescriptor,
    stringifyIdent: () => stringifyIdent,
    stringifyLocator: () => stringifyLocator,
    tryParseDescriptor: () => tryParseDescriptor,
    tryParseIdent: () => tryParseIdent,
    tryParseLocator: () => tryParseLocator,
    virtualizeDescriptor: () => virtualizeDescriptor,
    virtualizePackage: () => virtualizePackage
  });
  var import_querystring = __toModule(require("querystring"));
  var import_semver = __toModule(require_semver2());

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/hashUtils.ts
  var hashUtils_exports = {};
  __export(hashUtils_exports, {
    checksumFile: () => checksumFile,
    checksumPattern: () => checksumPattern,
    makeHash: () => makeHash
  });
  var import_crypto = __toModule(require("crypto"));
  var import_globby = __toModule(require_globby());
  function makeHash(...args) {
    const hash = (0, import_crypto.createHash)(`sha512`);
    let acc = ``;
    for (const arg of args) {
      if (typeof arg === `string`) {
        acc += arg;
      } else if (arg) {
        if (acc) {
          hash.update(acc);
          acc = ``;
        }
        hash.update(arg);
      }
    }
    if (acc)
      hash.update(acc);
    return hash.digest(`hex`);
  }
  async function checksumFile(path3, {baseFs, algorithm} = {baseFs: xfs, algorithm: `sha512`}) {
    const fd = await baseFs.openPromise(path3, `r`);
    try {
      const CHUNK_SIZE = 65536;
      const chunk = Buffer.allocUnsafeSlow(CHUNK_SIZE);
      const hash = (0, import_crypto.createHash)(algorithm);
      let bytesRead = 0;
      while ((bytesRead = await baseFs.readPromise(fd, chunk, 0, CHUNK_SIZE)) !== 0)
        hash.update(bytesRead === CHUNK_SIZE ? chunk : chunk.slice(0, bytesRead));
      return hash.digest(`hex`);
    } finally {
      await baseFs.closePromise(fd);
    }
  }
  async function checksumPattern(pattern, {cwd}) {
    const dirListing = await (0, import_globby.default)(pattern, {
      cwd: npath.fromPortablePath(cwd),
      expandDirectories: false,
      onlyDirectories: true,
      unique: true
    });
    const dirPatterns = dirListing.map((entry) => {
      return `${entry}/**/*`;
    });
    const listing = await (0, import_globby.default)([pattern, ...dirPatterns], {
      cwd: npath.fromPortablePath(cwd),
      expandDirectories: false,
      onlyFiles: false,
      unique: true
    });
    listing.sort();
    const hashes = await Promise.all(listing.map(async (entry) => {
      const parts = [Buffer.from(entry)];
      const p = npath.toPortablePath(entry);
      const stat = await xfs.lstatPromise(p);
      if (stat.isSymbolicLink())
        parts.push(Buffer.from(await xfs.readlinkPromise(p)));
      else if (stat.isFile())
        parts.push(await xfs.readFilePromise(p));
      return parts.join(`\0`);
    }));
    const hash = (0, import_crypto.createHash)(`sha512`);
    for (const sub of hashes)
      hash.update(sub);
    return hash.digest(`hex`);
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/structUtils.ts
  var VIRTUAL_PROTOCOL = `virtual:`;
  var VIRTUAL_ABBREVIATE = 5;
  function makeIdent(scope, name) {
    if (scope == null ? void 0 : scope.startsWith(`@`))
      throw new Error(`Invalid scope: don't prefix it with '@'`);
    return {identHash: makeHash(scope, name), scope, name};
  }
  function makeDescriptor(ident, range) {
    return {identHash: ident.identHash, scope: ident.scope, name: ident.name, descriptorHash: makeHash(ident.identHash, range), range};
  }
  function makeLocator(ident, reference) {
    return {identHash: ident.identHash, scope: ident.scope, name: ident.name, locatorHash: makeHash(ident.identHash, reference), reference};
  }
  function convertToIdent(source) {
    return {identHash: source.identHash, scope: source.scope, name: source.name};
  }
  function convertDescriptorToLocator(descriptor) {
    return {identHash: descriptor.identHash, scope: descriptor.scope, name: descriptor.name, locatorHash: descriptor.descriptorHash, reference: descriptor.range};
  }
  function convertLocatorToDescriptor(locator) {
    return {identHash: locator.identHash, scope: locator.scope, name: locator.name, descriptorHash: locator.locatorHash, range: locator.reference};
  }
  function convertPackageToLocator(pkg) {
    return {identHash: pkg.identHash, scope: pkg.scope, name: pkg.name, locatorHash: pkg.locatorHash, reference: pkg.reference};
  }
  function renamePackage(pkg, locator) {
    return {
      identHash: locator.identHash,
      scope: locator.scope,
      name: locator.name,
      locatorHash: locator.locatorHash,
      reference: locator.reference,
      version: pkg.version,
      languageName: pkg.languageName,
      linkType: pkg.linkType,
      dependencies: new Map(pkg.dependencies),
      peerDependencies: new Map(pkg.peerDependencies),
      dependenciesMeta: new Map(pkg.dependenciesMeta),
      peerDependenciesMeta: new Map(pkg.peerDependenciesMeta),
      bin: new Map(pkg.bin)
    };
  }
  function copyPackage(pkg) {
    return renamePackage(pkg, pkg);
  }
  function virtualizeDescriptor(descriptor, entropy) {
    if (entropy.includes(`#`))
      throw new Error(`Invalid entropy`);
    return makeDescriptor(descriptor, `virtual:${entropy}#${descriptor.range}`);
  }
  function virtualizePackage(pkg, entropy) {
    if (entropy.includes(`#`))
      throw new Error(`Invalid entropy`);
    return renamePackage(pkg, makeLocator(pkg, `virtual:${entropy}#${pkg.reference}`));
  }
  function isVirtualDescriptor(descriptor) {
    return descriptor.range.startsWith(VIRTUAL_PROTOCOL);
  }
  function isVirtualLocator(locator) {
    return locator.reference.startsWith(VIRTUAL_PROTOCOL);
  }
  function devirtualizeDescriptor(descriptor) {
    if (!isVirtualDescriptor(descriptor))
      throw new Error(`Not a virtual descriptor`);
    return makeDescriptor(descriptor, descriptor.range.replace(/^[^#]*#/, ``));
  }
  function devirtualizeLocator(locator) {
    if (!isVirtualLocator(locator))
      throw new Error(`Not a virtual descriptor`);
    return makeLocator(locator, locator.reference.replace(/^[^#]*#/, ``));
  }
  function bindDescriptor(descriptor, params) {
    if (descriptor.range.includes(`::`))
      return descriptor;
    return makeDescriptor(descriptor, `${descriptor.range}::${import_querystring.default.stringify(params)}`);
  }
  function bindLocator(locator, params) {
    if (locator.reference.includes(`::`))
      return locator;
    return makeLocator(locator, `${locator.reference}::${import_querystring.default.stringify(params)}`);
  }
  function areIdentsEqual(a, b) {
    return a.identHash === b.identHash;
  }
  function areDescriptorsEqual(a, b) {
    return a.descriptorHash === b.descriptorHash;
  }
  function areLocatorsEqual(a, b) {
    return a.locatorHash === b.locatorHash;
  }
  function areVirtualPackagesEquivalent(a, b) {
    if (!isVirtualLocator(a))
      throw new Error(`Invalid package type`);
    if (!isVirtualLocator(b))
      throw new Error(`Invalid package type`);
    if (!areIdentsEqual(a, b))
      return false;
    if (a.dependencies.size !== b.dependencies.size)
      return false;
    for (const dependencyDescriptorA of a.dependencies.values()) {
      const dependencyDescriptorB = b.dependencies.get(dependencyDescriptorA.identHash);
      if (!dependencyDescriptorB)
        return false;
      if (!areDescriptorsEqual(dependencyDescriptorA, dependencyDescriptorB)) {
        return false;
      }
    }
    return true;
  }
  function parseIdent(string) {
    const ident = tryParseIdent(string);
    if (!ident)
      throw new Error(`Invalid ident (${string})`);
    return ident;
  }
  function tryParseIdent(string) {
    const match2 = string.match(/^(?:@([^/]+?)\/)?([^/]+)$/);
    if (!match2)
      return null;
    const [, scope, name] = match2;
    const realScope = typeof scope !== `undefined` ? scope : null;
    return makeIdent(realScope, name);
  }
  function parseDescriptor(string, strict = false) {
    const descriptor = tryParseDescriptor(string, strict);
    if (!descriptor)
      throw new Error(`Invalid descriptor (${string})`);
    return descriptor;
  }
  function tryParseDescriptor(string, strict = false) {
    const match2 = strict ? string.match(/^(?:@([^/]+?)\/)?([^/]+?)(?:@(.+))$/) : string.match(/^(?:@([^/]+?)\/)?([^/]+?)(?:@(.+))?$/);
    if (!match2)
      return null;
    const [, scope, name, range] = match2;
    if (range === `unknown`)
      throw new Error(`Invalid range (${string})`);
    const realScope = typeof scope !== `undefined` ? scope : null;
    const realRange = typeof range !== `undefined` ? range : `unknown`;
    return makeDescriptor(makeIdent(realScope, name), realRange);
  }
  function parseLocator(string, strict = false) {
    const locator = tryParseLocator(string, strict);
    if (!locator)
      throw new Error(`Invalid locator (${string})`);
    return locator;
  }
  function tryParseLocator(string, strict = false) {
    const match2 = strict ? string.match(/^(?:@([^/]+?)\/)?([^/]+?)(?:@(.+))$/) : string.match(/^(?:@([^/]+?)\/)?([^/]+?)(?:@(.+))?$/);
    if (!match2)
      return null;
    const [, scope, name, reference] = match2;
    if (reference === `unknown`)
      throw new Error(`Invalid reference (${string})`);
    const realScope = typeof scope !== `undefined` ? scope : null;
    const realReference = typeof reference !== `undefined` ? reference : `unknown`;
    return makeLocator(makeIdent(realScope, name), realReference);
  }
  function parseRange(range, opts) {
    const match2 = range.match(/^([^#:]*:)?((?:(?!::)[^#])*)(?:#((?:(?!::).)*))?(?:::(.*))?$/);
    if (match2 === null)
      throw new Error(`Invalid range (${range})`);
    const protocol = typeof match2[1] !== `undefined` ? match2[1] : null;
    if (typeof (opts == null ? void 0 : opts.requireProtocol) === `string` && protocol !== opts.requireProtocol)
      throw new Error(`Invalid protocol (${protocol})`);
    else if ((opts == null ? void 0 : opts.requireProtocol) && protocol === null)
      throw new Error(`Missing protocol (${protocol})`);
    const source = typeof match2[3] !== `undefined` ? decodeURIComponent(match2[2]) : null;
    if ((opts == null ? void 0 : opts.requireSource) && source === null)
      throw new Error(`Missing source (${range})`);
    const rawSelector = typeof match2[3] !== `undefined` ? decodeURIComponent(match2[3]) : decodeURIComponent(match2[2]);
    const selector = (opts == null ? void 0 : opts.parseSelector) ? import_querystring.default.parse(rawSelector) : rawSelector;
    const params = typeof match2[4] !== `undefined` ? import_querystring.default.parse(match2[4]) : null;
    return {
      protocol,
      source,
      selector,
      params
    };
  }
  function parseFileStyleRange(range, {protocol}) {
    const {selector, params} = parseRange(range, {
      requireProtocol: protocol,
      requireBindings: true
    });
    if (typeof params.locator !== `string`)
      throw new Error(`Assertion failed: Invalid bindings for ${range}`);
    const parentLocator = parseLocator(params.locator, true);
    const path3 = selector;
    return {parentLocator, path: path3};
  }
  function encodeUnsafeCharacters(str) {
    str = str.replace(/%/g, `%25`);
    str = str.replace(/:/g, `%3A`);
    str = str.replace(/#/g, `%23`);
    return str;
  }
  function hasParams(params) {
    if (params === null)
      return false;
    return Object.entries(params).length > 0;
  }
  function makeRange({protocol, source, selector, params}) {
    let range = ``;
    if (protocol !== null)
      range += `${protocol}`;
    if (source !== null)
      range += `${encodeUnsafeCharacters(source)}#`;
    range += encodeUnsafeCharacters(selector);
    if (hasParams(params))
      range += `::${import_querystring.default.stringify(params)}`;
    return range;
  }
  function convertToManifestRange(range) {
    const {params, protocol, source, selector} = parseRange(range);
    for (const name in params)
      if (name.startsWith(`__`))
        delete params[name];
    return makeRange({protocol, source, params, selector});
  }
  function stringifyIdent(ident) {
    if (ident.scope) {
      return `@${ident.scope}/${ident.name}`;
    } else {
      return `${ident.name}`;
    }
  }
  function stringifyDescriptor(descriptor) {
    if (descriptor.scope) {
      return `@${descriptor.scope}/${descriptor.name}@${descriptor.range}`;
    } else {
      return `${descriptor.name}@${descriptor.range}`;
    }
  }
  function stringifyLocator(locator) {
    if (locator.scope) {
      return `@${locator.scope}/${locator.name}@${locator.reference}`;
    } else {
      return `${locator.name}@${locator.reference}`;
    }
  }
  function slugifyIdent(ident) {
    if (ident.scope !== null) {
      return `@${ident.scope}-${ident.name}`;
    } else {
      return ident.name;
    }
  }
  function slugifyLocator(locator) {
    const {protocol, selector} = parseRange(locator.reference);
    const humanProtocol = protocol !== null ? protocol.replace(/:$/, ``) : `exotic`;
    const humanVersion = import_semver.default.valid(selector);
    const humanReference = humanVersion !== null ? `${humanProtocol}-${humanVersion}` : `${humanProtocol}`;
    const hashTruncate = 10;
    const slug = locator.scope ? `${slugifyIdent(locator)}-${humanReference}-${locator.locatorHash.slice(0, hashTruncate)}` : `${slugifyIdent(locator)}-${humanReference}-${locator.locatorHash.slice(0, hashTruncate)}`;
    return toFilename(slug);
  }
  function prettyIdent(configuration, ident) {
    if (ident.scope) {
      return `${pretty(configuration, `@${ident.scope}/`, Type.SCOPE)}${pretty(configuration, ident.name, Type.NAME)}`;
    } else {
      return `${pretty(configuration, ident.name, Type.NAME)}`;
    }
  }
  function prettyRangeNoColors(range) {
    if (range.startsWith(VIRTUAL_PROTOCOL)) {
      const nested = prettyRangeNoColors(range.substr(range.indexOf(`#`) + 1));
      const abbrev = range.substr(VIRTUAL_PROTOCOL.length, VIRTUAL_ABBREVIATE);
      return false ? `${nested} (virtual:${abbrev})` : `${nested} [${abbrev}]`;
    } else {
      return range.replace(/\?.*/, `?[...]`);
    }
  }
  function prettyRange(configuration, range) {
    return `${pretty(configuration, prettyRangeNoColors(range), Type.RANGE)}`;
  }
  function prettyDescriptor(configuration, descriptor) {
    return `${prettyIdent(configuration, descriptor)}${pretty(configuration, `@`, Type.RANGE)}${prettyRange(configuration, descriptor.range)}`;
  }
  function prettyReference(configuration, reference) {
    return `${pretty(configuration, prettyRangeNoColors(reference), Type.REFERENCE)}`;
  }
  function prettyLocator(configuration, locator) {
    return `${prettyIdent(configuration, locator)}${pretty(configuration, `@`, Type.REFERENCE)}${prettyReference(configuration, locator.reference)}`;
  }
  function prettyLocatorNoColors(locator) {
    return `${stringifyIdent(locator)}@${prettyRangeNoColors(locator.reference)}`;
  }
  function sortDescriptors(descriptors) {
    return sortMap(descriptors, [
      (descriptor) => stringifyIdent(descriptor),
      (descriptor) => descriptor.range
    ]);
  }
  function prettyWorkspace(configuration, workspace) {
    return prettyIdent(configuration, workspace.locator);
  }
  function prettyResolution(configuration, descriptor, locator) {
    const devirtualizedDescriptor = isVirtualDescriptor(descriptor) ? devirtualizeDescriptor(descriptor) : descriptor;
    if (locator === null) {
      return `${prettyDescriptor(configuration, devirtualizedDescriptor)} \u2192 ${mark(configuration).Cross}`;
    } else if (devirtualizedDescriptor.identHash === locator.identHash) {
      return `${prettyDescriptor(configuration, devirtualizedDescriptor)} \u2192 ${prettyReference(configuration, locator.reference)}`;
    } else {
      return `${prettyDescriptor(configuration, devirtualizedDescriptor)} \u2192 ${prettyLocator(configuration, locator)}`;
    }
  }
  function prettyDependent(configuration, locator, descriptor) {
    if (descriptor === null) {
      return `${prettyLocator(configuration, locator)}`;
    } else {
      return `${prettyLocator(configuration, locator)} (via ${prettyRange(configuration, descriptor.range)})`;
    }
  }
  function getIdentVendorPath(ident) {
    return `node_modules/${stringifyIdent(ident)}`;
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/types.ts
  var LinkType;
  (function(LinkType4) {
    LinkType4["HARD"] = `HARD`;
    LinkType4["SOFT"] = `SOFT`;
  })(LinkType || (LinkType = {}));
  var PackageExtensionType;
  (function(PackageExtensionType2) {
    PackageExtensionType2["Dependency"] = `Dependency`;
    PackageExtensionType2["PeerDependency"] = `PeerDependency`;
    PackageExtensionType2["PeerDependencyMeta"] = `PeerDependencyMeta`;
  })(PackageExtensionType || (PackageExtensionType = {}));
  var PackageExtensionStatus;
  (function(PackageExtensionStatus2) {
    PackageExtensionStatus2["Inactive"] = `inactive`;
    PackageExtensionStatus2["Redundant"] = `redundant`;
    PackageExtensionStatus2["Active"] = `active`;
  })(PackageExtensionStatus || (PackageExtensionStatus = {}));

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/formatUtils.ts
  var Type = {
    NO_HINT: `NO_HINT`,
    NULL: `NULL`,
    SCOPE: `SCOPE`,
    NAME: `NAME`,
    RANGE: `RANGE`,
    REFERENCE: `REFERENCE`,
    NUMBER: `NUMBER`,
    PATH: `PATH`,
    URL: `URL`,
    ADDED: `ADDED`,
    REMOVED: `REMOVED`,
    CODE: `CODE`,
    DURATION: `DURATION`,
    SIZE: `SIZE`,
    IDENT: `IDENT`,
    DESCRIPTOR: `DESCRIPTOR`,
    LOCATOR: `LOCATOR`,
    RESOLUTION: `RESOLUTION`,
    DEPENDENT: `DEPENDENT`,
    PACKAGE_EXTENSION: `PACKAGE_EXTENSION`,
    SETTING: `SETTING`
  };
  var Style;
  (function(Style2) {
    Style2[Style2["BOLD"] = 2] = "BOLD";
  })(Style || (Style = {}));
  var chalkOptions = process.env.GITHUB_ACTIONS ? {level: 2} : import_chalk.default.supportsColor ? {level: import_chalk.default.supportsColor.level} : {level: 0};
  var supportsColor = chalkOptions.level !== 0;
  var supportsHyperlinks = supportsColor && !process.env.GITHUB_ACTIONS && !import_ci_info.CIRCLE;
  var chalkInstance = new import_chalk.default.Instance(chalkOptions);
  var colors = new Map([
    [Type.NO_HINT, null],
    [Type.NULL, [`#a853b5`, 129]],
    [Type.SCOPE, [`#d75f00`, 166]],
    [Type.NAME, [`#d7875f`, 173]],
    [Type.RANGE, [`#00afaf`, 37]],
    [Type.REFERENCE, [`#87afff`, 111]],
    [Type.NUMBER, [`#ffd700`, 220]],
    [Type.PATH, [`#d75fd7`, 170]],
    [Type.URL, [`#d75fd7`, 170]],
    [Type.ADDED, [`#5faf00`, 70]],
    [Type.REMOVED, [`#d70000`, 160]],
    [Type.CODE, [`#87afff`, 111]],
    [Type.SIZE, [`#ffd700`, 220]]
  ]);
  var validateTransform = (spec) => spec;
  var transforms = {
    [Type.NUMBER]: validateTransform({
      pretty: (configuration, value) => {
        return `${value}`;
      },
      json: (value) => {
        return value;
      }
    }),
    [Type.IDENT]: validateTransform({
      pretty: (configuration, ident) => {
        return prettyIdent(configuration, ident);
      },
      json: (ident) => {
        return stringifyIdent(ident);
      }
    }),
    [Type.LOCATOR]: validateTransform({
      pretty: (configuration, locator) => {
        return prettyLocator(configuration, locator);
      },
      json: (locator) => {
        return stringifyLocator(locator);
      }
    }),
    [Type.DESCRIPTOR]: validateTransform({
      pretty: (configuration, descriptor) => {
        return prettyDescriptor(configuration, descriptor);
      },
      json: (descriptor) => {
        return stringifyDescriptor(descriptor);
      }
    }),
    [Type.RESOLUTION]: validateTransform({
      pretty: (configuration, {descriptor, locator}) => {
        return prettyResolution(configuration, descriptor, locator);
      },
      json: ({descriptor, locator}) => {
        return {
          descriptor: stringifyDescriptor(descriptor),
          locator: locator !== null ? stringifyLocator(locator) : null
        };
      }
    }),
    [Type.DEPENDENT]: validateTransform({
      pretty: (configuration, {locator, descriptor}) => {
        return prettyDependent(configuration, locator, descriptor);
      },
      json: ({locator, descriptor}) => {
        return {
          locator: stringifyLocator(locator),
          descriptor: stringifyDescriptor(descriptor)
        };
      }
    }),
    [Type.PACKAGE_EXTENSION]: validateTransform({
      pretty: (configuration, packageExtension) => {
        switch (packageExtension.type) {
          case PackageExtensionType.Dependency:
            return `${prettyIdent(configuration, packageExtension.parentDescriptor)} \u27A4 ${applyColor(configuration, `dependencies`, Type.CODE)} \u27A4 ${prettyIdent(configuration, packageExtension.descriptor)}`;
          case PackageExtensionType.PeerDependency:
            return `${prettyIdent(configuration, packageExtension.parentDescriptor)} \u27A4 ${applyColor(configuration, `peerDependencies`, Type.CODE)} \u27A4 ${prettyIdent(configuration, packageExtension.descriptor)}`;
          case PackageExtensionType.PeerDependencyMeta:
            return `${prettyIdent(configuration, packageExtension.parentDescriptor)} \u27A4 ${applyColor(configuration, `peerDependenciesMeta`, Type.CODE)} \u27A4 ${prettyIdent(configuration, parseIdent(packageExtension.selector))} \u27A4 ${applyColor(configuration, packageExtension.key, Type.CODE)}`;
          default:
            throw new Error(`Assertion failed: Unsupported package extension type: ${packageExtension.type}`);
        }
      },
      json: (packageExtension) => {
        switch (packageExtension.type) {
          case PackageExtensionType.Dependency:
            return `${stringifyIdent(packageExtension.parentDescriptor)} > ${stringifyIdent(packageExtension.descriptor)}`;
          case PackageExtensionType.PeerDependency:
            return `${stringifyIdent(packageExtension.parentDescriptor)} >> ${stringifyIdent(packageExtension.descriptor)}`;
          case PackageExtensionType.PeerDependencyMeta:
            return `${stringifyIdent(packageExtension.parentDescriptor)} >> ${packageExtension.selector} / ${packageExtension.key}`;
          default:
            throw new Error(`Assertion failed: Unsupported package extension type: ${packageExtension.type}`);
        }
      }
    }),
    [Type.SETTING]: validateTransform({
      pretty: (configuration, settingName) => {
        configuration.get(settingName);
        return applyHyperlink(configuration, applyColor(configuration, settingName, Type.CODE), `https://yarnpkg.com/configuration/yarnrc#${settingName}`);
      },
      json: (settingName) => {
        return settingName;
      }
    }),
    [Type.DURATION]: validateTransform({
      pretty: (configuration, duration) => {
        if (duration > 1e3 * 60) {
          const minutes = Math.floor(duration / 1e3 / 60);
          const seconds = Math.ceil((duration - minutes * 60 * 1e3) / 1e3);
          return seconds === 0 ? `${minutes}m` : `${minutes}m ${seconds}s`;
        } else {
          const seconds = Math.floor(duration / 1e3);
          const milliseconds = duration - seconds * 1e3;
          return milliseconds === 0 ? `${seconds}s` : `${seconds}s ${milliseconds}ms`;
        }
      },
      json: (duration) => {
        return duration;
      }
    }),
    [Type.SIZE]: validateTransform({
      pretty: (configuration, size) => {
        const thresholds = [`KB`, `MB`, `GB`, `TB`];
        let power = thresholds.length;
        while (power > 1 && size < 1024 ** power)
          power -= 1;
        const factor = 1024 ** power;
        const value = Math.floor(size * 100 / factor) / 100;
        return applyColor(configuration, `${value} ${thresholds[power - 1]}`, Type.NUMBER);
      },
      json: (size) => {
        return size;
      }
    }),
    [Type.PATH]: validateTransform({
      pretty: (configuration, filePath) => {
        return applyColor(configuration, npath.fromPortablePath(filePath), Type.PATH);
      },
      json: (filePath) => {
        return npath.fromPortablePath(filePath);
      }
    })
  };
  function tuple(formatType, value) {
    return [value, formatType];
  }
  function applyStyle(configuration, text, flags) {
    if (!configuration.get(`enableColors`))
      return text;
    if (flags & 2)
      text = import_chalk.default.bold(text);
    return text;
  }
  function applyColor(configuration, value, formatType) {
    if (!configuration.get(`enableColors`))
      return value;
    const colorSpec = colors.get(formatType);
    if (colorSpec === null)
      return value;
    const color = typeof colorSpec === `undefined` ? formatType : chalkOptions.level >= 3 ? colorSpec[0] : colorSpec[1];
    const fn = typeof color === `number` ? chalkInstance.ansi256(color) : color.startsWith(`#`) ? chalkInstance.hex(color) : chalkInstance[color];
    if (typeof fn !== `function`)
      throw new Error(`Invalid format type ${color}`);
    return fn(value);
  }
  var isKonsole = !!process.env.KONSOLE_VERSION;
  function applyHyperlink(configuration, text, href) {
    if (!configuration.get(`enableHyperlinks`))
      return text;
    if (isKonsole)
      return `]8;;${href}\\${text}]8;;\\`;
    return `]8;;${href}\x07${text}]8;;\x07`;
  }
  function pretty(configuration, value, formatType) {
    if (value === null)
      return applyColor(configuration, `null`, Type.NULL);
    if (Object.prototype.hasOwnProperty.call(transforms, formatType)) {
      const transform = transforms[formatType];
      const typedTransform = transform;
      return typedTransform.pretty(configuration, value);
    }
    if (typeof value !== `string`)
      throw new Error(`Assertion failed: Expected the value to be a string, got ${typeof value}`);
    return applyColor(configuration, value, formatType);
  }
  function prettyList(configuration, values, formatType, {separator = `, `} = {}) {
    return [...values].map((value) => pretty(configuration, value, formatType)).join(separator);
  }
  function json(value, formatType) {
    if (value === null)
      return null;
    if (Object.prototype.hasOwnProperty.call(transforms, formatType)) {
      overrideType(formatType);
      return transforms[formatType].json(value);
    }
    if (typeof value !== `string`)
      throw new Error(`Assertion failed: Expected the value to be a string, got ${typeof value}`);
    return value;
  }
  function mark(configuration) {
    return {
      Check: applyColor(configuration, `\u2713`, `green`),
      Cross: applyColor(configuration, `\u2718`, `red`),
      Question: applyColor(configuration, `?`, `cyan`)
    };
  }
  function prettyField(configuration, {label, value: [value, formatType]}) {
    return `${pretty(configuration, label, Type.CODE)}: ${pretty(configuration, value, formatType)}`;
  }
  var LogLevel;
  (function(LogLevel2) {
    LogLevel2["Error"] = `error`;
    LogLevel2["Warning"] = `warning`;
    LogLevel2["Info"] = `info`;
    LogLevel2["Discard"] = `discard`;
  })(LogLevel || (LogLevel = {}));
  function addLogFilterSupport(report, {configuration}) {
    const logFilters = configuration.get(`logFilters`);
    const logFiltersByCode = new Map();
    const logFiltersByText = new Map();
    for (const filter of logFilters) {
      const level = filter.get(`level`);
      if (typeof level === `undefined`)
        continue;
      const code = filter.get(`code`);
      if (typeof code !== `undefined`)
        logFiltersByCode.set(code, level);
      const text = filter.get(`text`);
      if (typeof text !== `undefined`) {
        logFiltersByText.set(text, level);
      }
    }
    const findLogLevel = (name, text, defaultLevel) => {
      if (name === null || name === MessageName.UNNAMED)
        return defaultLevel;
      if (logFiltersByText.size > 0) {
        const level = logFiltersByText.get((0, import_strip_ansi.default)(text));
        if (typeof level !== `undefined`) {
          return level != null ? level : defaultLevel;
        }
      }
      if (logFiltersByCode.size > 0) {
        const level = logFiltersByCode.get(stringifyMessageName(name));
        if (typeof level !== `undefined`) {
          return level != null ? level : defaultLevel;
        }
      }
      return defaultLevel;
    };
    const reportInfo = report.reportInfo;
    const reportWarning = report.reportWarning;
    const reportError = report.reportError;
    const routeMessage = function(report2, name, text, level) {
      switch (findLogLevel(name, text, level)) {
        case LogLevel.Info:
          {
            reportInfo.call(report2, name, text);
          }
          break;
        case LogLevel.Warning:
          {
            reportWarning.call(report2, name != null ? name : MessageName.UNNAMED, text);
          }
          break;
        case LogLevel.Error:
          {
            reportError.call(report2, name != null ? name : MessageName.UNNAMED, text);
          }
          break;
      }
    };
    report.reportInfo = function(...args) {
      return routeMessage(this, ...args, LogLevel.Info);
    };
    report.reportWarning = function(...args) {
      return routeMessage(this, ...args, LogLevel.Warning);
    };
    report.reportError = function(...args) {
      return routeMessage(this, ...args, LogLevel.Error);
    };
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/httpUtils.ts
  var httpUtils_exports = {};
  __export(httpUtils_exports, {
    Method: () => Method,
    RequestError: () => import_got2.RequestError,
    del: () => del,
    get: () => get,
    getNetworkSettings: () => getNetworkSettings,
    post: () => post,
    put: () => put,
    request: () => request
  });
  var import_got = __toModule(require_source6());
  var import_https = __toModule(require("https"));
  var import_http = __toModule(require("http"));
  var import_micromatch2 = __toModule(require_micromatch());
  var import_tunnel = __toModule(require_tunnel2());
  var import_url2 = __toModule(require("url"));

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/Report.ts
  var import_stream3 = __toModule(require("stream"));
  var import_string_decoder = __toModule(require("string_decoder"));
  var ReportError = class extends Error {
    constructor(code, message, reportExtra) {
      super(message);
      this.reportExtra = reportExtra;
      this.reportCode = code;
    }
  };
  function isReportError(error) {
    return typeof error.reportCode !== `undefined`;
  }
  var Report = class {
    constructor() {
      this.reportedInfos = new Set();
      this.reportedWarnings = new Set();
      this.reportedErrors = new Set();
    }
    static progressViaCounter(max) {
      let current = 0;
      let unlock;
      let lock = new Promise((resolve) => {
        unlock = resolve;
      });
      const set = (n) => {
        const thisUnlock = unlock;
        lock = new Promise((resolve) => {
          unlock = resolve;
        });
        current = n;
        thisUnlock();
      };
      const tick = (n = 0) => {
        set(current + 1);
      };
      const gen = async function* () {
        while (current < max) {
          await lock;
          yield {
            progress: current / max
          };
        }
      }();
      return {
        [Symbol.asyncIterator]() {
          return gen;
        },
        set,
        tick
      };
    }
    reportInfoOnce(name, text, opts) {
      var _a2;
      const key = opts && opts.key ? opts.key : text;
      if (!this.reportedInfos.has(key)) {
        this.reportedInfos.add(key);
        this.reportInfo(name, text);
        (_a2 = opts == null ? void 0 : opts.reportExtra) == null ? void 0 : _a2.call(opts, this);
      }
    }
    reportWarningOnce(name, text, opts) {
      var _a2;
      const key = opts && opts.key ? opts.key : text;
      if (!this.reportedWarnings.has(key)) {
        this.reportedWarnings.add(key);
        this.reportWarning(name, text);
        (_a2 = opts == null ? void 0 : opts.reportExtra) == null ? void 0 : _a2.call(opts, this);
      }
    }
    reportErrorOnce(name, text, opts) {
      var _a2;
      const key = opts && opts.key ? opts.key : text;
      if (!this.reportedErrors.has(key)) {
        this.reportedErrors.add(key);
        this.reportError(name, text);
        (_a2 = opts == null ? void 0 : opts.reportExtra) == null ? void 0 : _a2.call(opts, this);
      }
    }
    reportExceptionOnce(error) {
      if (isReportError(error)) {
        this.reportErrorOnce(error.reportCode, error.message, {key: error, reportExtra: error.reportExtra});
      } else {
        this.reportErrorOnce(MessageName.EXCEPTION, error.stack || error.message, {key: error});
      }
    }
    createStreamReporter(prefix = null) {
      const stream = new import_stream3.PassThrough();
      const decoder = new import_string_decoder.StringDecoder();
      let buffer = ``;
      stream.on(`data`, (chunk) => {
        let chunkStr = decoder.write(chunk);
        let lineIndex;
        do {
          lineIndex = chunkStr.indexOf(`
`);
          if (lineIndex !== -1) {
            const line = buffer + chunkStr.substr(0, lineIndex);
            chunkStr = chunkStr.substr(lineIndex + 1);
            buffer = ``;
            if (prefix !== null) {
              this.reportInfo(null, `${prefix} ${line}`);
            } else {
              this.reportInfo(null, line);
            }
          }
        } while (lineIndex !== -1);
        buffer += chunkStr;
      });
      stream.on(`end`, () => {
        const last = decoder.end();
        if (last !== ``) {
          if (prefix !== null) {
            this.reportInfo(null, `${prefix} ${last}`);
          } else {
            this.reportInfo(null, last);
          }
        }
      });
      return stream;
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/httpUtils.ts
  var import_got2 = __toModule(require_source6());
  var cache = new Map();
  var certCache = new Map();
  var globalHttpAgent = new import_http.Agent({keepAlive: true});
  var globalHttpsAgent = new import_https.Agent({keepAlive: true});
  function parseProxy(specifier) {
    const url = new import_url2.URL(specifier);
    const proxy = {host: url.hostname, headers: {}};
    if (url.port)
      proxy.port = Number(url.port);
    return {proxy};
  }
  async function getCachedCertificate(caFilePath) {
    return getFactoryWithDefault(certCache, caFilePath, () => {
      return xfs.readFilePromise(caFilePath).then((cert) => {
        certCache.set(caFilePath, cert);
        return cert;
      });
    });
  }
  function prettyResponseCode({statusCode, statusMessage}, configuration) {
    const prettyStatusCode = pretty(configuration, statusCode, Type.NUMBER);
    const href = `https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/${statusCode}`;
    return applyHyperlink(configuration, `${prettyStatusCode}${statusMessage ? ` (${statusMessage})` : ``}`, href);
  }
  async function prettyNetworkError(response, {configuration, customErrorMessage}) {
    var _a2, _b;
    try {
      return await response;
    } catch (err) {
      if (err.name !== `HTTPError`)
        throw err;
      let message = (_b = customErrorMessage == null ? void 0 : customErrorMessage(err)) != null ? _b : (_a2 = err.response.body) == null ? void 0 : _a2.error;
      if (message == null) {
        if (err.message.startsWith(`Response code`)) {
          message = `The remote server failed to provide the requested resource`;
        } else {
          message = err.message;
        }
      }
      if (err instanceof import_got.TimeoutError && err.event === `socket`)
        message += `(can be increased via ${pretty(configuration, `httpTimeout`, Type.SETTING)})`;
      const networkError = new ReportError(MessageName.NETWORK_ERROR, message, (report) => {
        if (err.response) {
          report.reportError(MessageName.NETWORK_ERROR, `  ${prettyField(configuration, {
            label: `Response Code`,
            value: tuple(Type.NO_HINT, prettyResponseCode(err.response, configuration))
          })}`);
        }
        if (err.request) {
          report.reportError(MessageName.NETWORK_ERROR, `  ${prettyField(configuration, {
            label: `Request Method`,
            value: tuple(Type.NO_HINT, err.request.options.method)
          })}`);
          report.reportError(MessageName.NETWORK_ERROR, `  ${prettyField(configuration, {
            label: `Request URL`,
            value: tuple(Type.URL, err.request.requestUrl)
          })}`);
        }
        if (err.request.redirects.length > 0) {
          report.reportError(MessageName.NETWORK_ERROR, `  ${prettyField(configuration, {
            label: `Request Redirects`,
            value: tuple(Type.NO_HINT, prettyList(configuration, err.request.redirects, Type.URL))
          })}`);
        }
        if (err.request.retryCount === err.request.options.retry.limit) {
          report.reportError(MessageName.NETWORK_ERROR, `  ${prettyField(configuration, {
            label: `Request Retry Count`,
            value: tuple(Type.NO_HINT, `${pretty(configuration, err.request.retryCount, Type.NUMBER)} (can be increased via ${pretty(configuration, `httpRetry`, Type.SETTING)})`)
          })}`);
        }
      });
      networkError.originalError = err;
      throw networkError;
    }
  }
  function getNetworkSettings(target, opts) {
    const networkSettings = [...opts.configuration.get(`networkSettings`)].sort(([keyA], [keyB]) => {
      return keyB.length - keyA.length;
    });
    const mergedNetworkSettings = {
      enableNetwork: void 0,
      caFilePath: void 0,
      httpProxy: void 0,
      httpsProxy: void 0
    };
    const mergableKeys = Object.keys(mergedNetworkSettings);
    const url = new import_url2.URL(target);
    for (const [glob, config] of networkSettings) {
      if (import_micromatch2.default.isMatch(url.hostname, glob)) {
        for (const key of mergableKeys) {
          const setting = config.get(key);
          if (setting !== null && typeof mergedNetworkSettings[key] === `undefined`) {
            mergedNetworkSettings[key] = setting;
          }
        }
      }
    }
    for (const key of mergableKeys)
      if (typeof mergedNetworkSettings[key] === `undefined`)
        mergedNetworkSettings[key] = opts.configuration.get(key);
    return mergedNetworkSettings;
  }
  var Method;
  (function(Method2) {
    Method2["GET"] = `GET`;
    Method2["PUT"] = `PUT`;
    Method2["POST"] = `POST`;
    Method2["DELETE"] = `DELETE`;
  })(Method || (Method = {}));
  async function request(target, body, {configuration, headers, jsonRequest, jsonResponse, method = Method.GET}) {
    const networkConfig = getNetworkSettings(target, {configuration});
    if (networkConfig.enableNetwork === false)
      throw new Error(`Request to '${target}' has been blocked because of your configuration settings`);
    const url = new import_url2.URL(target);
    if (url.protocol === `http:` && !import_micromatch2.default.isMatch(url.hostname, configuration.get(`unsafeHttpWhitelist`)))
      throw new Error(`Unsafe http requests must be explicitly whitelisted in your configuration (${url.hostname})`);
    const agent = {
      http: networkConfig.httpProxy ? import_tunnel.default.httpOverHttp(parseProxy(networkConfig.httpProxy)) : globalHttpAgent,
      https: networkConfig.httpsProxy ? import_tunnel.default.httpsOverHttp(parseProxy(networkConfig.httpsProxy)) : globalHttpsAgent
    };
    const gotOptions = {agent, headers, method};
    gotOptions.responseType = jsonResponse ? `json` : `buffer`;
    if (body !== null) {
      if (Buffer.isBuffer(body) || !jsonRequest && typeof body === `string`) {
        gotOptions.body = body;
      } else {
        gotOptions.json = body;
      }
    }
    const socketTimeout = configuration.get(`httpTimeout`);
    const retry = configuration.get(`httpRetry`);
    const rejectUnauthorized = configuration.get(`enableStrictSsl`);
    const caFilePath = networkConfig.caFilePath;
    const {default: got} = await Promise.resolve().then(() => __toModule(require_source6()));
    const certificateAuthority = caFilePath ? await getCachedCertificate(caFilePath) : void 0;
    const gotClient = got.extend(__spreadValues({
      timeout: {
        socket: socketTimeout
      },
      retry,
      https: {
        rejectUnauthorized,
        certificateAuthority
      }
    }, gotOptions));
    return configuration.getLimit(`networkConcurrency`)(() => {
      return gotClient(target);
    });
  }
  async function get(target, _a2) {
    var _b = _a2, {configuration, jsonResponse} = _b, rest = __objRest(_b, ["configuration", "jsonResponse"]);
    let entry = getFactoryWithDefault(cache, target, () => {
      return prettyNetworkError(request(target, null, __spreadValues({configuration}, rest)), {configuration}).then((response) => {
        cache.set(target, response.body);
        return response.body;
      });
    });
    if (Buffer.isBuffer(entry) === false)
      entry = await entry;
    if (jsonResponse) {
      return JSON.parse(entry.toString());
    } else {
      return entry;
    }
  }
  async function put(target, body, _a2) {
    var _b = _a2, {customErrorMessage} = _b, options = __objRest(_b, ["customErrorMessage"]);
    const response = await prettyNetworkError(request(target, body, __spreadProps(__spreadValues({}, options), {method: Method.PUT})), options);
    return response.body;
  }
  async function post(target, body, _a2) {
    var _b = _a2, {customErrorMessage} = _b, options = __objRest(_b, ["customErrorMessage"]);
    const response = await prettyNetworkError(request(target, body, __spreadProps(__spreadValues({}, options), {method: Method.POST})), options);
    return response.body;
  }
  async function del(target, _a2) {
    var _b = _a2, {customErrorMessage} = _b, options = __objRest(_b, ["customErrorMessage"]);
    const response = await prettyNetworkError(request(target, null, __spreadProps(__spreadValues({}, options), {method: Method.DELETE})), options);
    return response.body;
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/scriptUtils.ts
  var scriptUtils_exports = {};
  __export(scriptUtils_exports, {
    executePackageAccessibleBinary: () => executePackageAccessibleBinary,
    executePackageScript: () => executePackageScript,
    executePackageShellcode: () => executePackageShellcode,
    executeWorkspaceAccessibleBinary: () => executeWorkspaceAccessibleBinary,
    executeWorkspaceLifecycleScript: () => executeWorkspaceLifecycleScript,
    executeWorkspaceScript: () => executeWorkspaceScript,
    getPackageAccessibleBinaries: () => getPackageAccessibleBinaries,
    getWorkspaceAccessibleBinaries: () => getWorkspaceAccessibleBinaries,
    hasPackageScript: () => hasPackageScript,
    hasWorkspaceScript: () => hasWorkspaceScript,
    makeScriptEnv: () => makeScriptEnv,
    maybeExecuteWorkspaceLifecycleScript: () => maybeExecuteWorkspaceLifecycleScript,
    prepareExternalProject: () => prepareExternalProject
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-libzip/sources/sync.ts
  var sync_exports = {};
  __export(sync_exports, {
    getLibzipPromise: () => getLibzipPromise,
    getLibzipSync: () => getLibzipSync
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-libzip/sources/makeInterface.ts
  var number64 = [
    `number`,
    `number`
  ];
  var Errors;
  (function(Errors2) {
    Errors2[Errors2["ZIP_ER_OK"] = 0] = "ZIP_ER_OK";
    Errors2[Errors2["ZIP_ER_MULTIDISK"] = 1] = "ZIP_ER_MULTIDISK";
    Errors2[Errors2["ZIP_ER_RENAME"] = 2] = "ZIP_ER_RENAME";
    Errors2[Errors2["ZIP_ER_CLOSE"] = 3] = "ZIP_ER_CLOSE";
    Errors2[Errors2["ZIP_ER_SEEK"] = 4] = "ZIP_ER_SEEK";
    Errors2[Errors2["ZIP_ER_READ"] = 5] = "ZIP_ER_READ";
    Errors2[Errors2["ZIP_ER_WRITE"] = 6] = "ZIP_ER_WRITE";
    Errors2[Errors2["ZIP_ER_CRC"] = 7] = "ZIP_ER_CRC";
    Errors2[Errors2["ZIP_ER_ZIPCLOSED"] = 8] = "ZIP_ER_ZIPCLOSED";
    Errors2[Errors2["ZIP_ER_NOENT"] = 9] = "ZIP_ER_NOENT";
    Errors2[Errors2["ZIP_ER_EXISTS"] = 10] = "ZIP_ER_EXISTS";
    Errors2[Errors2["ZIP_ER_OPEN"] = 11] = "ZIP_ER_OPEN";
    Errors2[Errors2["ZIP_ER_TMPOPEN"] = 12] = "ZIP_ER_TMPOPEN";
    Errors2[Errors2["ZIP_ER_ZLIB"] = 13] = "ZIP_ER_ZLIB";
    Errors2[Errors2["ZIP_ER_MEMORY"] = 14] = "ZIP_ER_MEMORY";
    Errors2[Errors2["ZIP_ER_CHANGED"] = 15] = "ZIP_ER_CHANGED";
    Errors2[Errors2["ZIP_ER_COMPNOTSUPP"] = 16] = "ZIP_ER_COMPNOTSUPP";
    Errors2[Errors2["ZIP_ER_EOF"] = 17] = "ZIP_ER_EOF";
    Errors2[Errors2["ZIP_ER_INVAL"] = 18] = "ZIP_ER_INVAL";
    Errors2[Errors2["ZIP_ER_NOZIP"] = 19] = "ZIP_ER_NOZIP";
    Errors2[Errors2["ZIP_ER_INTERNAL"] = 20] = "ZIP_ER_INTERNAL";
    Errors2[Errors2["ZIP_ER_INCONS"] = 21] = "ZIP_ER_INCONS";
    Errors2[Errors2["ZIP_ER_REMOVE"] = 22] = "ZIP_ER_REMOVE";
    Errors2[Errors2["ZIP_ER_DELETED"] = 23] = "ZIP_ER_DELETED";
    Errors2[Errors2["ZIP_ER_ENCRNOTSUPP"] = 24] = "ZIP_ER_ENCRNOTSUPP";
    Errors2[Errors2["ZIP_ER_RDONLY"] = 25] = "ZIP_ER_RDONLY";
    Errors2[Errors2["ZIP_ER_NOPASSWD"] = 26] = "ZIP_ER_NOPASSWD";
    Errors2[Errors2["ZIP_ER_WRONGPASSWD"] = 27] = "ZIP_ER_WRONGPASSWD";
    Errors2[Errors2["ZIP_ER_OPNOTSUPP"] = 28] = "ZIP_ER_OPNOTSUPP";
    Errors2[Errors2["ZIP_ER_INUSE"] = 29] = "ZIP_ER_INUSE";
    Errors2[Errors2["ZIP_ER_TELL"] = 30] = "ZIP_ER_TELL";
    Errors2[Errors2["ZIP_ER_COMPRESSED_DATA"] = 31] = "ZIP_ER_COMPRESSED_DATA";
  })(Errors || (Errors = {}));
  var makeInterface = (libzip) => ({
    get HEAP8() {
      return libzip.HEAP8;
    },
    get HEAPU8() {
      return libzip.HEAPU8;
    },
    errors: Errors,
    SEEK_SET: 0,
    SEEK_CUR: 1,
    SEEK_END: 2,
    ZIP_CHECKCONS: 4,
    ZIP_CREATE: 1,
    ZIP_EXCL: 2,
    ZIP_TRUNCATE: 8,
    ZIP_RDONLY: 16,
    ZIP_FL_OVERWRITE: 8192,
    ZIP_FL_COMPRESSED: 4,
    ZIP_OPSYS_DOS: 0,
    ZIP_OPSYS_AMIGA: 1,
    ZIP_OPSYS_OPENVMS: 2,
    ZIP_OPSYS_UNIX: 3,
    ZIP_OPSYS_VM_CMS: 4,
    ZIP_OPSYS_ATARI_ST: 5,
    ZIP_OPSYS_OS_2: 6,
    ZIP_OPSYS_MACINTOSH: 7,
    ZIP_OPSYS_Z_SYSTEM: 8,
    ZIP_OPSYS_CPM: 9,
    ZIP_OPSYS_WINDOWS_NTFS: 10,
    ZIP_OPSYS_MVS: 11,
    ZIP_OPSYS_VSE: 12,
    ZIP_OPSYS_ACORN_RISC: 13,
    ZIP_OPSYS_VFAT: 14,
    ZIP_OPSYS_ALTERNATE_MVS: 15,
    ZIP_OPSYS_BEOS: 16,
    ZIP_OPSYS_TANDEM: 17,
    ZIP_OPSYS_OS_400: 18,
    ZIP_OPSYS_OS_X: 19,
    ZIP_CM_DEFAULT: -1,
    ZIP_CM_STORE: 0,
    ZIP_CM_DEFLATE: 8,
    uint08S: libzip._malloc(1),
    uint16S: libzip._malloc(2),
    uint32S: libzip._malloc(4),
    uint64S: libzip._malloc(8),
    malloc: libzip._malloc,
    free: libzip._free,
    getValue: libzip.getValue,
    open: libzip.cwrap(`zip_open`, `number`, [`string`, `number`, `number`]),
    openFromSource: libzip.cwrap(`zip_open_from_source`, `number`, [`number`, `number`, `number`]),
    close: libzip.cwrap(`zip_close`, `number`, [`number`]),
    discard: libzip.cwrap(`zip_discard`, null, [`number`]),
    getError: libzip.cwrap(`zip_get_error`, `number`, [`number`]),
    getName: libzip.cwrap(`zip_get_name`, `string`, [`number`, `number`, `number`]),
    getNumEntries: libzip.cwrap(`zip_get_num_entries`, `number`, [`number`, `number`]),
    delete: libzip.cwrap(`zip_delete`, `number`, [`number`, `number`]),
    stat: libzip.cwrap(`zip_stat`, `number`, [`number`, `string`, `number`, `number`]),
    statIndex: libzip.cwrap(`zip_stat_index`, `number`, [`number`, ...number64, `number`, `number`]),
    fopen: libzip.cwrap(`zip_fopen`, `number`, [`number`, `string`, `number`]),
    fopenIndex: libzip.cwrap(`zip_fopen_index`, `number`, [`number`, ...number64, `number`]),
    fread: libzip.cwrap(`zip_fread`, `number`, [`number`, `number`, `number`, `number`]),
    fclose: libzip.cwrap(`zip_fclose`, `number`, [`number`]),
    dir: {
      add: libzip.cwrap(`zip_dir_add`, `number`, [`number`, `string`])
    },
    file: {
      add: libzip.cwrap(`zip_file_add`, `number`, [`number`, `string`, `number`, `number`]),
      getError: libzip.cwrap(`zip_file_get_error`, `number`, [`number`]),
      getExternalAttributes: libzip.cwrap(`zip_file_get_external_attributes`, `number`, [`number`, ...number64, `number`, `number`, `number`]),
      setExternalAttributes: libzip.cwrap(`zip_file_set_external_attributes`, `number`, [`number`, ...number64, `number`, `number`, `number`]),
      setMtime: libzip.cwrap(`zip_file_set_mtime`, `number`, [`number`, ...number64, `number`, `number`]),
      setCompression: libzip.cwrap(`zip_set_file_compression`, `number`, [`number`, ...number64, `number`, `number`])
    },
    ext: {
      countSymlinks: libzip.cwrap(`zip_ext_count_symlinks`, `number`, [`number`])
    },
    error: {
      initWithCode: libzip.cwrap(`zip_error_init_with_code`, null, [`number`, `number`]),
      strerror: libzip.cwrap(`zip_error_strerror`, `string`, [`number`])
    },
    name: {
      locate: libzip.cwrap(`zip_name_locate`, `number`, [`number`, `string`, `number`])
    },
    source: {
      fromUnattachedBuffer: libzip.cwrap(`zip_source_buffer_create`, `number`, [`number`, `number`, `number`, `number`]),
      fromBuffer: libzip.cwrap(`zip_source_buffer`, `number`, [`number`, `number`, ...number64, `number`]),
      free: libzip.cwrap(`zip_source_free`, null, [`number`]),
      keep: libzip.cwrap(`zip_source_keep`, null, [`number`]),
      open: libzip.cwrap(`zip_source_open`, `number`, [`number`]),
      close: libzip.cwrap(`zip_source_close`, `number`, [`number`]),
      seek: libzip.cwrap(`zip_source_seek`, `number`, [`number`, ...number64, `number`]),
      tell: libzip.cwrap(`zip_source_tell`, `number`, [`number`]),
      read: libzip.cwrap(`zip_source_read`, `number`, [`number`, `number`, `number`]),
      error: libzip.cwrap(`zip_source_error`, `number`, [`number`]),
      setMtime: libzip.cwrap(`zip_source_set_mtime`, `number`, [`number`, `number`])
    },
    struct: {
      stat: libzip.cwrap(`zipstruct_stat`, `number`, []),
      statS: libzip.cwrap(`zipstruct_statS`, `number`, []),
      statName: libzip.cwrap(`zipstruct_stat_name`, `string`, [`number`]),
      statIndex: libzip.cwrap(`zipstruct_stat_index`, `number`, [`number`]),
      statSize: libzip.cwrap(`zipstruct_stat_size`, `number`, [`number`]),
      statCompSize: libzip.cwrap(`zipstruct_stat_comp_size`, `number`, [`number`]),
      statCompMethod: libzip.cwrap(`zipstruct_stat_comp_method`, `number`, [`number`]),
      statMtime: libzip.cwrap(`zipstruct_stat_mtime`, `number`, [`number`]),
      statCrc: libzip.cwrap(`zipstruct_stat_crc`, `number`, [`number`]),
      error: libzip.cwrap(`zipstruct_error`, `number`, []),
      errorS: libzip.cwrap(`zipstruct_errorS`, `number`, []),
      errorCodeZip: libzip.cwrap(`zipstruct_error_code_zip`, `number`, [`number`])
    }
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-libzip/sources/sync.ts
  var mod = null;
  function getLibzipSync() {
    if (mod === null)
      mod = makeInterface(require_libzipSync());
    return mod;
  }
  async function getLibzipPromise() {
    return getLibzipSync();
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-shell/sources/index.ts
  var sources_exports3 = {};
  __export(sources_exports3, {
    ShellError: () => ShellError,
    execute: () => execute2,
    globUtils: () => globUtils_exports
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-parsers/sources/index.ts
  var sources_exports2 = {};
  __export(sources_exports2, {
    parseResolution: () => parseResolution,
    parseShell: () => parseShell,
    parseSyml: () => parseSyml,
    stringifyArgument: () => stringifyArgument,
    stringifyArgumentSegment: () => stringifyArgumentSegment,
    stringifyArithmeticExpression: () => stringifyArithmeticExpression,
    stringifyCommand: () => stringifyCommand,
    stringifyCommandChain: () => stringifyCommandChain,
    stringifyCommandChainThen: () => stringifyCommandChainThen,
    stringifyCommandLine: () => stringifyCommandLine,
    stringifyCommandLineThen: () => stringifyCommandLineThen,
    stringifyEnvSegment: () => stringifyEnvSegment,
    stringifyRedirectArgument: () => stringifyRedirectArgument,
    stringifyResolution: () => stringifyResolution,
    stringifyShell: () => stringifyShellLine,
    stringifyShellLine: () => stringifyShellLine,
    stringifySyml: () => stringifySyml,
    stringifyValueArgument: () => stringifyValueArgument
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-parsers/sources/shell.ts
  var import_shell = __toModule(require_shell());
  function parseShell(source, options = {isGlobPattern: () => false}) {
    try {
      return (0, import_shell.parse)(source, options);
    } catch (error) {
      if (error.location)
        error.message = error.message.replace(/(\.)?$/, ` (line ${error.location.start.line}, column ${error.location.start.column})$1`);
      throw error;
    }
  }
  function stringifyShellLine(shellLine, {endSemicolon = false} = {}) {
    return shellLine.map(({command, type}, index) => `${stringifyCommandLine(command)}${type === `;` ? index !== shellLine.length - 1 || endSemicolon ? `;` : `` : ` &`}`).join(` `);
  }
  function stringifyCommandLine(commandLine) {
    return `${stringifyCommandChain(commandLine.chain)}${commandLine.then ? ` ${stringifyCommandLineThen(commandLine.then)}` : ``}`;
  }
  function stringifyCommandLineThen(commandLineThen) {
    return `${commandLineThen.type} ${stringifyCommandLine(commandLineThen.line)}`;
  }
  function stringifyCommandChain(commandChain) {
    return `${stringifyCommand(commandChain)}${commandChain.then ? ` ${stringifyCommandChainThen(commandChain.then)}` : ``}`;
  }
  function stringifyCommandChainThen(commandChainThen) {
    return `${commandChainThen.type} ${stringifyCommandChain(commandChainThen.chain)}`;
  }
  function stringifyCommand(command) {
    switch (command.type) {
      case `command`:
        return `${command.envs.length > 0 ? `${command.envs.map((env) => stringifyEnvSegment(env)).join(` `)} ` : ``}${command.args.map((argument) => stringifyArgument(argument)).join(` `)}`;
      case `subshell`:
        return `(${stringifyShellLine(command.subshell)})${command.args.length > 0 ? ` ${command.args.map((argument) => stringifyRedirectArgument(argument)).join(` `)}` : ``}`;
      case `group`:
        return `{ ${stringifyShellLine(command.group, {endSemicolon: true})} }${command.args.length > 0 ? ` ${command.args.map((argument) => stringifyRedirectArgument(argument)).join(` `)}` : ``}`;
      case `envs`:
        return command.envs.map((env) => stringifyEnvSegment(env)).join(` `);
      default:
        throw new Error(`Unsupported command type:  "${command.type}"`);
    }
  }
  function stringifyEnvSegment(envSegment) {
    return `${envSegment.name}=${envSegment.args[0] ? stringifyValueArgument(envSegment.args[0]) : ``}`;
  }
  function stringifyArgument(argument) {
    switch (argument.type) {
      case `redirection`:
        return stringifyRedirectArgument(argument);
      case `argument`:
        return stringifyValueArgument(argument);
      default:
        throw new Error(`Unsupported argument type: "${argument.type}"`);
    }
  }
  function stringifyRedirectArgument(argument) {
    return `${argument.subtype} ${argument.args.map((argument2) => stringifyValueArgument(argument2)).join(` `)}`;
  }
  function stringifyValueArgument(argument) {
    return argument.segments.map((segment) => stringifyArgumentSegment(segment)).join(``);
  }
  function stringifyArgumentSegment(argumentSegment) {
    const doubleQuoteIfRequested = (string, quote) => quote ? `"${string}"` : string;
    const quoteIfNeeded = (string) => {
      if (!string.match(/[(){}<>$|&; \t"']/))
        return string;
      if (!string.match(/[$"]/))
        return `"${string}"`;
      return `'${string.replace(/[']/g, `\\'`)}'`;
    };
    switch (argumentSegment.type) {
      case `text`:
        return quoteIfNeeded(argumentSegment.text);
      case `glob`:
        return argumentSegment.pattern;
      case `shell`:
        return doubleQuoteIfRequested(`\${${stringifyShellLine(argumentSegment.shell)}}`, argumentSegment.quoted);
      case `variable`:
        return doubleQuoteIfRequested(typeof argumentSegment.defaultValue === `undefined` ? `\${${argumentSegment.name}}` : argumentSegment.defaultValue.length === 0 ? `\${${argumentSegment.name}:-}` : `\${${argumentSegment.name}:-${argumentSegment.defaultValue.map((argument) => stringifyValueArgument(argument)).join(` `)}}`, argumentSegment.quoted);
      case `arithmetic`:
        return `$(( ${stringifyArithmeticExpression(argumentSegment.arithmetic)} ))`;
      default:
        throw new Error(`Unsupported argument segment type: "${argumentSegment.type}"`);
    }
  }
  function stringifyArithmeticExpression(argument) {
    const getOperator = (type) => {
      switch (type) {
        case `addition`:
          return `+`;
        case `subtraction`:
          return `-`;
        case `multiplication`:
          return `*`;
        case `division`:
          return `/`;
        default:
          throw new Error(`Can't extract operator from arithmetic expression of type "${type}"`);
      }
    };
    const parenthesizeIfRequested = (string, parenthesize) => parenthesize ? `( ${string} )` : string;
    const stringifyAndParenthesizeIfNeeded = (expression) => parenthesizeIfRequested(stringifyArithmeticExpression(expression), ![`number`, `variable`].includes(expression.type));
    switch (argument.type) {
      case `number`:
        return String(argument.value);
      case `variable`:
        return argument.name;
      default:
        return `${stringifyAndParenthesizeIfNeeded(argument.left)} ${getOperator(argument.type)} ${stringifyAndParenthesizeIfNeeded(argument.right)}`;
    }
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-parsers/sources/resolution.ts
  var import_resolution = __toModule(require_resolution());
  function parseResolution(source) {
    const legacyResolution = source.match(/^\*{1,2}\/(.*)/);
    if (legacyResolution)
      throw new Error(`The override for '${source}' includes a glob pattern. Glob patterns have been removed since their behaviours don't match what you'd expect. Set the override to '${legacyResolution[1]}' instead.`);
    try {
      return (0, import_resolution.parse)(source);
    } catch (error) {
      if (error.location)
        error.message = error.message.replace(/(\.)?$/, ` (line ${error.location.start.line}, column ${error.location.start.column})$1`);
      throw error;
    }
  }
  function stringifyResolution(resolution) {
    let str = ``;
    if (resolution.from) {
      str += resolution.from.fullName;
      if (resolution.from.description)
        str += `@${resolution.from.description}`;
      str += `/`;
    }
    str += resolution.descriptor.fullName;
    if (resolution.descriptor.description)
      str += `@${resolution.descriptor.description}`;
    return str;
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-parsers/sources/syml.ts
  var import_js_yaml = __toModule(require_js_yaml2());
  var import_syml = __toModule(require_syml());
  var simpleStringPattern = /^(?![-?:,\][{}#&*!|>'"%@` \t\r\n]).([ \t]*(?![,\][{}:# \t\r\n]).)*$/;
  var specialObjectKeys = [`__metadata`, `version`, `resolution`, `dependencies`, `peerDependencies`, `dependenciesMeta`, `peerDependenciesMeta`, `binaries`];
  var PreserveOrdering = class {
    constructor(data) {
      this.data = data;
    }
  };
  function stringifyString(value) {
    if (value.match(simpleStringPattern)) {
      return value;
    } else {
      return JSON.stringify(value);
    }
  }
  function isRemovableField(value) {
    if (typeof value === `undefined`)
      return true;
    if (typeof value === `object` && value !== null)
      return Object.keys(value).every((key) => isRemovableField(value[key]));
    return false;
  }
  function stringifyValue(value, indentLevel, newLineIfObject) {
    if (value === null)
      return `null
`;
    if (typeof value === `number` || typeof value === `boolean`)
      return `${value.toString()}
`;
    if (typeof value === `string`)
      return `${stringifyString(value)}
`;
    if (Array.isArray(value)) {
      if (value.length === 0)
        return `[]
`;
      const indent = `  `.repeat(indentLevel);
      const serialized = value.map((sub) => {
        return `${indent}- ${stringifyValue(sub, indentLevel + 1, false)}`;
      }).join(``);
      return `
${serialized}`;
    }
    if (typeof value === `object` && value) {
      let data;
      let sort;
      if (value instanceof PreserveOrdering) {
        data = value.data;
        sort = false;
      } else {
        data = value;
        sort = true;
      }
      const indent = `  `.repeat(indentLevel);
      const keys = Object.keys(data);
      if (sort) {
        keys.sort((a, b) => {
          const aIndex = specialObjectKeys.indexOf(a);
          const bIndex = specialObjectKeys.indexOf(b);
          if (aIndex === -1 && bIndex === -1)
            return a < b ? -1 : a > b ? 1 : 0;
          if (aIndex !== -1 && bIndex === -1)
            return -1;
          if (aIndex === -1 && bIndex !== -1)
            return 1;
          return aIndex - bIndex;
        });
      }
      const fields = keys.filter((key) => {
        return !isRemovableField(data[key]);
      }).map((key, index) => {
        const value2 = data[key];
        const stringifiedKey = stringifyString(key);
        const stringifiedValue = stringifyValue(value2, indentLevel + 1, true);
        const recordIndentation = index > 0 || newLineIfObject ? indent : ``;
        if (stringifiedValue.startsWith(`
`)) {
          return `${recordIndentation}${stringifiedKey}:${stringifiedValue}`;
        } else {
          return `${recordIndentation}${stringifiedKey}: ${stringifiedValue}`;
        }
      }).join(indentLevel === 0 ? `
` : ``) || `
`;
      if (!newLineIfObject) {
        return `${fields}`;
      } else {
        return `
${fields}`;
      }
    }
    throw new Error(`Unsupported value type (${value})`);
  }
  function stringifySyml(value) {
    try {
      const stringified = stringifyValue(value, 0, false);
      return stringified !== `
` ? stringified : ``;
    } catch (error) {
      if (error.location)
        error.message = error.message.replace(/(\.)?$/, ` (line ${error.location.start.line}, column ${error.location.start.column})$1`);
      throw error;
    }
  }
  stringifySyml.PreserveOrdering = PreserveOrdering;
  function parseViaPeg(source) {
    if (!source.endsWith(`
`))
      source += `
`;
    return (0, import_syml.parse)(source);
  }
  var LEGACY_REGEXP = /^(#.*(\r?\n))*?#\s+yarn\s+lockfile\s+v1\r?\n/i;
  function parseViaJsYaml(source) {
    if (LEGACY_REGEXP.test(source))
      return parseViaPeg(source);
    const value = (0, import_js_yaml.safeLoad)(source, {
      schema: import_js_yaml.FAILSAFE_SCHEMA,
      json: true
    });
    if (value === void 0 || value === null)
      return {};
    if (typeof value !== `object`)
      throw new Error(`Expected an indexed object, got a ${typeof value} instead. Does your file follow Yaml's rules?`);
    if (Array.isArray(value))
      throw new Error(`Expected an indexed object, got an array instead. Does your file follow Yaml's rules?`);
    return value;
  }
  function parseSyml(source) {
    return parseViaJsYaml(source);
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-shell/sources/index.ts
  var import_chalk2 = __toModule(require_source());
  var import_os4 = __toModule(require("os"));
  var import_stream5 = __toModule(require("stream"));
  var import_util3 = __toModule(require("util"));

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-shell/sources/errors.ts
  var ShellError = class extends Error {
    constructor(message) {
      super(message);
      this.name = `ShellError`;
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-shell/sources/globUtils.ts
  var globUtils_exports = {};
  __export(globUtils_exports, {
    fastGlobOptions: () => fastGlobOptions,
    isBraceExpansion: () => isBraceExpansion,
    isGlobPattern: () => isGlobPattern,
    match: () => match,
    micromatchOptions: () => micromatchOptions
  });
  var import_fast_glob = __toModule(require_out4());
  var import_fs5 = __toModule(require("fs"));
  var import_micromatch3 = __toModule(require_micromatch());
  var micromatchOptions = {
    strictBrackets: true
  };
  var fastGlobOptions = {
    onlyDirectories: false,
    onlyFiles: false
  };
  function isGlobPattern(pattern) {
    if (!import_micromatch3.default.scan(pattern, micromatchOptions).isGlob)
      return false;
    try {
      import_micromatch3.default.parse(pattern, micromatchOptions);
    } catch {
      return false;
    }
    return true;
  }
  function match(pattern, {cwd, baseFs}) {
    return (0, import_fast_glob.default)(pattern, __spreadProps(__spreadValues({}, fastGlobOptions), {
      cwd: npath.fromPortablePath(cwd),
      fs: extendFs(import_fs5.default, new PosixFS(baseFs))
    }));
  }
  function isBraceExpansion(pattern) {
    return import_micromatch3.default.scan(pattern, micromatchOptions).isBrace;
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-shell/sources/pipe.ts
  var import_cross_spawn2 = __toModule(require_cross_spawn());
  var import_stream4 = __toModule(require("stream"));
  var import_string_decoder2 = __toModule(require("string_decoder"));
  var Pipe;
  (function(Pipe2) {
    Pipe2[Pipe2["STDIN"] = 0] = "STDIN";
    Pipe2[Pipe2["STDOUT"] = 1] = "STDOUT";
    Pipe2[Pipe2["STDERR"] = 2] = "STDERR";
  })(Pipe || (Pipe = {}));
  var activeChildren2 = new Set();
  function sigintHandler2() {
  }
  function sigtermHandler2() {
    for (const child of activeChildren2) {
      child.kill();
    }
  }
  function makeProcess(name, args, opts, spawnOpts) {
    return (stdio) => {
      const stdin = stdio[0] instanceof import_stream4.Transform ? `pipe` : stdio[0];
      const stdout = stdio[1] instanceof import_stream4.Transform ? `pipe` : stdio[1];
      const stderr = stdio[2] instanceof import_stream4.Transform ? `pipe` : stdio[2];
      const child = (0, import_cross_spawn2.default)(name, args, __spreadProps(__spreadValues({}, spawnOpts), {stdio: [
        stdin,
        stdout,
        stderr
      ]}));
      activeChildren2.add(child);
      if (activeChildren2.size === 1) {
        process.on(`SIGINT`, sigintHandler2);
        process.on(`SIGTERM`, sigtermHandler2);
      }
      if (stdio[0] instanceof import_stream4.Transform)
        stdio[0].pipe(child.stdin);
      if (stdio[1] instanceof import_stream4.Transform)
        child.stdout.pipe(stdio[1], {end: false});
      if (stdio[2] instanceof import_stream4.Transform)
        child.stderr.pipe(stdio[2], {end: false});
      return {
        stdin: child.stdin,
        promise: new Promise((resolve) => {
          child.on(`error`, (error) => {
            activeChildren2.delete(child);
            if (activeChildren2.size === 0) {
              process.off(`SIGINT`, sigintHandler2);
              process.off(`SIGTERM`, sigtermHandler2);
            }
            switch (error.code) {
              case `ENOENT`:
                {
                  stdio[2].write(`command not found: ${name}
`);
                  resolve(127);
                }
                break;
              case `EACCES`:
                {
                  stdio[2].write(`permission denied: ${name}
`);
                  resolve(128);
                }
                break;
              default:
                {
                  stdio[2].write(`uncaught error: ${error.message}
`);
                  resolve(1);
                }
                break;
            }
          });
          child.on(`exit`, (code) => {
            activeChildren2.delete(child);
            if (activeChildren2.size === 0) {
              process.off(`SIGINT`, sigintHandler2);
              process.off(`SIGTERM`, sigtermHandler2);
            }
            if (code !== null) {
              resolve(code);
            } else {
              resolve(129);
            }
          });
        })
      };
    };
  }
  function makeBuiltin(builtin) {
    return (stdio) => {
      const stdin = stdio[0] === `pipe` ? new import_stream4.PassThrough() : stdio[0];
      return {
        stdin,
        promise: Promise.resolve().then(() => builtin({
          stdin,
          stdout: stdio[1],
          stderr: stdio[2]
        }))
      };
    };
  }
  var ProtectedStream = class {
    constructor(stream) {
      this.stream = stream;
    }
    close() {
    }
    get() {
      return this.stream;
    }
  };
  var PipeStream = class {
    constructor() {
      this.stream = null;
    }
    close() {
      if (this.stream === null) {
        throw new Error(`Assertion failed: No stream attached`);
      } else {
        this.stream.end();
      }
    }
    attach(stream) {
      this.stream = stream;
    }
    get() {
      if (this.stream === null) {
        throw new Error(`Assertion failed: No stream attached`);
      } else {
        return this.stream;
      }
    }
  };
  var Handle = class {
    constructor(ancestor, implementation) {
      this.stdin = null;
      this.stdout = null;
      this.stderr = null;
      this.pipe = null;
      this.ancestor = ancestor;
      this.implementation = implementation;
    }
    static start(implementation, {stdin, stdout, stderr}) {
      const chain = new Handle(null, implementation);
      chain.stdin = stdin;
      chain.stdout = stdout;
      chain.stderr = stderr;
      return chain;
    }
    pipeTo(implementation, source = 1) {
      const next = new Handle(this, implementation);
      const pipe = new PipeStream();
      next.pipe = pipe;
      next.stdout = this.stdout;
      next.stderr = this.stderr;
      if ((source & 1) === 1)
        this.stdout = pipe;
      else if (this.ancestor !== null)
        this.stderr = this.ancestor.stdout;
      if ((source & 2) === 2)
        this.stderr = pipe;
      else if (this.ancestor !== null)
        this.stderr = this.ancestor.stderr;
      return next;
    }
    async exec() {
      const stdio = [
        `ignore`,
        `ignore`,
        `ignore`
      ];
      if (this.pipe) {
        stdio[0] = `pipe`;
      } else {
        if (this.stdin === null) {
          throw new Error(`Assertion failed: No input stream registered`);
        } else {
          stdio[0] = this.stdin.get();
        }
      }
      let stdoutLock;
      if (this.stdout === null) {
        throw new Error(`Assertion failed: No output stream registered`);
      } else {
        stdoutLock = this.stdout;
        stdio[1] = stdoutLock.get();
      }
      let stderrLock;
      if (this.stderr === null) {
        throw new Error(`Assertion failed: No error stream registered`);
      } else {
        stderrLock = this.stderr;
        stdio[2] = stderrLock.get();
      }
      const child = this.implementation(stdio);
      if (this.pipe)
        this.pipe.attach(child.stdin);
      return await child.promise.then((code) => {
        stdoutLock.close();
        stderrLock.close();
        return code;
      });
    }
    async run() {
      const promises = [];
      for (let handle = this; handle; handle = handle.ancestor)
        promises.push(handle.exec());
      const exitCodes = await Promise.all(promises);
      return exitCodes[0];
    }
  };
  function start(p, opts) {
    return Handle.start(p, opts);
  }
  function createStreamReporter(reportFn, prefix = null) {
    const stream = new import_stream4.PassThrough();
    const decoder = new import_string_decoder2.StringDecoder();
    let buffer = ``;
    stream.on(`data`, (chunk) => {
      let chunkStr = decoder.write(chunk);
      let lineIndex;
      do {
        lineIndex = chunkStr.indexOf(`
`);
        if (lineIndex !== -1) {
          const line = buffer + chunkStr.substr(0, lineIndex);
          chunkStr = chunkStr.substr(lineIndex + 1);
          buffer = ``;
          if (prefix !== null) {
            reportFn(`${prefix} ${line}`);
          } else {
            reportFn(line);
          }
        }
      } while (lineIndex !== -1);
      buffer += chunkStr;
    });
    stream.on(`end`, () => {
      const last = decoder.end();
      if (last !== ``) {
        if (prefix !== null) {
          reportFn(`${prefix} ${last}`);
        } else {
          reportFn(last);
        }
      }
    });
    return stream;
  }
  function createOutputStreamsWithPrefix(state, {prefix}) {
    return {
      stdout: createStreamReporter((text) => state.stdout.write(`${text}
`), state.stdout.isTTY ? prefix : null),
      stderr: createStreamReporter((text) => state.stderr.write(`${text}
`), state.stderr.isTTY ? prefix : null)
    };
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-shell/sources/index.ts
  var setTimeoutPromise = (0, import_util3.promisify)(setTimeout);
  var StreamType;
  (function(StreamType2) {
    StreamType2[StreamType2["Readable"] = 1] = "Readable";
    StreamType2[StreamType2["Writable"] = 2] = "Writable";
  })(StreamType || (StreamType = {}));
  function getFileDescriptorStream(fd, type, state) {
    const stream = new import_stream5.PassThrough({autoDestroy: true});
    switch (fd) {
      case Pipe.STDIN:
        {
          if ((type & 1) === 1)
            state.stdin.pipe(stream, {end: false});
          if ((type & 2) === 2 && state.stdin instanceof import_stream5.Writable) {
            stream.pipe(state.stdin, {end: false});
          }
        }
        break;
      case Pipe.STDOUT:
        {
          if ((type & 1) === 1)
            state.stdout.pipe(stream, {end: false});
          if ((type & 2) === 2) {
            stream.pipe(state.stdout, {end: false});
          }
        }
        break;
      case Pipe.STDERR:
        {
          if ((type & 1) === 1)
            state.stderr.pipe(stream, {end: false});
          if ((type & 2) === 2) {
            stream.pipe(state.stderr, {end: false});
          }
        }
        break;
      default: {
        throw new ShellError(`Bad file descriptor: "${fd}"`);
      }
    }
    return stream;
  }
  function cloneState(state, mergeWith = {}) {
    const newState = __spreadValues(__spreadValues({}, state), mergeWith);
    newState.environment = __spreadValues(__spreadValues({}, state.environment), mergeWith.environment);
    newState.variables = __spreadValues(__spreadValues({}, state.variables), mergeWith.variables);
    return newState;
  }
  var BUILTINS = new Map([
    [`cd`, async ([target = (0, import_os4.homedir)(), ...rest], opts, state) => {
      const resolvedTarget = ppath.resolve(state.cwd, npath.toPortablePath(target));
      const stat = await opts.baseFs.statPromise(resolvedTarget);
      if (!stat.isDirectory()) {
        state.stderr.write(`cd: not a directory
`);
        return 1;
      } else {
        state.cwd = resolvedTarget;
        return 0;
      }
    }],
    [`pwd`, async (args, opts, state) => {
      state.stdout.write(`${npath.fromPortablePath(state.cwd)}
`);
      return 0;
    }],
    [`:`, async (args, opts, state) => {
      return 0;
    }],
    [`true`, async (args, opts, state) => {
      return 0;
    }],
    [`false`, async (args, opts, state) => {
      return 1;
    }],
    [`exit`, async ([code, ...rest], opts, state) => {
      return state.exitCode = parseInt(code != null ? code : state.variables[`?`], 10);
    }],
    [`echo`, async (args, opts, state) => {
      state.stdout.write(`${args.join(` `)}
`);
      return 0;
    }],
    [`sleep`, async ([time], opts, state) => {
      if (typeof time === `undefined`) {
        state.stderr.write(`sleep: missing operand
`);
        return 1;
      }
      const seconds = Number(time);
      if (Number.isNaN(seconds)) {
        state.stderr.write(`sleep: invalid time interval '${time}'
`);
        return 1;
      }
      return await setTimeoutPromise(1e3 * seconds, 0);
    }],
    [`__ysh_run_procedure`, async (args, opts, state) => {
      const procedure = state.procedures[args[0]];
      const exitCode = await start(procedure, {
        stdin: new ProtectedStream(state.stdin),
        stdout: new ProtectedStream(state.stdout),
        stderr: new ProtectedStream(state.stderr)
      }).run();
      return exitCode;
    }],
    [`__ysh_set_redirects`, async (args, opts, state) => {
      let stdin = state.stdin;
      let stdout = state.stdout;
      const stderr = state.stderr;
      const inputs = [];
      const outputs = [];
      let t5 = 0;
      while (args[t5] !== `--`) {
        const type = args[t5++];
        const count = Number(args[t5++]);
        const last = t5 + count;
        for (let u = t5; u < last; ++t5, ++u) {
          switch (type) {
            case `<`:
              {
                inputs.push(() => {
                  return opts.baseFs.createReadStream(ppath.resolve(state.cwd, npath.toPortablePath(args[u])));
                });
              }
              break;
            case `<<<`:
              {
                inputs.push(() => {
                  const input = new import_stream5.PassThrough();
                  process.nextTick(() => {
                    input.write(`${args[u]}
`);
                    input.end();
                  });
                  return input;
                });
              }
              break;
            case `<&`:
              {
                inputs.push(() => getFileDescriptorStream(Number(args[u]), 1, state));
              }
              break;
            case `>`:
            case `>>`:
              {
                const outputPath = ppath.resolve(state.cwd, npath.toPortablePath(args[u]));
                if (outputPath === `/dev/null`) {
                  outputs.push(new import_stream5.Writable({
                    autoDestroy: true,
                    emitClose: true,
                    write(chunk, encoding, callback) {
                      setImmediate(callback);
                    }
                  }));
                } else {
                  outputs.push(opts.baseFs.createWriteStream(outputPath, type === `>>` ? {flags: `a`} : void 0));
                }
              }
              break;
            case `>&`:
              {
                outputs.push(getFileDescriptorStream(Number(args[u]), 2, state));
              }
              break;
            default: {
              throw new Error(`Assertion failed: Unsupported redirection type: "${type}"`);
            }
          }
        }
      }
      if (inputs.length > 0) {
        const pipe = new import_stream5.PassThrough();
        stdin = pipe;
        const bindInput = (n) => {
          if (n === inputs.length) {
            pipe.end();
          } else {
            const input = inputs[n]();
            input.pipe(pipe, {end: false});
            input.on(`end`, () => {
              bindInput(n + 1);
            });
          }
        };
        bindInput(0);
      }
      if (outputs.length > 0) {
        const pipe = new import_stream5.PassThrough();
        stdout = pipe;
        for (const output of outputs) {
          pipe.pipe(output);
        }
      }
      const exitCode = await start(makeCommandAction(args.slice(t5 + 1), opts, state), {
        stdin: new ProtectedStream(stdin),
        stdout: new ProtectedStream(stdout),
        stderr: new ProtectedStream(stderr)
      }).run();
      await Promise.all(outputs.map((output) => {
        return new Promise((resolve, reject) => {
          output.on(`error`, (error) => {
            reject(error);
          });
          output.on(`close`, () => {
            resolve();
          });
          output.end();
        });
      }));
      return exitCode;
    }]
  ]);
  async function executeBufferedSubshell(ast, opts, state) {
    const chunks = [];
    const stdout = new import_stream5.PassThrough();
    stdout.on(`data`, (chunk) => chunks.push(chunk));
    await executeShellLine(ast, opts, cloneState(state, {stdout}));
    return Buffer.concat(chunks).toString().replace(/[\r\n]+$/, ``);
  }
  async function applyEnvVariables(environmentSegments, opts, state) {
    const envPromises = environmentSegments.map(async (envSegment) => {
      const interpolatedArgs = await interpolateArguments(envSegment.args, opts, state);
      return {
        name: envSegment.name,
        value: interpolatedArgs.join(` `)
      };
    });
    const interpolatedEnvs = await Promise.all(envPromises);
    return interpolatedEnvs.reduce((envs, env) => {
      envs[env.name] = env.value;
      return envs;
    }, {});
  }
  function split(raw) {
    return raw.match(/[^ \r\n\t]+/g) || [];
  }
  async function evaluateVariable(segment, opts, state, push, pushAndClose = push) {
    switch (segment.name) {
      case `$`:
        {
          push(String(process.pid));
        }
        break;
      case `#`:
        {
          push(String(opts.args.length));
        }
        break;
      case `@`:
        {
          if (segment.quoted) {
            for (const raw of opts.args) {
              pushAndClose(raw);
            }
          } else {
            for (const raw of opts.args) {
              const parts = split(raw);
              for (let t5 = 0; t5 < parts.length - 1; ++t5)
                pushAndClose(parts[t5]);
              push(parts[parts.length - 1]);
            }
          }
        }
        break;
      case `*`:
        {
          const raw = opts.args.join(` `);
          if (segment.quoted) {
            push(raw);
          } else {
            for (const part of split(raw)) {
              pushAndClose(part);
            }
          }
        }
        break;
      case `PPID`:
        {
          push(String(process.ppid));
        }
        break;
      case `RANDOM`:
        {
          push(String(Math.floor(Math.random() * 32768)));
        }
        break;
      default:
        {
          const argIndex = parseInt(segment.name, 10);
          if (Number.isFinite(argIndex)) {
            if (argIndex >= 0 && argIndex < opts.args.length) {
              push(opts.args[argIndex]);
            } else if (segment.defaultValue) {
              push((await interpolateArguments(segment.defaultValue, opts, state)).join(` `));
            } else {
              throw new ShellError(`Unbound argument #${argIndex}`);
            }
          } else {
            if (Object.prototype.hasOwnProperty.call(state.variables, segment.name)) {
              push(state.variables[segment.name]);
            } else if (Object.prototype.hasOwnProperty.call(state.environment, segment.name)) {
              push(state.environment[segment.name]);
            } else if (segment.defaultValue) {
              push((await interpolateArguments(segment.defaultValue, opts, state)).join(` `));
            } else {
              throw new ShellError(`Unbound variable "${segment.name}"`);
            }
          }
        }
        break;
    }
  }
  var operators = {
    addition: (left, right) => left + right,
    subtraction: (left, right) => left - right,
    multiplication: (left, right) => left * right,
    division: (left, right) => Math.trunc(left / right)
  };
  async function evaluateArithmetic(arithmetic, opts, state) {
    if (arithmetic.type === `number`) {
      if (!Number.isInteger(arithmetic.value)) {
        throw new Error(`Invalid number: "${arithmetic.value}", only integers are allowed`);
      } else {
        return arithmetic.value;
      }
    } else if (arithmetic.type === `variable`) {
      const parts = [];
      await evaluateVariable(__spreadProps(__spreadValues({}, arithmetic), {quoted: true}), opts, state, (result) => parts.push(result));
      const number = Number(parts.join(` `));
      if (Number.isNaN(number)) {
        return evaluateArithmetic({type: `variable`, name: parts.join(` `)}, opts, state);
      } else {
        return evaluateArithmetic({type: `number`, value: number}, opts, state);
      }
    } else {
      return operators[arithmetic.type](await evaluateArithmetic(arithmetic.left, opts, state), await evaluateArithmetic(arithmetic.right, opts, state));
    }
  }
  async function interpolateArguments(commandArgs, opts, state) {
    const redirections = new Map();
    const interpolated = [];
    let interpolatedSegments = [];
    const push = (segment) => {
      interpolatedSegments.push(segment);
    };
    const close = () => {
      if (interpolatedSegments.length > 0)
        interpolated.push(interpolatedSegments.join(``));
      interpolatedSegments = [];
    };
    const pushAndClose = (segment) => {
      push(segment);
      close();
    };
    const redirect = (type, target) => {
      let targets = redirections.get(type);
      if (typeof targets === `undefined`)
        redirections.set(type, targets = []);
      targets.push(target);
    };
    for (const commandArg of commandArgs) {
      let isGlob = false;
      switch (commandArg.type) {
        case `redirection`:
          {
            const interpolatedArgs = await interpolateArguments(commandArg.args, opts, state);
            for (const interpolatedArg of interpolatedArgs) {
              redirect(commandArg.subtype, interpolatedArg);
            }
          }
          break;
        case `argument`:
          {
            for (const segment of commandArg.segments) {
              switch (segment.type) {
                case `text`:
                  {
                    push(segment.text);
                  }
                  break;
                case `glob`:
                  {
                    push(segment.pattern);
                    isGlob = true;
                  }
                  break;
                case `shell`:
                  {
                    const raw = await executeBufferedSubshell(segment.shell, opts, state);
                    if (segment.quoted) {
                      push(raw);
                    } else {
                      const parts = split(raw);
                      for (let t5 = 0; t5 < parts.length - 1; ++t5)
                        pushAndClose(parts[t5]);
                      push(parts[parts.length - 1]);
                    }
                  }
                  break;
                case `variable`:
                  {
                    await evaluateVariable(segment, opts, state, push, pushAndClose);
                  }
                  break;
                case `arithmetic`:
                  {
                    push(String(await evaluateArithmetic(segment.arithmetic, opts, state)));
                  }
                  break;
              }
            }
          }
          break;
      }
      close();
      if (isGlob) {
        const pattern = interpolated.pop();
        if (typeof pattern === `undefined`)
          throw new Error(`Assertion failed: Expected a glob pattern to have been set`);
        const matches = await opts.glob.match(pattern, {cwd: state.cwd, baseFs: opts.baseFs});
        if (matches.length === 0) {
          const braceExpansionNotice = isBraceExpansion(pattern) ? `. Note: Brace expansion of arbitrary strings isn't currently supported. For more details, please read this issue: https://github.com/yarnpkg/berry/issues/22` : ``;
          throw new ShellError(`No matches found: "${pattern}"${braceExpansionNotice}`);
        }
        for (const match2 of matches.sort()) {
          pushAndClose(match2);
        }
      }
    }
    if (redirections.size > 0) {
      const redirectionArgs = [];
      for (const [subtype, targets] of redirections.entries())
        redirectionArgs.splice(redirectionArgs.length, 0, subtype, String(targets.length), ...targets);
      interpolated.splice(0, 0, `__ysh_set_redirects`, ...redirectionArgs, `--`);
    }
    return interpolated;
  }
  function makeCommandAction(args, opts, state) {
    if (!opts.builtins.has(args[0]))
      args = [`command`, ...args];
    const nativeCwd = npath.fromPortablePath(state.cwd);
    let env = state.environment;
    if (typeof env.PWD !== `undefined`)
      env = __spreadProps(__spreadValues({}, env), {PWD: nativeCwd});
    const [name, ...rest] = args;
    if (name === `command`) {
      return makeProcess(rest[0], rest.slice(1), opts, {
        cwd: nativeCwd,
        env
      });
    }
    const builtin = opts.builtins.get(name);
    if (typeof builtin === `undefined`)
      throw new Error(`Assertion failed: A builtin should exist for "${name}"`);
    return makeBuiltin(async ({stdin, stdout, stderr}) => {
      state.stdin = stdin;
      state.stdout = stdout;
      state.stderr = stderr;
      return await builtin(rest, opts, state);
    });
  }
  function makeSubshellAction(ast, opts, state) {
    return (stdio) => {
      const stdin = new import_stream5.PassThrough();
      const promise = executeShellLine(ast, opts, cloneState(state, {stdin}));
      return {stdin, promise};
    };
  }
  function makeGroupAction(ast, opts, state) {
    return (stdio) => {
      const stdin = new import_stream5.PassThrough();
      const promise = executeShellLine(ast, opts, state);
      return {stdin, promise};
    };
  }
  function makeActionFromProcedure(procedure, args, opts, activeState) {
    if (args.length === 0) {
      return procedure;
    } else {
      let key;
      do {
        key = String(Math.random());
      } while (Object.prototype.hasOwnProperty.call(activeState.procedures, key));
      activeState.procedures = __spreadValues({}, activeState.procedures);
      activeState.procedures[key] = procedure;
      return makeCommandAction([...args, `__ysh_run_procedure`, key], opts, activeState);
    }
  }
  async function executeCommandChainImpl(node, opts, state) {
    let current = node;
    let pipeType = null;
    let execution = null;
    while (current) {
      const activeState = current.then ? __spreadValues({}, state) : state;
      let action;
      switch (current.type) {
        case `command`:
          {
            const args = await interpolateArguments(current.args, opts, state);
            const environment = await applyEnvVariables(current.envs, opts, state);
            action = current.envs.length ? makeCommandAction(args, opts, cloneState(activeState, {environment})) : makeCommandAction(args, opts, activeState);
          }
          break;
        case `subshell`:
          {
            const args = await interpolateArguments(current.args, opts, state);
            const procedure = makeSubshellAction(current.subshell, opts, activeState);
            action = makeActionFromProcedure(procedure, args, opts, activeState);
          }
          break;
        case `group`:
          {
            const args = await interpolateArguments(current.args, opts, state);
            const procedure = makeGroupAction(current.group, opts, activeState);
            action = makeActionFromProcedure(procedure, args, opts, activeState);
          }
          break;
        case `envs`:
          {
            const environment = await applyEnvVariables(current.envs, opts, state);
            activeState.environment = __spreadValues(__spreadValues({}, activeState.environment), environment);
            action = makeCommandAction([`true`], opts, activeState);
          }
          break;
      }
      if (typeof action === `undefined`)
        throw new Error(`Assertion failed: An action should have been generated`);
      if (pipeType === null) {
        execution = start(action, {
          stdin: new ProtectedStream(activeState.stdin),
          stdout: new ProtectedStream(activeState.stdout),
          stderr: new ProtectedStream(activeState.stderr)
        });
      } else {
        if (execution === null)
          throw new Error(`Assertion failed: The execution pipeline should have been setup`);
        switch (pipeType) {
          case `|`:
            {
              execution = execution.pipeTo(action, Pipe.STDOUT);
            }
            break;
          case `|&`:
            {
              execution = execution.pipeTo(action, Pipe.STDOUT | Pipe.STDERR);
            }
            break;
        }
      }
      if (current.then) {
        pipeType = current.then.type;
        current = current.then.chain;
      } else {
        current = null;
      }
    }
    if (execution === null)
      throw new Error(`Assertion failed: The execution pipeline should have been setup`);
    return await execution.run();
  }
  async function executeCommandChain(node, opts, state, {background = false} = {}) {
    function getColorizer(index) {
      const colors2 = [`#2E86AB`, `#A23B72`, `#F18F01`, `#C73E1D`, `#CCE2A3`];
      const colorName = colors2[index % colors2.length];
      return import_chalk2.default.hex(colorName);
    }
    if (background) {
      const index = state.nextBackgroundJobIndex++;
      const colorizer = getColorizer(index);
      const rawPrefix = `[${index}]`;
      const prefix = colorizer(rawPrefix);
      const {stdout, stderr} = createOutputStreamsWithPrefix(state, {prefix});
      state.backgroundJobs.push(executeCommandChainImpl(node, opts, cloneState(state, {stdout, stderr})).catch((error) => stderr.write(`${error.message}
`)).finally(() => {
        if (state.stdout.isTTY) {
          state.stdout.write(`Job ${prefix}, '${colorizer(stringifyCommandChain(node))}' has ended
`);
        }
      }));
      return 0;
    }
    return await executeCommandChainImpl(node, opts, state);
  }
  async function executeCommandLine(node, opts, state, {background = false} = {}) {
    let code;
    const setCode = (newCode) => {
      code = newCode;
      state.variables[`?`] = String(newCode);
    };
    const executeChain = async (line) => {
      try {
        return await executeCommandChain(line.chain, opts, state, {background: background && typeof line.then === `undefined`});
      } catch (error) {
        if (!(error instanceof ShellError))
          throw error;
        state.stderr.write(`${error.message}
`);
        return 1;
      }
    };
    setCode(await executeChain(node));
    while (node.then) {
      if (state.exitCode !== null)
        return state.exitCode;
      switch (node.then.type) {
        case `&&`:
          {
            if (code === 0) {
              setCode(await executeChain(node.then.line));
            }
          }
          break;
        case `||`:
          {
            if (code !== 0) {
              setCode(await executeChain(node.then.line));
            }
          }
          break;
        default:
          {
            throw new Error(`Assertion failed: Unsupported command type: "${node.then.type}"`);
          }
          break;
      }
      node = node.then.line;
    }
    return code;
  }
  async function executeShellLine(node, opts, state) {
    const originalBackgroundJobs = state.backgroundJobs;
    state.backgroundJobs = [];
    let rightMostExitCode = 0;
    for (const {command, type} of node) {
      rightMostExitCode = await executeCommandLine(command, opts, state, {background: type === `&`});
      if (state.exitCode !== null)
        return state.exitCode;
      state.variables[`?`] = String(rightMostExitCode);
    }
    await Promise.all(state.backgroundJobs);
    state.backgroundJobs = originalBackgroundJobs;
    return rightMostExitCode;
  }
  function locateArgsVariableInSegment(segment) {
    switch (segment.type) {
      case `variable`:
        {
          return segment.name === `@` || segment.name === `#` || segment.name === `*` || Number.isFinite(parseInt(segment.name, 10)) || `defaultValue` in segment && !!segment.defaultValue && segment.defaultValue.some((arg) => locateArgsVariableInArgument(arg));
        }
        break;
      case `arithmetic`:
        {
          return locateArgsVariableInArithmetic(segment.arithmetic);
        }
        break;
      case `shell`:
        {
          return locateArgsVariable(segment.shell);
        }
        break;
      default:
        {
          return false;
        }
        break;
    }
  }
  function locateArgsVariableInArgument(arg) {
    switch (arg.type) {
      case `redirection`:
        {
          return arg.args.some((arg2) => locateArgsVariableInArgument(arg2));
        }
        break;
      case `argument`:
        {
          return arg.segments.some((segment) => locateArgsVariableInSegment(segment));
        }
        break;
      default:
        throw new Error(`Assertion failed: Unsupported argument type: "${arg.type}"`);
    }
  }
  function locateArgsVariableInArithmetic(arg) {
    switch (arg.type) {
      case `variable`:
        {
          return locateArgsVariableInSegment(arg);
        }
        break;
      case `number`:
        {
          return false;
        }
        break;
      default:
        return locateArgsVariableInArithmetic(arg.left) || locateArgsVariableInArithmetic(arg.right);
    }
  }
  function locateArgsVariable(node) {
    return node.some(({command}) => {
      while (command) {
        let chain = command.chain;
        while (chain) {
          let hasArgs;
          switch (chain.type) {
            case `subshell`:
              {
                hasArgs = locateArgsVariable(chain.subshell);
              }
              break;
            case `command`:
              {
                hasArgs = chain.envs.some((env) => env.args.some((arg) => {
                  return locateArgsVariableInArgument(arg);
                })) || chain.args.some((arg) => {
                  return locateArgsVariableInArgument(arg);
                });
              }
              break;
          }
          if (hasArgs)
            return true;
          if (!chain.then)
            break;
          chain = chain.then.chain;
        }
        if (!command.then)
          break;
        command = command.then.line;
      }
      return false;
    });
  }
  async function execute2(command, args = [], {
    baseFs = new NodeFS(),
    builtins = {},
    cwd = npath.toPortablePath(process.cwd()),
    env = process.env,
    stdin = process.stdin,
    stdout = process.stdout,
    stderr = process.stderr,
    variables = {},
    glob = globUtils_exports
  } = {}) {
    const normalizedEnv = {};
    for (const [key, value] of Object.entries(env))
      if (typeof value !== `undefined`)
        normalizedEnv[key] = value;
    const normalizedBuiltins = new Map(BUILTINS);
    for (const [key, builtin] of Object.entries(builtins))
      normalizedBuiltins.set(key, builtin);
    if (stdin === null) {
      stdin = new import_stream5.PassThrough();
      stdin.end();
    }
    const ast = parseShell(command, glob);
    if (!locateArgsVariable(ast) && ast.length > 0 && args.length > 0) {
      let {command: command2} = ast[ast.length - 1];
      while (command2.then)
        command2 = command2.then.line;
      let chain = command2.chain;
      while (chain.then)
        chain = chain.then.chain;
      if (chain.type === `command`) {
        chain.args = chain.args.concat(args.map((arg) => {
          return {
            type: `argument`,
            segments: [{
              type: `text`,
              text: arg
            }]
          };
        }));
      }
    }
    return await executeShellLine(ast, {
      args,
      baseFs,
      builtins: normalizedBuiltins,
      initialStdin: stdin,
      initialStdout: stdout,
      initialStderr: stderr,
      glob
    }, {
      cwd,
      environment: normalizedEnv,
      exitCode: null,
      procedures: {},
      stdin,
      stdout,
      stderr,
      variables: Object.assign({}, variables, {
        [`?`]: 0
      }),
      nextBackgroundJobIndex: 1,
      backgroundJobs: []
    });
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/scriptUtils.ts
  var import_capitalize = __toModule(require_capitalize());
  var import_p_limit = __toModule(require_p_limit());
  var import_stream6 = __toModule(require("stream"));

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/Manifest.ts
  var import_semver4 = __toModule(require_semver2());

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/semverUtils.ts
  var semverUtils_exports = {};
  __export(semverUtils_exports, {
    SemVer: () => import_semver3.SemVer,
    satisfiesWithPrereleases: () => satisfiesWithPrereleases,
    validRange: () => validRange
  });
  var import_semver2 = __toModule(require_semver2());
  var import_semver3 = __toModule(require_semver2());
  var satisfiesWithPrereleasesCache = new Map();
  function satisfiesWithPrereleases(version, range, loose = false) {
    if (!version)
      return false;
    const key = `${range}${loose}`;
    let semverRange = satisfiesWithPrereleasesCache.get(key);
    if (typeof semverRange === `undefined`) {
      try {
        semverRange = new import_semver2.default.Range(range, {includePrerelease: true, loose});
      } catch {
        return false;
      } finally {
        satisfiesWithPrereleasesCache.set(key, semverRange || null);
      }
    } else if (semverRange === null) {
      return false;
    }
    let semverVersion;
    try {
      semverVersion = new import_semver2.default.SemVer(version, semverRange);
      if (semverVersion.prerelease) {
        semverVersion.prerelease = [];
      }
    } catch (err) {
      return false;
    }
    return semverRange.set.some((comparatorSet) => {
      for (const comparator of comparatorSet)
        if (comparator.semver.prerelease)
          comparator.semver.prerelease = [];
      return comparatorSet.every((comparator) => {
        return comparator.test(semverVersion);
      });
    });
  }
  var rangesCache = new Map();
  function validRange(potentialRange) {
    if (potentialRange.indexOf(`:`) !== -1)
      return null;
    let range = rangesCache.get(potentialRange);
    if (typeof range !== `undefined`)
      return range;
    try {
      range = new import_semver2.default.Range(potentialRange);
    } catch {
      range = null;
    }
    rangesCache.set(potentialRange, range);
    return range;
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/Manifest.ts
  var _a;
  var _Manifest = class {
    constructor() {
      this.indent = `  `;
      this.name = null;
      this.version = null;
      this.os = null;
      this.cpu = null;
      this.type = null;
      this[_a] = false;
      this.license = null;
      this.main = null;
      this.module = null;
      this.browser = null;
      this.languageName = null;
      this.bin = new Map();
      this.scripts = new Map();
      this.dependencies = new Map();
      this.devDependencies = new Map();
      this.peerDependencies = new Map();
      this.workspaceDefinitions = [];
      this.dependenciesMeta = new Map();
      this.peerDependenciesMeta = new Map();
      this.resolutions = [];
      this.files = null;
      this.publishConfig = null;
      this.installConfig = null;
      this.preferUnplugged = null;
      this.raw = {};
      this.errors = [];
    }
    static async tryFind(path3, {baseFs = new NodeFS()} = {}) {
      const manifestPath = ppath.join(path3, `package.json`);
      if (!await baseFs.existsPromise(manifestPath))
        return null;
      return await _Manifest.fromFile(manifestPath, {baseFs});
    }
    static async find(path3, {baseFs} = {}) {
      const manifest = await _Manifest.tryFind(path3, {baseFs});
      if (manifest === null)
        throw new Error(`Manifest not found`);
      return manifest;
    }
    static async fromFile(path3, {baseFs = new NodeFS()} = {}) {
      const manifest = new _Manifest();
      await manifest.loadFile(path3, {baseFs});
      return manifest;
    }
    static fromText(text) {
      const manifest = new _Manifest();
      manifest.loadFromText(text);
      return manifest;
    }
    static isManifestFieldCompatible(rules, actual) {
      if (rules === null)
        return true;
      let isNotOnAllowlist = true;
      let isOnDenylist = false;
      for (const rule of rules) {
        if (rule[0] === `!`) {
          isOnDenylist = true;
          if (actual === rule.slice(1)) {
            return false;
          }
        } else {
          isNotOnAllowlist = false;
          if (rule === actual) {
            return true;
          }
        }
      }
      return isOnDenylist && isNotOnAllowlist;
    }
    loadFromText(text) {
      let data;
      try {
        data = JSON.parse(stripBOM(text) || `{}`);
      } catch (error) {
        error.message += ` (when parsing ${text})`;
        throw error;
      }
      this.load(data);
      this.indent = getIndent(text);
    }
    async loadFile(path3, {baseFs = new NodeFS()}) {
      const content = await baseFs.readFilePromise(path3, `utf8`);
      let data;
      try {
        data = JSON.parse(stripBOM(content) || `{}`);
      } catch (error) {
        error.message += ` (when parsing ${path3})`;
        throw error;
      }
      this.load(data);
      this.indent = getIndent(content);
    }
    load(data, {yamlCompatibilityMode = false} = {}) {
      if (typeof data !== `object` || data === null)
        throw new Error(`Utterly invalid manifest data (${data})`);
      this.raw = data;
      const errors4 = [];
      this.name = null;
      if (typeof data.name === `string`) {
        try {
          this.name = parseIdent(data.name);
        } catch (error) {
          errors4.push(new Error(`Parsing failed for the 'name' field`));
        }
      }
      if (typeof data.version === `string`)
        this.version = data.version;
      else
        this.version = null;
      if (Array.isArray(data.os)) {
        const os2 = [];
        this.os = os2;
        for (const item of data.os) {
          if (typeof item !== `string`) {
            errors4.push(new Error(`Parsing failed for the 'os' field`));
          } else {
            os2.push(item);
          }
        }
      } else {
        this.os = null;
      }
      if (Array.isArray(data.cpu)) {
        const cpu = [];
        this.cpu = cpu;
        for (const item of data.cpu) {
          if (typeof item !== `string`) {
            errors4.push(new Error(`Parsing failed for the 'cpu' field`));
          } else {
            cpu.push(item);
          }
        }
      } else {
        this.cpu = null;
      }
      if (typeof data.type === `string`)
        this.type = data.type;
      else
        this.type = null;
      if (typeof data.private === `boolean`)
        this.private = data.private;
      else
        this.private = false;
      if (typeof data.license === `string`)
        this.license = data.license;
      else
        this.license = null;
      if (typeof data.languageName === `string`)
        this.languageName = data.languageName;
      else
        this.languageName = null;
      if (typeof data.main === `string`)
        this.main = normalizeSlashes(data.main);
      else
        this.main = null;
      if (typeof data.module === `string`)
        this.module = normalizeSlashes(data.module);
      else
        this.module = null;
      if (data.browser != null) {
        if (typeof data.browser === `string`) {
          this.browser = normalizeSlashes(data.browser);
        } else {
          this.browser = new Map();
          for (const [key, value] of Object.entries(data.browser)) {
            this.browser.set(normalizeSlashes(key), typeof value === `string` ? normalizeSlashes(value) : value);
          }
        }
      } else {
        this.browser = null;
      }
      this.bin = new Map();
      if (typeof data.bin === `string`) {
        if (this.name !== null) {
          this.bin.set(this.name.name, normalizeSlashes(data.bin));
        } else {
          errors4.push(new Error(`String bin field, but no attached package name`));
        }
      } else if (typeof data.bin === `object` && data.bin !== null) {
        for (const [key, value] of Object.entries(data.bin)) {
          if (typeof value !== `string`) {
            errors4.push(new Error(`Invalid bin definition for '${key}'`));
            continue;
          }
          this.bin.set(key, normalizeSlashes(value));
        }
      }
      this.scripts = new Map();
      if (typeof data.scripts === `object` && data.scripts !== null) {
        for (const [key, value] of Object.entries(data.scripts)) {
          if (typeof value !== `string`) {
            errors4.push(new Error(`Invalid script definition for '${key}'`));
            continue;
          }
          this.scripts.set(key, value);
        }
      }
      this.dependencies = new Map();
      if (typeof data.dependencies === `object` && data.dependencies !== null) {
        for (const [name, range] of Object.entries(data.dependencies)) {
          if (typeof range !== `string`) {
            errors4.push(new Error(`Invalid dependency range for '${name}'`));
            continue;
          }
          let ident;
          try {
            ident = parseIdent(name);
          } catch (error) {
            errors4.push(new Error(`Parsing failed for the dependency name '${name}'`));
            continue;
          }
          const descriptor = makeDescriptor(ident, range);
          this.dependencies.set(descriptor.identHash, descriptor);
        }
      }
      this.devDependencies = new Map();
      if (typeof data.devDependencies === `object` && data.devDependencies !== null) {
        for (const [name, range] of Object.entries(data.devDependencies)) {
          if (typeof range !== `string`) {
            errors4.push(new Error(`Invalid dependency range for '${name}'`));
            continue;
          }
          let ident;
          try {
            ident = parseIdent(name);
          } catch (error) {
            errors4.push(new Error(`Parsing failed for the dependency name '${name}'`));
            continue;
          }
          const descriptor = makeDescriptor(ident, range);
          this.devDependencies.set(descriptor.identHash, descriptor);
        }
      }
      this.peerDependencies = new Map();
      if (typeof data.peerDependencies === `object` && data.peerDependencies !== null) {
        for (let [name, range] of Object.entries(data.peerDependencies)) {
          let ident;
          try {
            ident = parseIdent(name);
          } catch (error) {
            errors4.push(new Error(`Parsing failed for the dependency name '${name}'`));
            continue;
          }
          if (typeof range !== `string` || !validRange(range)) {
            errors4.push(new Error(`Invalid dependency range for '${name}'`));
            range = `*`;
          }
          const descriptor = makeDescriptor(ident, range);
          this.peerDependencies.set(descriptor.identHash, descriptor);
        }
      }
      if (typeof data.workspaces === `object` && data.workspaces.nohoist)
        errors4.push(new Error(`'nohoist' is deprecated, please use 'installConfig.hoistingLimits' instead`));
      const workspaces = Array.isArray(data.workspaces) ? data.workspaces : typeof data.workspaces === `object` && data.workspaces !== null && Array.isArray(data.workspaces.packages) ? data.workspaces.packages : [];
      this.workspaceDefinitions = [];
      for (const entry of workspaces) {
        if (typeof entry !== `string`) {
          errors4.push(new Error(`Invalid workspace definition for '${entry}'`));
          continue;
        }
        this.workspaceDefinitions.push({
          pattern: entry
        });
      }
      this.dependenciesMeta = new Map();
      if (typeof data.dependenciesMeta === `object` && data.dependenciesMeta !== null) {
        for (const [pattern, meta] of Object.entries(data.dependenciesMeta)) {
          if (typeof meta !== `object` || meta === null) {
            errors4.push(new Error(`Invalid meta field for '${pattern}`));
            continue;
          }
          const descriptor = parseDescriptor(pattern);
          const dependencyMeta = this.ensureDependencyMeta(descriptor);
          const built = tryParseOptionalBoolean2(meta.built, {yamlCompatibilityMode});
          if (built === null) {
            errors4.push(new Error(`Invalid built meta field for '${pattern}'`));
            continue;
          }
          const optional = tryParseOptionalBoolean2(meta.optional, {yamlCompatibilityMode});
          if (optional === null) {
            errors4.push(new Error(`Invalid optional meta field for '${pattern}'`));
            continue;
          }
          const unplugged = tryParseOptionalBoolean2(meta.unplugged, {yamlCompatibilityMode});
          if (unplugged === null) {
            errors4.push(new Error(`Invalid unplugged meta field for '${pattern}'`));
            continue;
          }
          Object.assign(dependencyMeta, {built, optional, unplugged});
        }
      }
      this.peerDependenciesMeta = new Map();
      if (typeof data.peerDependenciesMeta === `object` && data.peerDependenciesMeta !== null) {
        for (const [pattern, meta] of Object.entries(data.peerDependenciesMeta)) {
          if (typeof meta !== `object` || meta === null) {
            errors4.push(new Error(`Invalid meta field for '${pattern}'`));
            continue;
          }
          const descriptor = parseDescriptor(pattern);
          const peerDependencyMeta = this.ensurePeerDependencyMeta(descriptor);
          const optional = tryParseOptionalBoolean2(meta.optional, {yamlCompatibilityMode});
          if (optional === null) {
            errors4.push(new Error(`Invalid optional meta field for '${pattern}'`));
            continue;
          }
          Object.assign(peerDependencyMeta, {optional});
        }
      }
      this.resolutions = [];
      if (typeof data.resolutions === `object` && data.resolutions !== null) {
        for (const [pattern, reference] of Object.entries(data.resolutions)) {
          if (typeof reference !== `string`) {
            errors4.push(new Error(`Invalid resolution entry for '${pattern}'`));
            continue;
          }
          try {
            this.resolutions.push({pattern: parseResolution(pattern), reference});
          } catch (error) {
            errors4.push(error);
            continue;
          }
        }
      }
      if (Array.isArray(data.files)) {
        this.files = new Set();
        for (const filename of data.files) {
          if (typeof filename !== `string`) {
            errors4.push(new Error(`Invalid files entry for '${filename}'`));
            continue;
          }
          this.files.add(filename);
        }
      } else {
        this.files = null;
      }
      if (typeof data.publishConfig === `object` && data.publishConfig !== null) {
        this.publishConfig = {};
        if (typeof data.publishConfig.access === `string`)
          this.publishConfig.access = data.publishConfig.access;
        if (typeof data.publishConfig.main === `string`)
          this.publishConfig.main = normalizeSlashes(data.publishConfig.main);
        if (typeof data.publishConfig.module === `string`)
          this.publishConfig.module = normalizeSlashes(data.publishConfig.module);
        if (data.publishConfig.browser != null) {
          if (typeof data.publishConfig.browser === `string`) {
            this.publishConfig.browser = normalizeSlashes(data.publishConfig.browser);
          } else {
            this.publishConfig.browser = new Map();
            for (const [key, value] of Object.entries(data.publishConfig.browser)) {
              this.publishConfig.browser.set(normalizeSlashes(key), typeof value === `string` ? normalizeSlashes(value) : value);
            }
          }
        }
        if (typeof data.publishConfig.registry === `string`)
          this.publishConfig.registry = data.publishConfig.registry;
        if (typeof data.publishConfig.bin === `string`) {
          if (this.name !== null) {
            this.publishConfig.bin = new Map([[this.name.name, normalizeSlashes(data.publishConfig.bin)]]);
          } else {
            errors4.push(new Error(`String bin field, but no attached package name`));
          }
        } else if (typeof data.publishConfig.bin === `object` && data.publishConfig.bin !== null) {
          this.publishConfig.bin = new Map();
          for (const [key, value] of Object.entries(data.publishConfig.bin)) {
            if (typeof value !== `string`) {
              errors4.push(new Error(`Invalid bin definition for '${key}'`));
              continue;
            }
            this.publishConfig.bin.set(key, normalizeSlashes(value));
          }
        }
        if (Array.isArray(data.publishConfig.executableFiles)) {
          this.publishConfig.executableFiles = new Set();
          for (const value of data.publishConfig.executableFiles) {
            if (typeof value !== `string`) {
              errors4.push(new Error(`Invalid executable file definition`));
              continue;
            }
            this.publishConfig.executableFiles.add(normalizeSlashes(value));
          }
        }
      } else {
        this.publishConfig = null;
      }
      if (typeof data.installConfig === `object` && data.installConfig !== null) {
        this.installConfig = {};
        for (const key of Object.keys(data.installConfig)) {
          if (key === `hoistingLimits`) {
            if (typeof data.installConfig.hoistingLimits === `string`) {
              this.installConfig.hoistingLimits = data.installConfig.hoistingLimits;
            } else {
              errors4.push(new Error(`Invalid hoisting limits definition`));
            }
          } else {
            errors4.push(new Error(`Unrecognized installConfig key: ${key}`));
          }
        }
      } else {
        this.installConfig = null;
      }
      if (typeof data.optionalDependencies === `object` && data.optionalDependencies !== null) {
        for (const [name, range] of Object.entries(data.optionalDependencies)) {
          if (typeof range !== `string`) {
            errors4.push(new Error(`Invalid dependency range for '${name}'`));
            continue;
          }
          let ident;
          try {
            ident = parseIdent(name);
          } catch (error) {
            errors4.push(new Error(`Parsing failed for the dependency name '${name}'`));
            continue;
          }
          const realDescriptor = makeDescriptor(ident, range);
          this.dependencies.set(realDescriptor.identHash, realDescriptor);
          const identDescriptor = makeDescriptor(ident, `unknown`);
          const dependencyMeta = this.ensureDependencyMeta(identDescriptor);
          Object.assign(dependencyMeta, {optional: true});
        }
      }
      if (typeof data.preferUnplugged === `boolean`)
        this.preferUnplugged = data.preferUnplugged;
      else
        this.preferUnplugged = null;
      this.errors = errors4;
    }
    getForScope(type) {
      switch (type) {
        case `dependencies`:
          return this.dependencies;
        case `devDependencies`:
          return this.devDependencies;
        case `peerDependencies`:
          return this.peerDependencies;
        default: {
          throw new Error(`Unsupported value ("${type}")`);
        }
      }
    }
    hasConsumerDependency(ident) {
      if (this.dependencies.has(ident.identHash))
        return true;
      if (this.peerDependencies.has(ident.identHash))
        return true;
      return false;
    }
    hasHardDependency(ident) {
      if (this.dependencies.has(ident.identHash))
        return true;
      if (this.devDependencies.has(ident.identHash))
        return true;
      return false;
    }
    hasSoftDependency(ident) {
      if (this.peerDependencies.has(ident.identHash))
        return true;
      return false;
    }
    hasDependency(ident) {
      if (this.hasHardDependency(ident))
        return true;
      if (this.hasSoftDependency(ident))
        return true;
      return false;
    }
    isCompatibleWithOS(os2) {
      return _Manifest.isManifestFieldCompatible(this.os, os2);
    }
    isCompatibleWithCPU(cpu) {
      return _Manifest.isManifestFieldCompatible(this.cpu, cpu);
    }
    ensureDependencyMeta(descriptor) {
      if (descriptor.range !== `unknown` && !import_semver4.default.valid(descriptor.range))
        throw new Error(`Invalid meta field range for '${stringifyDescriptor(descriptor)}'`);
      const identString = stringifyIdent(descriptor);
      const range = descriptor.range !== `unknown` ? descriptor.range : null;
      let dependencyMetaSet = this.dependenciesMeta.get(identString);
      if (!dependencyMetaSet)
        this.dependenciesMeta.set(identString, dependencyMetaSet = new Map());
      let dependencyMeta = dependencyMetaSet.get(range);
      if (!dependencyMeta)
        dependencyMetaSet.set(range, dependencyMeta = {});
      return dependencyMeta;
    }
    ensurePeerDependencyMeta(descriptor) {
      if (descriptor.range !== `unknown`)
        throw new Error(`Invalid meta field range for '${stringifyDescriptor(descriptor)}'`);
      const identString = stringifyIdent(descriptor);
      let peerDependencyMeta = this.peerDependenciesMeta.get(identString);
      if (!peerDependencyMeta)
        this.peerDependenciesMeta.set(identString, peerDependencyMeta = {});
      return peerDependencyMeta;
    }
    setRawField(name, value, {after = []} = {}) {
      const afterSet = new Set(after.filter((key) => {
        return Object.prototype.hasOwnProperty.call(this.raw, key);
      }));
      if (afterSet.size === 0 || Object.prototype.hasOwnProperty.call(this.raw, name)) {
        this.raw[name] = value;
      } else {
        const oldRaw = this.raw;
        const newRaw = this.raw = {};
        let inserted = false;
        for (const key of Object.keys(oldRaw)) {
          newRaw[key] = oldRaw[key];
          if (!inserted) {
            afterSet.delete(key);
            if (afterSet.size === 0) {
              newRaw[name] = value;
              inserted = true;
            }
          }
        }
      }
    }
    exportTo(data, {compatibilityMode = true} = {}) {
      Object.assign(data, this.raw);
      if (this.name !== null)
        data.name = stringifyIdent(this.name);
      else
        delete data.name;
      if (this.version !== null)
        data.version = this.version;
      else
        delete data.version;
      if (this.os !== null)
        data.os = this.os;
      else
        delete data.os;
      if (this.cpu !== null)
        data.cpu = this.cpu;
      else
        delete data.cpu;
      if (this.type !== null)
        data.type = this.type;
      else
        delete data.type;
      if (this.private)
        data.private = true;
      else
        delete data.private;
      if (this.license !== null)
        data.license = this.license;
      else
        delete data.license;
      if (this.languageName !== null)
        data.languageName = this.languageName;
      else
        delete data.languageName;
      if (this.main !== null)
        data.main = this.main;
      else
        delete data.main;
      if (this.module !== null)
        data.module = this.module;
      else
        delete data.module;
      if (this.browser !== null) {
        const browser = this.browser;
        if (typeof browser === `string`) {
          data.browser = browser;
        } else if (browser instanceof Map) {
          data.browser = Object.assign({}, ...Array.from(browser.keys()).sort().map((name) => {
            return {[name]: browser.get(name)};
          }));
        }
      } else {
        delete data.browser;
      }
      if (this.bin.size === 1 && this.name !== null && this.bin.has(this.name.name)) {
        data.bin = this.bin.get(this.name.name);
      } else if (this.bin.size > 0) {
        data.bin = Object.assign({}, ...Array.from(this.bin.keys()).sort().map((name) => {
          return {[name]: this.bin.get(name)};
        }));
      } else {
        delete data.bin;
      }
      if (this.workspaceDefinitions.length > 0) {
        if (this.raw.workspaces && !Array.isArray(this.raw.workspaces)) {
          data.workspaces = __spreadProps(__spreadValues({}, this.raw.workspaces), {packages: this.workspaceDefinitions.map(({pattern}) => pattern)});
        } else {
          data.workspaces = this.workspaceDefinitions.map(({pattern}) => pattern);
        }
      } else if (this.raw.workspaces && !Array.isArray(this.raw.workspaces) && Object.keys(this.raw.workspaces).length > 0) {
        data.workspaces = this.raw.workspaces;
      } else {
        delete data.workspaces;
      }
      const regularDependencies = [];
      const optionalDependencies = [];
      for (const dependency of this.dependencies.values()) {
        const dependencyMetaSet = this.dependenciesMeta.get(stringifyIdent(dependency));
        let isOptionallyBuilt = false;
        if (compatibilityMode) {
          if (dependencyMetaSet) {
            const meta = dependencyMetaSet.get(null);
            if (meta && meta.optional) {
              isOptionallyBuilt = true;
            }
          }
        }
        if (isOptionallyBuilt) {
          optionalDependencies.push(dependency);
        } else {
          regularDependencies.push(dependency);
        }
      }
      if (regularDependencies.length > 0) {
        data.dependencies = Object.assign({}, ...sortDescriptors(regularDependencies).map((dependency) => {
          return {[stringifyIdent(dependency)]: dependency.range};
        }));
      } else {
        delete data.dependencies;
      }
      if (optionalDependencies.length > 0) {
        data.optionalDependencies = Object.assign({}, ...sortDescriptors(optionalDependencies).map((dependency) => {
          return {[stringifyIdent(dependency)]: dependency.range};
        }));
      } else {
        delete data.optionalDependencies;
      }
      if (this.devDependencies.size > 0) {
        data.devDependencies = Object.assign({}, ...sortDescriptors(this.devDependencies.values()).map((dependency) => {
          return {[stringifyIdent(dependency)]: dependency.range};
        }));
      } else {
        delete data.devDependencies;
      }
      if (this.peerDependencies.size > 0) {
        data.peerDependencies = Object.assign({}, ...sortDescriptors(this.peerDependencies.values()).map((dependency) => {
          return {[stringifyIdent(dependency)]: dependency.range};
        }));
      } else {
        delete data.peerDependencies;
      }
      data.dependenciesMeta = {};
      for (const [identString, dependencyMetaSet] of sortMap(this.dependenciesMeta.entries(), ([identString2, dependencyMetaSet2]) => identString2)) {
        for (const [range, meta] of sortMap(dependencyMetaSet.entries(), ([range2, meta2]) => range2 !== null ? `0${range2}` : `1`)) {
          const key = range !== null ? stringifyDescriptor(makeDescriptor(parseIdent(identString), range)) : identString;
          const metaCopy = __spreadValues({}, meta);
          if (compatibilityMode && range === null)
            delete metaCopy.optional;
          if (Object.keys(metaCopy).length === 0)
            continue;
          data.dependenciesMeta[key] = metaCopy;
        }
      }
      if (Object.keys(data.dependenciesMeta).length === 0)
        delete data.dependenciesMeta;
      if (this.peerDependenciesMeta.size > 0) {
        data.peerDependenciesMeta = Object.assign({}, ...sortMap(this.peerDependenciesMeta.entries(), ([identString, meta]) => identString).map(([identString, meta]) => {
          return {[identString]: meta};
        }));
      } else {
        delete data.peerDependenciesMeta;
      }
      if (this.resolutions.length > 0) {
        data.resolutions = Object.assign({}, ...this.resolutions.map(({pattern, reference}) => {
          return {[stringifyResolution(pattern)]: reference};
        }));
      } else {
        delete data.resolutions;
      }
      if (this.files !== null)
        data.files = Array.from(this.files);
      else
        delete data.files;
      if (this.preferUnplugged !== null)
        data.preferUnplugged = this.preferUnplugged;
      else
        delete data.preferUnplugged;
      return data;
    }
  };
  var Manifest = _Manifest;
  _a = "private";
  Manifest.fileName = `package.json`;
  Manifest.allDependencies = [`dependencies`, `devDependencies`, `peerDependencies`];
  Manifest.hardDependencies = [`dependencies`, `devDependencies`];
  function getIndent(content) {
    const indentMatch = content.match(/^[ \t]+/m);
    if (indentMatch) {
      return indentMatch[0];
    } else {
      return `  `;
    }
  }
  function stripBOM(content) {
    if (content.charCodeAt(0) === 65279) {
      return content.slice(1);
    } else {
      return content;
    }
  }
  function normalizeSlashes(str) {
    return str.replace(/\\/g, `/`);
  }
  function tryParseOptionalBoolean2(value, {yamlCompatibilityMode}) {
    if (yamlCompatibilityMode)
      return tryParseOptionalBoolean(value);
    if (typeof value === `undefined` || typeof value === `boolean`)
      return value;
    return null;
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/StreamReport.ts
  var import_slice_ansi = __toModule(require_slice_ansi());
  var PROGRESS_FRAMES = [`\u280B`, `\u2819`, `\u2839`, `\u2838`, `\u283C`, `\u2834`, `\u2826`, `\u2827`, `\u2807`, `\u280F`];
  var PROGRESS_INTERVAL = 80;
  var BASE_FORGETTABLE_NAMES = new Set([MessageName.FETCH_NOT_CACHED, MessageName.UNUSED_CACHE_ENTRY]);
  var BASE_FORGETTABLE_BUFFER_SIZE = 5;
  var GROUP = process.env.GITHUB_ACTIONS ? {start: (what) => `::group::${what}
`, end: (what) => `::endgroup::
`} : process.env.TRAVIS ? {start: (what) => `travis_fold:start:${what}
`, end: (what) => `travis_fold:end:${what}
`} : process.env.GITLAB_CI ? {start: (what) => `section_start:${Math.floor(Date.now() / 1e3)}:${what.toLowerCase().replace(/\W+/g, `_`)}\r[0K${what}
`, end: (what) => `section_end:${Math.floor(Date.now() / 1e3)}:${what.toLowerCase().replace(/\W+/g, `_`)}\r[0K`} : null;
  var now = new Date();
  var supportsEmojis = [`iTerm.app`, `Apple_Terminal`].includes(process.env.TERM_PROGRAM) || !!process.env.WT_SESSION;
  var makeRecord = (obj) => obj;
  var PROGRESS_STYLES = makeRecord({
    patrick: {
      date: [17, 3],
      chars: [`\u{1F340}`, `\u{1F331}`],
      size: 40
    },
    simba: {
      date: [19, 7],
      chars: [`\u{1F981}`, `\u{1F334}`],
      size: 40
    },
    jack: {
      date: [31, 10],
      chars: [`\u{1F383}`, `\u{1F987}`],
      size: 40
    },
    hogsfather: {
      date: [31, 12],
      chars: [`\u{1F389}`, `\u{1F384}`],
      size: 40
    },
    default: {
      chars: [`=`, `-`],
      size: 80
    }
  });
  var defaultStyle = supportsEmojis && Object.keys(PROGRESS_STYLES).find((name) => {
    const style = PROGRESS_STYLES[name];
    if (style.date && (style.date[0] !== now.getDate() || style.date[1] !== now.getMonth() + 1))
      return false;
    return true;
  }) || `default`;
  function formatName(name, {configuration, json: json2}) {
    if (!configuration.get(`enableMessageNames`))
      return ``;
    const num = name === null ? 0 : name;
    const label = stringifyMessageName(num);
    if (!json2 && name === null) {
      return pretty(configuration, label, `grey`);
    } else {
      return label;
    }
  }
  function formatNameWithHyperlink(name, {configuration, json: json2}) {
    const code = formatName(name, {configuration, json: json2});
    if (!code)
      return code;
    if (name === null || name === MessageName.UNNAMED)
      return code;
    const desc = MessageName[name];
    const href = `https://yarnpkg.com/advanced/error-codes#${code}---${desc}`.toLowerCase();
    return applyHyperlink(configuration, code, href);
  }
  var StreamReport = class extends Report {
    constructor({
      configuration,
      stdout,
      json: json2 = false,
      includeFooter = true,
      includeLogs = !json2,
      includeInfos = includeLogs,
      includeWarnings = includeLogs,
      forgettableBufferSize = BASE_FORGETTABLE_BUFFER_SIZE,
      forgettableNames = new Set()
    }) {
      super();
      this.uncommitted = new Set();
      this.cacheHitCount = 0;
      this.cacheMissCount = 0;
      this.lastCacheMiss = null;
      this.warningCount = 0;
      this.errorCount = 0;
      this.startTime = Date.now();
      this.indent = 0;
      this.progress = new Map();
      this.progressTime = 0;
      this.progressFrame = 0;
      this.progressTimeout = null;
      this.forgettableLines = [];
      addLogFilterSupport(this, {configuration});
      this.configuration = configuration;
      this.forgettableBufferSize = forgettableBufferSize;
      this.forgettableNames = new Set([...forgettableNames, ...BASE_FORGETTABLE_NAMES]);
      this.includeFooter = includeFooter;
      this.includeInfos = includeInfos;
      this.includeWarnings = includeWarnings;
      this.json = json2;
      this.stdout = stdout;
      const styleName = this.configuration.get(`progressBarStyle`) || defaultStyle;
      if (!Object.prototype.hasOwnProperty.call(PROGRESS_STYLES, styleName))
        throw new Error(`Assertion failed: Invalid progress bar style`);
      this.progressStyle = PROGRESS_STYLES[styleName];
      const PAD_LEFT = `\u27A4 YN0000: \u250C `.length;
      const maxWidth = Math.max(0, Math.min(process.stdout.columns - PAD_LEFT, 80));
      this.progressMaxScaledSize = Math.floor(this.progressStyle.size * maxWidth / 80);
    }
    static async start(opts, cb) {
      const report = new this(opts);
      const emitWarning = process.emitWarning;
      process.emitWarning = (message, name) => {
        if (typeof message !== `string`) {
          const error = message;
          message = error.message;
          name = name != null ? name : error.name;
        }
        const fullMessage = typeof name !== `undefined` ? `${name}: ${message}` : message;
        report.reportWarning(MessageName.UNNAMED, fullMessage);
      };
      try {
        await cb(report);
      } catch (error) {
        report.reportExceptionOnce(error);
      } finally {
        await report.finalize();
        process.emitWarning = emitWarning;
      }
      return report;
    }
    hasErrors() {
      return this.errorCount > 0;
    }
    exitCode() {
      return this.hasErrors() ? 1 : 0;
    }
    reportCacheHit(locator) {
      this.cacheHitCount += 1;
    }
    reportCacheMiss(locator, message) {
      this.lastCacheMiss = locator;
      this.cacheMissCount += 1;
      if (typeof message !== `undefined` && !this.configuration.get(`preferAggregateCacheInfo`)) {
        this.reportInfo(MessageName.FETCH_NOT_CACHED, message);
      }
    }
    startTimerSync(what, opts, cb) {
      const realOpts = typeof opts === `function` ? {} : opts;
      const realCb = typeof opts === `function` ? opts : cb;
      const mark2 = {committed: false, action: () => {
        this.reportInfo(null, `\u250C ${what}`);
        this.indent += 1;
        if (GROUP !== null && !this.json) {
          this.stdout.write(GROUP.start(what));
        }
      }};
      if (realOpts.skipIfEmpty) {
        this.uncommitted.add(mark2);
      } else {
        mark2.action();
        mark2.committed = true;
      }
      const before = Date.now();
      try {
        return realCb();
      } catch (error) {
        this.reportExceptionOnce(error);
        throw error;
      } finally {
        const after = Date.now();
        this.uncommitted.delete(mark2);
        if (mark2.committed) {
          this.indent -= 1;
          if (GROUP !== null && !this.json)
            this.stdout.write(GROUP.end(what));
          if (this.configuration.get(`enableTimers`) && after - before > 200) {
            this.reportInfo(null, `\u2514 Completed in ${pretty(this.configuration, after - before, Type.DURATION)}`);
          } else {
            this.reportInfo(null, `\u2514 Completed`);
          }
        }
      }
    }
    async startTimerPromise(what, opts, cb) {
      const realOpts = typeof opts === `function` ? {} : opts;
      const realCb = typeof opts === `function` ? opts : cb;
      const mark2 = {committed: false, action: () => {
        this.reportInfo(null, `\u250C ${what}`);
        this.indent += 1;
        if (GROUP !== null && !this.json) {
          this.stdout.write(GROUP.start(what));
        }
      }};
      if (realOpts.skipIfEmpty) {
        this.uncommitted.add(mark2);
      } else {
        mark2.action();
        mark2.committed = true;
      }
      const before = Date.now();
      try {
        return await realCb();
      } catch (error) {
        this.reportExceptionOnce(error);
        throw error;
      } finally {
        const after = Date.now();
        this.uncommitted.delete(mark2);
        if (mark2.committed) {
          this.indent -= 1;
          if (GROUP !== null && !this.json)
            this.stdout.write(GROUP.end(what));
          if (this.configuration.get(`enableTimers`) && after - before > 200) {
            this.reportInfo(null, `\u2514 Completed in ${pretty(this.configuration, after - before, Type.DURATION)}`);
          } else {
            this.reportInfo(null, `\u2514 Completed`);
          }
        }
      }
    }
    async startCacheReport(cb) {
      const cacheInfo = this.configuration.get(`preferAggregateCacheInfo`) ? {cacheHitCount: this.cacheHitCount, cacheMissCount: this.cacheMissCount} : null;
      try {
        return await cb();
      } catch (error) {
        this.reportExceptionOnce(error);
        throw error;
      } finally {
        if (cacheInfo !== null) {
          this.reportCacheChanges(cacheInfo);
        }
      }
    }
    reportSeparator() {
      if (this.indent === 0) {
        this.writeLineWithForgettableReset(``);
      } else {
        this.reportInfo(null, ``);
      }
    }
    reportInfo(name, text) {
      if (!this.includeInfos)
        return;
      this.commit();
      const formattedName = this.formatNameWithHyperlink(name);
      const prefix = formattedName ? `${formattedName}: ` : ``;
      const message = `${pretty(this.configuration, `\u27A4`, `blueBright`)} ${prefix}${this.formatIndent()}${text}`;
      if (!this.json) {
        if (this.forgettableNames.has(name)) {
          this.forgettableLines.push(message);
          if (this.forgettableLines.length > this.forgettableBufferSize) {
            while (this.forgettableLines.length > this.forgettableBufferSize)
              this.forgettableLines.shift();
            this.writeLines(this.forgettableLines, {truncate: true});
          } else {
            this.writeLine(message, {truncate: true});
          }
        } else {
          this.writeLineWithForgettableReset(message);
        }
      } else {
        this.reportJson({type: `info`, name, displayName: this.formatName(name), indent: this.formatIndent(), data: text});
      }
    }
    reportWarning(name, text) {
      this.warningCount += 1;
      if (!this.includeWarnings)
        return;
      this.commit();
      const formattedName = this.formatNameWithHyperlink(name);
      const prefix = formattedName ? `${formattedName}: ` : ``;
      if (!this.json) {
        this.writeLineWithForgettableReset(`${pretty(this.configuration, `\u27A4`, `yellowBright`)} ${prefix}${this.formatIndent()}${text}`);
      } else {
        this.reportJson({type: `warning`, name, displayName: this.formatName(name), indent: this.formatIndent(), data: text});
      }
    }
    reportError(name, text) {
      this.errorCount += 1;
      this.commit();
      const formattedName = this.formatNameWithHyperlink(name);
      const prefix = formattedName ? `${formattedName}: ` : ``;
      if (!this.json) {
        this.writeLineWithForgettableReset(`${pretty(this.configuration, `\u27A4`, `redBright`)} ${prefix}${this.formatIndent()}${text}`, {truncate: false});
      } else {
        this.reportJson({type: `error`, name, displayName: this.formatName(name), indent: this.formatIndent(), data: text});
      }
    }
    reportProgress(progressIt) {
      let stopped = false;
      const promise = Promise.resolve().then(async () => {
        const progressDefinition = {
          progress: 0,
          title: void 0
        };
        this.progress.set(progressIt, {
          definition: progressDefinition,
          lastScaledSize: -1
        });
        this.refreshProgress(-1);
        for await (const {progress, title} of progressIt) {
          if (stopped)
            continue;
          if (progressDefinition.progress === progress && progressDefinition.title === title)
            continue;
          progressDefinition.progress = progress;
          progressDefinition.title = title;
          this.refreshProgress();
        }
        stop();
      });
      const stop = () => {
        if (stopped)
          return;
        stopped = true;
        this.progress.delete(progressIt);
        this.refreshProgress(1);
      };
      return __spreadProps(__spreadValues({}, promise), {stop});
    }
    reportJson(data) {
      if (this.json) {
        this.writeLineWithForgettableReset(`${JSON.stringify(data)}`);
      }
    }
    async finalize() {
      if (!this.includeFooter)
        return;
      let installStatus = ``;
      if (this.errorCount > 0)
        installStatus = `Failed with errors`;
      else if (this.warningCount > 0)
        installStatus = `Done with warnings`;
      else
        installStatus = `Done`;
      const timing = pretty(this.configuration, Date.now() - this.startTime, Type.DURATION);
      const message = this.configuration.get(`enableTimers`) ? `${installStatus} in ${timing}` : installStatus;
      if (this.errorCount > 0) {
        this.reportError(MessageName.UNNAMED, message);
      } else if (this.warningCount > 0) {
        this.reportWarning(MessageName.UNNAMED, message);
      } else {
        this.reportInfo(MessageName.UNNAMED, message);
      }
    }
    writeLine(str, {truncate} = {}) {
      this.clearProgress({clear: true});
      this.stdout.write(`${this.truncate(str, {truncate})}
`);
      this.writeProgress();
    }
    writeLineWithForgettableReset(str, {truncate} = {}) {
      this.forgettableLines = [];
      this.writeLine(str, {truncate});
    }
    writeLines(lines, {truncate} = {}) {
      this.clearProgress({delta: lines.length});
      for (const line of lines)
        this.stdout.write(`${this.truncate(line, {truncate})}
`);
      this.writeProgress();
    }
    reportCacheChanges({cacheHitCount, cacheMissCount}) {
      const cacheHitDelta = this.cacheHitCount - cacheHitCount;
      const cacheMissDelta = this.cacheMissCount - cacheMissCount;
      if (cacheHitDelta === 0 && cacheMissDelta === 0)
        return;
      let fetchStatus = ``;
      if (this.cacheHitCount > 1)
        fetchStatus += `${this.cacheHitCount} packages were already cached`;
      else if (this.cacheHitCount === 1)
        fetchStatus += ` - one package was already cached`;
      else
        fetchStatus += `No packages were cached`;
      if (this.cacheHitCount > 0) {
        if (this.cacheMissCount > 1) {
          fetchStatus += `, ${this.cacheMissCount} had to be fetched`;
        } else if (this.cacheMissCount === 1) {
          fetchStatus += `, one had to be fetched (${prettyLocator(this.configuration, this.lastCacheMiss)})`;
        }
      } else {
        if (this.cacheMissCount > 1) {
          fetchStatus += ` - ${this.cacheMissCount} packages had to be fetched`;
        } else if (this.cacheMissCount === 1) {
          fetchStatus += ` - one package had to be fetched (${prettyLocator(this.configuration, this.lastCacheMiss)})`;
        }
      }
      this.reportInfo(MessageName.FETCH_NOT_CACHED, fetchStatus);
    }
    commit() {
      const marks = this.uncommitted;
      this.uncommitted = new Set();
      for (const mark2 of marks) {
        mark2.committed = true;
        mark2.action();
      }
    }
    clearProgress({delta = 0, clear = false}) {
      if (!this.configuration.get(`enableProgressBars`) || this.json)
        return;
      if (this.progress.size + delta > 0) {
        this.stdout.write(`[${this.progress.size + delta}A`);
        if (delta > 0 || clear) {
          this.stdout.write(`[0J`);
        }
      }
    }
    writeProgress() {
      if (!this.configuration.get(`enableProgressBars`) || this.json)
        return;
      if (this.progressTimeout !== null)
        clearTimeout(this.progressTimeout);
      this.progressTimeout = null;
      if (this.progress.size === 0)
        return;
      const now2 = Date.now();
      if (now2 - this.progressTime > PROGRESS_INTERVAL) {
        this.progressFrame = (this.progressFrame + 1) % PROGRESS_FRAMES.length;
        this.progressTime = now2;
      }
      const spinner = PROGRESS_FRAMES[this.progressFrame];
      for (const progress of this.progress.values()) {
        const ok = this.progressStyle.chars[0].repeat(progress.lastScaledSize);
        const ko = this.progressStyle.chars[1].repeat(this.progressMaxScaledSize - progress.lastScaledSize);
        const formattedName = this.formatName(null);
        const prefix = formattedName ? `${formattedName}: ` : ``;
        this.stdout.write(`${pretty(this.configuration, `\u27A4`, `blueBright`)} ${prefix}${spinner} ${ok}${ko}
`);
      }
      this.progressTimeout = setTimeout(() => {
        this.refreshProgress();
      }, PROGRESS_INTERVAL);
    }
    refreshProgress(delta = 0) {
      let needsUpdate = false;
      if (this.progress.size === 0) {
        needsUpdate = true;
      } else {
        for (const progress of this.progress.values()) {
          const refreshedScaledSize = Math.trunc(this.progressMaxScaledSize * progress.definition.progress);
          const previousScaledSize = progress.lastScaledSize;
          progress.lastScaledSize = refreshedScaledSize;
          if (refreshedScaledSize !== previousScaledSize) {
            needsUpdate = true;
            break;
          }
        }
      }
      if (needsUpdate) {
        this.clearProgress({delta});
        this.writeProgress();
      }
    }
    truncate(str, {truncate} = {}) {
      if (!this.configuration.get(`enableProgressBars`))
        truncate = false;
      if (typeof truncate === `undefined`)
        truncate = this.configuration.get(`preferTruncatedLines`);
      if (truncate)
        str = (0, import_slice_ansi.default)(str, 0, process.stdout.columns - 1);
      return str;
    }
    formatName(name) {
      return formatName(name, {
        configuration: this.configuration,
        json: this.json
      });
    }
    formatNameWithHyperlink(name) {
      return formatNameWithHyperlink(name, {
        configuration: this.configuration,
        json: this.json
      });
    }
    formatIndent() {
      return `\u2502 `.repeat(this.indent);
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/YarnVersion.ts
  var YarnVersion = true ? "3.0.0-rc.5.git.20210603.hash-750e8eef" : null;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/scriptUtils.ts
  var PackageManager;
  (function(PackageManager2) {
    PackageManager2["Yarn1"] = `Yarn Classic`;
    PackageManager2["Yarn2"] = `Yarn`;
    PackageManager2["Npm"] = `npm`;
    PackageManager2["Pnpm"] = `pnpm`;
  })(PackageManager || (PackageManager = {}));
  async function makePathWrapper(location, name, argv0, args = []) {
    if (process.platform === `win32`) {
      const cmdScript = `@goto #_undefined_# 2>NUL || @title %COMSPEC% & @setlocal & @"${argv0}" ${args.map((arg) => `"${arg.replace(`"`, `""`)}"`).join(` `)} %*`;
      await xfs.writeFilePromise(ppath.format({dir: location, name, ext: `.cmd`}), cmdScript);
    }
    await xfs.writeFilePromise(ppath.join(location, name), `#!/bin/sh
exec "${argv0}" ${args.map((arg) => `'${arg.replace(/'/g, `'"'"'`)}'`).join(` `)} "$@"
`);
    await xfs.chmodPromise(ppath.join(location, name), 493);
  }
  async function detectPackageManager(location) {
    let yarnLock = null;
    try {
      yarnLock = await xfs.readFilePromise(ppath.join(location, Filename.lockfile), `utf8`);
    } catch {
    }
    if (yarnLock !== null) {
      if (yarnLock.match(/^__metadata:$/m)) {
        return {packageManager: PackageManager.Yarn2, reason: `"__metadata" key found in yarn.lock`};
      } else {
        return {
          packageManager: PackageManager.Yarn1,
          reason: `"__metadata" key not found in yarn.lock, must be a Yarn classic lockfile`
        };
      }
    }
    if (xfs.existsSync(ppath.join(location, `package-lock.json`)))
      return {packageManager: PackageManager.Npm, reason: `found npm's "package-lock.json" lockfile`};
    if (xfs.existsSync(ppath.join(location, `pnpm-lock.yaml`)))
      return {packageManager: PackageManager.Pnpm, reason: `found pnpm's "pnpm-lock.yaml" lockfile`};
    return null;
  }
  async function makeScriptEnv({project, locator, binFolder, lifecycleScript}) {
    var _a2, _b;
    const scriptEnv = {};
    for (const [key, value] of Object.entries(process.env))
      if (typeof value !== `undefined`)
        scriptEnv[key.toLowerCase() !== `path` ? key : `PATH`] = value;
    const nBinFolder = npath.fromPortablePath(binFolder);
    scriptEnv.BERRY_BIN_FOLDER = npath.fromPortablePath(nBinFolder);
    await Promise.all([
      makePathWrapper(binFolder, `node`, process.execPath),
      ...YarnVersion !== null ? [
        makePathWrapper(binFolder, `run`, process.execPath, [process.argv[1], `run`]),
        makePathWrapper(binFolder, `yarn`, process.execPath, [process.argv[1]]),
        makePathWrapper(binFolder, `yarnpkg`, process.execPath, [process.argv[1]]),
        makePathWrapper(binFolder, `node-gyp`, process.execPath, [process.argv[1], `run`, `--top-level`, `node-gyp`])
      ] : []
    ]);
    if (project) {
      scriptEnv.INIT_CWD = npath.fromPortablePath(project.configuration.startingCwd);
      scriptEnv.PROJECT_CWD = npath.fromPortablePath(project.cwd);
    }
    scriptEnv.PATH = scriptEnv.PATH ? `${nBinFolder}${npath.delimiter}${scriptEnv.PATH}` : `${nBinFolder}`;
    scriptEnv.npm_execpath = `${nBinFolder}${npath.sep}yarn`;
    scriptEnv.npm_node_execpath = `${nBinFolder}${npath.sep}node`;
    if (locator) {
      if (!project)
        throw new Error(`Assertion failed: Missing project`);
      const workspace = project.tryWorkspaceByLocator(locator);
      const version2 = workspace ? (_a2 = workspace.manifest.version) != null ? _a2 : `` : (_b = project.storedPackages.get(locator.locatorHash).version) != null ? _b : ``;
      scriptEnv.npm_package_name = stringifyIdent(locator);
      scriptEnv.npm_package_version = version2;
    }
    const version = YarnVersion !== null ? `yarn/${YarnVersion}` : `yarn/${dynamicRequire(`@yarnpkg/core`).version}-core`;
    scriptEnv.npm_config_user_agent = `${version} npm/? node/${process.versions.node} ${process.platform} ${process.arch}`;
    if (lifecycleScript)
      scriptEnv.npm_lifecycle_event = lifecycleScript;
    if (project) {
      await project.configuration.triggerHook((hook) => hook.setupScriptEnvironment, project, scriptEnv, async (name, argv0, args) => {
        return await makePathWrapper(binFolder, toFilename(name), argv0, args);
      });
    }
    return scriptEnv;
  }
  var MAX_PREPARE_CONCURRENCY = 2;
  var prepareLimit = (0, import_p_limit.default)(MAX_PREPARE_CONCURRENCY);
  async function prepareExternalProject(cwd, outputPath, {configuration, report, workspace = null, locator = null}) {
    await prepareLimit(async () => {
      await xfs.mktempPromise(async (logDir) => {
        const logFile = ppath.join(logDir, `pack.log`);
        const stdin = null;
        const {stdout, stderr} = configuration.getSubprocessStreams(logFile, {prefix: npath.fromPortablePath(cwd), report});
        const devirtualizedLocator = locator && isVirtualLocator(locator) ? devirtualizeLocator(locator) : locator;
        const name = devirtualizedLocator ? stringifyLocator(devirtualizedLocator) : `an external project`;
        stdout.write(`Packing ${name} from sources
`);
        const packageManagerSelection = await detectPackageManager(cwd);
        let effectivePackageManager;
        if (packageManagerSelection !== null) {
          stdout.write(`Using ${packageManagerSelection.packageManager} for bootstrap. Reason: ${packageManagerSelection.reason}

`);
          effectivePackageManager = packageManagerSelection.packageManager;
        } else {
          stdout.write(`No package manager configuration detected; defaulting to Yarn

`);
          effectivePackageManager = PackageManager.Yarn2;
        }
        await xfs.mktempPromise(async (binFolder) => {
          const env = await makeScriptEnv({binFolder});
          const workflows = new Map([
            [PackageManager.Yarn1, async () => {
              const workspaceCli = workspace !== null ? [`workspace`, workspace] : [];
              const version = await pipevp(`yarn`, [`set`, `version`, `classic`, `--only-if-needed`], {cwd, env, stdin, stdout, stderr, end: EndStrategy.ErrorCode});
              if (version.code !== 0)
                return version.code;
              await xfs.appendFilePromise(ppath.join(cwd, `.npmignore`), `/.yarn
`);
              stdout.write(`
`);
              const install = await pipevp(`yarn`, [`install`], {cwd, env, stdin, stdout, stderr, end: EndStrategy.ErrorCode});
              if (install.code !== 0)
                return install.code;
              stdout.write(`
`);
              const pack = await pipevp(`yarn`, [...workspaceCli, `pack`, `--filename`, npath.fromPortablePath(outputPath)], {cwd, env, stdin, stdout, stderr});
              if (pack.code !== 0)
                return pack.code;
              return 0;
            }],
            [PackageManager.Yarn2, async () => {
              const workspaceCli = workspace !== null ? [`workspace`, workspace] : [];
              env.YARN_ENABLE_INLINE_BUILDS = `1`;
              const lockfilePath = ppath.join(cwd, Filename.lockfile);
              if (!await xfs.existsPromise(lockfilePath))
                await xfs.writeFilePromise(lockfilePath, ``);
              const pack = await pipevp(`yarn`, [...workspaceCli, `pack`, `--install-if-needed`, `--filename`, npath.fromPortablePath(outputPath)], {cwd, env, stdin, stdout, stderr});
              if (pack.code !== 0)
                return pack.code;
              return 0;
            }],
            [PackageManager.Npm, async () => {
              if (workspace !== null)
                throw new Error(`Workspaces aren't supported by npm, which has been detected as the primary package manager for ${cwd}`);
              delete env.npm_config_user_agent;
              const install = await pipevp(`npm`, [`install`], {cwd, env, stdin, stdout, stderr, end: EndStrategy.ErrorCode});
              if (install.code !== 0)
                return install.code;
              const packStream = new import_stream6.PassThrough();
              const packPromise = bufferStream(packStream);
              packStream.pipe(stdout);
              const pack = await pipevp(`npm`, [`pack`, `--silent`], {cwd, env, stdin, stdout: packStream, stderr});
              if (pack.code !== 0)
                return pack.code;
              const packOutput = (await packPromise).toString().trim();
              const packTarget = ppath.resolve(cwd, npath.toPortablePath(packOutput));
              await xfs.renamePromise(packTarget, outputPath);
              return 0;
            }]
          ]);
          const workflow = workflows.get(effectivePackageManager);
          if (typeof workflow === `undefined`)
            throw new Error(`Assertion failed: Unsupported workflow`);
          const code = await workflow();
          if (code === 0 || typeof code === `undefined`)
            return;
          xfs.detachTemp(logDir);
          throw new ReportError(MessageName.PACKAGE_PREPARATION_FAILED, `Packing the package failed (exit code ${code}, logs can be found here: ${logFile})`);
        });
      });
    });
  }
  async function hasPackageScript(locator, scriptName, {project}) {
    const workspace = project.tryWorkspaceByLocator(locator);
    if (workspace !== null)
      return hasWorkspaceScript(workspace, scriptName);
    const pkg = project.storedPackages.get(locator.locatorHash);
    if (!pkg)
      throw new Error(`Package for ${prettyLocator(project.configuration, locator)} not found in the project`);
    return await ZipOpenFS.openPromise(async (zipOpenFs) => {
      const configuration = project.configuration;
      const linkers = project.configuration.getLinkers();
      const linkerOptions = {project, report: new StreamReport({stdout: new import_stream6.PassThrough(), configuration})};
      const linker = linkers.find((linker2) => linker2.supportsPackage(pkg, linkerOptions));
      if (!linker)
        throw new Error(`The package ${prettyLocator(project.configuration, pkg)} isn't supported by any of the available linkers`);
      const packageLocation = await linker.findPackageLocation(pkg, linkerOptions);
      const packageFs = new CwdFS(packageLocation, {baseFs: zipOpenFs});
      const manifest = await Manifest.find(PortablePath.dot, {baseFs: packageFs});
      return manifest.scripts.has(scriptName);
    }, {
      libzip: await getLibzipPromise()
    });
  }
  async function executePackageScript(locator, scriptName, args, {cwd, project, stdin, stdout, stderr}) {
    return await xfs.mktempPromise(async (binFolder) => {
      const {manifest, env, cwd: realCwd} = await initializePackageEnvironment(locator, {project, binFolder, cwd, lifecycleScript: scriptName});
      const script = manifest.scripts.get(scriptName);
      if (typeof script === `undefined`)
        return 1;
      const realExecutor = async () => {
        return await execute2(script, args, {cwd: realCwd, env, stdin, stdout, stderr});
      };
      const executor = await project.configuration.reduceHook((hooks) => {
        return hooks.wrapScriptExecution;
      }, realExecutor, project, locator, scriptName, {
        script,
        args,
        cwd: realCwd,
        env,
        stdin,
        stdout,
        stderr
      });
      return await executor();
    });
  }
  async function executePackageShellcode(locator, command, args, {cwd, project, stdin, stdout, stderr}) {
    return await xfs.mktempPromise(async (binFolder) => {
      const {env, cwd: realCwd} = await initializePackageEnvironment(locator, {project, binFolder, cwd});
      return await execute2(command, args, {cwd: realCwd, env, stdin, stdout, stderr});
    });
  }
  async function initializeWorkspaceEnvironment(workspace, {binFolder, cwd, lifecycleScript}) {
    const env = await makeScriptEnv({project: workspace.project, locator: workspace.anchoredLocator, binFolder, lifecycleScript});
    await Promise.all(Array.from(await getWorkspaceAccessibleBinaries(workspace), ([binaryName, [, binaryPath]]) => makePathWrapper(binFolder, toFilename(binaryName), process.execPath, [binaryPath])));
    if (typeof cwd === `undefined`)
      cwd = ppath.dirname(await xfs.realpathPromise(ppath.join(workspace.cwd, `package.json`)));
    return {manifest: workspace.manifest, binFolder, env, cwd};
  }
  async function initializePackageEnvironment(locator, {project, binFolder, cwd, lifecycleScript}) {
    const workspace = project.tryWorkspaceByLocator(locator);
    if (workspace !== null)
      return initializeWorkspaceEnvironment(workspace, {binFolder, cwd, lifecycleScript});
    const pkg = project.storedPackages.get(locator.locatorHash);
    if (!pkg)
      throw new Error(`Package for ${prettyLocator(project.configuration, locator)} not found in the project`);
    return await ZipOpenFS.openPromise(async (zipOpenFs) => {
      const configuration = project.configuration;
      const linkers = project.configuration.getLinkers();
      const linkerOptions = {project, report: new StreamReport({stdout: new import_stream6.PassThrough(), configuration})};
      const linker = linkers.find((linker2) => linker2.supportsPackage(pkg, linkerOptions));
      if (!linker)
        throw new Error(`The package ${prettyLocator(project.configuration, pkg)} isn't supported by any of the available linkers`);
      const env = await makeScriptEnv({project, locator, binFolder, lifecycleScript});
      await Promise.all(Array.from(await getPackageAccessibleBinaries(locator, {project}), ([binaryName, [, binaryPath]]) => makePathWrapper(binFolder, toFilename(binaryName), process.execPath, [binaryPath])));
      const packageLocation = await linker.findPackageLocation(pkg, linkerOptions);
      const packageFs = new CwdFS(packageLocation, {baseFs: zipOpenFs});
      const manifest = await Manifest.find(PortablePath.dot, {baseFs: packageFs});
      if (typeof cwd === `undefined`)
        cwd = packageLocation;
      return {manifest, binFolder, env, cwd};
    }, {
      libzip: await getLibzipPromise()
    });
  }
  async function executeWorkspaceScript(workspace, scriptName, args, {cwd, stdin, stdout, stderr}) {
    return await executePackageScript(workspace.anchoredLocator, scriptName, args, {cwd, project: workspace.project, stdin, stdout, stderr});
  }
  function hasWorkspaceScript(workspace, scriptName) {
    return workspace.manifest.scripts.has(scriptName);
  }
  async function executeWorkspaceLifecycleScript(workspace, lifecycleScriptName, {cwd, report}) {
    const {configuration} = workspace.project;
    const stdin = null;
    await xfs.mktempPromise(async (logDir) => {
      const logFile = ppath.join(logDir, `${lifecycleScriptName}.log`);
      const header = `# This file contains the result of Yarn calling the "${lifecycleScriptName}" lifecycle script inside a workspace ("${workspace.cwd}")
`;
      const {stdout, stderr} = configuration.getSubprocessStreams(logFile, {
        report,
        prefix: prettyLocator(configuration, workspace.anchoredLocator),
        header
      });
      report.reportInfo(MessageName.LIFECYCLE_SCRIPT, `Calling the "${lifecycleScriptName}" lifecycle script`);
      const exitCode = await executeWorkspaceScript(workspace, lifecycleScriptName, [], {cwd, stdin, stdout, stderr});
      stdout.end();
      stderr.end();
      if (exitCode !== 0) {
        xfs.detachTemp(logDir);
        throw new ReportError(MessageName.LIFECYCLE_SCRIPT, `${(0, import_capitalize.default)(lifecycleScriptName)} script failed (exit code ${pretty(configuration, exitCode, Type.NUMBER)}, logs can be found here: ${pretty(configuration, logFile, Type.PATH)}); run ${pretty(configuration, `yarn ${lifecycleScriptName}`, Type.CODE)} to investigate`);
      }
    });
  }
  async function maybeExecuteWorkspaceLifecycleScript(workspace, lifecycleScriptName, opts) {
    if (hasWorkspaceScript(workspace, lifecycleScriptName)) {
      await executeWorkspaceLifecycleScript(workspace, lifecycleScriptName, opts);
    }
  }
  async function getPackageAccessibleBinaries(locator, {project}) {
    const configuration = project.configuration;
    const binaries = new Map();
    const pkg = project.storedPackages.get(locator.locatorHash);
    if (!pkg)
      throw new Error(`Package for ${prettyLocator(configuration, locator)} not found in the project`);
    const stdout = new import_stream6.Writable();
    const linkers = configuration.getLinkers();
    const linkerOptions = {project, report: new StreamReport({configuration, stdout})};
    const visibleLocators = new Set([locator.locatorHash]);
    for (const descriptor of pkg.dependencies.values()) {
      const resolution = project.storedResolutions.get(descriptor.descriptorHash);
      if (!resolution)
        throw new Error(`Assertion failed: The resolution (${prettyDescriptor(configuration, descriptor)}) should have been registered`);
      visibleLocators.add(resolution);
    }
    const dependenciesWithBinaries = await Promise.all(Array.from(visibleLocators, async (locatorHash) => {
      const dependency = project.storedPackages.get(locatorHash);
      if (!dependency)
        throw new Error(`Assertion failed: The package (${locatorHash}) should have been registered`);
      if (dependency.bin.size === 0)
        return mapAndFilter.skip;
      const linker = linkers.find((linker2) => linker2.supportsPackage(dependency, linkerOptions));
      if (!linker)
        return mapAndFilter.skip;
      let packageLocation = null;
      try {
        packageLocation = await linker.findPackageLocation(dependency, linkerOptions);
      } catch (err) {
        if (err.code === `LOCATOR_NOT_INSTALLED`) {
          return mapAndFilter.skip;
        } else {
          throw err;
        }
      }
      return {dependency, packageLocation};
    }));
    for (const candidate of dependenciesWithBinaries) {
      if (candidate === mapAndFilter.skip)
        continue;
      const {dependency, packageLocation} = candidate;
      for (const [name, target] of dependency.bin) {
        binaries.set(name, [dependency, npath.fromPortablePath(ppath.resolve(packageLocation, target))]);
      }
    }
    return binaries;
  }
  async function getWorkspaceAccessibleBinaries(workspace) {
    return await getPackageAccessibleBinaries(workspace.anchoredLocator, {project: workspace.project});
  }
  async function executePackageAccessibleBinary(locator, binaryName, args, {cwd, project, stdin, stdout, stderr, nodeArgs = [], packageAccessibleBinaries}) {
    packageAccessibleBinaries != null ? packageAccessibleBinaries : packageAccessibleBinaries = await getPackageAccessibleBinaries(locator, {project});
    const binary = packageAccessibleBinaries.get(binaryName);
    if (!binary)
      throw new Error(`Binary not found (${binaryName}) for ${prettyLocator(project.configuration, locator)}`);
    return await xfs.mktempPromise(async (binFolder) => {
      const [, binaryPath] = binary;
      const env = await makeScriptEnv({project, locator, binFolder});
      await Promise.all(Array.from(packageAccessibleBinaries, ([binaryName2, [, binaryPath2]]) => makePathWrapper(env.BERRY_BIN_FOLDER, toFilename(binaryName2), process.execPath, [binaryPath2])));
      let result;
      try {
        result = await pipevp(process.execPath, [...nodeArgs, binaryPath, ...args], {cwd, env, stdin, stdout, stderr});
      } finally {
        await xfs.removePromise(env.BERRY_BIN_FOLDER);
      }
      return result.code;
    });
  }
  async function executeWorkspaceAccessibleBinary(workspace, binaryName, args, {cwd, stdin, stdout, stderr, packageAccessibleBinaries}) {
    return await executePackageAccessibleBinary(workspace.anchoredLocator, binaryName, args, {project: workspace.project, cwd, stdin, stdout, stderr, packageAccessibleBinaries});
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/tgzUtils.ts
  var tgzUtils_exports = {};
  __export(tgzUtils_exports, {
    convertToZip: () => convertToZip,
    extractArchiveTo: () => extractArchiveTo,
    makeArchiveFromDirectory: () => makeArchiveFromDirectory,
    safeTime: () => safeTime
  });
  var import_stream7 = __toModule(require("stream"));
  var import_tar = __toModule(require_tar());

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/WorkerPool.ts
  var import_os5 = __toModule(require("os"));
  var import_p_queue = __toModule(require_dist2());
  var import_worker_threads = __toModule(require("worker_threads"));
  var WorkerPool = class {
    constructor(source) {
      this.source = source;
      this.pool = [];
      this.queue = new import_p_queue.default({
        concurrency: (0, import_os5.cpus)().length
      });
      const timeout = setTimeout(() => {
        if (this.queue.size !== 0 || this.queue.pending !== 0)
          return;
        for (const worker of this.pool)
          worker.terminate();
        this.pool = [];
      }, 1e3).unref();
      this.queue.on(`idle`, () => {
        timeout.refresh();
      });
    }
    run(data) {
      return this.queue.add(() => {
        var _a2;
        const worker = (_a2 = this.pool.pop()) != null ? _a2 : new import_worker_threads.Worker(this.source, {
          eval: true,
          execArgv: [...process.execArgv, `--unhandled-rejections=strict`]
        });
        worker.ref();
        return new Promise((resolve, reject) => {
          const exitHandler = (code) => {
            if (code !== 0) {
              reject(new Error(`Worker exited with code ${code}`));
            }
          };
          worker.once(`message`, (result) => {
            this.pool.push(worker);
            worker.unref();
            worker.off(`error`, reject);
            worker.off(`exit`, exitHandler);
            resolve(result);
          });
          worker.once(`error`, reject);
          worker.once(`exit`, exitHandler);
          worker.postMessage(data);
        });
      });
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/tgzUtils.ts
  var import_worker_zip = __toModule(require_worker_zip());
  var safeTime = 456789e3;
  async function makeArchiveFromDirectory(source, {baseFs = new NodeFS(), prefixPath = PortablePath.root, compressionLevel, inMemory = false} = {}) {
    const libzip = await getLibzipPromise();
    let zipFs;
    if (inMemory) {
      zipFs = new ZipFS(null, {libzip, level: compressionLevel});
    } else {
      const tmpFolder = await xfs.mktempPromise();
      const tmpFile = ppath.join(tmpFolder, `archive.zip`);
      zipFs = new ZipFS(tmpFile, {create: true, libzip, level: compressionLevel});
    }
    const target = ppath.resolve(PortablePath.root, prefixPath);
    await zipFs.copyPromise(target, source, {baseFs, stableTime: true, stableSort: true});
    return zipFs;
  }
  var workerPool;
  async function convertToZip(tgz, opts) {
    const tmpFolder = await xfs.mktempPromise();
    const tmpFile = ppath.join(tmpFolder, `archive.zip`);
    workerPool || (workerPool = new WorkerPool((0, import_worker_zip.getContent)()));
    await workerPool.run({tmpFile, tgz, opts});
    return new ZipFS(tmpFile, {libzip: await getLibzipPromise(), level: opts.compressionLevel});
  }
  async function* parseTar(tgz) {
    const parser = new import_tar.default.Parse();
    const passthrough = new import_stream7.PassThrough({objectMode: true, autoDestroy: true, emitClose: true});
    parser.on(`entry`, (entry) => {
      passthrough.write(entry);
    });
    parser.on(`error`, (error) => {
      passthrough.destroy(error);
    });
    parser.on(`close`, () => {
      passthrough.destroy();
    });
    parser.end(tgz);
    for await (const entry of passthrough) {
      const it = entry;
      yield it;
      it.resume();
    }
  }
  async function extractArchiveTo(tgz, targetFs, {stripComponents = 0, prefixPath = PortablePath.dot} = {}) {
    var _a2, _b;
    function ignore(entry) {
      if (entry.path[0] === `/`)
        return true;
      const parts = entry.path.split(/\//g);
      if (parts.some((part) => part === `..`))
        return true;
      if (parts.length <= stripComponents)
        return true;
      return false;
    }
    for await (const entry of parseTar(tgz)) {
      if (ignore(entry))
        continue;
      const parts = ppath.normalize(npath.toPortablePath(entry.path)).replace(/\/$/, ``).split(/\//g);
      if (parts.length <= stripComponents)
        continue;
      const slicePath = parts.slice(stripComponents).join(`/`);
      const mappedPath = ppath.join(prefixPath, slicePath);
      let mode = 420;
      if (entry.type === `Directory` || (((_a2 = entry.mode) != null ? _a2 : 0) & 73) !== 0)
        mode |= 73;
      switch (entry.type) {
        case `Directory`:
          {
            targetFs.mkdirpSync(ppath.dirname(mappedPath), {chmod: 493, utimes: [safeTime, safeTime]});
            targetFs.mkdirSync(mappedPath);
            targetFs.chmodSync(mappedPath, mode);
            targetFs.utimesSync(mappedPath, safeTime, safeTime);
          }
          break;
        case `OldFile`:
        case `File`:
          {
            targetFs.mkdirpSync(ppath.dirname(mappedPath), {chmod: 493, utimes: [safeTime, safeTime]});
            targetFs.writeFileSync(mappedPath, await bufferStream(entry));
            targetFs.chmodSync(mappedPath, mode);
            targetFs.utimesSync(mappedPath, safeTime, safeTime);
          }
          break;
        case `SymbolicLink`:
          {
            targetFs.mkdirpSync(ppath.dirname(mappedPath), {chmod: 493, utimes: [safeTime, safeTime]});
            targetFs.symlinkSync(entry.linkpath, mappedPath);
            (_b = targetFs.lutimesSync) == null ? void 0 : _b.call(targetFs, mappedPath, safeTime, safeTime);
          }
          break;
      }
    }
    return targetFs;
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/treeUtils.ts
  var treeUtils_exports = {};
  __export(treeUtils_exports, {
    emitList: () => emitList,
    emitTree: () => emitTree,
    treeNodeToJson: () => treeNodeToJson,
    treeNodeToTreeify: () => treeNodeToTreeify
  });
  var import_treeify = __toModule(require_treeify());
  function treeNodeToTreeify(printTree, {configuration}) {
    const target = {};
    const copyTree = (printNode, targetNode) => {
      const iterator = Array.isArray(printNode) ? printNode.entries() : Object.entries(printNode);
      for (const [key, {label, value, children}] of iterator) {
        const finalParts = [];
        if (typeof label !== `undefined`)
          finalParts.push(applyStyle(configuration, label, Style.BOLD));
        if (typeof value !== `undefined`)
          finalParts.push(pretty(configuration, value[0], value[1]));
        if (finalParts.length === 0)
          finalParts.push(applyStyle(configuration, `${key}`, Style.BOLD));
        const finalLabel = finalParts.join(`: `);
        const createdNode = targetNode[finalLabel] = {};
        if (typeof children !== `undefined`) {
          copyTree(children, createdNode);
        }
      }
    };
    if (typeof printTree.children === `undefined`)
      throw new Error(`The root node must only contain children`);
    copyTree(printTree.children, target);
    return target;
  }
  function treeNodeToJson(printTree) {
    const copyTree = (printNode) => {
      var _a2;
      if (typeof printNode.children === `undefined`) {
        if (typeof printNode.value === `undefined`)
          throw new Error(`Assertion failed: Expected a value to be set if the children are missing`);
        return json(printNode.value[0], printNode.value[1]);
      }
      const iterator = Array.isArray(printNode.children) ? printNode.children.entries() : Object.entries((_a2 = printNode.children) != null ? _a2 : {});
      const targetChildren = Array.isArray(printNode.children) ? [] : {};
      for (const [key, child] of iterator)
        targetChildren[key] = copyTree(child);
      if (typeof printNode.value === `undefined`)
        return targetChildren;
      return {
        value: json(printNode.value[0], printNode.value[1]),
        children: targetChildren
      };
    };
    return copyTree(printTree);
  }
  function emitList(values, {configuration, stdout, json: json2}) {
    const children = values.map((value) => ({value}));
    emitTree({children}, {configuration, stdout, json: json2});
  }
  function emitTree(tree, {configuration, stdout, json: json2, separators = 0}) {
    var _a2;
    if (json2) {
      const iterator = Array.isArray(tree.children) ? tree.children.values() : Object.values((_a2 = tree.children) != null ? _a2 : {});
      for (const child of iterator)
        stdout.write(`${JSON.stringify(treeNodeToJson(child))}
`);
      return;
    }
    let treeOutput = (0, import_treeify.asTree)(treeNodeToTreeify(tree, {configuration}), false, false);
    if (separators >= 1)
      treeOutput = treeOutput.replace(/^([├└]─)/gm, `\u2502
$1`).replace(/^│\n/, ``);
    if (separators >= 2)
      for (let t5 = 0; t5 < 2; ++t5)
        treeOutput = treeOutput.replace(/^([│ ].{2}[├│ ].{2}[^\n]+\n)(([│ ]).{2}[├└].{2}[^\n]*\n[│ ].{2}[│ ].{2}[├└]─)/gm, `$1$3  \u2502
$2`).replace(/^│\n/, ``);
    if (separators >= 3)
      throw new Error(`Only the first two levels are accepted by treeUtils.emitTree`);
    stdout.write(treeOutput);
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/Cache.ts
  var import_fs6 = __toModule(require("fs"));
  var CACHE_VERSION = 8;
  var Cache = class {
    constructor(cacheCwd, {configuration, immutable = configuration.get(`enableImmutableCache`), check = false}) {
      this.markedFiles = new Set();
      this.mutexes = new Map();
      this.configuration = configuration;
      this.cwd = cacheCwd;
      this.immutable = immutable;
      this.check = check;
      const cacheKeyOverride = configuration.get(`cacheKeyOverride`);
      if (cacheKeyOverride !== null) {
        this.cacheKey = `${cacheKeyOverride}`;
      } else {
        const compressionLevel = configuration.get(`compressionLevel`);
        const compressionKey = compressionLevel !== DEFAULT_COMPRESSION_LEVEL ? `c${compressionLevel}` : ``;
        this.cacheKey = [
          CACHE_VERSION,
          compressionKey
        ].join(``);
      }
    }
    static async find(configuration, {immutable, check} = {}) {
      const cache2 = new Cache(configuration.get(`cacheFolder`), {configuration, immutable, check});
      await cache2.setup();
      return cache2;
    }
    get mirrorCwd() {
      if (!this.configuration.get(`enableMirror`))
        return null;
      const mirrorCwd = `${this.configuration.get(`globalFolder`)}/cache`;
      return mirrorCwd !== this.cwd ? mirrorCwd : null;
    }
    getVersionFilename(locator) {
      return `${slugifyLocator(locator)}-${this.cacheKey}.zip`;
    }
    getChecksumFilename(locator, checksum) {
      const contentChecksum = getHashComponent(checksum);
      const significantChecksum = contentChecksum.slice(0, 10);
      return `${slugifyLocator(locator)}-${significantChecksum}.zip`;
    }
    getLocatorPath(locator, expectedChecksum) {
      if (this.mirrorCwd === null)
        return ppath.resolve(this.cwd, this.getVersionFilename(locator));
      if (expectedChecksum === null)
        return null;
      const cacheKey = getCacheKeyComponent(expectedChecksum);
      if (cacheKey !== this.cacheKey)
        return null;
      return ppath.resolve(this.cwd, this.getChecksumFilename(locator, expectedChecksum));
    }
    getLocatorMirrorPath(locator) {
      const mirrorCwd = this.mirrorCwd;
      return mirrorCwd !== null ? ppath.resolve(mirrorCwd, this.getVersionFilename(locator)) : null;
    }
    async setup() {
      if (!this.configuration.get(`enableGlobalCache`)) {
        if (this.immutable) {
          if (!await xfs.existsPromise(this.cwd)) {
            throw new ReportError(MessageName.IMMUTABLE_CACHE, `Cache path does not exist.`);
          }
        } else {
          await xfs.mkdirPromise(this.cwd, {recursive: true});
          const gitignorePath = ppath.resolve(this.cwd, `.gitignore`);
          await xfs.changeFilePromise(gitignorePath, `/.gitignore
*.flock
`);
        }
      }
      if (this.mirrorCwd || !this.immutable) {
        await xfs.mkdirPromise(this.mirrorCwd || this.cwd, {recursive: true});
      }
    }
    async fetchPackageFromCache(locator, expectedChecksum, {onHit, onMiss, loader, skipIntegrityCheck}) {
      const mirrorPath = this.getLocatorMirrorPath(locator);
      const baseFs = new NodeFS();
      const validateFile = async (path3, refetchPath = null) => {
        const actualChecksum = !skipIntegrityCheck || !expectedChecksum ? `${this.cacheKey}/${await checksumFile(path3)}` : expectedChecksum;
        if (refetchPath !== null) {
          const previousChecksum = !skipIntegrityCheck || !expectedChecksum ? `${this.cacheKey}/${await checksumFile(refetchPath)}` : expectedChecksum;
          if (actualChecksum !== previousChecksum) {
            throw new ReportError(MessageName.CACHE_CHECKSUM_MISMATCH, `The remote archive doesn't match the local checksum - has the local cache been corrupted?`);
          }
        }
        if (expectedChecksum !== null && actualChecksum !== expectedChecksum) {
          let checksumBehavior;
          if (this.check)
            checksumBehavior = `throw`;
          else if (getCacheKeyComponent(expectedChecksum) !== getCacheKeyComponent(actualChecksum))
            checksumBehavior = `update`;
          else
            checksumBehavior = this.configuration.get(`checksumBehavior`);
          switch (checksumBehavior) {
            case `ignore`:
              return expectedChecksum;
            case `update`:
              return actualChecksum;
            default:
            case `throw`: {
              throw new ReportError(MessageName.CACHE_CHECKSUM_MISMATCH, `The remote archive doesn't match the expected checksum`);
            }
          }
        }
        return actualChecksum;
      };
      const validateFileAgainstRemote = async (cachePath2) => {
        if (!loader)
          throw new Error(`Cache check required but no loader configured for ${prettyLocator(this.configuration, locator)}`);
        const zipFs2 = await loader();
        const refetchPath = zipFs2.getRealPath();
        zipFs2.saveAndClose();
        await xfs.chmodPromise(refetchPath, 420);
        return await validateFile(cachePath2, refetchPath);
      };
      const loadPackageThroughMirror = async () => {
        if (mirrorPath === null || !await xfs.existsPromise(mirrorPath)) {
          const zipFs2 = await loader();
          const realPath = zipFs2.getRealPath();
          zipFs2.saveAndClose();
          return {source: `loader`, path: realPath};
        }
        const tempDir = await xfs.mktempPromise();
        const tempPath = ppath.join(tempDir, this.getVersionFilename(locator));
        await xfs.copyFilePromise(mirrorPath, tempPath, import_fs6.default.constants.COPYFILE_FICLONE);
        return {source: `mirror`, path: tempPath};
      };
      const loadPackage = async () => {
        if (!loader)
          throw new Error(`Cache entry required but missing for ${prettyLocator(this.configuration, locator)}`);
        if (this.immutable)
          throw new ReportError(MessageName.IMMUTABLE_CACHE, `Cache entry required but missing for ${prettyLocator(this.configuration, locator)}`);
        const {path: cachePathTemp, source: packageSource} = await loadPackageThroughMirror();
        await xfs.chmodPromise(cachePathTemp, 420);
        const checksum2 = await validateFile(cachePathTemp);
        const cachePath2 = this.getLocatorPath(locator, checksum2);
        if (!cachePath2)
          throw new Error(`Assertion failed: Expected the cache path to be available`);
        let mirrorPathTemp = null;
        if (packageSource !== `mirror` && mirrorPath !== null) {
          const tempDir = await xfs.mktempPromise();
          mirrorPathTemp = ppath.join(tempDir, this.getVersionFilename(locator));
          await xfs.copyFilePromise(cachePathTemp, mirrorPathTemp, import_fs6.default.constants.COPYFILE_FICLONE);
        }
        return await this.writeFileWithLock(cachePath2, async () => {
          return await this.writeFileWithLock(packageSource === `mirror` ? null : mirrorPath, async () => {
            await xfs.movePromise(cachePathTemp, cachePath2);
            if (mirrorPathTemp && mirrorPath)
              await xfs.movePromise(mirrorPathTemp, mirrorPath);
            return [cachePath2, checksum2];
          });
        });
      };
      const loadPackageThroughMutex = async () => {
        const mutexedLoad = async () => {
          const tentativeCachePath = this.getLocatorPath(locator, expectedChecksum);
          const cacheExists = tentativeCachePath !== null ? await baseFs.existsPromise(tentativeCachePath) : false;
          const action = cacheExists ? onHit : onMiss;
          if (action)
            action();
          if (!cacheExists) {
            return loadPackage();
          } else {
            let checksum2 = null;
            const cachePath2 = tentativeCachePath;
            if (this.check)
              checksum2 = await validateFileAgainstRemote(cachePath2);
            else
              checksum2 = await validateFile(cachePath2);
            return [cachePath2, checksum2];
          }
        };
        const mutex = mutexedLoad();
        this.mutexes.set(locator.locatorHash, mutex);
        try {
          return await mutex;
        } finally {
          this.mutexes.delete(locator.locatorHash);
        }
      };
      for (let mutex; mutex = this.mutexes.get(locator.locatorHash); )
        await mutex;
      const [cachePath, checksum] = await loadPackageThroughMutex();
      this.markedFiles.add(cachePath);
      let zipFs = null;
      const libzip = await getLibzipPromise();
      const lazyFs = new LazyFS(() => prettifySyncErrors(() => {
        return zipFs = new ZipFS(cachePath, {baseFs, libzip, readOnly: true});
      }, (message) => {
        return `Failed to open the cache entry for ${prettyLocator(this.configuration, locator)}: ${message}`;
      }), ppath);
      const aliasFs = new AliasFS(cachePath, {baseFs: lazyFs, pathUtils: ppath});
      const releaseFs = () => {
        if (zipFs !== null) {
          zipFs.discardAndClose();
        }
      };
      return [aliasFs, releaseFs, checksum];
    }
    async writeFileWithLock(file, generator) {
      if (file === null)
        return await generator();
      return await xfs.lockPromise(file, async () => {
        return await generator();
      });
    }
  };
  function getCacheKeyComponent(checksum) {
    const split2 = checksum.indexOf(`/`);
    return split2 !== -1 ? checksum.slice(0, split2) : null;
  }
  function getHashComponent(checksum) {
    const split2 = checksum.indexOf(`/`);
    return split2 !== -1 ? checksum.slice(split2 + 1) : checksum;
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/Configuration.ts
  var import_camelcase = __toModule(require_camelcase());
  var import_ci_info2 = __toModule(require_ci_info());
  var import_p_limit2 = __toModule(require_p_limit());
  var import_stream8 = __toModule(require("stream"));

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/CorePlugin.ts
  var CorePlugin = {
    hooks: {
      reduceDependency: (dependency, project, locator, initialDependency, {resolver, resolveOptions}) => {
        for (const {pattern, reference} of project.topLevelWorkspace.manifest.resolutions) {
          if (pattern.from && pattern.from.fullName !== stringifyIdent(locator))
            continue;
          if (pattern.from && pattern.from.description && pattern.from.description !== locator.reference)
            continue;
          if (pattern.descriptor.fullName !== stringifyIdent(dependency))
            continue;
          if (pattern.descriptor.description && pattern.descriptor.description !== dependency.range)
            continue;
          const alias = resolver.bindDescriptor(makeDescriptor(dependency, reference), project.topLevelWorkspace.anchoredLocator, resolveOptions);
          return alias;
        }
        return dependency;
      },
      validateProject: async (project, report) => {
        for (const workspace of project.workspaces) {
          const workspaceName = prettyWorkspace(project.configuration, workspace);
          await project.configuration.triggerHook((hooks) => {
            return hooks.validateWorkspace;
          }, workspace, {
            reportWarning: (name, text) => report.reportWarning(name, `${workspaceName}: ${text}`),
            reportError: (name, text) => report.reportError(name, `${workspaceName}: ${text}`)
          });
        }
      },
      validateWorkspace: async (workspace, report) => {
        const {manifest} = workspace;
        if (manifest.resolutions.length && workspace.cwd !== workspace.project.cwd)
          manifest.errors.push(new Error(`Resolutions field will be ignored`));
        for (const manifestError of manifest.errors) {
          report.reportWarning(MessageName.INVALID_MANIFEST, manifestError.message);
        }
      }
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/MultiFetcher.ts
  var MultiFetcher = class {
    constructor(fetchers) {
      this.fetchers = fetchers;
    }
    supports(locator, opts) {
      if (!this.tryFetcher(locator, opts))
        return false;
      return true;
    }
    getLocalPath(locator, opts) {
      const fetcher = this.getFetcher(locator, opts);
      return fetcher.getLocalPath(locator, opts);
    }
    async fetch(locator, opts) {
      const fetcher = this.getFetcher(locator, opts);
      return await fetcher.fetch(locator, opts);
    }
    tryFetcher(locator, opts) {
      const fetcher = this.fetchers.find((fetcher2) => fetcher2.supports(locator, opts));
      if (!fetcher)
        return null;
      return fetcher;
    }
    getFetcher(locator, opts) {
      const fetcher = this.fetchers.find((fetcher2) => fetcher2.supports(locator, opts));
      if (!fetcher)
        throw new ReportError(MessageName.FETCHER_NOT_FOUND, `${prettyLocator(opts.project.configuration, locator)} isn't supported by any available fetcher`);
      return fetcher;
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/MultiResolver.ts
  var MultiResolver = class {
    constructor(resolvers) {
      this.resolvers = resolvers.filter((resolver) => resolver);
    }
    supportsDescriptor(descriptor, opts) {
      const resolver = this.tryResolverByDescriptor(descriptor, opts);
      return !!resolver;
    }
    supportsLocator(locator, opts) {
      const resolver = this.tryResolverByLocator(locator, opts);
      return !!resolver;
    }
    shouldPersistResolution(locator, opts) {
      const resolver = this.getResolverByLocator(locator, opts);
      return resolver.shouldPersistResolution(locator, opts);
    }
    bindDescriptor(descriptor, fromLocator, opts) {
      const resolver = this.getResolverByDescriptor(descriptor, opts);
      return resolver.bindDescriptor(descriptor, fromLocator, opts);
    }
    getResolutionDependencies(descriptor, opts) {
      const resolver = this.getResolverByDescriptor(descriptor, opts);
      return resolver.getResolutionDependencies(descriptor, opts);
    }
    async getCandidates(descriptor, dependencies, opts) {
      const resolver = this.getResolverByDescriptor(descriptor, opts);
      return await resolver.getCandidates(descriptor, dependencies, opts);
    }
    async getSatisfying(descriptor, references, opts) {
      const resolver = this.getResolverByDescriptor(descriptor, opts);
      return resolver.getSatisfying(descriptor, references, opts);
    }
    async resolve(locator, opts) {
      const resolver = this.getResolverByLocator(locator, opts);
      return await resolver.resolve(locator, opts);
    }
    tryResolverByDescriptor(descriptor, opts) {
      const resolver = this.resolvers.find((resolver2) => resolver2.supportsDescriptor(descriptor, opts));
      if (!resolver)
        return null;
      return resolver;
    }
    getResolverByDescriptor(descriptor, opts) {
      const resolver = this.resolvers.find((resolver2) => resolver2.supportsDescriptor(descriptor, opts));
      if (!resolver)
        throw new Error(`${prettyDescriptor(opts.project.configuration, descriptor)} isn't supported by any available resolver`);
      return resolver;
    }
    tryResolverByLocator(locator, opts) {
      const resolver = this.resolvers.find((resolver2) => resolver2.supportsLocator(locator, opts));
      if (!resolver)
        return null;
      return resolver;
    }
    getResolverByLocator(locator, opts) {
      const resolver = this.resolvers.find((resolver2) => resolver2.supportsLocator(locator, opts));
      if (!resolver)
        throw new Error(`${prettyLocator(opts.project.configuration, locator)} isn't supported by any available resolver`);
      return resolver;
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/ProtocolResolver.ts
  var import_semver5 = __toModule(require_semver2());
  var TAG_REGEXP = /^(?!v)[a-z0-9._-]+$/i;
  var ProtocolResolver = class {
    supportsDescriptor(descriptor, opts) {
      if (validRange(descriptor.range))
        return true;
      if (TAG_REGEXP.test(descriptor.range))
        return true;
      return false;
    }
    supportsLocator(locator, opts) {
      if (import_semver5.default.valid(locator.reference))
        return true;
      if (TAG_REGEXP.test(locator.reference))
        return true;
      return false;
    }
    shouldPersistResolution(locator, opts) {
      return opts.resolver.shouldPersistResolution(this.forwardLocator(locator, opts), opts);
    }
    bindDescriptor(descriptor, fromLocator, opts) {
      return opts.resolver.bindDescriptor(this.forwardDescriptor(descriptor, opts), fromLocator, opts);
    }
    getResolutionDependencies(descriptor, opts) {
      return opts.resolver.getResolutionDependencies(this.forwardDescriptor(descriptor, opts), opts);
    }
    async getCandidates(descriptor, dependencies, opts) {
      return await opts.resolver.getCandidates(this.forwardDescriptor(descriptor, opts), dependencies, opts);
    }
    async getSatisfying(descriptor, references, opts) {
      return await opts.resolver.getSatisfying(this.forwardDescriptor(descriptor, opts), references, opts);
    }
    async resolve(locator, opts) {
      const pkg = await opts.resolver.resolve(this.forwardLocator(locator, opts), opts);
      return renamePackage(pkg, locator);
    }
    forwardDescriptor(descriptor, opts) {
      return makeDescriptor(descriptor, `${opts.project.configuration.get(`defaultProtocol`)}${descriptor.range}`);
    }
    forwardLocator(locator, opts) {
      return makeLocator(locator, `${opts.project.configuration.get(`defaultProtocol`)}${locator.reference}`);
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/VirtualFetcher.ts
  var VirtualFetcher = class {
    supports(locator) {
      if (!locator.reference.startsWith(`virtual:`))
        return false;
      return true;
    }
    getLocalPath(locator, opts) {
      const splitPoint = locator.reference.indexOf(`#`);
      if (splitPoint === -1)
        throw new Error(`Invalid virtual package reference`);
      const nextReference = locator.reference.slice(splitPoint + 1);
      const nextLocator = makeLocator(locator, nextReference);
      return opts.fetcher.getLocalPath(nextLocator, opts);
    }
    async fetch(locator, opts) {
      const splitPoint = locator.reference.indexOf(`#`);
      if (splitPoint === -1)
        throw new Error(`Invalid virtual package reference`);
      const nextReference = locator.reference.slice(splitPoint + 1);
      const nextLocator = makeLocator(locator, nextReference);
      const parentFetch = await opts.fetcher.fetch(nextLocator, opts);
      return await this.ensureVirtualLink(locator, parentFetch, opts);
    }
    getLocatorFilename(locator) {
      return slugifyLocator(locator);
    }
    async ensureVirtualLink(locator, sourceFetch, opts) {
      const to = sourceFetch.packageFs.getRealPath();
      const virtualFolder = opts.project.configuration.get(`virtualFolder`);
      const virtualName = this.getLocatorFilename(locator);
      const virtualPath = VirtualFS.makeVirtualPath(virtualFolder, virtualName, to);
      const aliasFs = new AliasFS(virtualPath, {baseFs: sourceFetch.packageFs, pathUtils: ppath});
      return __spreadProps(__spreadValues({}, sourceFetch), {packageFs: aliasFs});
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/VirtualResolver.ts
  var _VirtualResolver = class {
    static isVirtualDescriptor(descriptor) {
      if (!descriptor.range.startsWith(_VirtualResolver.protocol))
        return false;
      return true;
    }
    static isVirtualLocator(locator) {
      if (!locator.reference.startsWith(_VirtualResolver.protocol))
        return false;
      return true;
    }
    supportsDescriptor(descriptor, opts) {
      return _VirtualResolver.isVirtualDescriptor(descriptor);
    }
    supportsLocator(locator, opts) {
      return _VirtualResolver.isVirtualLocator(locator);
    }
    shouldPersistResolution(locator, opts) {
      return false;
    }
    bindDescriptor(descriptor, locator, opts) {
      throw new Error(`Assertion failed: calling "bindDescriptor" on a virtual descriptor is unsupported`);
    }
    getResolutionDependencies(descriptor, opts) {
      throw new Error(`Assertion failed: calling "getResolutionDependencies" on a virtual descriptor is unsupported`);
    }
    async getCandidates(descriptor, dependencies, opts) {
      throw new Error(`Assertion failed: calling "getCandidates" on a virtual descriptor is unsupported`);
    }
    async getSatisfying(descriptor, candidates, opts) {
      throw new Error(`Assertion failed: calling "getSatisfying" on a virtual descriptor is unsupported`);
    }
    async resolve(locator, opts) {
      throw new Error(`Assertion failed: calling "resolve" on a virtual locator is unsupported`);
    }
  };
  var VirtualResolver = _VirtualResolver;
  VirtualResolver.protocol = `virtual:`;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/WorkspaceResolver.ts
  var _WorkspaceResolver = class {
    supportsDescriptor(descriptor, opts) {
      if (descriptor.range.startsWith(_WorkspaceResolver.protocol))
        return true;
      const workspace = opts.project.tryWorkspaceByDescriptor(descriptor);
      if (workspace !== null)
        return true;
      return false;
    }
    supportsLocator(locator, opts) {
      if (!locator.reference.startsWith(_WorkspaceResolver.protocol))
        return false;
      return true;
    }
    shouldPersistResolution(locator, opts) {
      return false;
    }
    bindDescriptor(descriptor, fromLocator, opts) {
      return descriptor;
    }
    getResolutionDependencies(descriptor, opts) {
      return [];
    }
    async getCandidates(descriptor, dependencies, opts) {
      const workspace = opts.project.getWorkspaceByDescriptor(descriptor);
      return [workspace.anchoredLocator];
    }
    async getSatisfying(descriptor, references, opts) {
      return null;
    }
    async resolve(locator, opts) {
      const workspace = opts.project.getWorkspaceByCwd(locator.reference.slice(_WorkspaceResolver.protocol.length));
      return __spreadProps(__spreadValues({}, locator), {
        version: workspace.manifest.version || `0.0.0`,
        languageName: `unknown`,
        linkType: LinkType.SOFT,
        dependencies: new Map([...workspace.manifest.dependencies, ...workspace.manifest.devDependencies]),
        peerDependencies: new Map([...workspace.manifest.peerDependencies]),
        dependenciesMeta: workspace.manifest.dependenciesMeta,
        peerDependenciesMeta: workspace.manifest.peerDependenciesMeta,
        bin: workspace.manifest.bin
      });
    }
  };
  var WorkspaceResolver = _WorkspaceResolver;
  WorkspaceResolver.protocol = `workspace:`;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/WorkspaceFetcher.ts
  var WorkspaceFetcher = class {
    supports(locator) {
      if (!locator.reference.startsWith(WorkspaceResolver.protocol))
        return false;
      return true;
    }
    getLocalPath(locator, opts) {
      return this.getWorkspace(locator, opts).cwd;
    }
    async fetch(locator, opts) {
      const sourcePath = this.getWorkspace(locator, opts).cwd;
      return {packageFs: new CwdFS(sourcePath), prefixPath: PortablePath.dot, localPath: sourcePath};
    }
    getWorkspace(locator, opts) {
      return opts.project.getWorkspaceByCwd(locator.reference.slice(WorkspaceResolver.protocol.length));
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/nodeUtils.ts
  var import_module = __toModule(require("module"));
  function builtinModules() {
    return new Set(import_module.default.builtinModules || Object.keys(process.binding(`natives`)));
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/Configuration.ts
  var IGNORED_ENV_VARIABLES = new Set([
    `binFolder`,
    `version`,
    `flags`,
    `profile`,
    `gpg`,
    `ignoreNode`,
    `wrapOutput`
  ]);
  var ENVIRONMENT_PREFIX = `yarn_`;
  var DEFAULT_RC_FILENAME = `.yarnrc.yml`;
  var DEFAULT_LOCK_FILENAME = `yarn.lock`;
  var SECRET = `********`;
  var SettingsType;
  (function(SettingsType2) {
    SettingsType2["ANY"] = `ANY`;
    SettingsType2["BOOLEAN"] = `BOOLEAN`;
    SettingsType2["ABSOLUTE_PATH"] = `ABSOLUTE_PATH`;
    SettingsType2["LOCATOR"] = `LOCATOR`;
    SettingsType2["LOCATOR_LOOSE"] = `LOCATOR_LOOSE`;
    SettingsType2["NUMBER"] = `NUMBER`;
    SettingsType2["STRING"] = `STRING`;
    SettingsType2["SECRET"] = `SECRET`;
    SettingsType2["SHAPE"] = `SHAPE`;
    SettingsType2["MAP"] = `MAP`;
  })(SettingsType || (SettingsType = {}));
  var FormatType = Type;
  var coreDefinitions = {
    lastUpdateCheck: {
      description: `Last timestamp we checked whether new Yarn versions were available`,
      type: SettingsType.STRING,
      default: null
    },
    yarnPath: {
      description: `Path to the local executable that must be used over the global one`,
      type: SettingsType.ABSOLUTE_PATH,
      default: null
    },
    ignorePath: {
      description: `If true, the local executable will be ignored when using the global one`,
      type: SettingsType.BOOLEAN,
      default: false
    },
    ignoreCwd: {
      description: `If true, the \`--cwd\` flag will be ignored`,
      type: SettingsType.BOOLEAN,
      default: false
    },
    cacheKeyOverride: {
      description: `A global cache key override; used only for test purposes`,
      type: SettingsType.STRING,
      default: null
    },
    globalFolder: {
      description: `Folder where are stored the system-wide settings`,
      type: SettingsType.ABSOLUTE_PATH,
      default: getDefaultGlobalFolder()
    },
    cacheFolder: {
      description: `Folder where the cache files must be written`,
      type: SettingsType.ABSOLUTE_PATH,
      default: `./.yarn/cache`
    },
    compressionLevel: {
      description: `Zip files compression level, from 0 to 9 or mixed (a variant of 9, which stores some files uncompressed, when compression doesn't yield good results)`,
      type: SettingsType.NUMBER,
      values: [`mixed`, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
      default: DEFAULT_COMPRESSION_LEVEL
    },
    virtualFolder: {
      description: `Folder where the virtual packages (cf doc) will be mapped on the disk (must be named __virtual__)`,
      type: SettingsType.ABSOLUTE_PATH,
      default: `./.yarn/__virtual__`
    },
    lockfileFilename: {
      description: `Name of the files where the Yarn dependency tree entries must be stored`,
      type: SettingsType.STRING,
      default: DEFAULT_LOCK_FILENAME
    },
    installStatePath: {
      description: `Path of the file where the install state will be persisted`,
      type: SettingsType.ABSOLUTE_PATH,
      default: `./.yarn/install-state.gz`
    },
    immutablePatterns: {
      description: `Array of glob patterns; files matching them won't be allowed to change during immutable installs`,
      type: SettingsType.STRING,
      default: [],
      isArray: true
    },
    rcFilename: {
      description: `Name of the files where the configuration can be found`,
      type: SettingsType.STRING,
      default: getRcFilename()
    },
    enableGlobalCache: {
      description: `If true, the system-wide cache folder will be used regardless of \`cache-folder\``,
      type: SettingsType.BOOLEAN,
      default: false
    },
    enableColors: {
      description: `If true, the CLI is allowed to use colors in its output`,
      type: SettingsType.BOOLEAN,
      default: supportsColor,
      defaultText: `<dynamic>`
    },
    enableHyperlinks: {
      description: `If true, the CLI is allowed to use hyperlinks in its output`,
      type: SettingsType.BOOLEAN,
      default: supportsHyperlinks,
      defaultText: `<dynamic>`
    },
    enableInlineBuilds: {
      description: `If true, the CLI will print the build output on the command line`,
      type: SettingsType.BOOLEAN,
      default: import_ci_info2.isCI,
      defaultText: `<dynamic>`
    },
    enableMessageNames: {
      description: `If true, the CLI will prefix most messages with codes suitable for search engines`,
      type: SettingsType.BOOLEAN,
      default: true
    },
    enableProgressBars: {
      description: `If true, the CLI is allowed to show a progress bar for long-running events`,
      type: SettingsType.BOOLEAN,
      default: !import_ci_info2.isCI && process.stdout.isTTY && process.stdout.columns > 22,
      defaultText: `<dynamic>`
    },
    enableTimers: {
      description: `If true, the CLI is allowed to print the time spent executing commands`,
      type: SettingsType.BOOLEAN,
      default: true
    },
    preferAggregateCacheInfo: {
      description: `If true, the CLI will only print a one-line report of any cache changes`,
      type: SettingsType.BOOLEAN,
      default: import_ci_info2.isCI
    },
    preferInteractive: {
      description: `If true, the CLI will automatically use the interactive mode when called from a TTY`,
      type: SettingsType.BOOLEAN,
      default: false
    },
    preferTruncatedLines: {
      description: `If true, the CLI will truncate lines that would go beyond the size of the terminal`,
      type: SettingsType.BOOLEAN,
      default: false
    },
    progressBarStyle: {
      description: `Which style of progress bar should be used (only when progress bars are enabled)`,
      type: SettingsType.STRING,
      default: void 0,
      defaultText: `<dynamic>`
    },
    defaultLanguageName: {
      description: `Default language mode that should be used when a package doesn't offer any insight`,
      type: SettingsType.STRING,
      default: `node`
    },
    defaultProtocol: {
      description: `Default resolution protocol used when resolving pure semver and tag ranges`,
      type: SettingsType.STRING,
      default: `npm:`
    },
    enableTransparentWorkspaces: {
      description: `If false, Yarn won't automatically resolve workspace dependencies unless they use the \`workspace:\` protocol`,
      type: SettingsType.BOOLEAN,
      default: true
    },
    enableMirror: {
      description: `If true, the downloaded packages will be retrieved and stored in both the local and global folders`,
      type: SettingsType.BOOLEAN,
      default: true
    },
    enableNetwork: {
      description: `If false, the package manager will refuse to use the network if required to`,
      type: SettingsType.BOOLEAN,
      default: true
    },
    httpProxy: {
      description: `URL of the http proxy that must be used for outgoing http requests`,
      type: SettingsType.STRING,
      default: null
    },
    httpsProxy: {
      description: `URL of the http proxy that must be used for outgoing https requests`,
      type: SettingsType.STRING,
      default: null
    },
    unsafeHttpWhitelist: {
      description: `List of the hostnames for which http queries are allowed (glob patterns are supported)`,
      type: SettingsType.STRING,
      default: [],
      isArray: true
    },
    httpTimeout: {
      description: `Timeout of each http request in milliseconds`,
      type: SettingsType.NUMBER,
      default: 6e4
    },
    httpRetry: {
      description: `Retry times on http failure`,
      type: SettingsType.NUMBER,
      default: 3
    },
    networkConcurrency: {
      description: `Maximal number of concurrent requests`,
      type: SettingsType.NUMBER,
      default: Infinity
    },
    networkSettings: {
      description: `Network settings per hostname (glob patterns are supported)`,
      type: SettingsType.MAP,
      valueDefinition: {
        description: ``,
        type: SettingsType.SHAPE,
        properties: {
          caFilePath: {
            description: `Path to file containing one or multiple Certificate Authority signing certificates`,
            type: SettingsType.ABSOLUTE_PATH,
            default: null
          },
          enableNetwork: {
            description: `If false, the package manager will refuse to use the network if required to`,
            type: SettingsType.BOOLEAN,
            default: null
          },
          httpProxy: {
            description: `URL of the http proxy that must be used for outgoing http requests`,
            type: SettingsType.STRING,
            default: null
          },
          httpsProxy: {
            description: `URL of the http proxy that must be used for outgoing https requests`,
            type: SettingsType.STRING,
            default: null
          }
        }
      }
    },
    caFilePath: {
      description: `A path to a file containing one or multiple Certificate Authority signing certificates`,
      type: SettingsType.ABSOLUTE_PATH,
      default: null
    },
    enableStrictSsl: {
      description: `If false, SSL certificate errors will be ignored`,
      type: SettingsType.BOOLEAN,
      default: true
    },
    logFilters: {
      description: `Overrides for log levels`,
      type: SettingsType.SHAPE,
      isArray: true,
      concatenateValues: true,
      properties: {
        code: {
          description: `Code of the messages covered by this override`,
          type: SettingsType.STRING,
          default: void 0
        },
        text: {
          description: `Code of the texts covered by this override`,
          type: SettingsType.STRING,
          default: void 0
        },
        level: {
          description: `Log level override, set to null to remove override`,
          type: SettingsType.STRING,
          values: Object.values(LogLevel),
          isNullable: true,
          default: void 0
        }
      }
    },
    enableTelemetry: {
      description: `If true, telemetry will be periodically sent, following the rules in https://yarnpkg.com/advanced/telemetry`,
      type: SettingsType.BOOLEAN,
      default: true
    },
    telemetryInterval: {
      description: `Minimal amount of time between two telemetry uploads, in days`,
      type: SettingsType.NUMBER,
      default: 7
    },
    telemetryUserId: {
      description: `If you desire to tell us which project you are, you can set this field. Completely optional and opt-in.`,
      type: SettingsType.STRING,
      default: null
    },
    enableScripts: {
      description: `If true, packages are allowed to have install scripts by default`,
      type: SettingsType.BOOLEAN,
      default: true
    },
    enableImmutableCache: {
      description: `If true, the cache is reputed immutable and actions that would modify it will throw`,
      type: SettingsType.BOOLEAN,
      default: false
    },
    checksumBehavior: {
      description: `Enumeration defining what to do when a checksum doesn't match expectations`,
      type: SettingsType.STRING,
      default: `throw`
    },
    packageExtensions: {
      description: `Map of package corrections to apply on the dependency tree`,
      type: SettingsType.MAP,
      valueDefinition: {
        description: `The extension that will be applied to any package whose version matches the specified range`,
        type: SettingsType.SHAPE,
        properties: {
          dependencies: {
            description: `The set of dependencies that must be made available to the current package in order for it to work properly`,
            type: SettingsType.MAP,
            valueDefinition: {
              description: `A range`,
              type: SettingsType.STRING
            }
          },
          peerDependencies: {
            description: `Inherited dependencies - the consumer of the package will be tasked to provide them`,
            type: SettingsType.MAP,
            valueDefinition: {
              description: `A semver range`,
              type: SettingsType.STRING
            }
          },
          peerDependenciesMeta: {
            description: `Extra information related to the dependencies listed in the peerDependencies field`,
            type: SettingsType.MAP,
            valueDefinition: {
              description: `The peerDependency meta`,
              type: SettingsType.SHAPE,
              properties: {
                optional: {
                  description: `If true, the selected peer dependency will be marked as optional by the package manager and the consumer omitting it won't be reported as an error`,
                  type: SettingsType.BOOLEAN,
                  default: false
                }
              }
            }
          }
        }
      }
    }
  };
  function parseValue(configuration, path3, value, definition, folder) {
    if (definition.isArray || definition.type === SettingsType.ANY && Array.isArray(value)) {
      if (!Array.isArray(value)) {
        return String(value).split(/,/).map((segment) => {
          return parseSingleValue(configuration, path3, segment, definition, folder);
        });
      } else {
        return value.map((sub, i) => parseSingleValue(configuration, `${path3}[${i}]`, sub, definition, folder));
      }
    } else {
      if (Array.isArray(value)) {
        throw new Error(`Non-array configuration settings "${path3}" cannot be an array`);
      } else {
        return parseSingleValue(configuration, path3, value, definition, folder);
      }
    }
  }
  function parseSingleValue(configuration, path3, value, definition, folder) {
    var _a2;
    switch (definition.type) {
      case SettingsType.ANY:
        return value;
      case SettingsType.SHAPE:
        return parseShape(configuration, path3, value, definition, folder);
      case SettingsType.MAP:
        return parseMap(configuration, path3, value, definition, folder);
    }
    if (value === null && !definition.isNullable && definition.default !== null)
      throw new Error(`Non-nullable configuration settings "${path3}" cannot be set to null`);
    if ((_a2 = definition.values) == null ? void 0 : _a2.includes(value))
      return value;
    const interpretValue = () => {
      if (definition.type === SettingsType.BOOLEAN && typeof value !== `string`)
        return parseBoolean(value);
      if (typeof value !== `string`)
        throw new Error(`Expected value (${value}) to be a string`);
      const valueWithReplacedVariables = replaceEnvVariables(value, {
        env: process.env
      });
      switch (definition.type) {
        case SettingsType.ABSOLUTE_PATH:
          return ppath.resolve(folder, npath.toPortablePath(valueWithReplacedVariables));
        case SettingsType.LOCATOR_LOOSE:
          return parseLocator(valueWithReplacedVariables, false);
        case SettingsType.NUMBER:
          return parseInt(valueWithReplacedVariables);
        case SettingsType.LOCATOR:
          return parseLocator(valueWithReplacedVariables);
        case SettingsType.BOOLEAN:
          return parseBoolean(valueWithReplacedVariables);
        default:
          return valueWithReplacedVariables;
      }
    };
    const interpreted = interpretValue();
    if (definition.values && !definition.values.includes(interpreted))
      throw new Error(`Invalid value, expected one of ${definition.values.join(`, `)}`);
    return interpreted;
  }
  function parseShape(configuration, path3, value, definition, folder) {
    if (typeof value !== `object` || Array.isArray(value))
      throw new UsageError(`Object configuration settings "${path3}" must be an object`);
    const result = getDefaultValue(configuration, definition, {
      ignoreArrays: true
    });
    if (value === null)
      return result;
    for (const [propKey, propValue] of Object.entries(value)) {
      const subPath = `${path3}.${propKey}`;
      const subDefinition = definition.properties[propKey];
      if (!subDefinition)
        throw new UsageError(`Unrecognized configuration settings found: ${path3}.${propKey} - run "yarn config -v" to see the list of settings supported in Yarn`);
      result.set(propKey, parseValue(configuration, subPath, propValue, definition.properties[propKey], folder));
    }
    return result;
  }
  function parseMap(configuration, path3, value, definition, folder) {
    const result = new Map();
    if (typeof value !== `object` || Array.isArray(value))
      throw new UsageError(`Map configuration settings "${path3}" must be an object`);
    if (value === null)
      return result;
    for (const [propKey, propValue] of Object.entries(value)) {
      const normalizedKey = definition.normalizeKeys ? definition.normalizeKeys(propKey) : propKey;
      const subPath = `${path3}['${normalizedKey}']`;
      const valueDefinition = definition.valueDefinition;
      result.set(normalizedKey, parseValue(configuration, subPath, propValue, valueDefinition, folder));
    }
    return result;
  }
  function getDefaultValue(configuration, definition, {ignoreArrays = false} = {}) {
    switch (definition.type) {
      case SettingsType.SHAPE:
        {
          if (definition.isArray && !ignoreArrays)
            return [];
          const result = new Map();
          for (const [propKey, propDefinition] of Object.entries(definition.properties))
            result.set(propKey, getDefaultValue(configuration, propDefinition));
          return result;
        }
        break;
      case SettingsType.MAP:
        {
          if (definition.isArray && !ignoreArrays)
            return [];
          return new Map();
        }
        break;
      case SettingsType.ABSOLUTE_PATH:
        {
          if (definition.default === null)
            return null;
          if (configuration.projectCwd === null) {
            if (ppath.isAbsolute(definition.default)) {
              return ppath.normalize(definition.default);
            } else if (definition.isNullable) {
              return null;
            } else {
              return void 0;
            }
          } else {
            if (Array.isArray(definition.default)) {
              return definition.default.map((entry) => ppath.resolve(configuration.projectCwd, entry));
            } else {
              return ppath.resolve(configuration.projectCwd, definition.default);
            }
          }
        }
        break;
      default:
        {
          return definition.default;
        }
        break;
    }
  }
  function transformConfiguration(rawValue, definition, transforms2) {
    if (definition.type === SettingsType.SECRET && typeof rawValue === `string` && transforms2.hideSecrets)
      return SECRET;
    if (definition.type === SettingsType.ABSOLUTE_PATH && typeof rawValue === `string` && transforms2.getNativePaths)
      return npath.fromPortablePath(rawValue);
    if (definition.isArray && Array.isArray(rawValue)) {
      const newValue = [];
      for (const value of rawValue)
        newValue.push(transformConfiguration(value, definition, transforms2));
      return newValue;
    }
    if (definition.type === SettingsType.MAP && rawValue instanceof Map) {
      const newValue = new Map();
      for (const [key, value] of rawValue.entries())
        newValue.set(key, transformConfiguration(value, definition.valueDefinition, transforms2));
      return newValue;
    }
    if (definition.type === SettingsType.SHAPE && rawValue instanceof Map) {
      const newValue = new Map();
      for (const [key, value] of rawValue.entries()) {
        const propertyDefinition = definition.properties[key];
        newValue.set(key, transformConfiguration(value, propertyDefinition, transforms2));
      }
      return newValue;
    }
    return rawValue;
  }
  function getEnvironmentSettings() {
    const environmentSettings = {};
    for (let [key, value] of Object.entries(process.env)) {
      key = key.toLowerCase();
      if (!key.startsWith(ENVIRONMENT_PREFIX))
        continue;
      key = (0, import_camelcase.default)(key.slice(ENVIRONMENT_PREFIX.length));
      environmentSettings[key] = value;
    }
    return environmentSettings;
  }
  function getRcFilename() {
    const rcKey = `${ENVIRONMENT_PREFIX}rc_filename`;
    for (const [key, value] of Object.entries(process.env))
      if (key.toLowerCase() === rcKey && typeof value === `string`)
        return value;
    return DEFAULT_RC_FILENAME;
  }
  var ProjectLookup;
  (function(ProjectLookup2) {
    ProjectLookup2[ProjectLookup2["LOCKFILE"] = 0] = "LOCKFILE";
    ProjectLookup2[ProjectLookup2["MANIFEST"] = 1] = "MANIFEST";
    ProjectLookup2[ProjectLookup2["NONE"] = 2] = "NONE";
  })(ProjectLookup || (ProjectLookup = {}));
  var _Configuration = class {
    constructor(startingCwd) {
      this.projectCwd = null;
      this.plugins = new Map();
      this.settings = new Map();
      this.values = new Map();
      this.sources = new Map();
      this.invalid = new Map();
      this.packageExtensions = new Map();
      this.limits = new Map();
      this.startingCwd = startingCwd;
    }
    static create(startingCwd, projectCwdOrPlugins, maybePlugins) {
      const configuration = new _Configuration(startingCwd);
      if (typeof projectCwdOrPlugins !== `undefined` && !(projectCwdOrPlugins instanceof Map))
        configuration.projectCwd = projectCwdOrPlugins;
      configuration.importSettings(coreDefinitions);
      const plugins = typeof maybePlugins !== `undefined` ? maybePlugins : projectCwdOrPlugins instanceof Map ? projectCwdOrPlugins : new Map();
      for (const [name, plugin16] of plugins)
        configuration.activatePlugin(name, plugin16);
      return configuration;
    }
    static async find(startingCwd, pluginConfiguration, {lookup = 0, strict = true, usePath = false, useRc = true} = {}) {
      const environmentSettings = getEnvironmentSettings();
      delete environmentSettings.rcFilename;
      const rcFiles = await _Configuration.findRcFiles(startingCwd);
      const homeRcFile = await _Configuration.findHomeRcFile();
      if (homeRcFile) {
        const rcFile = rcFiles.find((rcFile2) => rcFile2.path === homeRcFile.path);
        if (rcFile) {
          rcFile.strict = false;
        } else {
          rcFiles.push(__spreadProps(__spreadValues({}, homeRcFile), {strict: false}));
        }
      }
      const pickCoreFields = ({ignoreCwd, yarnPath, ignorePath, lockfileFilename: lockfileFilename2}) => ({ignoreCwd, yarnPath, ignorePath, lockfileFilename: lockfileFilename2});
      const excludeCoreFields = (_a2) => {
        var _b = _a2, {ignoreCwd, yarnPath, ignorePath, lockfileFilename: lockfileFilename2} = _b, rest = __objRest(_b, ["ignoreCwd", "yarnPath", "ignorePath", "lockfileFilename"]);
        return rest;
      };
      const configuration = new _Configuration(startingCwd);
      configuration.importSettings(pickCoreFields(coreDefinitions));
      configuration.useWithSource(`<environment>`, pickCoreFields(environmentSettings), startingCwd, {strict: false});
      for (const {path: path3, cwd, data} of rcFiles)
        configuration.useWithSource(path3, pickCoreFields(data), cwd, {strict: false});
      if (usePath) {
        const yarnPath = configuration.get(`yarnPath`);
        const ignorePath = configuration.get(`ignorePath`);
        if (yarnPath !== null && !ignorePath) {
          return configuration;
        }
      }
      const lockfileFilename = configuration.get(`lockfileFilename`);
      let projectCwd;
      switch (lookup) {
        case 0:
          {
            projectCwd = await _Configuration.findProjectCwd(startingCwd, lockfileFilename);
          }
          break;
        case 1:
          {
            projectCwd = await _Configuration.findProjectCwd(startingCwd, null);
          }
          break;
        case 2:
          {
            if (xfs.existsSync(ppath.join(startingCwd, `package.json`))) {
              projectCwd = ppath.resolve(startingCwd);
            } else {
              projectCwd = null;
            }
          }
          break;
      }
      configuration.startingCwd = startingCwd;
      configuration.projectCwd = projectCwd;
      configuration.importSettings(excludeCoreFields(coreDefinitions));
      const plugins = new Map([
        [`@@core`, CorePlugin]
      ]);
      const getDefault = (object) => {
        return `default` in object ? object.default : object;
      };
      if (pluginConfiguration !== null) {
        for (const request2 of pluginConfiguration.plugins.keys())
          plugins.set(request2, getDefault(pluginConfiguration.modules.get(request2)));
        const requireEntries = new Map();
        for (const request2 of builtinModules())
          requireEntries.set(request2, () => dynamicRequire(request2));
        for (const [request2, embedModule] of pluginConfiguration.modules)
          requireEntries.set(request2, () => embedModule);
        const dynamicPlugins = new Set();
        const importPlugin = (pluginPath, source) => {
          const {factory, name} = dynamicRequire(npath.fromPortablePath(pluginPath));
          if (dynamicPlugins.has(name))
            return;
          const pluginRequireEntries = new Map(requireEntries);
          const pluginRequire = (request2) => {
            if (pluginRequireEntries.has(request2)) {
              return pluginRequireEntries.get(request2)();
            } else {
              throw new UsageError(`This plugin cannot access the package referenced via ${request2} which is neither a builtin, nor an exposed entry`);
            }
          };
          const plugin16 = prettifySyncErrors(() => {
            return getDefault(factory(pluginRequire));
          }, (message) => {
            return `${message} (when initializing ${name}, defined in ${source})`;
          });
          requireEntries.set(name, () => plugin16);
          dynamicPlugins.add(name);
          plugins.set(name, plugin16);
        };
        if (environmentSettings.plugins) {
          for (const userProvidedPath of environmentSettings.plugins.split(`;`)) {
            const pluginPath = ppath.resolve(startingCwd, npath.toPortablePath(userProvidedPath));
            importPlugin(pluginPath, `<environment>`);
          }
        }
        for (const {path: path3, cwd, data} of rcFiles) {
          if (!useRc)
            continue;
          if (!Array.isArray(data.plugins))
            continue;
          for (const userPluginEntry of data.plugins) {
            const userProvidedPath = typeof userPluginEntry !== `string` ? userPluginEntry.path : userPluginEntry;
            const pluginPath = ppath.resolve(cwd, npath.toPortablePath(userProvidedPath));
            importPlugin(pluginPath, path3);
          }
        }
      }
      for (const [name, plugin16] of plugins)
        configuration.activatePlugin(name, plugin16);
      configuration.useWithSource(`<environment>`, excludeCoreFields(environmentSettings), startingCwd, {strict});
      for (const {path: path3, cwd, data, strict: isStrict} of rcFiles)
        configuration.useWithSource(path3, excludeCoreFields(data), cwd, {strict: isStrict != null ? isStrict : strict});
      if (configuration.get(`enableGlobalCache`)) {
        configuration.values.set(`cacheFolder`, `${configuration.get(`globalFolder`)}/cache`);
        configuration.sources.set(`cacheFolder`, `<internal>`);
      }
      await configuration.refreshPackageExtensions();
      return configuration;
    }
    static async findRcFiles(startingCwd) {
      const rcFilename = getRcFilename();
      const rcFiles = [];
      let nextCwd = startingCwd;
      let currentCwd = null;
      while (nextCwd !== currentCwd) {
        currentCwd = nextCwd;
        const rcPath = ppath.join(currentCwd, rcFilename);
        if (xfs.existsSync(rcPath)) {
          const content = await xfs.readFilePromise(rcPath, `utf8`);
          let data;
          try {
            data = parseSyml(content);
          } catch (error) {
            let tip = ``;
            if (content.match(/^\s+(?!-)[^:]+\s+\S+/m))
              tip = ` (in particular, make sure you list the colons after each key name)`;
            throw new UsageError(`Parse error when loading ${rcPath}; please check it's proper Yaml${tip}`);
          }
          rcFiles.push({path: rcPath, cwd: currentCwd, data});
        }
        nextCwd = ppath.dirname(currentCwd);
      }
      return rcFiles;
    }
    static async findHomeRcFile() {
      const rcFilename = getRcFilename();
      const homeFolder = getHomeFolder();
      const homeRcFilePath = ppath.join(homeFolder, rcFilename);
      if (xfs.existsSync(homeRcFilePath)) {
        const content = await xfs.readFilePromise(homeRcFilePath, `utf8`);
        const data = parseSyml(content);
        return {path: homeRcFilePath, cwd: homeFolder, data};
      }
      return null;
    }
    static async findProjectCwd(startingCwd, lockfileFilename) {
      let projectCwd = null;
      let nextCwd = startingCwd;
      let currentCwd = null;
      while (nextCwd !== currentCwd) {
        currentCwd = nextCwd;
        if (xfs.existsSync(ppath.join(currentCwd, `package.json`)))
          projectCwd = currentCwd;
        if (lockfileFilename !== null) {
          if (xfs.existsSync(ppath.join(currentCwd, lockfileFilename))) {
            projectCwd = currentCwd;
            break;
          }
        } else {
          if (projectCwd !== null) {
            break;
          }
        }
        nextCwd = ppath.dirname(currentCwd);
      }
      return projectCwd;
    }
    static async updateConfiguration(cwd, patch4) {
      const rcFilename = getRcFilename();
      const configurationPath = ppath.join(cwd, rcFilename);
      const current = xfs.existsSync(configurationPath) ? parseSyml(await xfs.readFilePromise(configurationPath, `utf8`)) : {};
      let patched = false;
      let replacement;
      if (typeof patch4 === `function`) {
        try {
          replacement = patch4(current);
        } catch {
          replacement = patch4({});
        }
        if (replacement === current) {
          return;
        }
      } else {
        replacement = current;
        for (const key of Object.keys(patch4)) {
          const currentValue = current[key];
          const patchField = patch4[key];
          let nextValue;
          if (typeof patchField === `function`) {
            try {
              nextValue = patchField(currentValue);
            } catch {
              nextValue = patchField(void 0);
            }
          } else {
            nextValue = patchField;
          }
          if (currentValue === nextValue)
            continue;
          replacement[key] = nextValue;
          patched = true;
        }
        if (!patched) {
          return;
        }
      }
      await xfs.changeFilePromise(configurationPath, stringifySyml(replacement), {
        automaticNewlines: true
      });
    }
    static async updateHomeConfiguration(patch4) {
      const homeFolder = getHomeFolder();
      return await _Configuration.updateConfiguration(homeFolder, patch4);
    }
    activatePlugin(name, plugin16) {
      this.plugins.set(name, plugin16);
      if (typeof plugin16.configuration !== `undefined`) {
        this.importSettings(plugin16.configuration);
      }
    }
    importSettings(definitions) {
      for (const [name, definition] of Object.entries(definitions)) {
        if (definition == null)
          continue;
        if (this.settings.has(name))
          throw new Error(`Cannot redefine settings "${name}"`);
        this.settings.set(name, definition);
        this.values.set(name, getDefaultValue(this, definition));
      }
    }
    useWithSource(source, data, folder, opts) {
      try {
        this.use(source, data, folder, opts);
      } catch (error) {
        error.message += ` (in ${pretty(this, source, Type.PATH)})`;
        throw error;
      }
    }
    use(source, data, folder, {strict = true, overwrite = false} = {}) {
      for (const key of Object.keys(data)) {
        const value = data[key];
        if (typeof value === `undefined`)
          continue;
        if (key === `plugins`)
          continue;
        if (source === `<environment>` && IGNORED_ENV_VARIABLES.has(key))
          continue;
        if (key === `rcFilename`)
          throw new UsageError(`The rcFilename settings can only be set via ${`${ENVIRONMENT_PREFIX}RC_FILENAME`.toUpperCase()}, not via a rc file`);
        const definition = this.settings.get(key);
        if (!definition) {
          if (strict) {
            throw new UsageError(`Unrecognized or legacy configuration settings found: ${key} - run "yarn config -v" to see the list of settings supported in Yarn`);
          } else {
            this.invalid.set(key, source);
            continue;
          }
        }
        if (this.sources.has(key) && !(overwrite || definition.type === SettingsType.MAP || definition.isArray && definition.concatenateValues))
          continue;
        let parsed;
        try {
          parsed = parseValue(this, key, data[key], definition, folder);
        } catch (error) {
          error.message += ` in ${pretty(this, source, Type.PATH)}`;
          throw error;
        }
        if (definition.type === SettingsType.MAP) {
          const previousValue = this.values.get(key);
          this.values.set(key, new Map(overwrite ? [...previousValue, ...parsed] : [...parsed, ...previousValue]));
          this.sources.set(key, `${this.sources.get(key)}, ${source}`);
        } else if (definition.isArray && definition.concatenateValues) {
          const previousValue = this.values.get(key);
          this.values.set(key, overwrite ? [...previousValue, ...parsed] : [...parsed, ...previousValue]);
          this.sources.set(key, `${this.sources.get(key)}, ${source}`);
        } else {
          this.values.set(key, parsed);
          this.sources.set(key, source);
        }
      }
    }
    get(key) {
      if (!this.values.has(key))
        throw new Error(`Invalid configuration key "${key}"`);
      return this.values.get(key);
    }
    getSpecial(key, {hideSecrets = false, getNativePaths = false}) {
      const rawValue = this.get(key);
      const definition = this.settings.get(key);
      if (typeof definition === `undefined`)
        throw new UsageError(`Couldn't find a configuration settings named "${key}"`);
      return transformConfiguration(rawValue, definition, {
        hideSecrets,
        getNativePaths
      });
    }
    getSubprocessStreams(logFile, {header, prefix, report}) {
      let stdout;
      let stderr;
      const logStream = xfs.createWriteStream(logFile);
      if (this.get(`enableInlineBuilds`)) {
        const stdoutLineReporter = report.createStreamReporter(`${prefix} ${pretty(this, `STDOUT`, `green`)}`);
        const stderrLineReporter = report.createStreamReporter(`${prefix} ${pretty(this, `STDERR`, `red`)}`);
        stdout = new import_stream8.PassThrough();
        stdout.pipe(stdoutLineReporter);
        stdout.pipe(logStream);
        stderr = new import_stream8.PassThrough();
        stderr.pipe(stderrLineReporter);
        stderr.pipe(logStream);
      } else {
        stdout = logStream;
        stderr = logStream;
        if (typeof header !== `undefined`) {
          stdout.write(`${header}
`);
        }
      }
      return {stdout, stderr};
    }
    makeResolver() {
      const pluginResolvers = [];
      for (const plugin16 of this.plugins.values())
        for (const resolver of plugin16.resolvers || [])
          pluginResolvers.push(new resolver());
      return new MultiResolver([
        new VirtualResolver(),
        new WorkspaceResolver(),
        new ProtocolResolver(),
        ...pluginResolvers
      ]);
    }
    makeFetcher() {
      const pluginFetchers = [];
      for (const plugin16 of this.plugins.values())
        for (const fetcher of plugin16.fetchers || [])
          pluginFetchers.push(new fetcher());
      return new MultiFetcher([
        new VirtualFetcher(),
        new WorkspaceFetcher(),
        ...pluginFetchers
      ]);
    }
    getLinkers() {
      const linkers = [];
      for (const plugin16 of this.plugins.values())
        for (const linker of plugin16.linkers || [])
          linkers.push(new linker());
      return linkers;
    }
    async refreshPackageExtensions() {
      this.packageExtensions = new Map();
      const packageExtensions2 = this.packageExtensions;
      const registerPackageExtension = (descriptor, extensionData, {userProvided = false} = {}) => {
        if (!validRange(descriptor.range))
          throw new Error(`Only semver ranges are allowed as keys for the lockfileExtensions setting`);
        const extension = new Manifest();
        extension.load(extensionData, {yamlCompatibilityMode: true});
        const extensionsPerIdent = getArrayWithDefault(packageExtensions2, descriptor.identHash);
        const extensionsPerRange = [];
        extensionsPerIdent.push([descriptor.range, extensionsPerRange]);
        const baseExtension = {
          status: PackageExtensionStatus.Inactive,
          userProvided,
          parentDescriptor: descriptor
        };
        for (const dependency of extension.dependencies.values())
          extensionsPerRange.push(__spreadProps(__spreadValues({}, baseExtension), {type: PackageExtensionType.Dependency, descriptor: dependency}));
        for (const peerDependency of extension.peerDependencies.values())
          extensionsPerRange.push(__spreadProps(__spreadValues({}, baseExtension), {type: PackageExtensionType.PeerDependency, descriptor: peerDependency}));
        for (const [selector, meta] of extension.peerDependenciesMeta) {
          for (const [key, value] of Object.entries(meta)) {
            extensionsPerRange.push(__spreadProps(__spreadValues({}, baseExtension), {type: PackageExtensionType.PeerDependencyMeta, selector, key, value}));
          }
        }
      };
      await this.triggerHook((hooks) => {
        return hooks.registerPackageExtensions;
      }, this, registerPackageExtension);
      for (const [descriptorString, extensionData] of this.get(`packageExtensions`)) {
        registerPackageExtension(parseDescriptor(descriptorString, true), convertMapsToIndexableObjects(extensionData), {userProvided: true});
      }
    }
    normalizePackage(original) {
      const pkg = copyPackage(original);
      if (this.packageExtensions == null)
        throw new Error(`refreshPackageExtensions has to be called before normalizing packages`);
      const extensionsPerIdent = this.packageExtensions.get(original.identHash);
      if (typeof extensionsPerIdent !== `undefined`) {
        const version = original.version;
        if (version !== null) {
          for (const [range, extensionsPerRange] of extensionsPerIdent) {
            if (!satisfiesWithPrereleases(version, range))
              continue;
            for (const extension of extensionsPerRange) {
              if (extension.status === PackageExtensionStatus.Inactive)
                extension.status = PackageExtensionStatus.Redundant;
              switch (extension.type) {
                case PackageExtensionType.Dependency:
                  {
                    const currentDependency = pkg.dependencies.get(extension.descriptor.identHash);
                    if (typeof currentDependency === `undefined`) {
                      extension.status = PackageExtensionStatus.Active;
                      pkg.dependencies.set(extension.descriptor.identHash, extension.descriptor);
                    }
                  }
                  break;
                case PackageExtensionType.PeerDependency:
                  {
                    const currentPeerDependency = pkg.peerDependencies.get(extension.descriptor.identHash);
                    if (typeof currentPeerDependency === `undefined`) {
                      extension.status = PackageExtensionStatus.Active;
                      pkg.peerDependencies.set(extension.descriptor.identHash, extension.descriptor);
                    }
                  }
                  break;
                case PackageExtensionType.PeerDependencyMeta:
                  {
                    const currentPeerDependencyMeta = pkg.peerDependenciesMeta.get(extension.selector);
                    if (typeof currentPeerDependencyMeta === `undefined` || !Object.prototype.hasOwnProperty.call(currentPeerDependencyMeta, extension.key) || currentPeerDependencyMeta[extension.key] !== extension.value) {
                      extension.status = PackageExtensionStatus.Active;
                      getFactoryWithDefault(pkg.peerDependenciesMeta, extension.selector, () => ({}))[extension.key] = extension.value;
                    }
                  }
                  break;
                default:
                  {
                    assertNever(extension);
                  }
                  break;
              }
            }
          }
        }
      }
      const getTypesName = (descriptor) => {
        return descriptor.scope ? `${descriptor.scope}__${descriptor.name}` : `${descriptor.name}`;
      };
      for (const descriptor of pkg.peerDependencies.values()) {
        if (descriptor.scope === `types`)
          continue;
        const typesName = getTypesName(descriptor);
        const typesIdent = makeIdent(`types`, typesName);
        const stringifiedTypesIdent = stringifyIdent(typesIdent);
        if (pkg.peerDependencies.has(typesIdent.identHash) || pkg.peerDependenciesMeta.has(stringifiedTypesIdent))
          continue;
        pkg.peerDependenciesMeta.set(stringifiedTypesIdent, {
          optional: true
        });
      }
      for (const identString of pkg.peerDependenciesMeta.keys()) {
        const ident = parseIdent(identString);
        if (!pkg.peerDependencies.has(ident.identHash)) {
          pkg.peerDependencies.set(ident.identHash, makeDescriptor(ident, `*`));
        }
      }
      pkg.dependencies = new Map(sortMap(pkg.dependencies, ([, descriptor]) => stringifyDescriptor(descriptor)));
      pkg.peerDependencies = new Map(sortMap(pkg.peerDependencies, ([, descriptor]) => stringifyDescriptor(descriptor)));
      return pkg;
    }
    getLimit(key) {
      return getFactoryWithDefault(this.limits, key, () => {
        return (0, import_p_limit2.default)(this.get(key));
      });
    }
    async triggerHook(get3, ...args) {
      for (const plugin16 of this.plugins.values()) {
        const hooks = plugin16.hooks;
        if (!hooks)
          continue;
        const hook = get3(hooks);
        if (!hook)
          continue;
        await hook(...args);
      }
    }
    async triggerMultipleHooks(get3, argsList) {
      for (const args of argsList) {
        await this.triggerHook(get3, ...args);
      }
    }
    async reduceHook(get3, initialValue, ...args) {
      let value = initialValue;
      for (const plugin16 of this.plugins.values()) {
        const hooks = plugin16.hooks;
        if (!hooks)
          continue;
        const hook = get3(hooks);
        if (!hook)
          continue;
        value = await hook(value, ...args);
      }
      return value;
    }
    async firstHook(get3, ...args) {
      for (const plugin16 of this.plugins.values()) {
        const hooks = plugin16.hooks;
        if (!hooks)
          continue;
        const hook = get3(hooks);
        if (!hook)
          continue;
        const ret = await hook(...args);
        if (typeof ret !== `undefined`) {
          return ret;
        }
      }
      return null;
    }
  };
  var Configuration = _Configuration;
  Configuration.telemetry = null;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/Installer.ts
  var BuildType;
  (function(BuildType2) {
    BuildType2[BuildType2["SCRIPT"] = 0] = "SCRIPT";
    BuildType2[BuildType2["SHELLCODE"] = 1] = "SHELLCODE";
  })(BuildType || (BuildType = {}));

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/LightReport.ts
  var LightReport = class extends Report {
    constructor({configuration, stdout, suggestInstall = true}) {
      super();
      this.errorCount = 0;
      addLogFilterSupport(this, {configuration});
      this.configuration = configuration;
      this.stdout = stdout;
      this.suggestInstall = suggestInstall;
    }
    static async start(opts, cb) {
      const report = new this(opts);
      try {
        await cb(report);
      } catch (error) {
        report.reportExceptionOnce(error);
      } finally {
        await report.finalize();
      }
      return report;
    }
    hasErrors() {
      return this.errorCount > 0;
    }
    exitCode() {
      return this.hasErrors() ? 1 : 0;
    }
    reportCacheHit(locator) {
    }
    reportCacheMiss(locator) {
    }
    startTimerSync(what, opts, cb) {
      const realCb = typeof opts === `function` ? opts : cb;
      return realCb();
    }
    async startTimerPromise(what, opts, cb) {
      const realCb = typeof opts === `function` ? opts : cb;
      return await realCb();
    }
    async startCacheReport(cb) {
      return await cb();
    }
    reportSeparator() {
    }
    reportInfo(name, text) {
    }
    reportWarning(name, text) {
    }
    reportError(name, text) {
      this.errorCount += 1;
      this.stdout.write(`${pretty(this.configuration, `\u27A4`, `redBright`)} ${this.formatNameWithHyperlink(name)}: ${text}
`);
    }
    reportProgress(progress) {
      const promise = Promise.resolve().then(async () => {
        for await (const {} of progress) {
        }
      });
      const stop = () => {
      };
      return __spreadProps(__spreadValues({}, promise), {stop});
    }
    reportJson(data) {
    }
    async finalize() {
      if (this.errorCount > 0) {
        this.stdout.write(`
`);
        this.stdout.write(`${pretty(this.configuration, `\u27A4`, `redBright`)} Errors happened when preparing the environment required to run this command.
`);
        if (this.suggestInstall) {
          this.stdout.write(`${pretty(this.configuration, `\u27A4`, `redBright`)} This might be caused by packages being missing from the lockfile, in which case running "yarn install" might help.
`);
        }
      }
    }
    formatNameWithHyperlink(name) {
      return formatNameWithHyperlink(name, {
        configuration: this.configuration,
        json: false
      });
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/Project.ts
  var import_crypto2 = __toModule(require("crypto"));
  var import_diff = __toModule(require_lib());
  var import_pick = __toModule(require_pick());
  var import_p_limit3 = __toModule(require_p_limit());
  var import_semver6 = __toModule(require_semver2());
  var import_util4 = __toModule(require("util"));
  var import_v8 = __toModule(require("v8"));
  var import_zlib2 = __toModule(require("zlib"));

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/LegacyMigrationResolver.ts
  var IMPORTED_PATTERNS = [
    [/^(git(?:\+(?:https|ssh))?:\/\/.*(?:\.git)?)#(.*)$/, (version, $0, $1, $2) => `${$1}#commit=${$2}`],
    [/^https:\/\/((?:[^/]+?)@)?codeload\.github\.com\/([^/]+\/[^/]+)\/tar\.gz\/([0-9a-f]+)$/, (version, $0, $1 = ``, $2, $3) => `https://${$1}github.com/${$2}.git#commit=${$3}`],
    [/^https:\/\/((?:[^/]+?)@)?github\.com\/([^/]+\/[^/]+?)(?:\.git)?#([0-9a-f]+)$/, (version, $0, $1 = ``, $2, $3) => `https://${$1}github.com/${$2}.git#commit=${$3}`],
    [/^https?:\/\/[^/]+\/(?:[^/]+\/)*(?:@.+(?:\/|(?:%2f)))?([^/]+)\/(?:-|download)\/\1-[^/]+\.tgz(?:#|$)/, (version) => `npm:${version}`],
    [/^https:\/\/npm\.pkg\.github\.com\/download\/(?:@[^/]+)\/(?:[^/]+)\/(?:[^/]+)\/(?:[0-9a-f]+)$/, (version) => `npm:${version}`],
    [/^https:\/\/npm\.fontawesome\.com\/(?:@[^/]+)\/([^/]+)\/-\/([^/]+)\/\1-\2.tgz(?:#|$)/, (version) => `npm:${version}`],
    [/^https?:\/\/(?:[^\\.]+)\.jfrog\.io\/.*\/(@[^/]+)\/([^/]+)\/-\/\1\/\2-(?:[.\d\w-]+)\.tgz(?:#|$)/, (version, $0) => makeRange({protocol: `npm:`, source: null, selector: version, params: {__archiveUrl: $0}})],
    [/^[^/]+\.tgz#[0-9a-f]+$/, (version) => `npm:${version}`]
  ];
  var LegacyMigrationResolver = class {
    constructor() {
      this.resolutions = null;
    }
    async setup(project, {report}) {
      const lockfilePath = ppath.join(project.cwd, project.configuration.get(`lockfileFilename`));
      if (!xfs.existsSync(lockfilePath))
        return;
      const content = await xfs.readFilePromise(lockfilePath, `utf8`);
      const parsed = parseSyml(content);
      if (Object.prototype.hasOwnProperty.call(parsed, `__metadata`))
        return;
      const resolutions = this.resolutions = new Map();
      for (const key of Object.keys(parsed)) {
        let descriptor = tryParseDescriptor(key);
        if (!descriptor) {
          report.reportWarning(MessageName.YARN_IMPORT_FAILED, `Failed to parse the string "${key}" into a proper descriptor`);
          continue;
        }
        if (validRange(descriptor.range))
          descriptor = makeDescriptor(descriptor, `npm:${descriptor.range}`);
        const {version, resolved} = parsed[key];
        if (!resolved)
          continue;
        let reference;
        for (const [pattern, matcher] of IMPORTED_PATTERNS) {
          const match2 = resolved.match(pattern);
          if (match2) {
            reference = matcher(version, ...match2);
            break;
          }
        }
        if (!reference) {
          report.reportWarning(MessageName.YARN_IMPORT_FAILED, `${prettyDescriptor(project.configuration, descriptor)}: Only some patterns can be imported from legacy lockfiles (not "${resolved}")`);
          continue;
        }
        let actualDescriptor = descriptor;
        try {
          const parsedRange = parseRange(descriptor.range);
          const potentialDescriptor = tryParseDescriptor(parsedRange.selector, true);
          if (potentialDescriptor) {
            actualDescriptor = potentialDescriptor;
          }
        } catch {
        }
        resolutions.set(descriptor.descriptorHash, makeLocator(actualDescriptor, reference));
      }
    }
    supportsDescriptor(descriptor, opts) {
      if (!this.resolutions)
        return false;
      return this.resolutions.has(descriptor.descriptorHash);
    }
    supportsLocator(locator, opts) {
      return false;
    }
    shouldPersistResolution(locator, opts) {
      throw new Error(`Assertion failed: This resolver doesn't support resolving locators to packages`);
    }
    bindDescriptor(descriptor, fromLocator, opts) {
      return descriptor;
    }
    getResolutionDependencies(descriptor, opts) {
      return [];
    }
    async getCandidates(descriptor, dependencies, opts) {
      if (!this.resolutions)
        throw new Error(`Assertion failed: The resolution store should have been setup`);
      const resolution = this.resolutions.get(descriptor.descriptorHash);
      if (!resolution)
        throw new Error(`Assertion failed: The resolution should have been registered`);
      return [resolution];
    }
    async getSatisfying(descriptor, references, opts) {
      return null;
    }
    async resolve(locator, opts) {
      throw new Error(`Assertion failed: This resolver doesn't support resolving locators to packages`);
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/LockfileResolver.ts
  var LockfileResolver = class {
    supportsDescriptor(descriptor, opts) {
      const resolution = opts.project.storedResolutions.get(descriptor.descriptorHash);
      if (resolution)
        return true;
      if (opts.project.originalPackages.has(convertDescriptorToLocator(descriptor).locatorHash))
        return true;
      return false;
    }
    supportsLocator(locator, opts) {
      if (opts.project.originalPackages.has(locator.locatorHash))
        return true;
      return false;
    }
    shouldPersistResolution(locator, opts) {
      throw new Error(`The shouldPersistResolution method shouldn't be called on the lockfile resolver, which would always answer yes`);
    }
    bindDescriptor(descriptor, fromLocator, opts) {
      return descriptor;
    }
    getResolutionDependencies(descriptor, opts) {
      return [];
    }
    async getCandidates(descriptor, dependencies, opts) {
      let pkg = opts.project.originalPackages.get(convertDescriptorToLocator(descriptor).locatorHash);
      if (pkg)
        return [pkg];
      const resolution = opts.project.storedResolutions.get(descriptor.descriptorHash);
      if (!resolution)
        throw new Error(`Expected the resolution to have been successful - resolution not found`);
      pkg = opts.project.originalPackages.get(resolution);
      if (!pkg)
        throw new Error(`Expected the resolution to have been successful - package not found`);
      return [pkg];
    }
    async getSatisfying(descriptor, references, opts) {
      return null;
    }
    async resolve(locator, opts) {
      const pkg = opts.project.originalPackages.get(locator.locatorHash);
      if (!pkg)
        throw new Error(`The lockfile resolver isn't meant to resolve packages - they should already have been stored into a cache`);
      return pkg;
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/RunInstallPleaseResolver.ts
  var RunInstallPleaseResolver = class {
    constructor(resolver) {
      this.resolver = resolver;
    }
    supportsDescriptor(descriptor, opts) {
      return this.resolver.supportsDescriptor(descriptor, opts);
    }
    supportsLocator(locator, opts) {
      return this.resolver.supportsLocator(locator, opts);
    }
    shouldPersistResolution(locator, opts) {
      return this.resolver.shouldPersistResolution(locator, opts);
    }
    bindDescriptor(descriptor, fromLocator, opts) {
      return this.resolver.bindDescriptor(descriptor, fromLocator, opts);
    }
    getResolutionDependencies(descriptor, opts) {
      return this.resolver.getResolutionDependencies(descriptor, opts);
    }
    async getCandidates(descriptor, dependencies, opts) {
      throw new ReportError(MessageName.MISSING_LOCKFILE_ENTRY, `This package doesn't seem to be present in your lockfile; run "yarn install" to update the lockfile`);
    }
    async getSatisfying(descriptor, references, opts) {
      throw new ReportError(MessageName.MISSING_LOCKFILE_ENTRY, `This package doesn't seem to be present in your lockfile; run "yarn install" to update the lockfile`);
    }
    async resolve(locator, opts) {
      throw new ReportError(MessageName.MISSING_LOCKFILE_ENTRY, `This package doesn't seem to be present in your lockfile; run "yarn install" to update the lockfile`);
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/ThrowReport.ts
  var ThrowReport = class extends Report {
    reportCacheHit(locator) {
    }
    reportCacheMiss(locator) {
    }
    startTimerSync(what, opts, cb) {
      const realCb = typeof opts === `function` ? opts : cb;
      return realCb();
    }
    async startTimerPromise(what, opts, cb) {
      const realCb = typeof opts === `function` ? opts : cb;
      return await realCb();
    }
    async startCacheReport(cb) {
      return await cb();
    }
    reportSeparator() {
    }
    reportInfo(name, text) {
    }
    reportWarning(name, text) {
    }
    reportError(name, text) {
    }
    reportProgress(progress) {
      const promise = Promise.resolve().then(async () => {
        for await (const {} of progress) {
        }
      });
      const stop = () => {
      };
      return __spreadProps(__spreadValues({}, promise), {stop});
    }
    reportJson(data) {
    }
    async finalize() {
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/Workspace.ts
  var import_globby2 = __toModule(require_globby());
  var Workspace = class {
    constructor(workspaceCwd, {project}) {
      this.workspacesCwds = new Set();
      this.dependencies = new Map();
      this.project = project;
      this.cwd = workspaceCwd;
    }
    async setup() {
      this.manifest = xfs.existsSync(ppath.join(this.cwd, Manifest.fileName)) ? await Manifest.find(this.cwd) : new Manifest();
      this.relativeCwd = ppath.relative(this.project.cwd, this.cwd) || PortablePath.dot;
      const ident = this.manifest.name ? this.manifest.name : makeIdent(null, `${this.computeCandidateName()}-${makeHash(this.relativeCwd).substr(0, 6)}`);
      const reference = this.manifest.version ? this.manifest.version : `0.0.0`;
      this.locator = makeLocator(ident, reference);
      this.anchoredDescriptor = makeDescriptor(this.locator, `${WorkspaceResolver.protocol}${this.relativeCwd}`);
      this.anchoredLocator = makeLocator(this.locator, `${WorkspaceResolver.protocol}${this.relativeCwd}`);
      const patterns = this.manifest.workspaceDefinitions.map(({pattern}) => pattern);
      const relativeCwds = await (0, import_globby2.default)(patterns, {
        absolute: true,
        cwd: npath.fromPortablePath(this.cwd),
        expandDirectories: false,
        onlyDirectories: true,
        onlyFiles: false,
        ignore: [`**/node_modules`, `**/.git`, `**/.yarn`]
      });
      relativeCwds.sort();
      for (const relativeCwd of relativeCwds) {
        const candidateCwd = ppath.resolve(this.cwd, npath.toPortablePath(relativeCwd));
        if (xfs.existsSync(ppath.join(candidateCwd, `package.json`))) {
          this.workspacesCwds.add(candidateCwd);
        }
      }
    }
    accepts(range) {
      var _a2;
      const protocolIndex = range.indexOf(`:`);
      const protocol = protocolIndex !== -1 ? range.slice(0, protocolIndex + 1) : null;
      const pathname = protocolIndex !== -1 ? range.slice(protocolIndex + 1) : range;
      if (protocol === WorkspaceResolver.protocol && ppath.normalize(pathname) === this.relativeCwd)
        return true;
      if (protocol === WorkspaceResolver.protocol && pathname === `*`)
        return true;
      const semverRange = validRange(pathname);
      if (!semverRange)
        return false;
      if (protocol === WorkspaceResolver.protocol)
        return semverRange.test((_a2 = this.manifest.version) != null ? _a2 : `0.0.0`);
      if (!this.project.configuration.get(`enableTransparentWorkspaces`))
        return false;
      if (this.manifest.version !== null)
        return semverRange.test(this.manifest.version);
      return false;
    }
    computeCandidateName() {
      if (this.cwd === this.project.cwd) {
        return `root-workspace`;
      } else {
        return `${ppath.basename(this.cwd)}` || `unnamed-workspace`;
      }
    }
    getRecursiveWorkspaceDependencies({dependencies = Manifest.hardDependencies} = {}) {
      const workspaceList = new Set();
      const visitWorkspace = (workspace) => {
        for (const dependencyType of dependencies) {
          for (const descriptor of workspace.manifest[dependencyType].values()) {
            const foundWorkspace = this.project.tryWorkspaceByDescriptor(descriptor);
            if (foundWorkspace === null || workspaceList.has(foundWorkspace))
              continue;
            workspaceList.add(foundWorkspace);
            visitWorkspace(foundWorkspace);
          }
        }
      };
      visitWorkspace(this);
      return workspaceList;
    }
    getRecursiveWorkspaceChildren() {
      const workspaceList = [];
      for (const childWorkspaceCwd of this.workspacesCwds) {
        const childWorkspace = this.project.workspacesByCwd.get(childWorkspaceCwd);
        if (childWorkspace) {
          workspaceList.push(childWorkspace, ...childWorkspace.getRecursiveWorkspaceChildren());
        }
      }
      return workspaceList;
    }
    async persistManifest() {
      const data = {};
      this.manifest.exportTo(data);
      const path3 = ppath.join(this.cwd, Manifest.fileName);
      const content = `${JSON.stringify(data, null, this.manifest.indent)}
`;
      await xfs.changeFilePromise(path3, content, {
        automaticNewlines: true
      });
      this.manifest.raw = data;
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/Project.ts
  var LOCKFILE_VERSION = 4;
  var INSTALL_STATE_VERSION = 1;
  var MULTIPLE_KEYS_REGEXP = / *, */g;
  var TRAILING_SLASH_REGEXP = /\/$/;
  var FETCHER_CONCURRENCY = 32;
  var gzip = (0, import_util4.promisify)(import_zlib2.default.gzip);
  var gunzip = (0, import_util4.promisify)(import_zlib2.default.gunzip);
  var INSTALL_STATE_FIELDS = {
    restoreInstallersCustomData: [
      `installersCustomData`
    ],
    restoreResolutions: [
      `accessibleLocators`,
      `optionalBuilds`,
      `storedDescriptors`,
      `storedResolutions`,
      `storedPackages`,
      `lockFileChecksum`
    ],
    restoreBuildState: [
      `storedBuildState`
    ]
  };
  var Project = class {
    constructor(projectCwd, {configuration}) {
      this.resolutionAliases = new Map();
      this.workspaces = [];
      this.workspacesByCwd = new Map();
      this.workspacesByIdent = new Map();
      this.storedResolutions = new Map();
      this.storedDescriptors = new Map();
      this.storedPackages = new Map();
      this.storedChecksums = new Map();
      this.storedBuildState = new Map();
      this.accessibleLocators = new Set();
      this.originalPackages = new Map();
      this.optionalBuilds = new Set();
      this.peerRequirements = new Map();
      this.installersCustomData = new Map();
      this.lockFileChecksum = null;
      this.installStateChecksum = null;
      this.configuration = configuration;
      this.cwd = projectCwd;
    }
    static async find(configuration, startingCwd) {
      var _a2, _b, _c;
      if (!configuration.projectCwd)
        throw new UsageError(`No project found in ${startingCwd}`);
      let packageCwd = configuration.projectCwd;
      let nextCwd = startingCwd;
      let currentCwd = null;
      while (currentCwd !== configuration.projectCwd) {
        currentCwd = nextCwd;
        if (xfs.existsSync(ppath.join(currentCwd, Filename.manifest))) {
          packageCwd = currentCwd;
          break;
        }
        nextCwd = ppath.dirname(currentCwd);
      }
      const project = new Project(configuration.projectCwd, {configuration});
      (_a2 = Configuration.telemetry) == null ? void 0 : _a2.reportProject(project.cwd);
      await project.setupResolutions();
      await project.setupWorkspaces();
      (_b = Configuration.telemetry) == null ? void 0 : _b.reportWorkspaceCount(project.workspaces.length);
      (_c = Configuration.telemetry) == null ? void 0 : _c.reportDependencyCount(project.workspaces.reduce((sum, workspace2) => sum + workspace2.manifest.dependencies.size + workspace2.manifest.devDependencies.size, 0));
      const workspace = project.tryWorkspaceByCwd(packageCwd);
      if (workspace)
        return {project, workspace, locator: workspace.anchoredLocator};
      const locator = await project.findLocatorForLocation(`${packageCwd}/`, {strict: true});
      if (locator)
        return {project, locator, workspace: null};
      throw new UsageError(`The nearest package directory (${pretty(configuration, packageCwd, Type.PATH)}) doesn't seem to be part of the project declared in ${pretty(configuration, project.cwd, Type.PATH)}.

- If the project directory is right, it might be that you forgot to list ${pretty(configuration, ppath.relative(project.cwd, packageCwd), Type.PATH)} as a workspace.
- If it isn't, it's likely because you have a yarn.lock or package.json file there, confusing the project root detection.`);
    }
    async setupResolutions() {
      this.storedResolutions = new Map();
      this.storedDescriptors = new Map();
      this.storedPackages = new Map();
      this.lockFileChecksum = null;
      const lockfilePath = ppath.join(this.cwd, this.configuration.get(`lockfileFilename`));
      const defaultLanguageName = this.configuration.get(`defaultLanguageName`);
      if (xfs.existsSync(lockfilePath)) {
        const content = await xfs.readFilePromise(lockfilePath, `utf8`);
        this.lockFileChecksum = makeHash(`${INSTALL_STATE_VERSION}`, content);
        const parsed = parseSyml(content);
        if (parsed.__metadata) {
          const lockfileVersion = parsed.__metadata.version;
          const cacheKey = parsed.__metadata.cacheKey;
          for (const key of Object.keys(parsed)) {
            if (key === `__metadata`)
              continue;
            const data = parsed[key];
            if (typeof data.resolution === `undefined`)
              throw new Error(`Assertion failed: Expected the lockfile entry to have a resolution field (${key})`);
            const locator = parseLocator(data.resolution, true);
            const manifest = new Manifest();
            manifest.load(data, {yamlCompatibilityMode: true});
            const version = manifest.version;
            const languageName = manifest.languageName || defaultLanguageName;
            const linkType = data.linkType.toUpperCase();
            const dependencies = manifest.dependencies;
            const peerDependencies = manifest.peerDependencies;
            const dependenciesMeta = manifest.dependenciesMeta;
            const peerDependenciesMeta = manifest.peerDependenciesMeta;
            const bin = manifest.bin;
            if (data.checksum != null) {
              const checksum = typeof cacheKey !== `undefined` && !data.checksum.includes(`/`) ? `${cacheKey}/${data.checksum}` : data.checksum;
              this.storedChecksums.set(locator.locatorHash, checksum);
            }
            if (lockfileVersion >= LOCKFILE_VERSION) {
              const pkg = __spreadProps(__spreadValues({}, locator), {version, languageName, linkType, dependencies, peerDependencies, dependenciesMeta, peerDependenciesMeta, bin});
              this.originalPackages.set(pkg.locatorHash, pkg);
            }
            for (const entry of key.split(MULTIPLE_KEYS_REGEXP)) {
              const descriptor = parseDescriptor(entry);
              this.storedDescriptors.set(descriptor.descriptorHash, descriptor);
              if (lockfileVersion >= LOCKFILE_VERSION) {
                this.storedResolutions.set(descriptor.descriptorHash, locator.locatorHash);
              } else {
                const resolutionDescriptor = convertLocatorToDescriptor(locator);
                if (resolutionDescriptor.descriptorHash !== descriptor.descriptorHash) {
                  this.storedDescriptors.set(resolutionDescriptor.descriptorHash, resolutionDescriptor);
                  this.resolutionAliases.set(descriptor.descriptorHash, resolutionDescriptor.descriptorHash);
                }
              }
            }
          }
        }
      }
    }
    async setupWorkspaces() {
      this.workspaces = [];
      this.workspacesByCwd = new Map();
      this.workspacesByIdent = new Map();
      let workspaceCwds = [this.cwd];
      while (workspaceCwds.length > 0) {
        const passCwds = workspaceCwds;
        workspaceCwds = [];
        for (const workspaceCwd of passCwds) {
          if (this.workspacesByCwd.has(workspaceCwd))
            continue;
          const workspace = await this.addWorkspace(workspaceCwd);
          const workspacePkg = this.storedPackages.get(workspace.anchoredLocator.locatorHash);
          if (workspacePkg)
            workspace.dependencies = workspacePkg.dependencies;
          for (const workspaceCwd2 of workspace.workspacesCwds) {
            workspaceCwds.push(workspaceCwd2);
          }
        }
      }
    }
    async addWorkspace(workspaceCwd) {
      const workspace = new Workspace(workspaceCwd, {project: this});
      await workspace.setup();
      const dup = this.workspacesByIdent.get(workspace.locator.identHash);
      if (typeof dup !== `undefined`)
        throw new Error(`Duplicate workspace name ${prettyIdent(this.configuration, workspace.locator)}: ${npath.fromPortablePath(workspaceCwd)} conflicts with ${npath.fromPortablePath(dup.cwd)}`);
      this.workspaces.push(workspace);
      this.workspacesByCwd.set(workspaceCwd, workspace);
      this.workspacesByIdent.set(workspace.locator.identHash, workspace);
      return workspace;
    }
    get topLevelWorkspace() {
      return this.getWorkspaceByCwd(this.cwd);
    }
    tryWorkspaceByCwd(workspaceCwd) {
      if (!ppath.isAbsolute(workspaceCwd))
        workspaceCwd = ppath.resolve(this.cwd, workspaceCwd);
      workspaceCwd = ppath.normalize(workspaceCwd).replace(/\/+$/, ``);
      const workspace = this.workspacesByCwd.get(workspaceCwd);
      if (!workspace)
        return null;
      return workspace;
    }
    getWorkspaceByCwd(workspaceCwd) {
      const workspace = this.tryWorkspaceByCwd(workspaceCwd);
      if (!workspace)
        throw new Error(`Workspace not found (${workspaceCwd})`);
      return workspace;
    }
    tryWorkspaceByFilePath(filePath) {
      let bestWorkspace = null;
      for (const workspace of this.workspaces) {
        const rel = ppath.relative(workspace.cwd, filePath);
        if (rel.startsWith(`../`))
          continue;
        if (bestWorkspace && bestWorkspace.cwd.length >= workspace.cwd.length)
          continue;
        bestWorkspace = workspace;
      }
      if (!bestWorkspace)
        return null;
      return bestWorkspace;
    }
    getWorkspaceByFilePath(filePath) {
      const workspace = this.tryWorkspaceByFilePath(filePath);
      if (!workspace)
        throw new Error(`Workspace not found (${filePath})`);
      return workspace;
    }
    tryWorkspaceByIdent(ident) {
      const workspace = this.workspacesByIdent.get(ident.identHash);
      if (typeof workspace === `undefined`)
        return null;
      return workspace;
    }
    getWorkspaceByIdent(ident) {
      const workspace = this.tryWorkspaceByIdent(ident);
      if (!workspace)
        throw new Error(`Workspace not found (${prettyIdent(this.configuration, ident)})`);
      return workspace;
    }
    tryWorkspaceByDescriptor(descriptor) {
      const workspace = this.tryWorkspaceByIdent(descriptor);
      if (workspace === null)
        return null;
      if (isVirtualDescriptor(descriptor))
        descriptor = devirtualizeDescriptor(descriptor);
      if (!workspace.accepts(descriptor.range))
        return null;
      return workspace;
    }
    getWorkspaceByDescriptor(descriptor) {
      const workspace = this.tryWorkspaceByDescriptor(descriptor);
      if (workspace === null)
        throw new Error(`Workspace not found (${prettyDescriptor(this.configuration, descriptor)})`);
      return workspace;
    }
    tryWorkspaceByLocator(locator) {
      const workspace = this.tryWorkspaceByIdent(locator);
      if (workspace === null)
        return null;
      if (isVirtualLocator(locator))
        locator = devirtualizeLocator(locator);
      if (workspace.locator.locatorHash !== locator.locatorHash && workspace.anchoredLocator.locatorHash !== locator.locatorHash)
        return null;
      return workspace;
    }
    getWorkspaceByLocator(locator) {
      const workspace = this.tryWorkspaceByLocator(locator);
      if (!workspace)
        throw new Error(`Workspace not found (${prettyLocator(this.configuration, locator)})`);
      return workspace;
    }
    refreshWorkspaceDependencies() {
      for (const workspace of this.workspaces) {
        const pkg = this.storedPackages.get(workspace.anchoredLocator.locatorHash);
        if (!pkg)
          throw new Error(`Assertion failed: Expected workspace ${prettyWorkspace(this.configuration, workspace)} (${pretty(this.configuration, ppath.join(workspace.cwd, Filename.manifest), Type.PATH)}) to have been resolved. Run "yarn install" to update the lockfile`);
        workspace.dependencies = new Map(pkg.dependencies);
      }
    }
    forgetResolution(dataStructure) {
      const deleteDescriptor = (descriptorHash) => {
        this.storedResolutions.delete(descriptorHash);
        this.storedDescriptors.delete(descriptorHash);
      };
      const deleteLocator = (locatorHash) => {
        this.originalPackages.delete(locatorHash);
        this.storedPackages.delete(locatorHash);
        this.accessibleLocators.delete(locatorHash);
      };
      if (`descriptorHash` in dataStructure) {
        const locatorHash = this.storedResolutions.get(dataStructure.descriptorHash);
        deleteDescriptor(dataStructure.descriptorHash);
        const remainingResolutions = new Set(this.storedResolutions.values());
        if (typeof locatorHash !== `undefined` && !remainingResolutions.has(locatorHash)) {
          deleteLocator(locatorHash);
        }
      }
      if (`locatorHash` in dataStructure) {
        deleteLocator(dataStructure.locatorHash);
        for (const [descriptorHash, locatorHash] of this.storedResolutions) {
          if (locatorHash === dataStructure.locatorHash) {
            deleteDescriptor(descriptorHash);
          }
        }
      }
    }
    forgetTransientResolutions() {
      const resolver = this.configuration.makeResolver();
      for (const pkg of this.originalPackages.values()) {
        let shouldPersistResolution;
        try {
          shouldPersistResolution = resolver.shouldPersistResolution(pkg, {project: this, resolver});
        } catch {
          shouldPersistResolution = false;
        }
        if (!shouldPersistResolution) {
          this.forgetResolution(pkg);
        }
      }
    }
    forgetVirtualResolutions() {
      for (const pkg of this.storedPackages.values()) {
        for (const [dependencyHash, dependency] of pkg.dependencies) {
          if (isVirtualDescriptor(dependency)) {
            pkg.dependencies.set(dependencyHash, devirtualizeDescriptor(dependency));
          }
        }
      }
    }
    getDependencyMeta(ident, version) {
      const dependencyMeta = {};
      const dependenciesMeta = this.topLevelWorkspace.manifest.dependenciesMeta;
      const dependencyMetaSet = dependenciesMeta.get(stringifyIdent(ident));
      if (!dependencyMetaSet)
        return dependencyMeta;
      const defaultMeta = dependencyMetaSet.get(null);
      if (defaultMeta)
        Object.assign(dependencyMeta, defaultMeta);
      if (version === null || !import_semver6.default.valid(version))
        return dependencyMeta;
      for (const [range, meta] of dependencyMetaSet)
        if (range !== null && range === version)
          Object.assign(dependencyMeta, meta);
      return dependencyMeta;
    }
    async findLocatorForLocation(cwd, {strict = false} = {}) {
      const report = new ThrowReport();
      const linkers = this.configuration.getLinkers();
      const linkerOptions = {project: this, report};
      for (const linker of linkers) {
        const locator = await linker.findPackageLocator(cwd, linkerOptions);
        if (locator) {
          if (strict) {
            const location = await linker.findPackageLocation(locator, linkerOptions);
            if (location.replace(TRAILING_SLASH_REGEXP, ``) !== cwd.replace(TRAILING_SLASH_REGEXP, ``)) {
              continue;
            }
          }
          return locator;
        }
      }
      return null;
    }
    async resolveEverything(opts) {
      if (!this.workspacesByCwd || !this.workspacesByIdent)
        throw new Error(`Workspaces must have been setup before calling this function`);
      this.forgetVirtualResolutions();
      if (!opts.lockfileOnly)
        this.forgetTransientResolutions();
      const realResolver = opts.resolver || this.configuration.makeResolver();
      const legacyMigrationResolver = new LegacyMigrationResolver();
      await legacyMigrationResolver.setup(this, {report: opts.report});
      const resolver = opts.lockfileOnly ? new MultiResolver([new LockfileResolver(), new RunInstallPleaseResolver(realResolver)]) : new MultiResolver([new LockfileResolver(), legacyMigrationResolver, realResolver]);
      const fetcher = this.configuration.makeFetcher();
      const resolveOptions = opts.lockfileOnly ? {project: this, report: opts.report, resolver} : {project: this, report: opts.report, resolver, fetchOptions: {project: this, cache: opts.cache, checksums: this.storedChecksums, report: opts.report, fetcher}};
      const allDescriptors = new Map();
      const allPackages = new Map();
      const allResolutions = new Map();
      const originalPackages = new Map();
      const packageResolutionPromises = new Map();
      const descriptorResolutionPromises = new Map();
      const resolutionQueue = [];
      const startPackageResolution = async (locator) => {
        const originalPkg = await prettifyAsyncErrors(async () => {
          return await resolver.resolve(locator, resolveOptions);
        }, (message) => {
          return `${prettyLocator(this.configuration, locator)}: ${message}`;
        });
        if (!areLocatorsEqual(locator, originalPkg))
          throw new Error(`Assertion failed: The locator cannot be changed by the resolver (went from ${prettyLocator(this.configuration, locator)} to ${prettyLocator(this.configuration, originalPkg)})`);
        originalPackages.set(originalPkg.locatorHash, originalPkg);
        const pkg = this.configuration.normalizePackage(originalPkg);
        for (const [identHash, descriptor] of pkg.dependencies) {
          const dependency = await this.configuration.reduceHook((hooks) => {
            return hooks.reduceDependency;
          }, descriptor, this, pkg, descriptor, {
            resolver,
            resolveOptions
          });
          if (!areIdentsEqual(descriptor, dependency))
            throw new Error(`Assertion failed: The descriptor ident cannot be changed through aliases`);
          const bound = resolver.bindDescriptor(dependency, locator, resolveOptions);
          pkg.dependencies.set(identHash, bound);
        }
        resolutionQueue.push(Promise.all([...pkg.dependencies.values()].map((descriptor) => {
          return scheduleDescriptorResolution(descriptor);
        })));
        allPackages.set(pkg.locatorHash, pkg);
        return pkg;
      };
      const schedulePackageResolution = async (locator) => {
        const promise = packageResolutionPromises.get(locator.locatorHash);
        if (typeof promise !== `undefined`)
          return promise;
        const newPromise = Promise.resolve().then(() => startPackageResolution(locator));
        packageResolutionPromises.set(locator.locatorHash, newPromise);
        return newPromise;
      };
      const startDescriptorAliasing = async (descriptor, alias) => {
        const resolution = await scheduleDescriptorResolution(alias);
        allDescriptors.set(descriptor.descriptorHash, descriptor);
        allResolutions.set(descriptor.descriptorHash, resolution.locatorHash);
        return resolution;
      };
      const startDescriptorResolution = async (descriptor) => {
        const alias = this.resolutionAliases.get(descriptor.descriptorHash);
        if (typeof alias !== `undefined`)
          return startDescriptorAliasing(descriptor, this.storedDescriptors.get(alias));
        const resolutionDependencies = resolver.getResolutionDependencies(descriptor, resolveOptions);
        const resolvedDependencies = new Map(await Promise.all(resolutionDependencies.map(async (dependency) => {
          return [dependency.descriptorHash, await scheduleDescriptorResolution(dependency)];
        })));
        const candidateResolutions = await prettifyAsyncErrors(async () => {
          return await resolver.getCandidates(descriptor, resolvedDependencies, resolveOptions);
        }, (message) => {
          return `${prettyDescriptor(this.configuration, descriptor)}: ${message}`;
        });
        const finalResolution = candidateResolutions[0];
        if (typeof finalResolution === `undefined`)
          throw new Error(`${prettyDescriptor(this.configuration, descriptor)}: No candidates found`);
        allDescriptors.set(descriptor.descriptorHash, descriptor);
        allResolutions.set(descriptor.descriptorHash, finalResolution.locatorHash);
        return schedulePackageResolution(finalResolution);
      };
      const scheduleDescriptorResolution = (descriptor) => {
        const promise = descriptorResolutionPromises.get(descriptor.descriptorHash);
        if (typeof promise !== `undefined`)
          return promise;
        allDescriptors.set(descriptor.descriptorHash, descriptor);
        const newPromise = Promise.resolve().then(() => startDescriptorResolution(descriptor));
        descriptorResolutionPromises.set(descriptor.descriptorHash, newPromise);
        return newPromise;
      };
      for (const workspace of this.workspaces) {
        const workspaceDescriptor = workspace.anchoredDescriptor;
        resolutionQueue.push(scheduleDescriptorResolution(workspaceDescriptor));
      }
      while (resolutionQueue.length > 0) {
        const copy = [...resolutionQueue];
        resolutionQueue.length = 0;
        await Promise.all(copy);
      }
      const volatileDescriptors = new Set(this.resolutionAliases.values());
      const optionalBuilds = new Set(allPackages.keys());
      const accessibleLocators = new Set();
      const peerRequirements = new Map();
      applyVirtualResolutionMutations({
        project: this,
        report: opts.report,
        accessibleLocators,
        volatileDescriptors,
        optionalBuilds,
        peerRequirements,
        allDescriptors,
        allResolutions,
        allPackages
      });
      for (const descriptorHash of volatileDescriptors) {
        allDescriptors.delete(descriptorHash);
        allResolutions.delete(descriptorHash);
      }
      this.storedResolutions = allResolutions;
      this.storedDescriptors = allDescriptors;
      this.storedPackages = allPackages;
      this.accessibleLocators = accessibleLocators;
      this.originalPackages = originalPackages;
      this.optionalBuilds = optionalBuilds;
      this.peerRequirements = peerRequirements;
      this.refreshWorkspaceDependencies();
    }
    async fetchEverything({cache: cache2, report, fetcher: userFetcher}) {
      const fetcher = userFetcher || this.configuration.makeFetcher();
      const fetcherOptions = {checksums: this.storedChecksums, project: this, cache: cache2, fetcher, report};
      const locatorHashes = Array.from(new Set(sortMap(this.storedResolutions.values(), [
        (locatorHash) => {
          const pkg = this.storedPackages.get(locatorHash);
          if (!pkg)
            throw new Error(`Assertion failed: The locator should have been registered`);
          return stringifyLocator(pkg);
        }
      ])));
      let firstError = false;
      const progress = Report.progressViaCounter(locatorHashes.length);
      report.reportProgress(progress);
      const limit = (0, import_p_limit3.default)(FETCHER_CONCURRENCY);
      await report.startCacheReport(async () => {
        await Promise.all(locatorHashes.map((locatorHash) => limit(async () => {
          const pkg = this.storedPackages.get(locatorHash);
          if (!pkg)
            throw new Error(`Assertion failed: The locator should have been registered`);
          if (isVirtualLocator(pkg))
            return;
          let fetchResult;
          try {
            fetchResult = await fetcher.fetch(pkg, fetcherOptions);
          } catch (error) {
            error.message = `${prettyLocator(this.configuration, pkg)}: ${error.message}`;
            report.reportExceptionOnce(error);
            firstError = error;
            return;
          }
          if (fetchResult.checksum)
            this.storedChecksums.set(pkg.locatorHash, fetchResult.checksum);
          else
            this.storedChecksums.delete(pkg.locatorHash);
          if (fetchResult.releaseFs) {
            fetchResult.releaseFs();
          }
        }).finally(() => {
          progress.tick();
        })));
      });
      if (firstError) {
        throw firstError;
      }
    }
    async linkEverything({cache: cache2, report, fetcher: optFetcher, skipBuild}) {
      var _a2;
      const fetcher = optFetcher || this.configuration.makeFetcher();
      const fetcherOptions = {checksums: this.storedChecksums, project: this, cache: cache2, fetcher, report, skipIntegrityCheck: true};
      const linkers = this.configuration.getLinkers();
      const linkerOptions = {project: this, report};
      const installers = new Map(linkers.map((linker) => {
        const installer = linker.makeInstaller(linkerOptions);
        const customDataKey = installer.getCustomDataKey();
        const customData = this.installersCustomData.get(customDataKey);
        if (typeof customData !== `undefined`)
          installer.attachCustomData(customData);
        return [linker, installer];
      }));
      const packageLinkers = new Map();
      const packageLocations = new Map();
      const packageBuildDirectives = new Map();
      const fetchResultsPerPackage = new Map(await Promise.all([...this.accessibleLocators].map(async (locatorHash) => {
        const pkg = this.storedPackages.get(locatorHash);
        if (!pkg)
          throw new Error(`Assertion failed: The locator should have been registered`);
        return [locatorHash, await fetcher.fetch(pkg, fetcherOptions)];
      })));
      for (const locatorHash of this.accessibleLocators) {
        const pkg = this.storedPackages.get(locatorHash);
        if (typeof pkg === `undefined`)
          throw new Error(`Assertion failed: The locator should have been registered`);
        const fetchResult = fetchResultsPerPackage.get(pkg.locatorHash);
        if (typeof fetchResult === `undefined`)
          throw new Error(`Assertion failed: The fetch result should have been registered`);
        const workspace = this.tryWorkspaceByLocator(pkg);
        if (workspace !== null) {
          const buildScripts = [];
          const {scripts} = workspace.manifest;
          for (const scriptName of [`preinstall`, `install`, `postinstall`])
            if (scripts.has(scriptName))
              buildScripts.push([BuildType.SCRIPT, scriptName]);
          try {
            for (const [linker, installer] of installers) {
              if (linker.supportsPackage(pkg, linkerOptions)) {
                const result = await installer.installPackage(pkg, fetchResult);
                if (result.buildDirective !== null) {
                  throw new Error(`Assertion failed: Linkers can't return build directives for workspaces; this responsibility befalls to the Yarn core`);
                }
              }
            }
          } finally {
            if (fetchResult.releaseFs) {
              fetchResult.releaseFs();
            }
          }
          const location = ppath.join(fetchResult.packageFs.getRealPath(), fetchResult.prefixPath);
          packageLocations.set(pkg.locatorHash, location);
          if (!isVirtualLocator(pkg) && buildScripts.length > 0) {
            packageBuildDirectives.set(pkg.locatorHash, {
              directives: buildScripts,
              buildLocations: [location]
            });
          }
        } else {
          const linker = linkers.find((linker2) => linker2.supportsPackage(pkg, linkerOptions));
          if (!linker)
            throw new ReportError(MessageName.LINKER_NOT_FOUND, `${prettyLocator(this.configuration, pkg)} isn't supported by any available linker`);
          const installer = installers.get(linker);
          if (!installer)
            throw new Error(`Assertion failed: The installer should have been registered`);
          let installStatus;
          try {
            installStatus = await installer.installPackage(pkg, fetchResult);
          } finally {
            if (fetchResult.releaseFs) {
              fetchResult.releaseFs();
            }
          }
          packageLinkers.set(pkg.locatorHash, linker);
          packageLocations.set(pkg.locatorHash, installStatus.packageLocation);
          if (installStatus.buildDirective && installStatus.packageLocation) {
            packageBuildDirectives.set(pkg.locatorHash, {
              directives: installStatus.buildDirective,
              buildLocations: [installStatus.packageLocation]
            });
          }
        }
      }
      const externalDependents = new Map();
      for (const locatorHash of this.accessibleLocators) {
        const pkg = this.storedPackages.get(locatorHash);
        if (!pkg)
          throw new Error(`Assertion failed: The locator should have been registered`);
        const isWorkspace = this.tryWorkspaceByLocator(pkg) !== null;
        const linkPackage = async (packageLinker, installer) => {
          const packageLocation = packageLocations.get(pkg.locatorHash);
          if (typeof packageLocation === `undefined`)
            throw new Error(`Assertion failed: The package (${prettyLocator(this.configuration, pkg)}) should have been registered`);
          const internalDependencies = [];
          for (const descriptor of pkg.dependencies.values()) {
            const resolution = this.storedResolutions.get(descriptor.descriptorHash);
            if (typeof resolution === `undefined`)
              throw new Error(`Assertion failed: The resolution (${prettyDescriptor(this.configuration, descriptor)}, from ${prettyLocator(this.configuration, pkg)})should have been registered`);
            const dependency = this.storedPackages.get(resolution);
            if (typeof dependency === `undefined`)
              throw new Error(`Assertion failed: The package (${resolution}, resolved from ${prettyDescriptor(this.configuration, descriptor)}) should have been registered`);
            const dependencyLinker = this.tryWorkspaceByLocator(dependency) === null ? packageLinkers.get(resolution) : null;
            if (typeof dependencyLinker === `undefined`)
              throw new Error(`Assertion failed: The package (${resolution}, resolved from ${prettyDescriptor(this.configuration, descriptor)}) should have been registered`);
            const isWorkspaceDependency = dependencyLinker === null;
            if (dependencyLinker === packageLinker || isWorkspace || isWorkspaceDependency) {
              if (packageLocations.get(dependency.locatorHash) !== null) {
                internalDependencies.push([descriptor, dependency]);
              }
            } else if (packageLocation !== null) {
              const externalEntry = getArrayWithDefault(externalDependents, resolution);
              externalEntry.push(packageLocation);
            }
          }
          if (packageLocation !== null) {
            await installer.attachInternalDependencies(pkg, internalDependencies);
          }
        };
        if (isWorkspace) {
          for (const [packageLinker, installer] of installers) {
            if (packageLinker.supportsPackage(pkg, linkerOptions)) {
              await linkPackage(packageLinker, installer);
            }
          }
        } else {
          const packageLinker = packageLinkers.get(pkg.locatorHash);
          if (!packageLinker)
            throw new Error(`Assertion failed: The linker should have been found`);
          const installer = installers.get(packageLinker);
          if (!installer)
            throw new Error(`Assertion failed: The installer should have been registered`);
          await linkPackage(packageLinker, installer);
        }
      }
      for (const [locatorHash, dependentPaths] of externalDependents) {
        const pkg = this.storedPackages.get(locatorHash);
        if (!pkg)
          throw new Error(`Assertion failed: The package should have been registered`);
        const packageLinker = packageLinkers.get(pkg.locatorHash);
        if (!packageLinker)
          throw new Error(`Assertion failed: The linker should have been found`);
        const installer = installers.get(packageLinker);
        if (!installer)
          throw new Error(`Assertion failed: The installer should have been registered`);
        await installer.attachExternalDependents(pkg, dependentPaths);
      }
      const installersCustomData = new Map();
      for (const installer of installers.values()) {
        const finalizeInstallData = await installer.finalizeInstall();
        for (const installStatus of (_a2 = finalizeInstallData == null ? void 0 : finalizeInstallData.records) != null ? _a2 : []) {
          packageBuildDirectives.set(installStatus.locatorHash, {
            directives: installStatus.buildDirective,
            buildLocations: installStatus.buildLocations
          });
        }
        if (typeof (finalizeInstallData == null ? void 0 : finalizeInstallData.customData) !== `undefined`) {
          installersCustomData.set(installer.getCustomDataKey(), finalizeInstallData.customData);
        }
      }
      this.installersCustomData = installersCustomData;
      if (skipBuild)
        return;
      const readyPackages = new Set(this.storedPackages.keys());
      const buildablePackages = new Set(packageBuildDirectives.keys());
      for (const locatorHash of buildablePackages)
        readyPackages.delete(locatorHash);
      const globalHashGenerator = (0, import_crypto2.createHash)(`sha512`);
      globalHashGenerator.update(process.versions.node);
      await this.configuration.triggerHook((hooks) => {
        return hooks.globalHashGeneration;
      }, this, (data) => {
        globalHashGenerator.update(`\0`);
        globalHashGenerator.update(data);
      });
      const globalHash = globalHashGenerator.digest(`hex`);
      const packageHashMap = new Map();
      const getBaseHash = (locator) => {
        let hash = packageHashMap.get(locator.locatorHash);
        if (typeof hash !== `undefined`)
          return hash;
        const pkg = this.storedPackages.get(locator.locatorHash);
        if (typeof pkg === `undefined`)
          throw new Error(`Assertion failed: The package should have been registered`);
        const builder = (0, import_crypto2.createHash)(`sha512`);
        builder.update(locator.locatorHash);
        packageHashMap.set(locator.locatorHash, `<recursive>`);
        for (const descriptor of pkg.dependencies.values()) {
          const resolution = this.storedResolutions.get(descriptor.descriptorHash);
          if (typeof resolution === `undefined`)
            throw new Error(`Assertion failed: The resolution (${prettyDescriptor(this.configuration, descriptor)}) should have been registered`);
          const dependency = this.storedPackages.get(resolution);
          if (typeof dependency === `undefined`)
            throw new Error(`Assertion failed: The package should have been registered`);
          builder.update(getBaseHash(dependency));
        }
        hash = builder.digest(`hex`);
        packageHashMap.set(locator.locatorHash, hash);
        return hash;
      };
      const getBuildHash = (locator, buildLocations) => {
        const builder = (0, import_crypto2.createHash)(`sha512`);
        builder.update(globalHash);
        builder.update(getBaseHash(locator));
        for (const location of buildLocations)
          builder.update(location);
        return builder.digest(`hex`);
      };
      const nextBState = new Map();
      let isInstallStatePersisted = false;
      while (buildablePackages.size > 0) {
        const savedSize = buildablePackages.size;
        const buildPromises = [];
        for (const locatorHash of buildablePackages) {
          const pkg = this.storedPackages.get(locatorHash);
          if (!pkg)
            throw new Error(`Assertion failed: The package should have been registered`);
          let isBuildable = true;
          for (const dependency of pkg.dependencies.values()) {
            const resolution = this.storedResolutions.get(dependency.descriptorHash);
            if (!resolution)
              throw new Error(`Assertion failed: The resolution (${prettyDescriptor(this.configuration, dependency)}) should have been registered`);
            if (buildablePackages.has(resolution)) {
              isBuildable = false;
              break;
            }
          }
          if (!isBuildable)
            continue;
          buildablePackages.delete(locatorHash);
          const buildInfo = packageBuildDirectives.get(pkg.locatorHash);
          if (!buildInfo)
            throw new Error(`Assertion failed: The build directive should have been registered`);
          const buildHash = getBuildHash(pkg, buildInfo.buildLocations);
          if (this.storedBuildState.get(pkg.locatorHash) === buildHash) {
            nextBState.set(pkg.locatorHash, buildHash);
            continue;
          }
          if (!isInstallStatePersisted) {
            await this.persistInstallStateFile();
            isInstallStatePersisted = true;
          }
          if (this.storedBuildState.has(pkg.locatorHash))
            report.reportInfo(MessageName.MUST_REBUILD, `${prettyLocator(this.configuration, pkg)} must be rebuilt because its dependency tree changed`);
          else
            report.reportInfo(MessageName.MUST_BUILD, `${prettyLocator(this.configuration, pkg)} must be built because it never has been before or the last one failed`);
          for (const location of buildInfo.buildLocations) {
            if (!ppath.isAbsolute(location))
              throw new Error(`Assertion failed: Expected the build location to be absolute (not ${location})`);
            buildPromises.push((async () => {
              for (const [buildType, scriptName] of buildInfo.directives) {
                let header = `# This file contains the result of Yarn building a package (${stringifyLocator(pkg)})
`;
                switch (buildType) {
                  case BuildType.SCRIPT:
                    {
                      header += `# Script name: ${scriptName}
`;
                    }
                    break;
                  case BuildType.SHELLCODE:
                    {
                      header += `# Script code: ${scriptName}
`;
                    }
                    break;
                }
                const stdin = null;
                const wasBuildSuccessful = await xfs.mktempPromise(async (logDir) => {
                  const logFile = ppath.join(logDir, `build.log`);
                  const {stdout, stderr} = this.configuration.getSubprocessStreams(logFile, {
                    header,
                    prefix: prettyLocator(this.configuration, pkg),
                    report
                  });
                  let exitCode;
                  try {
                    switch (buildType) {
                      case BuildType.SCRIPT:
                        {
                          exitCode = await executePackageScript(pkg, scriptName, [], {cwd: location, project: this, stdin, stdout, stderr});
                        }
                        break;
                      case BuildType.SHELLCODE:
                        {
                          exitCode = await executePackageShellcode(pkg, scriptName, [], {cwd: location, project: this, stdin, stdout, stderr});
                        }
                        break;
                    }
                  } catch (error) {
                    stderr.write(error.stack);
                    exitCode = 1;
                  }
                  stdout.end();
                  stderr.end();
                  if (exitCode === 0) {
                    nextBState.set(pkg.locatorHash, buildHash);
                    return true;
                  }
                  xfs.detachTemp(logDir);
                  const buildMessage = `${prettyLocator(this.configuration, pkg)} couldn't be built successfully (exit code ${pretty(this.configuration, exitCode, Type.NUMBER)}, logs can be found here: ${pretty(this.configuration, logFile, Type.PATH)})`;
                  if (this.optionalBuilds.has(pkg.locatorHash)) {
                    report.reportInfo(MessageName.BUILD_FAILED, buildMessage);
                    nextBState.set(pkg.locatorHash, buildHash);
                    return true;
                  } else {
                    report.reportError(MessageName.BUILD_FAILED, buildMessage);
                    return false;
                  }
                });
                if (!wasBuildSuccessful) {
                  return;
                }
              }
            })());
          }
        }
        await Promise.all(buildPromises);
        if (savedSize === buildablePackages.size) {
          const prettyLocators = Array.from(buildablePackages).map((locatorHash) => {
            const pkg = this.storedPackages.get(locatorHash);
            if (!pkg)
              throw new Error(`Assertion failed: The package should have been registered`);
            return prettyLocator(this.configuration, pkg);
          }).join(`, `);
          report.reportError(MessageName.CYCLIC_DEPENDENCIES, `Some packages have circular dependencies that make their build order unsatisfiable - as a result they won't be built (affected packages are: ${prettyLocators})`);
          break;
        }
      }
      this.storedBuildState = nextBState;
    }
    async install(opts) {
      var _a2, _b;
      const nodeLinker = this.configuration.get(`nodeLinker`);
      (_a2 = Configuration.telemetry) == null ? void 0 : _a2.reportInstall(nodeLinker);
      await opts.report.startTimerPromise(`Project validation`, {
        skipIfEmpty: true
      }, async () => {
        await this.configuration.triggerHook((hooks) => {
          return hooks.validateProject;
        }, this, {
          reportWarning: opts.report.reportWarning.bind(opts.report),
          reportError: opts.report.reportError.bind(opts.report)
        });
      });
      for (const extensionsByIdent of this.configuration.packageExtensions.values())
        for (const [, extensionsByRange] of extensionsByIdent)
          for (const extension of extensionsByRange)
            extension.status = PackageExtensionStatus.Inactive;
      const lockfilePath = ppath.join(this.cwd, this.configuration.get(`lockfileFilename`));
      let initialLockfile = null;
      if (opts.immutable) {
        try {
          initialLockfile = await xfs.readFilePromise(lockfilePath, `utf8`);
        } catch (error) {
          if (error.code === `ENOENT`) {
            throw new ReportError(MessageName.FROZEN_LOCKFILE_EXCEPTION, `The lockfile would have been created by this install, which is explicitly forbidden.`);
          } else {
            throw error;
          }
        }
      }
      await opts.report.startTimerPromise(`Resolution step`, async () => {
        await this.resolveEverything(opts);
      });
      await opts.report.startTimerPromise(`Post-resolution validation`, {
        skipIfEmpty: true
      }, async () => {
        for (const [, extensionsPerRange] of this.configuration.packageExtensions) {
          for (const [, extensions] of extensionsPerRange) {
            for (const extension of extensions) {
              if (extension.userProvided) {
                const prettyPackageExtension = pretty(this.configuration, extension, Type.PACKAGE_EXTENSION);
                switch (extension.status) {
                  case PackageExtensionStatus.Inactive:
                    {
                      opts.report.reportWarning(MessageName.UNUSED_PACKAGE_EXTENSION, `${prettyPackageExtension}: No matching package in the dependency tree; you may not need this rule anymore.`);
                    }
                    break;
                  case PackageExtensionStatus.Redundant:
                    {
                      opts.report.reportWarning(MessageName.REDUNDANT_PACKAGE_EXTENSION, `${prettyPackageExtension}: This rule seems redundant when applied on the original package; the extension may have been applied upstream.`);
                    }
                    break;
                }
              }
            }
          }
        }
        if (initialLockfile !== null) {
          const newLockfile = normalizeLineEndings(initialLockfile, this.generateLockfile());
          if (newLockfile !== initialLockfile) {
            const diff = (0, import_diff.structuredPatch)(lockfilePath, lockfilePath, initialLockfile, newLockfile);
            opts.report.reportSeparator();
            for (const hunk of diff.hunks) {
              opts.report.reportInfo(null, `@@ -${hunk.oldStart},${hunk.oldLines} +${hunk.newStart},${hunk.newLines} @@`);
              for (const line of hunk.lines) {
                if (line.startsWith(`+`)) {
                  opts.report.reportError(MessageName.FROZEN_LOCKFILE_EXCEPTION, pretty(this.configuration, line, Type.ADDED));
                } else if (line.startsWith(`-`)) {
                  opts.report.reportError(MessageName.FROZEN_LOCKFILE_EXCEPTION, pretty(this.configuration, line, Type.REMOVED));
                } else {
                  opts.report.reportInfo(null, pretty(this.configuration, line, `grey`));
                }
              }
            }
            opts.report.reportSeparator();
            throw new ReportError(MessageName.FROZEN_LOCKFILE_EXCEPTION, `The lockfile would have been modified by this install, which is explicitly forbidden.`);
          }
        }
      });
      for (const extensionsByIdent of this.configuration.packageExtensions.values())
        for (const [, extensionsByRange] of extensionsByIdent)
          for (const extension of extensionsByRange)
            if (extension.userProvided && extension.status === PackageExtensionStatus.Active)
              (_b = Configuration.telemetry) == null ? void 0 : _b.reportPackageExtension(json(extension, Type.PACKAGE_EXTENSION));
      await opts.report.startTimerPromise(`Fetch step`, async () => {
        await this.fetchEverything(opts);
        if (typeof opts.persistProject === `undefined` || opts.persistProject) {
          await this.cacheCleanup(opts);
        }
      });
      const immutablePatterns = opts.immutable ? [...new Set(this.configuration.get(`immutablePatterns`))].sort() : [];
      const before = await Promise.all(immutablePatterns.map(async (pattern) => {
        return checksumPattern(pattern, {cwd: this.cwd});
      }));
      if (typeof opts.persistProject === `undefined` || opts.persistProject)
        await this.persist();
      await opts.report.startTimerPromise(`Link step`, async () => {
        await this.linkEverything(opts);
        const after = await Promise.all(immutablePatterns.map(async (pattern) => {
          return checksumPattern(pattern, {cwd: this.cwd});
        }));
        for (let t5 = 0; t5 < immutablePatterns.length; ++t5) {
          if (before[t5] !== after[t5]) {
            opts.report.reportError(MessageName.FROZEN_ARTIFACT_EXCEPTION, `The checksum for ${immutablePatterns[t5]} has been modified by this install, which is explicitly forbidden.`);
          }
        }
      });
      await this.persistInstallStateFile();
      await this.configuration.triggerHook((hooks) => {
        return hooks.afterAllInstalled;
      }, this, opts);
    }
    generateLockfile() {
      const reverseLookup = new Map();
      for (const [descriptorHash, locatorHash] of this.storedResolutions.entries()) {
        let descriptorHashes = reverseLookup.get(locatorHash);
        if (!descriptorHashes)
          reverseLookup.set(locatorHash, descriptorHashes = new Set());
        descriptorHashes.add(descriptorHash);
      }
      const optimizedLockfile = {};
      optimizedLockfile.__metadata = {
        version: LOCKFILE_VERSION
      };
      for (const [locatorHash, descriptorHashes] of reverseLookup.entries()) {
        const pkg = this.originalPackages.get(locatorHash);
        if (!pkg)
          continue;
        const descriptors = [];
        for (const descriptorHash of descriptorHashes) {
          const descriptor = this.storedDescriptors.get(descriptorHash);
          if (!descriptor)
            throw new Error(`Assertion failed: The descriptor should have been registered`);
          descriptors.push(descriptor);
        }
        const key = descriptors.map((descriptor) => {
          return stringifyDescriptor(descriptor);
        }).sort().join(`, `);
        const manifest = new Manifest();
        manifest.version = pkg.linkType === LinkType.HARD ? pkg.version : `0.0.0-use.local`;
        manifest.languageName = pkg.languageName;
        manifest.dependencies = new Map(pkg.dependencies);
        manifest.peerDependencies = new Map(pkg.peerDependencies);
        manifest.dependenciesMeta = new Map(pkg.dependenciesMeta);
        manifest.peerDependenciesMeta = new Map(pkg.peerDependenciesMeta);
        manifest.bin = new Map(pkg.bin);
        let entryChecksum;
        const checksum = this.storedChecksums.get(pkg.locatorHash);
        if (typeof checksum !== `undefined`) {
          const cacheKeyIndex = checksum.indexOf(`/`);
          if (cacheKeyIndex === -1)
            throw new Error(`Assertion failed: Expecte the checksum to reference its cache key`);
          const cacheKey = checksum.slice(0, cacheKeyIndex);
          const hash = checksum.slice(cacheKeyIndex + 1);
          if (typeof optimizedLockfile.__metadata.cacheKey === `undefined`)
            optimizedLockfile.__metadata.cacheKey = cacheKey;
          if (cacheKey === optimizedLockfile.__metadata.cacheKey) {
            entryChecksum = hash;
          } else {
            entryChecksum = checksum;
          }
        }
        optimizedLockfile[key] = __spreadProps(__spreadValues({}, manifest.exportTo({}, {
          compatibilityMode: false
        })), {
          linkType: pkg.linkType.toLowerCase(),
          resolution: stringifyLocator(pkg),
          checksum: entryChecksum
        });
      }
      const header = `${[
        `# This file is generated by running "yarn install" inside your project.
`,
        `# Manual changes might be lost - proceed with caution!
`
      ].join(``)}
`;
      return header + stringifySyml(optimizedLockfile);
    }
    async persistLockfile() {
      const lockfilePath = ppath.join(this.cwd, this.configuration.get(`lockfileFilename`));
      const lockfileContent = this.generateLockfile();
      await xfs.changeFilePromise(lockfilePath, lockfileContent, {
        automaticNewlines: true
      });
    }
    async persistInstallStateFile() {
      const fields = [];
      for (const category of Object.values(INSTALL_STATE_FIELDS))
        fields.push(...category);
      const installState = (0, import_pick.default)(this, fields);
      const serializedState = import_v8.default.serialize(installState);
      const newInstallStateChecksum = makeHash(serializedState);
      if (this.installStateChecksum === newInstallStateChecksum)
        return;
      const installStatePath = this.configuration.get(`installStatePath`);
      await xfs.mkdirPromise(ppath.dirname(installStatePath), {recursive: true});
      await xfs.writeFilePromise(installStatePath, await gzip(serializedState));
      this.installStateChecksum = newInstallStateChecksum;
    }
    async restoreInstallState({restoreInstallersCustomData = true, restoreResolutions = true, restoreBuildState = true} = {}) {
      const installStatePath = this.configuration.get(`installStatePath`);
      if (!xfs.existsSync(installStatePath)) {
        if (restoreResolutions)
          await this.applyLightResolution();
        return;
      }
      const installStateBuffer = await gunzip(await xfs.readFilePromise(installStatePath));
      this.installStateChecksum = makeHash(installStateBuffer);
      const installState = import_v8.default.deserialize(installStateBuffer);
      if (restoreInstallersCustomData) {
        if (typeof installState.installersCustomData !== `undefined`)
          this.installersCustomData = installState.installersCustomData;
      }
      if (restoreBuildState)
        Object.assign(this, (0, import_pick.default)(installState, INSTALL_STATE_FIELDS.restoreBuildState));
      if (restoreResolutions) {
        if (installState.lockFileChecksum === this.lockFileChecksum) {
          Object.assign(this, (0, import_pick.default)(installState, INSTALL_STATE_FIELDS.restoreResolutions));
          this.refreshWorkspaceDependencies();
        } else {
          await this.applyLightResolution();
        }
      }
    }
    async applyLightResolution() {
      await this.resolveEverything({
        lockfileOnly: true,
        report: new ThrowReport()
      });
      await this.persistInstallStateFile();
    }
    async persist() {
      await this.persistLockfile();
      for (const workspace of this.workspacesByCwd.values()) {
        await workspace.persistManifest();
      }
    }
    async cacheCleanup({cache: cache2, report}) {
      const PRESERVED_FILES = new Set([
        `.gitignore`
      ]);
      if (!isFolderInside(cache2.cwd, this.cwd))
        return;
      if (!await xfs.existsPromise(cache2.cwd))
        return;
      const preferAggregateCacheInfo = this.configuration.get(`preferAggregateCacheInfo`);
      let entriesRemoved = 0;
      let lastEntryRemoved = null;
      for (const entry of await xfs.readdirPromise(cache2.cwd)) {
        if (PRESERVED_FILES.has(entry))
          continue;
        const entryPath = ppath.resolve(cache2.cwd, entry);
        if (cache2.markedFiles.has(entryPath))
          continue;
        lastEntryRemoved = entry;
        if (cache2.immutable) {
          report.reportError(MessageName.IMMUTABLE_CACHE, `${pretty(this.configuration, ppath.basename(entryPath), `magenta`)} appears to be unused and would be marked for deletion, but the cache is immutable`);
        } else {
          if (preferAggregateCacheInfo)
            entriesRemoved += 1;
          else
            report.reportInfo(MessageName.UNUSED_CACHE_ENTRY, `${pretty(this.configuration, ppath.basename(entryPath), `magenta`)} appears to be unused - removing`);
          await xfs.removePromise(entryPath);
        }
      }
      if (preferAggregateCacheInfo && entriesRemoved !== 0) {
        report.reportInfo(MessageName.UNUSED_CACHE_ENTRY, entriesRemoved > 1 ? `${entriesRemoved} packages appeared to be unused and were removed` : `${lastEntryRemoved} appeared to be unused and was removed`);
      }
      cache2.markedFiles.clear();
    }
  };
  function applyVirtualResolutionMutations({
    project,
    allDescriptors,
    allResolutions,
    allPackages,
    accessibleLocators = new Set(),
    optionalBuilds = new Set(),
    volatileDescriptors = new Set(),
    peerRequirements = new Map(),
    report,
    tolerateMissingPackages = false
  }) {
    var _a2;
    const virtualStack = new Map();
    const resolutionStack = [];
    const allIdents = new Map();
    const allVirtualInstances = new Map();
    const allVirtualDependents = new Map();
    const peerDependencyLinks = new Map();
    const peerDependencyDependents = new Map();
    const originalWorkspaceDefinitions = new Map(project.workspaces.map((workspace) => {
      const locatorHash = workspace.anchoredLocator.locatorHash;
      const pkg = allPackages.get(locatorHash);
      if (typeof pkg === `undefined`) {
        if (tolerateMissingPackages) {
          return [locatorHash, null];
        } else {
          throw new Error(`Assertion failed: The workspace should have an associated package`);
        }
      }
      return [locatorHash, copyPackage(pkg)];
    }));
    const reportStackOverflow = () => {
      const logDir = xfs.mktempSync();
      const logFile = ppath.join(logDir, `stacktrace.log`);
      const maxSize = String(resolutionStack.length + 1).length;
      const content = resolutionStack.map((locator, index) => {
        const prefix = `${index + 1}.`.padStart(maxSize, ` `);
        return `${prefix} ${stringifyLocator(locator)}
`;
      }).join(``);
      xfs.writeFileSync(logFile, content);
      xfs.detachTemp(logDir);
      throw new ReportError(MessageName.STACK_OVERFLOW_RESOLUTION, `Encountered a stack overflow when resolving peer dependencies; cf ${npath.fromPortablePath(logFile)}`);
    };
    const getPackageFromDescriptor = (descriptor) => {
      const resolution = allResolutions.get(descriptor.descriptorHash);
      if (typeof resolution === `undefined`)
        throw new Error(`Assertion failed: The resolution should have been registered`);
      const pkg = allPackages.get(resolution);
      if (!pkg)
        throw new Error(`Assertion failed: The package could not be found`);
      return pkg;
    };
    const resolvePeerDependencies = (parentLocator, peerSlots, {top, optional}) => {
      if (resolutionStack.length > 1e3)
        reportStackOverflow();
      resolutionStack.push(parentLocator);
      const result = resolvePeerDependenciesImpl(parentLocator, peerSlots, {top, optional});
      resolutionStack.pop();
      return result;
    };
    const resolvePeerDependenciesImpl = (parentLocator, peerSlots, {top, optional}) => {
      if (accessibleLocators.has(parentLocator.locatorHash))
        return;
      accessibleLocators.add(parentLocator.locatorHash);
      if (!optional)
        optionalBuilds.delete(parentLocator.locatorHash);
      const parentPackage = allPackages.get(parentLocator.locatorHash);
      if (!parentPackage) {
        if (tolerateMissingPackages) {
          return;
        } else {
          throw new Error(`Assertion failed: The package (${prettyLocator(project.configuration, parentLocator)}) should have been registered`);
        }
      }
      const newVirtualInstances = [];
      const firstPass = [];
      const secondPass = [];
      const thirdPass = [];
      const fourthPass = [];
      for (const descriptor of Array.from(parentPackage.dependencies.values())) {
        if (parentPackage.peerDependencies.has(descriptor.identHash) && parentPackage.locatorHash !== top)
          continue;
        if (isVirtualDescriptor(descriptor))
          throw new Error(`Assertion failed: Virtual packages shouldn't be encountered when virtualizing a branch`);
        volatileDescriptors.delete(descriptor.descriptorHash);
        let isOptional2 = optional;
        if (!isOptional2) {
          const dependencyMetaSet = parentPackage.dependenciesMeta.get(stringifyIdent(descriptor));
          if (typeof dependencyMetaSet !== `undefined`) {
            const dependencyMeta = dependencyMetaSet.get(null);
            if (typeof dependencyMeta !== `undefined` && dependencyMeta.optional) {
              isOptional2 = true;
            }
          }
        }
        const resolution = allResolutions.get(descriptor.descriptorHash);
        if (!resolution) {
          if (tolerateMissingPackages) {
            continue;
          } else {
            throw new Error(`Assertion failed: The resolution (${prettyDescriptor(project.configuration, descriptor)}) should have been registered`);
          }
        }
        const pkg = originalWorkspaceDefinitions.get(resolution) || allPackages.get(resolution);
        if (!pkg)
          throw new Error(`Assertion failed: The package (${resolution}, resolved from ${prettyDescriptor(project.configuration, descriptor)}) should have been registered`);
        if (pkg.peerDependencies.size === 0) {
          resolvePeerDependencies(pkg, new Map(), {top, optional: isOptional2});
          continue;
        }
        const stackDepth = virtualStack.get(pkg.locatorHash);
        if (typeof stackDepth === `number` && stackDepth >= 2)
          reportStackOverflow();
        let virtualizedDescriptor;
        let virtualizedPackage;
        const missingPeerDependencies = new Set();
        let nextPeerSlots;
        firstPass.push(() => {
          virtualizedDescriptor = virtualizeDescriptor(descriptor, parentLocator.locatorHash);
          virtualizedPackage = virtualizePackage(pkg, parentLocator.locatorHash);
          parentPackage.dependencies.delete(descriptor.identHash);
          parentPackage.dependencies.set(virtualizedDescriptor.identHash, virtualizedDescriptor);
          allResolutions.set(virtualizedDescriptor.descriptorHash, virtualizedPackage.locatorHash);
          allDescriptors.set(virtualizedDescriptor.descriptorHash, virtualizedDescriptor);
          allPackages.set(virtualizedPackage.locatorHash, virtualizedPackage);
          newVirtualInstances.push([pkg, virtualizedDescriptor, virtualizedPackage]);
        });
        secondPass.push(() => {
          var _a3;
          nextPeerSlots = new Map();
          for (const peerRequest of virtualizedPackage.peerDependencies.values()) {
            let peerDescriptor = parentPackage.dependencies.get(peerRequest.identHash);
            if (!peerDescriptor && areIdentsEqual(parentLocator, peerRequest)) {
              peerDescriptor = convertLocatorToDescriptor(parentLocator);
              allDescriptors.set(peerDescriptor.descriptorHash, peerDescriptor);
              allResolutions.set(peerDescriptor.descriptorHash, parentLocator.locatorHash);
              volatileDescriptors.delete(peerDescriptor.descriptorHash);
            }
            if ((!peerDescriptor || peerDescriptor.range === `missing:`) && virtualizedPackage.dependencies.has(peerRequest.identHash)) {
              virtualizedPackage.peerDependencies.delete(peerRequest.identHash);
              continue;
            }
            if (!peerDescriptor)
              peerDescriptor = makeDescriptor(peerRequest, `missing:`);
            virtualizedPackage.dependencies.set(peerDescriptor.identHash, peerDescriptor);
            if (isVirtualDescriptor(peerDescriptor)) {
              const dependents = getSetWithDefault(allVirtualDependents, peerDescriptor.descriptorHash);
              dependents.add(virtualizedPackage.locatorHash);
            }
            allIdents.set(peerDescriptor.identHash, peerDescriptor);
            if (peerDescriptor.range === `missing:`)
              missingPeerDependencies.add(peerDescriptor.identHash);
            nextPeerSlots.set(peerRequest.identHash, (_a3 = peerSlots.get(peerRequest.identHash)) != null ? _a3 : virtualizedPackage.locatorHash);
          }
          virtualizedPackage.dependencies = new Map(sortMap(virtualizedPackage.dependencies, ([identHash, descriptor2]) => {
            return stringifyIdent(descriptor2);
          }));
        });
        thirdPass.push(() => {
          if (!allPackages.has(virtualizedPackage.locatorHash))
            return;
          const current = virtualStack.get(pkg.locatorHash);
          const next = typeof current !== `undefined` ? current + 1 : 1;
          virtualStack.set(pkg.locatorHash, next);
          resolvePeerDependencies(virtualizedPackage, nextPeerSlots, {top, optional: isOptional2});
          virtualStack.set(pkg.locatorHash, next - 1);
        });
        fourthPass.push(() => {
          const finalDescriptor = parentPackage.dependencies.get(descriptor.identHash);
          if (typeof finalDescriptor === `undefined`)
            throw new Error(`Assertion failed: Expected the peer dependency to have been turned into a dependency`);
          const finalResolution = allResolutions.get(finalDescriptor.descriptorHash);
          if (typeof finalResolution === `undefined`)
            throw new Error(`Assertion failed: Expected the descriptor to be registered`);
          getSetWithDefault(peerDependencyDependents, finalResolution).add(parentLocator.locatorHash);
          if (!allPackages.has(virtualizedPackage.locatorHash))
            return;
          for (const descriptor2 of virtualizedPackage.peerDependencies.values()) {
            const root = nextPeerSlots.get(descriptor2.identHash);
            if (typeof root === `undefined`)
              throw new Error(`Assertion failed: Expected the peer dependency ident to be registered`);
            getArrayWithDefault(getMapWithDefault(peerDependencyLinks, root), stringifyIdent(descriptor2)).push(virtualizedPackage.locatorHash);
          }
          for (const missingPeerDependency of missingPeerDependencies) {
            virtualizedPackage.dependencies.delete(missingPeerDependency);
          }
        });
      }
      for (const fn of [...firstPass, ...secondPass])
        fn();
      let stable;
      do {
        stable = true;
        for (const [physicalLocator, virtualDescriptor, virtualPackage] of newVirtualInstances) {
          if (!allPackages.has(virtualPackage.locatorHash))
            continue;
          const otherVirtualInstances = getMapWithDefault(allVirtualInstances, physicalLocator.locatorHash);
          const dependencyHash = makeHash(...[...virtualPackage.dependencies.values()].map((descriptor) => {
            const resolution = descriptor.range !== `missing:` ? allResolutions.get(descriptor.descriptorHash) : `missing:`;
            if (typeof resolution === `undefined`)
              throw new Error(`Assertion failed: Expected the resolution for ${prettyDescriptor(project.configuration, descriptor)} to have been registered`);
            return resolution === top ? `${resolution} (top)` : resolution;
          }), virtualDescriptor.identHash);
          const masterDescriptor = otherVirtualInstances.get(dependencyHash);
          if (typeof masterDescriptor === `undefined`) {
            otherVirtualInstances.set(dependencyHash, virtualDescriptor);
            continue;
          }
          if (masterDescriptor === virtualDescriptor)
            continue;
          stable = false;
          allPackages.delete(virtualPackage.locatorHash);
          allDescriptors.delete(virtualDescriptor.descriptorHash);
          allResolutions.delete(virtualDescriptor.descriptorHash);
          accessibleLocators.delete(virtualPackage.locatorHash);
          const dependents = allVirtualDependents.get(virtualDescriptor.descriptorHash) || [];
          const allDependents = [parentPackage.locatorHash, ...dependents];
          allVirtualDependents.delete(virtualDescriptor.descriptorHash);
          for (const dependent of allDependents) {
            const pkg = allPackages.get(dependent);
            if (typeof pkg === `undefined`)
              continue;
            pkg.dependencies.set(virtualDescriptor.identHash, masterDescriptor);
          }
        }
      } while (!stable);
      for (const fn of [...thirdPass, ...fourthPass]) {
        fn();
      }
    };
    for (const workspace of project.workspaces) {
      const locator = workspace.anchoredLocator;
      volatileDescriptors.delete(workspace.anchoredDescriptor.descriptorHash);
      resolvePeerDependencies(locator, new Map(), {top: locator.locatorHash, optional: false});
    }
    var WarningType;
    (function(WarningType2) {
      WarningType2[WarningType2["NotProvided"] = 0] = "NotProvided";
      WarningType2[WarningType2["NotCompatible"] = 1] = "NotCompatible";
    })(WarningType || (WarningType = {}));
    const warnings = [];
    for (const [rootHash, dependents] of peerDependencyDependents) {
      const root = allPackages.get(rootHash);
      if (typeof root === `undefined`)
        throw new Error(`Assertion failed: Expected the root to be registered`);
      const rootLinks = peerDependencyLinks.get(rootHash);
      if (typeof rootLinks === `undefined`)
        continue;
      for (const dependentHash of dependents) {
        const dependent = allPackages.get(dependentHash);
        if (typeof dependent === `undefined`)
          continue;
        for (const [identStr, linkHashes] of rootLinks) {
          const ident = parseIdent(identStr);
          if (dependent.peerDependencies.has(ident.identHash))
            continue;
          const hash = `p${makeHash(dependentHash, identStr, rootHash).slice(0, 5)}`;
          peerRequirements.set(hash, {
            subject: dependentHash,
            requested: ident,
            rootRequester: rootHash,
            allRequesters: linkHashes
          });
          const resolvedDescriptor = root.dependencies.get(ident.identHash);
          if (typeof resolvedDescriptor !== `undefined`) {
            const peerResolution = getPackageFromDescriptor(resolvedDescriptor);
            const peerVersion = (_a2 = peerResolution.version) != null ? _a2 : `0.0.0`;
            const ranges = new Set();
            for (const linkHash of linkHashes) {
              const link = allPackages.get(linkHash);
              if (typeof link === `undefined`)
                throw new Error(`Assertion failed: Expected the link to be registered`);
              const peerDependency = link.peerDependencies.get(ident.identHash);
              if (typeof peerDependency === `undefined`)
                throw new Error(`Assertion failed: Expected the ident to be registered`);
              ranges.add(peerDependency.range);
            }
            const satisfiesAll = [...ranges].every((range) => {
              return satisfiesWithPrereleases(peerVersion, range);
            });
            if (!satisfiesAll) {
              warnings.push({
                type: 1,
                subject: dependent,
                requested: ident,
                requester: root,
                version: peerVersion,
                hash,
                requirementCount: linkHashes.length
              });
            }
          } else {
            const peerDependencyMeta = root.peerDependenciesMeta.get(identStr);
            if (!(peerDependencyMeta == null ? void 0 : peerDependencyMeta.optional)) {
              warnings.push({
                type: 0,
                subject: dependent,
                requested: ident,
                requester: root,
                hash
              });
            }
          }
        }
      }
    }
    const warningSortCriterias = [
      (warning) => prettyLocatorNoColors(warning.subject),
      (warning) => stringifyIdent(warning.requested),
      (warning) => `${warning.type}`
    ];
    for (const warning of sortMap(warnings, warningSortCriterias)) {
      switch (warning.type) {
        case 0:
          {
            report == null ? void 0 : report.reportWarning(MessageName.MISSING_PEER_DEPENDENCY, `${prettyLocator(project.configuration, warning.subject)} doesn't provide ${prettyIdent(project.configuration, warning.requested)} (${pretty(project.configuration, warning.hash, Type.CODE)}), requested by ${prettyIdent(project.configuration, warning.requester)}`);
          }
          break;
        case 1:
          {
            const andDescendants = warning.requirementCount > 1 ? `and some of its descendants request` : `requests`;
            report == null ? void 0 : report.reportWarning(MessageName.INCOMPATIBLE_PEER_DEPENDENCY, `${prettyLocator(project.configuration, warning.subject)} provides ${prettyIdent(project.configuration, warning.requested)} (${pretty(project.configuration, warning.hash, Type.CODE)}) with version ${prettyReference(project.configuration, warning.version)}, which doesn't satisfy what ${prettyIdent(project.configuration, warning.requester)} ${andDescendants}`);
          }
          break;
      }
    }
    if (warnings.length > 0) {
      report == null ? void 0 : report.reportWarning(MessageName.UNNAMED, `Some peer dependencies are incorrectly met; run ${pretty(project.configuration, `yarn explain peer-requirements <hash>`, Type.CODE)} for details, where ${pretty(project.configuration, `<hash>`, Type.CODE)} is the six-letter p-prefixed code`);
    }
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-core/sources/TelemetryManager.ts
  var MetricName;
  (function(MetricName2) {
    MetricName2["VERSION"] = `version`;
    MetricName2["COMMAND_NAME"] = `commandName`;
    MetricName2["PLUGIN_NAME"] = `pluginName`;
    MetricName2["INSTALL_COUNT"] = `installCount`;
    MetricName2["PROJECT_COUNT"] = `projectCount`;
    MetricName2["WORKSPACE_COUNT"] = `workspaceCount`;
    MetricName2["DEPENDENCY_COUNT"] = `dependencyCount`;
    MetricName2["EXTENSION"] = `packageExtension`;
  })(MetricName || (MetricName = {}));
  var TelemetryManager = class {
    constructor(configuration, accountId) {
      this.values = new Map();
      this.hits = new Map();
      this.enumerators = new Map();
      this.configuration = configuration;
      const registryFile = this.getRegistryPath();
      this.isNew = !xfs.existsSync(registryFile);
      this.sendReport(accountId);
      this.startBuffer();
    }
    reportVersion(value) {
      this.reportValue(MetricName.VERSION, value.replace(/-git\..*/, `-git`));
    }
    reportCommandName(value) {
      this.reportValue(MetricName.COMMAND_NAME, value || `<none>`);
    }
    reportPluginName(value) {
      this.reportValue(MetricName.PLUGIN_NAME, value);
    }
    reportProject(cwd) {
      this.reportEnumerator(MetricName.PROJECT_COUNT, cwd);
    }
    reportInstall(nodeLinker) {
      this.reportHit(MetricName.INSTALL_COUNT, nodeLinker);
    }
    reportPackageExtension(value) {
      this.reportValue(MetricName.EXTENSION, value);
    }
    reportWorkspaceCount(count) {
      this.reportValue(MetricName.WORKSPACE_COUNT, String(count));
    }
    reportDependencyCount(count) {
      this.reportValue(MetricName.DEPENDENCY_COUNT, String(count));
    }
    reportValue(metric, value) {
      getSetWithDefault(this.values, metric).add(value);
    }
    reportEnumerator(metric, value) {
      getSetWithDefault(this.enumerators, metric).add(makeHash(value));
    }
    reportHit(metric, extra = `*`) {
      const ns = getMapWithDefault(this.hits, metric);
      const current = getFactoryWithDefault(ns, extra, () => 0);
      ns.set(extra, current + 1);
    }
    getRegistryPath() {
      const registryFile = this.configuration.get(`globalFolder`);
      return ppath.join(registryFile, `telemetry.json`);
    }
    sendReport(accountId) {
      var _a2, _b, _c;
      const registryFile = this.getRegistryPath();
      let content;
      try {
        content = xfs.readJsonSync(registryFile);
      } catch {
        content = {};
      }
      const now2 = Date.now();
      const interval = this.configuration.get(`telemetryInterval`) * 24 * 60 * 60 * 1e3;
      const lastUpdate = (_a2 = content.lastUpdate) != null ? _a2 : now2 + interval + Math.floor(interval * Math.random());
      const nextUpdate = lastUpdate + interval;
      if (nextUpdate > now2 && content.lastUpdate != null)
        return;
      try {
        xfs.mkdirSync(ppath.dirname(registryFile), {recursive: true});
        xfs.writeJsonSync(registryFile, {lastUpdate: now2});
      } catch {
        return;
      }
      if (nextUpdate > now2)
        return;
      if (!content.blocks)
        return;
      const rawUrl = `https://browser-http-intake.logs.datadoghq.eu/v1/input/${accountId}?ddsource=yarn`;
      const sendPayload = (payload) => post(rawUrl, payload, {
        configuration: this.configuration
      }).catch(() => {
      });
      for (const [userId, block] of Object.entries((_b = content.blocks) != null ? _b : {})) {
        if (Object.keys(block).length === 0)
          continue;
        const upload = block;
        upload.userId = userId;
        upload.reportType = `primary`;
        for (const key of Object.keys((_c = upload.enumerators) != null ? _c : {}))
          upload.enumerators[key] = upload.enumerators[key].length;
        sendPayload(upload);
        const toSend = new Map();
        const maxValues = 20;
        for (const [metricName, values] of Object.entries(upload.values))
          if (values.length > 0)
            toSend.set(metricName, values.slice(0, maxValues));
        while (toSend.size > 0) {
          const upload2 = {};
          upload2.userId = userId;
          upload2.reportType = `secondary`;
          upload2.metrics = {};
          for (const [metricName, values] of toSend) {
            upload2.metrics[metricName] = values.shift();
            if (values.length === 0) {
              toSend.delete(metricName);
            }
          }
          sendPayload(upload2);
        }
      }
    }
    applyChanges() {
      var _a2, _b, _c, _d, _e, _f, _g, _h, _i;
      const registryFile = this.getRegistryPath();
      let content;
      try {
        content = xfs.readJsonSync(registryFile);
      } catch {
        content = {};
      }
      const userId = (_a2 = this.configuration.get(`telemetryUserId`)) != null ? _a2 : `*`;
      const blocks = content.blocks = (_b = content.blocks) != null ? _b : {};
      const block = blocks[userId] = (_c = blocks[userId]) != null ? _c : {};
      for (const key of this.hits.keys()) {
        const store = block.hits = (_d = block.hits) != null ? _d : {};
        const ns = store[key] = (_e = store[key]) != null ? _e : {};
        for (const [extra, value] of this.hits.get(key)) {
          ns[extra] = ((_f = ns[extra]) != null ? _f : 0) + value;
        }
      }
      for (const field of [`values`, `enumerators`]) {
        for (const key of this[field].keys()) {
          const store = block[field] = (_g = block[field]) != null ? _g : {};
          store[key] = [...new Set([
            ...(_h = store[key]) != null ? _h : [],
            ...(_i = this[field].get(key)) != null ? _i : []
          ])];
        }
      }
      xfs.mkdirSync(ppath.dirname(registryFile), {recursive: true});
      xfs.writeJsonSync(registryFile, content);
    }
    startBuffer() {
      process.on(`exit`, () => {
        try {
          this.applyChanges();
        } catch {
        }
      });
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-cli/sources/main.ts
  var import_child_process = __toModule(require("child_process"));
  var import_ci_info3 = __toModule(require_ci_info());
  var import_fs7 = __toModule(require("fs"));

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-cli/sources/pluginCommands.ts
  var pluginCommands = new Map([
    [`constraints`, [
      [`constraints`, `query`],
      [`constraints`, `source`],
      [`constraints`]
    ]],
    [`exec`, []],
    [`interactive-tools`, [
      [`search`],
      [`upgrade-interactive`]
    ]],
    [`stage`, [
      [`stage`]
    ]],
    [`typescript`, []],
    [`version`, [
      [`version`, `apply`],
      [`version`, `check`],
      [`version`]
    ]],
    [`workspace-tools`, [
      [`workspaces`, `focus`],
      [`workspaces`, `foreach`]
    ]]
  ]);

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-cli/sources/main.ts
  function runBinary(path3) {
    const physicalPath = npath.fromPortablePath(path3);
    process.on(`SIGINT`, () => {
    });
    if (physicalPath) {
      (0, import_child_process.execFileSync)(process.execPath, [physicalPath, ...process.argv.slice(2)], {
        stdio: `inherit`,
        env: __spreadProps(__spreadValues({}, process.env), {
          YARN_IGNORE_PATH: `1`,
          YARN_IGNORE_CWD: `1`
        })
      });
    } else {
      (0, import_child_process.execFileSync)(physicalPath, process.argv.slice(2), {
        stdio: `inherit`,
        env: __spreadProps(__spreadValues({}, process.env), {
          YARN_IGNORE_PATH: `1`,
          YARN_IGNORE_CWD: `1`
        })
      });
    }
  }
  async function main({binaryVersion, pluginConfiguration}) {
    async function run() {
      const cli = new Cli({
        binaryLabel: `Yarn Package Manager`,
        binaryName: `yarn`,
        binaryVersion
      });
      try {
        await exec(cli);
      } catch (error) {
        process.stdout.write(cli.error(error));
        process.exitCode = 1;
      }
    }
    async function exec(cli) {
      var _a2, _b, _c, _d, _e;
      const version = process.versions.node;
      const range = `>=12 <14 || 14.2 - 14.9 || >14.10.0`;
      if (process.env.YARN_IGNORE_NODE !== `1` && !semverUtils_exports.satisfiesWithPrereleases(version, range))
        throw new UsageError(`This tool requires a Node version compatible with ${range} (got ${version}). Upgrade Node, or set \`YARN_IGNORE_NODE=1\` in your environment.`);
      const configuration = await Configuration.find(npath.toPortablePath(process.cwd()), pluginConfiguration, {
        usePath: true,
        strict: false
      });
      const yarnPath = configuration.get(`yarnPath`);
      const ignorePath = configuration.get(`ignorePath`);
      const ignoreCwd = configuration.get(`ignoreCwd`);
      if (!ignorePath && !ignoreCwd && yarnPath === npath.toPortablePath(npath.resolve(process.argv[1]))) {
        process.env.YARN_IGNORE_PATH = `1`;
        process.env.YARN_IGNORE_CWD = `1`;
        await exec(cli);
        return;
      } else if (yarnPath !== null && !ignorePath) {
        if (!xfs.existsSync(yarnPath)) {
          process.stdout.write(cli.error(new Error(`The "yarn-path" option has been set (in ${configuration.sources.get(`yarnPath`)}), but the specified location doesn't exist (${yarnPath}).`)));
          process.exitCode = 1;
        } else {
          try {
            runBinary(yarnPath);
          } catch (error) {
            process.exitCode = error.code || 1;
          }
        }
      } else {
        if (ignorePath)
          delete process.env.YARN_IGNORE_PATH;
        const isTelemetryEnabled = configuration.get(`enableTelemetry`);
        if (isTelemetryEnabled && !import_ci_info3.isCI && process.stdout.isTTY)
          Configuration.telemetry = new TelemetryManager(configuration, `puba9cdc10ec5790a2cf4969dd413a47270`);
        (_a2 = Configuration.telemetry) == null ? void 0 : _a2.reportVersion(binaryVersion);
        for (const [name, plugin16] of configuration.plugins.entries()) {
          if (pluginCommands.has((_c = (_b = name.match(/^@yarnpkg\/plugin-(.*)$/)) == null ? void 0 : _b[1]) != null ? _c : ``))
            (_d = Configuration.telemetry) == null ? void 0 : _d.reportPluginName(name);
          for (const command2 of plugin16.commands || []) {
            cli.register(command2);
          }
        }
        const command = cli.process(process.argv.slice(2));
        if (!command.help)
          (_e = Configuration.telemetry) == null ? void 0 : _e.reportCommandName(command.path.join(` `));
        const cwd = command.cwd;
        if (typeof cwd !== `undefined` && !ignoreCwd) {
          const iAmHere = (0, import_fs7.realpathSync)(process.cwd());
          const iShouldBeHere = (0, import_fs7.realpathSync)(cwd);
          if (iAmHere !== iShouldBeHere) {
            process.chdir(cwd);
            await run();
            return;
          }
        }
        await cli.runExit(command, {
          cwd: npath.toPortablePath(process.cwd()),
          plugins: pluginConfiguration,
          quiet: false,
          stdin: process.stdin,
          stdout: process.stdout,
          stderr: process.stderr
        });
      }
    }
    return run().catch((error) => {
      process.stdout.write(error.stack || error.message);
      process.exitCode = 1;
    }).finally(() => xfs.rmtempPromise());
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-cli/sources/tools/backportClipanionCompatibility.ts
  function backportClipanionCompatibility(clipanion) {
    clipanion.Command.Path = (...p) => (instance) => {
      instance.paths = instance.paths || [];
      instance.paths.push(p);
    };
    for (const fn of [`Array`, `Boolean`, `String`, `Proxy`, `Rest`, `Counter`]) {
      clipanion.Command[fn] = (...args) => (instance, propertyName) => {
        const value = clipanion.Option[fn](...args);
        Object.defineProperty(instance, `__${propertyName}`, {
          configurable: false,
          enumerable: true,
          get() {
            return value;
          },
          set(value2) {
            this[propertyName] = value2;
          }
        });
      };
    }
    return clipanion;
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-cli/sources/index.ts
  var sources_exports5 = {};
  __export(sources_exports5, {
    BaseCommand: () => BaseCommand,
    WorkspaceRequiredError: () => WorkspaceRequiredError,
    getDynamicLibs: () => getDynamicLibs,
    getPluginConfiguration: () => getPluginConfiguration,
    main: () => main,
    openWorkspace: () => openWorkspace,
    pluginCommands: () => pluginCommands
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-cli/sources/tools/BaseCommand.ts
  var BaseCommand = class extends Command {
    constructor() {
      super(...arguments);
      this.cwd = options_exports.String(`--cwd`, {hidden: true});
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-cli/sources/tools/WorkspaceRequiredError.ts
  var WorkspaceRequiredError = class extends UsageError {
    constructor(projectCwd, cwd) {
      const relativePath = ppath.relative(projectCwd, cwd);
      const manifestPath = ppath.join(projectCwd, Manifest.fileName);
      super(`This command can only be run from within a workspace of your project (${relativePath} isn't a workspace of ${manifestPath}).`);
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-cli/sources/tools/getDynamicLibs.ts
  var semver6 = __toModule(require_semver2());
  init_lib();
  var yup = __toModule(require_lib2());
  var getDynamicLibs = () => new Map([
    [`@yarnpkg/cli`, sources_exports5],
    [`@yarnpkg/core`, sources_exports4],
    [`@yarnpkg/fslib`, sources_exports],
    [`@yarnpkg/libzip`, sync_exports],
    [`@yarnpkg/parsers`, sources_exports2],
    [`@yarnpkg/shell`, sources_exports3],
    [`clipanion`, advanced_exports],
    [`semver`, semver6],
    [`typanion`, lib_exports],
    [`yup`, yup]
  ]);

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-cli/sources/tools/openWorkspace.ts
  async function openWorkspace(configuration, cwd) {
    const {project, workspace} = await Project.find(configuration, cwd);
    if (!workspace)
      throw new WorkspaceRequiredError(project.cwd, cwd);
    return workspace;
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-cli/sources/tools/getPluginConfiguration.ts
  var _7 = __toModule(require_semver2());
  init_lib();
  var _9 = __toModule(require_lib2());

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/index.ts
  var sources_exports6 = {};
  __export(sources_exports6, {
    dedupeUtils: () => suggestUtils_exports,
    default: () => sources_default3,
    suggestUtils: () => suggestUtils_exports
  });
  var import_ci_info4 = __toModule(require_ci_info());

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/add.ts
  var import_enquirer = __toModule(require_enquirer());

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/suggestUtils.ts
  var suggestUtils_exports = {};
  __export(suggestUtils_exports, {
    Modifier: () => Modifier,
    Strategy: () => Strategy,
    Target: () => Target,
    applyModifier: () => applyModifier,
    extractDescriptorFromPath: () => extractDescriptorFromPath,
    extractRangeModifier: () => extractRangeModifier,
    fetchDescriptorFrom: () => fetchDescriptorFrom,
    findProjectDescriptors: () => findProjectDescriptors,
    getModifier: () => getModifier,
    getSuggestedDescriptors: () => getSuggestedDescriptors
  });
  var import_semver7 = __toModule(require_semver2());
  var Target;
  (function(Target2) {
    Target2["REGULAR"] = `dependencies`;
    Target2["DEVELOPMENT"] = `devDependencies`;
    Target2["PEER"] = `peerDependencies`;
  })(Target || (Target = {}));
  var Modifier;
  (function(Modifier2) {
    Modifier2["CARET"] = `^`;
    Modifier2["TILDE"] = `~`;
    Modifier2["EXACT"] = ``;
  })(Modifier || (Modifier = {}));
  var Strategy;
  (function(Strategy3) {
    Strategy3["KEEP"] = `keep`;
    Strategy3["REUSE"] = `reuse`;
    Strategy3["PROJECT"] = `project`;
    Strategy3["LATEST"] = `latest`;
    Strategy3["CACHE"] = `cache`;
  })(Strategy || (Strategy = {}));
  function getModifier(flags, project) {
    if (flags.exact)
      return Modifier.EXACT;
    if (flags.caret)
      return Modifier.CARET;
    if (flags.tilde)
      return Modifier.TILDE;
    return project.configuration.get(`defaultSemverRangePrefix`);
  }
  var SIMPLE_SEMVER = /^([\^~]?)[0-9]+(?:\.[0-9]+){0,2}(?:-\S+)?$/;
  function extractRangeModifier(range, {project}) {
    const match2 = range.match(SIMPLE_SEMVER);
    return match2 ? match2[1] : project.configuration.get(`defaultSemverRangePrefix`);
  }
  function applyModifier(descriptor, modifier) {
    let {protocol, source, params, selector} = structUtils_exports.parseRange(descriptor.range);
    if (import_semver7.default.valid(selector))
      selector = `${modifier}${descriptor.range}`;
    return structUtils_exports.makeDescriptor(descriptor, structUtils_exports.makeRange({protocol, source, params, selector}));
  }
  async function findProjectDescriptors(ident, {project, target}) {
    const matches = new Map();
    const getDescriptorEntry = (descriptor) => {
      let entry = matches.get(descriptor.descriptorHash);
      if (!entry) {
        matches.set(descriptor.descriptorHash, entry = {
          descriptor,
          locators: []
        });
      }
      return entry;
    };
    for (const workspace of project.workspaces) {
      if (target === Target.PEER) {
        const peerDescriptor = workspace.manifest.peerDependencies.get(ident.identHash);
        if (peerDescriptor !== void 0) {
          getDescriptorEntry(peerDescriptor).locators.push(workspace.locator);
        }
      } else {
        const regularDescriptor = workspace.manifest.dependencies.get(ident.identHash);
        const developmentDescriptor = workspace.manifest.devDependencies.get(ident.identHash);
        if (target === Target.DEVELOPMENT) {
          if (developmentDescriptor !== void 0) {
            getDescriptorEntry(developmentDescriptor).locators.push(workspace.locator);
          } else if (regularDescriptor !== void 0) {
            getDescriptorEntry(regularDescriptor).locators.push(workspace.locator);
          }
        } else {
          if (regularDescriptor !== void 0) {
            getDescriptorEntry(regularDescriptor).locators.push(workspace.locator);
          } else if (developmentDescriptor !== void 0) {
            getDescriptorEntry(developmentDescriptor).locators.push(workspace.locator);
          }
        }
      }
    }
    return matches;
  }
  async function extractDescriptorFromPath(path3, {cwd, workspace}) {
    return await makeTemporaryCache(async (cache2) => {
      if (!ppath.isAbsolute(path3)) {
        path3 = ppath.relative(workspace.cwd, ppath.resolve(cwd, path3));
        if (!path3.match(/^\.{0,2}\//)) {
          path3 = `./${path3}`;
        }
      }
      const {project} = workspace;
      const descriptor = await fetchDescriptorFrom(structUtils_exports.makeIdent(null, `archive`), path3, {project: workspace.project, cache: cache2, workspace});
      if (!descriptor)
        throw new Error(`Assertion failed: The descriptor should have been found`);
      const report = new ThrowReport();
      const resolver = project.configuration.makeResolver();
      const fetcher = project.configuration.makeFetcher();
      const resolverOptions = {checksums: project.storedChecksums, project, cache: cache2, fetcher, report, resolver};
      const boundDescriptor = resolver.bindDescriptor(descriptor, workspace.anchoredLocator, resolverOptions);
      const locator = structUtils_exports.convertDescriptorToLocator(boundDescriptor);
      const fetchResult = await fetcher.fetch(locator, resolverOptions);
      const manifest = await Manifest.find(fetchResult.prefixPath, {baseFs: fetchResult.packageFs});
      if (!manifest.name)
        throw new Error(`Target path doesn't have a name`);
      return structUtils_exports.makeDescriptor(manifest.name, path3);
    });
  }
  async function getSuggestedDescriptors(request2, {project, workspace, cache: cache2, target, modifier, strategies, maxResults = Infinity}) {
    if (!(maxResults >= 0))
      throw new Error(`Invalid maxResults (${maxResults})`);
    if (request2.range !== `unknown`) {
      return {
        suggestions: [{
          descriptor: request2,
          name: `Use ${structUtils_exports.prettyDescriptor(project.configuration, request2)}`,
          reason: `(unambiguous explicit request)`
        }],
        rejections: []
      };
    }
    const existing = typeof workspace !== `undefined` && workspace !== null ? workspace.manifest[target].get(request2.identHash) || null : null;
    const suggested = [];
    const rejected = [];
    const trySuggest = async (cb) => {
      try {
        await cb();
      } catch (e) {
        rejected.push(e);
      }
    };
    for (const strategy of strategies) {
      if (suggested.length >= maxResults)
        break;
      switch (strategy) {
        case Strategy.KEEP:
          {
            await trySuggest(async () => {
              if (existing) {
                suggested.push({
                  descriptor: existing,
                  name: `Keep ${structUtils_exports.prettyDescriptor(project.configuration, existing)}`,
                  reason: `(no changes)`
                });
              }
            });
          }
          break;
        case Strategy.REUSE:
          {
            await trySuggest(async () => {
              for (const {descriptor, locators} of (await findProjectDescriptors(request2, {project, target})).values()) {
                if (locators.length === 1 && locators[0].locatorHash === workspace.anchoredLocator.locatorHash) {
                  if (strategies.includes(Strategy.KEEP))
                    continue;
                }
                let reason = `(originally used by ${structUtils_exports.prettyLocator(project.configuration, locators[0])}`;
                reason += locators.length > 1 ? ` and ${locators.length - 1} other${locators.length > 2 ? `s` : ``})` : `)`;
                suggested.push({
                  descriptor,
                  name: `Reuse ${structUtils_exports.prettyDescriptor(project.configuration, descriptor)}`,
                  reason
                });
              }
            });
          }
          break;
        case Strategy.CACHE:
          {
            await trySuggest(async () => {
              for (const descriptor of project.storedDescriptors.values()) {
                if (descriptor.identHash === request2.identHash) {
                  suggested.push({
                    descriptor,
                    name: `Reuse ${structUtils_exports.prettyDescriptor(project.configuration, descriptor)}`,
                    reason: `(already used somewhere in the lockfile)`
                  });
                }
              }
            });
          }
          break;
        case Strategy.PROJECT:
          {
            await trySuggest(async () => {
              if (workspace.manifest.name !== null && request2.identHash === workspace.manifest.name.identHash)
                return;
              const candidateWorkspace = project.tryWorkspaceByIdent(request2);
              if (candidateWorkspace === null)
                return;
              suggested.push({
                descriptor: candidateWorkspace.anchoredDescriptor,
                name: `Attach ${structUtils_exports.prettyWorkspace(project.configuration, candidateWorkspace)}`,
                reason: `(local workspace at ${candidateWorkspace.cwd})`
              });
            });
          }
          break;
        case Strategy.LATEST:
          {
            await trySuggest(async () => {
              if (request2.range !== `unknown`) {
                suggested.push({
                  descriptor: request2,
                  name: `Use ${structUtils_exports.prettyRange(project.configuration, request2.range)}`,
                  reason: `(explicit range requested)`
                });
              } else if (target === Target.PEER) {
                suggested.push({
                  descriptor: structUtils_exports.makeDescriptor(request2, `*`),
                  name: `Use *`,
                  reason: `(catch-all peer dependency pattern)`
                });
              } else if (!project.configuration.get(`enableNetwork`)) {
                suggested.push({
                  descriptor: null,
                  name: `Resolve from latest`,
                  reason: formatUtils_exports.pretty(project.configuration, `(unavailable because enableNetwork is toggled off)`, `grey`)
                });
              } else {
                let latest = await fetchDescriptorFrom(request2, `latest`, {project, cache: cache2, workspace, preserveModifier: false});
                if (latest) {
                  latest = applyModifier(latest, modifier);
                  suggested.push({
                    descriptor: latest,
                    name: `Use ${structUtils_exports.prettyDescriptor(project.configuration, latest)}`,
                    reason: `(resolved from latest)`
                  });
                }
              }
            });
          }
          break;
      }
    }
    return {
      suggestions: suggested.slice(0, maxResults),
      rejections: rejected.slice(0, maxResults)
    };
  }
  async function fetchDescriptorFrom(ident, range, {project, cache: cache2, workspace, preserveModifier = true}) {
    const latestDescriptor = structUtils_exports.makeDescriptor(ident, range);
    const report = new ThrowReport();
    const fetcher = project.configuration.makeFetcher();
    const resolver = project.configuration.makeResolver();
    const fetchOptions = {project, fetcher, cache: cache2, checksums: project.storedChecksums, report, skipIntegrityCheck: true};
    const resolveOptions = __spreadProps(__spreadValues({}, fetchOptions), {resolver, fetchOptions});
    const boundDescriptor = resolver.bindDescriptor(latestDescriptor, workspace.anchoredLocator, resolveOptions);
    const candidateLocators = await resolver.getCandidates(boundDescriptor, new Map(), resolveOptions);
    if (candidateLocators.length === 0)
      return null;
    const bestLocator = candidateLocators[0];
    let {protocol, source, params, selector} = structUtils_exports.parseRange(structUtils_exports.convertToManifestRange(bestLocator.reference));
    if (protocol === project.configuration.get(`defaultProtocol`))
      protocol = null;
    if (import_semver7.default.valid(selector) && preserveModifier !== false) {
      const referenceRange = typeof preserveModifier === `string` ? preserveModifier : latestDescriptor.range;
      const modifier = extractRangeModifier(referenceRange, {project});
      selector = modifier + selector;
    }
    return structUtils_exports.makeDescriptor(bestLocator, structUtils_exports.makeRange({protocol, source, params, selector}));
  }
  async function makeTemporaryCache(cb) {
    return await xfs.mktempPromise(async (cacheDir) => {
      const configuration = Configuration.create(cacheDir);
      configuration.useWithSource(cacheDir, {
        enableMirror: false,
        compressionLevel: 0
      }, cacheDir, {overwrite: true});
      return await cb(new Cache(cacheDir, {configuration, check: false, immutable: false}));
    });
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/add.ts
  var AddCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.json = options_exports.Boolean(`--json`, false, {
        description: `Format the output as an NDJSON stream`
      });
      this.exact = options_exports.Boolean(`-E,--exact`, false, {
        description: `Don't use any semver modifier on the resolved range`
      });
      this.tilde = options_exports.Boolean(`-T,--tilde`, false, {
        description: `Use the \`~\` semver modifier on the resolved range`
      });
      this.caret = options_exports.Boolean(`-C,--caret`, false, {
        description: `Use the \`^\` semver modifier on the resolved range`
      });
      this.dev = options_exports.Boolean(`-D,--dev`, false, {
        description: `Add a package as a dev dependency`
      });
      this.peer = options_exports.Boolean(`-P,--peer`, false, {
        description: `Add a package as a peer dependency`
      });
      this.optional = options_exports.Boolean(`-O,--optional`, false, {
        description: `Add / upgrade a package to an optional regular / peer dependency`
      });
      this.preferDev = options_exports.Boolean(`--prefer-dev`, false, {
        description: `Add / upgrade a package to a dev dependency`
      });
      this.interactive = options_exports.Boolean(`-i,--interactive`, false, {
        description: `Reuse the specified package from other workspaces in the project`
      });
      this.cached = options_exports.Boolean(`--cached`, false, {
        description: `Reuse the highest version already used somewhere within the project`
      });
      this.packages = options_exports.Rest();
    }
    async execute() {
      var _a2;
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const {project, workspace} = await Project.find(configuration, this.context.cwd);
      const cache2 = await Cache.find(configuration);
      if (!workspace)
        throw new WorkspaceRequiredError(project.cwd, this.context.cwd);
      await project.restoreInstallState({
        restoreResolutions: false
      });
      const interactive = (_a2 = this.interactive) != null ? _a2 : configuration.get(`preferInteractive`);
      const modifier = getModifier(this, project);
      const strategies = [
        ...interactive ? [
          Strategy.REUSE
        ] : [],
        Strategy.PROJECT,
        ...this.cached ? [
          Strategy.CACHE
        ] : [],
        Strategy.LATEST
      ];
      const maxResults = interactive ? Infinity : 1;
      const allSuggestions = await Promise.all(this.packages.map(async (pseudoDescriptor) => {
        const request2 = pseudoDescriptor.match(/^\.{0,2}\//) ? await extractDescriptorFromPath(pseudoDescriptor, {cwd: this.context.cwd, workspace}) : structUtils_exports.parseDescriptor(pseudoDescriptor);
        const target = suggestTarget(workspace, request2, {
          dev: this.dev,
          peer: this.peer,
          preferDev: this.preferDev,
          optional: this.optional
        });
        const suggestions = await getSuggestedDescriptors(request2, {project, workspace, cache: cache2, target, modifier, strategies, maxResults});
        return [request2, suggestions, target];
      }));
      const checkReport = await LightReport.start({
        configuration,
        stdout: this.context.stdout,
        suggestInstall: false
      }, async (report) => {
        for (const [request2, {suggestions, rejections}] of allSuggestions) {
          const nonNullSuggestions = suggestions.filter((suggestion) => {
            return suggestion.descriptor !== null;
          });
          if (nonNullSuggestions.length === 0) {
            const [firstError] = rejections;
            if (typeof firstError === `undefined`)
              throw new Error(`Assertion failed: Expected an error to have been set`);
            if (!project.configuration.get(`enableNetwork`))
              report.reportError(MessageName.CANT_SUGGEST_RESOLUTIONS, `${structUtils_exports.prettyDescriptor(configuration, request2)} can't be resolved to a satisfying range (note: network resolution has been disabled)`);
            else
              report.reportError(MessageName.CANT_SUGGEST_RESOLUTIONS, `${structUtils_exports.prettyDescriptor(configuration, request2)} can't be resolved to a satisfying range`);
            report.reportSeparator();
            report.reportExceptionOnce(firstError);
          }
        }
      });
      if (checkReport.hasErrors())
        return checkReport.exitCode();
      let askedQuestions = false;
      const afterWorkspaceDependencyAdditionList = [];
      const afterWorkspaceDependencyReplacementList = [];
      for (const [, {suggestions}, target] of allSuggestions) {
        let selected;
        const nonNullSuggestions = suggestions.filter((suggestion) => {
          return suggestion.descriptor !== null;
        });
        const firstSuggestedDescriptor = nonNullSuggestions[0].descriptor;
        const areAllTheSame = nonNullSuggestions.every((suggestion) => structUtils_exports.areDescriptorsEqual(suggestion.descriptor, firstSuggestedDescriptor));
        if (nonNullSuggestions.length === 1 || areAllTheSame) {
          selected = firstSuggestedDescriptor;
        } else {
          askedQuestions = true;
          ({answer: selected} = await (0, import_enquirer.prompt)({
            type: `select`,
            name: `answer`,
            message: `Which range do you want to use?`,
            choices: suggestions.map(({descriptor, name, reason}) => descriptor ? {
              name,
              hint: reason,
              descriptor
            } : {
              name,
              hint: reason,
              disabled: true
            }),
            onCancel: () => process.exit(130),
            result(name) {
              return this.find(name, `descriptor`);
            },
            stdin: this.context.stdin,
            stdout: this.context.stdout
          }));
        }
        const current = workspace.manifest[target].get(selected.identHash);
        if (typeof current === `undefined` || current.descriptorHash !== selected.descriptorHash) {
          workspace.manifest[target].set(selected.identHash, selected);
          if (this.optional) {
            if (target === `dependencies`) {
              workspace.manifest.ensureDependencyMeta(__spreadProps(__spreadValues({}, selected), {
                range: `unknown`
              })).optional = true;
            } else if (target === `peerDependencies`) {
              workspace.manifest.ensurePeerDependencyMeta(__spreadProps(__spreadValues({}, selected), {
                range: `unknown`
              })).optional = true;
            }
          }
          if (typeof current === `undefined`) {
            afterWorkspaceDependencyAdditionList.push([
              workspace,
              target,
              selected,
              strategies
            ]);
          } else {
            afterWorkspaceDependencyReplacementList.push([
              workspace,
              target,
              current,
              selected
            ]);
          }
        }
      }
      await configuration.triggerMultipleHooks((hooks) => hooks.afterWorkspaceDependencyAddition, afterWorkspaceDependencyAdditionList);
      await configuration.triggerMultipleHooks((hooks) => hooks.afterWorkspaceDependencyReplacement, afterWorkspaceDependencyReplacementList);
      if (askedQuestions)
        this.context.stdout.write(`
`);
      const installReport = await StreamReport.start({
        configuration,
        json: this.json,
        stdout: this.context.stdout,
        includeLogs: !this.context.quiet
      }, async (report) => {
        await project.install({cache: cache2, report});
      });
      return installReport.exitCode();
    }
  };
  AddCommand.paths = [
    [`add`]
  ];
  AddCommand.usage = Command.Usage({
    description: `add dependencies to the project`,
    details: `
      This command adds a package to the package.json for the nearest workspace.

      - If it didn't exist before, the package will by default be added to the regular \`dependencies\` field, but this behavior can be overriden thanks to the \`-D,--dev\` flag (which will cause the dependency to be added to the \`devDependencies\` field instead) and the \`-P,--peer\` flag (which will do the same but for \`peerDependencies\`).

      - If the package was already listed in your dependencies, it will by default be upgraded whether it's part of your \`dependencies\` or \`devDependencies\` (it won't ever update \`peerDependencies\`, though).

      - If set, the \`--prefer-dev\` flag will operate as a more flexible \`-D,--dev\` in that it will add the package to your \`devDependencies\` if it isn't already listed in either \`dependencies\` or \`devDependencies\`, but it will also happily upgrade your \`dependencies\` if that's what you already use (whereas \`-D,--dev\` would throw an exception).

      - If set, the \`-O,--optional\` flag will add the package to the \`optionalDependencies\` field and, in combination with the \`-P,--peer\` flag, it will add the package as an optional peer dependency. If the package was already listed in your \`dependencies\`, it will be upgraded to \`optionalDependencies\`. If the package was already listed in your \`peerDependencies\`, in combination with the \`-P,--peer\` flag, it will be upgraded to an optional peer dependency: \`"peerDependenciesMeta": { "<package>": { "optional": true } }\`

      - If the added package doesn't specify a range at all its \`latest\` tag will be resolved and the returned version will be used to generate a new semver range (using the \`^\` modifier by default unless otherwise configured via the \`defaultSemverRangePrefix\` configuration, or the \`~\` modifier if \`-T,--tilde\` is specified, or no modifier at all if \`-E,--exact\` is specified). Two exceptions to this rule: the first one is that if the package is a workspace then its local version will be used, and the second one is that if you use \`-P,--peer\` the default range will be \`*\` and won't be resolved at all.

      - If the added package specifies a range (such as \`^1.0.0\`, \`latest\`, or \`rc\`), Yarn will add this range as-is in the resulting package.json entry (in particular, tags such as \`rc\` will be encoded as-is rather than being converted into a semver range).

      If the \`--cached\` option is used, Yarn will preferably reuse the highest version already used somewhere within the project, even if through a transitive dependency.

      If the \`-i,--interactive\` option is used (or if the \`preferInteractive\` settings is toggled on) the command will first try to check whether other workspaces in the project use the specified package and, if so, will offer to reuse them.

      For a compilation of all the supported protocols, please consult the dedicated page from our website: https://yarnpkg.com/features/protocols.
    `,
    examples: [[
      `Add a regular package to the current workspace`,
      `$0 add lodash`
    ], [
      `Add a specific version for a package to the current workspace`,
      `$0 add lodash@1.2.3`
    ], [
      `Add a package from a GitHub repository (the master branch) to the current workspace using a URL`,
      `$0 add lodash@https://github.com/lodash/lodash`
    ], [
      `Add a package from a GitHub repository (the master branch) to the current workspace using the GitHub protocol`,
      `$0 add lodash@github:lodash/lodash`
    ], [
      `Add a package from a GitHub repository (the master branch) to the current workspace using the GitHub protocol (shorthand)`,
      `$0 add lodash@lodash/lodash`
    ], [
      `Add a package from a specific branch of a GitHub repository to the current workspace using the GitHub protocol (shorthand)`,
      `$0 add lodash-es@lodash/lodash#es`
    ]]
  });
  var add_default = AddCommand;
  function suggestTarget(workspace, ident, {dev, peer, preferDev, optional}) {
    const hasRegular = workspace.manifest[Target.REGULAR].has(ident.identHash);
    const hasDev = workspace.manifest[Target.DEVELOPMENT].has(ident.identHash);
    const hasPeer = workspace.manifest[Target.PEER].has(ident.identHash);
    if ((dev || peer) && hasRegular)
      throw new UsageError(`Package "${structUtils_exports.prettyIdent(workspace.project.configuration, ident)}" is already listed as a regular dependency - remove the -D,-P flags or remove it from your dependencies first`);
    if (!dev && !peer && hasPeer)
      throw new UsageError(`Package "${structUtils_exports.prettyIdent(workspace.project.configuration, ident)}" is already listed as a peer dependency - use either of -D or -P, or remove it from your peer dependencies first`);
    if (optional && hasDev)
      throw new UsageError(`Package "${structUtils_exports.prettyIdent(workspace.project.configuration, ident)}" is already listed as a dev dependency - remove the -O flag or remove it from your dev dependencies first`);
    if (optional && !peer && hasPeer)
      throw new UsageError(`Package "${structUtils_exports.prettyIdent(workspace.project.configuration, ident)}" is already listed as a peer dependency - remove the -O flag or add the -P flag or remove it from your peer dependencies first`);
    if ((dev || preferDev) && optional)
      throw new UsageError(`Package "${structUtils_exports.prettyIdent(workspace.project.configuration, ident)}" cannot simultaneously be a dev dependency and an optional dependency`);
    if (peer)
      return Target.PEER;
    if (dev || preferDev)
      return Target.DEVELOPMENT;
    if (hasRegular)
      return Target.REGULAR;
    if (hasDev)
      return Target.DEVELOPMENT;
    return Target.REGULAR;
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/bin.ts
  var BinCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.verbose = options_exports.Boolean(`-v,--verbose`, false, {
        description: `Print both the binary name and the locator of the package that provides the binary`
      });
      this.json = options_exports.Boolean(`--json`, false, {
        description: `Format the output as an NDJSON stream`
      });
      this.name = options_exports.String({required: false});
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const {project, locator} = await Project.find(configuration, this.context.cwd);
      await project.restoreInstallState();
      if (this.name) {
        const binaries = await scriptUtils_exports.getPackageAccessibleBinaries(locator, {project});
        const binary = binaries.get(this.name);
        if (!binary)
          throw new UsageError(`Couldn't find a binary named "${this.name}" for package "${structUtils_exports.prettyLocator(configuration, locator)}"`);
        const [, binaryFile] = binary;
        this.context.stdout.write(`${binaryFile}
`);
        return 0;
      }
      const report = await StreamReport.start({
        configuration,
        json: this.json,
        stdout: this.context.stdout
      }, async (report2) => {
        const binaries = await scriptUtils_exports.getPackageAccessibleBinaries(locator, {project});
        const keys = Array.from(binaries.keys());
        const maxKeyLength = keys.reduce((max, key) => Math.max(max, key.length), 0);
        for (const [name, [pkg, binaryFile]] of binaries) {
          report2.reportJson({
            name,
            source: structUtils_exports.stringifyIdent(pkg),
            path: binaryFile
          });
        }
        if (this.verbose) {
          for (const [name, [pkg]] of binaries) {
            report2.reportInfo(null, `${name.padEnd(maxKeyLength, ` `)}   ${structUtils_exports.prettyLocator(configuration, pkg)}`);
          }
        } else {
          for (const name of binaries.keys()) {
            report2.reportInfo(null, name);
          }
        }
      });
      return report.exitCode();
    }
  };
  BinCommand.paths = [
    [`bin`]
  ];
  BinCommand.usage = Command.Usage({
    description: `get the path to a binary script`,
    details: `
      When used without arguments, this command will print the list of all the binaries available in the current workspace. Adding the \`-v,--verbose\` flag will cause the output to contain both the binary name and the locator of the package that provides the binary.

      When an argument is specified, this command will just print the path to the binary on the standard output and exit. Note that the reported path may be stored within a zip archive.
    `,
    examples: [[
      `List all the available binaries`,
      `$0 bin`
    ], [
      `Print the path to a specific binary`,
      `$0 bin eslint`
    ]]
  });
  var bin_default = BinCommand;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/cache/clean.ts
  var CacheCleanCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.mirror = options_exports.Boolean(`--mirror`, false, {
        description: `Remove the global cache files instead of the local cache files`
      });
      this.all = options_exports.Boolean(`--all`, false, {
        description: `Remove both the global cache files and the local cache files of the current project`
      });
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const cache2 = await Cache.find(configuration);
      const report = await StreamReport.start({
        configuration,
        stdout: this.context.stdout
      }, async () => {
        const cleanMirror = (this.all || this.mirror) && cache2.mirrorCwd !== null;
        const cleanCache = !this.mirror;
        if (cleanMirror) {
          await xfs.removePromise(cache2.mirrorCwd);
          await configuration.triggerHook((hooks) => hooks.cleanGlobalArtifacts, configuration);
        }
        if (cleanCache) {
          await xfs.removePromise(cache2.cwd);
        }
      });
      return report.exitCode();
    }
  };
  CacheCleanCommand.paths = [
    [`cache`, `clean`],
    [`cache`, `clear`]
  ];
  CacheCleanCommand.usage = Command.Usage({
    description: `remove the shared cache files`,
    details: `
      This command will remove all the files from the cache.
    `,
    examples: [[
      `Remove all the local archives`,
      `$0 cache clean`
    ], [
      `Remove all the archives stored in the ~/.yarn directory`,
      `$0 cache clean --mirror`
    ]]
  });
  var clean_default = CacheCleanCommand;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/config/get.ts
  var import_get = __toModule(require_get());
  var import_util5 = __toModule(require("util"));
  var ConfigGetCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.json = options_exports.Boolean(`--json`, false, {
        description: `Format the output as an NDJSON stream`
      });
      this.unsafe = options_exports.Boolean(`--no-redacted`, false, {
        description: `Don't redact secrets (such as tokens) from the output`
      });
      this.name = options_exports.String();
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const name = this.name.replace(/[.[].*$/, ``);
      const path3 = this.name.replace(/^[^.[]*/, ``);
      const setting = configuration.settings.get(name);
      if (typeof setting === `undefined`)
        throw new UsageError(`Couldn't find a configuration settings named "${name}"`);
      const displayedValue = configuration.getSpecial(name, {
        hideSecrets: !this.unsafe,
        getNativePaths: true
      });
      const asObject = miscUtils_exports.convertMapsToIndexableObjects(displayedValue);
      const requestedObject = path3 ? (0, import_get.default)(asObject, path3) : asObject;
      const report = await StreamReport.start({
        configuration,
        includeFooter: false,
        json: this.json,
        stdout: this.context.stdout
      }, async (report2) => {
        report2.reportJson(requestedObject);
      });
      if (!this.json) {
        if (typeof requestedObject === `string`) {
          this.context.stdout.write(`${requestedObject}
`);
          return report.exitCode();
        }
        import_util5.inspect.styles.name = `cyan`;
        this.context.stdout.write(`${(0, import_util5.inspect)(requestedObject, {
          depth: Infinity,
          colors: configuration.get(`enableColors`),
          compact: false
        })}
`);
      }
      return report.exitCode();
    }
  };
  ConfigGetCommand.paths = [
    [`config`, `get`]
  ];
  ConfigGetCommand.usage = Command.Usage({
    description: `read a configuration settings`,
    details: `
      This command will print a configuration setting.

      Secrets (such as tokens) will be redacted from the output by default. If this behavior isn't desired, set the \`--no-redacted\` to get the untransformed value.
    `,
    examples: [[
      `Print a simple configuration setting`,
      `yarn config get yarnPath`
    ], [
      `Print a complex configuration setting`,
      `yarn config get packageExtensions`
    ], [
      `Print a nested field from the configuration`,
      `yarn config get 'npmScopes["my-company"].npmRegistryServer'`
    ], [
      `Print a token from the configuration`,
      `yarn config get npmAuthToken --no-redacted`
    ], [
      `Print a configuration setting as JSON`,
      `yarn config get packageExtensions --json`
    ]]
  });
  var get_default = ConfigGetCommand;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/config/set.ts
  var import_cloneDeep = __toModule(require_cloneDeep());
  var import_get2 = __toModule(require_get());
  var import_set = __toModule(require_set2());
  var import_util6 = __toModule(require("util"));
  var ConfigSetCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.json = options_exports.Boolean(`--json`, false, {
        description: `Set complex configuration settings to JSON values`
      });
      this.home = options_exports.Boolean(`-H,--home`, false, {
        description: `Update the home configuration instead of the project configuration`
      });
      this.name = options_exports.String();
      this.value = options_exports.String();
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      if (!configuration.projectCwd)
        throw new UsageError(`This command must be run from within a project folder`);
      const name = this.name.replace(/[.[].*$/, ``);
      const path3 = this.name.replace(/^[^.[]*\.?/, ``);
      const setting = configuration.settings.get(name);
      if (typeof setting === `undefined`)
        throw new UsageError(`Couldn't find a configuration settings named "${name}"`);
      const value = this.json ? JSON.parse(this.value) : this.value;
      const updateConfiguration = this.home ? (patch4) => Configuration.updateHomeConfiguration(patch4) : (patch4) => Configuration.updateConfiguration(configuration.projectCwd, patch4);
      await updateConfiguration((current) => {
        if (path3) {
          const clone2 = (0, import_cloneDeep.default)(current);
          (0, import_set.default)(clone2, this.name, value);
          return clone2;
        } else {
          return __spreadProps(__spreadValues({}, current), {
            [name]: value
          });
        }
      });
      const updatedConfiguration = await Configuration.find(this.context.cwd, this.context.plugins);
      const displayedValue = updatedConfiguration.getSpecial(name, {
        hideSecrets: true,
        getNativePaths: true
      });
      const asObject = miscUtils_exports.convertMapsToIndexableObjects(displayedValue);
      const requestedObject = path3 ? (0, import_get2.default)(asObject, path3) : asObject;
      const report = await StreamReport.start({
        configuration,
        includeFooter: false,
        stdout: this.context.stdout
      }, async (report2) => {
        import_util6.inspect.styles.name = `cyan`;
        report2.reportInfo(MessageName.UNNAMED, `Successfully set ${this.name} to ${(0, import_util6.inspect)(requestedObject, {
          depth: Infinity,
          colors: configuration.get(`enableColors`),
          compact: false
        })}`);
      });
      return report.exitCode();
    }
  };
  ConfigSetCommand.paths = [
    [`config`, `set`]
  ];
  ConfigSetCommand.usage = Command.Usage({
    description: `change a configuration settings`,
    details: `
      This command will set a configuration setting.

      When used without the \`--json\` flag, it can only set a simple configuration setting (a string, a number, or a boolean).

      When used with the \`--json\` flag, it can set both simple and complex configuration settings, including Arrays and Objects.
    `,
    examples: [[
      `Set a simple configuration setting (a string, a number, or a boolean)`,
      `yarn config set initScope myScope`
    ], [
      `Set a simple configuration setting (a string, a number, or a boolean) using the \`--json\` flag`,
      `yarn config set initScope --json \\"myScope\\"`
    ], [
      `Set a complex configuration setting (an Array) using the \`--json\` flag`,
      `yarn config set unsafeHttpWhitelist --json '["*.example.com", "example.com"]'`
    ], [
      `Set a complex configuration setting (an Object) using the \`--json\` flag`,
      `yarn config set packageExtensions --json '{ "@babel/parser@*": { "dependencies": { "@babel/types": "*" } } }'`
    ], [
      `Set a nested configuration setting`,
      `yarn config set npmScopes.company.npmRegistryServer "https://npm.example.com"`
    ], [
      `Set a nested configuration setting using indexed access for non-simple keys`,
      `yarn config set 'npmRegistries["//npm.example.com"].npmAuthToken' "ffffffff-ffff-ffff-ffff-ffffffffffff"`
    ]]
  });
  var set_default = ConfigSetCommand;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/config/unset.ts
  var import_cloneDeep2 = __toModule(require_cloneDeep());
  var import_unset = __toModule(require_unset());
  var ConfigUnsetCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.home = options_exports.Boolean(`-H,--home`, false, {
        description: `Update the home configuration instead of the project configuration`
      });
      this.name = options_exports.String();
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      if (!configuration.projectCwd)
        throw new UsageError(`This command must be run from within a project folder`);
      const name = this.name.replace(/[.[].*$/, ``);
      const path3 = this.name.replace(/^[^.[]*\.?/, ``);
      const setting = configuration.settings.get(name);
      if (typeof setting === `undefined`)
        throw new UsageError(`Couldn't find a configuration settings named "${name}"`);
      const updateConfiguration = this.home ? (patch4) => Configuration.updateHomeConfiguration(patch4) : (patch4) => Configuration.updateConfiguration(configuration.projectCwd, patch4);
      await updateConfiguration((current) => {
        if (path3) {
          const clone2 = (0, import_cloneDeep2.default)(current);
          (0, import_unset.default)(clone2, this.name);
          return clone2;
        } else {
          const next = (0, import_unset.default)(__spreadValues({}, current), name);
          return next;
        }
      });
      const report = await StreamReport.start({
        configuration,
        includeFooter: false,
        stdout: this.context.stdout
      }, async (report2) => {
        report2.reportInfo(MessageName.UNNAMED, `Successfully unset ${this.name}`);
      });
      return report.exitCode();
    }
  };
  ConfigUnsetCommand.paths = [
    [`config`, `unset`]
  ];
  ConfigUnsetCommand.usage = Command.Usage({
    description: `unset a configuration setting`,
    details: `
      This command will unset a configuration setting.
    `,
    examples: [[
      `Unset a simple configuration setting`,
      `yarn config unset initScope`
    ], [
      `Unset a complex configuration setting`,
      `yarn config unset packageExtensions`
    ], [
      `Unset a nested configuration setting`,
      `yarn config unset npmScopes.company.npmRegistryServer`
    ]]
  });
  var unset_default = ConfigUnsetCommand;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/config.ts
  var import_util7 = __toModule(require("util"));
  var ConfigCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.verbose = options_exports.Boolean(`-v,--verbose`, false, {
        description: `Print the setting description on top of the regular key/value information`
      });
      this.why = options_exports.Boolean(`--why`, false, {
        description: `Print the reason why a setting is set a particular way`
      });
      this.json = options_exports.Boolean(`--json`, false, {
        description: `Format the output as an NDJSON stream`
      });
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins, {
        strict: false
      });
      const report = await StreamReport.start({
        configuration,
        json: this.json,
        stdout: this.context.stdout
      }, async (report2) => {
        if (configuration.invalid.size > 0 && !this.json) {
          for (const [key, source] of configuration.invalid)
            report2.reportError(MessageName.INVALID_CONFIGURATION_KEY, `Invalid configuration key "${key}" in ${source}`);
          report2.reportSeparator();
        }
        if (this.json) {
          const keys = miscUtils_exports.sortMap(configuration.settings.keys(), (key) => key);
          for (const key of keys) {
            const data = configuration.settings.get(key);
            const effective = configuration.getSpecial(key, {
              hideSecrets: true,
              getNativePaths: true
            });
            const source = configuration.sources.get(key);
            if (this.verbose) {
              report2.reportJson({key, effective, source});
            } else {
              report2.reportJson(__spreadValues({key, effective, source}, data));
            }
          }
        } else {
          const keys = miscUtils_exports.sortMap(configuration.settings.keys(), (key) => key);
          const maxKeyLength = keys.reduce((max, key) => Math.max(max, key.length), 0);
          const inspectConfig = {
            breakLength: Infinity,
            colors: configuration.get(`enableColors`),
            maxArrayLength: 2
          };
          if (this.why || this.verbose) {
            const keysAndDescriptions = keys.map((key) => {
              const setting = configuration.settings.get(key);
              if (!setting)
                throw new Error(`Assertion failed: This settings ("${key}") should have been registered`);
              const description = this.why ? configuration.sources.get(key) || `<default>` : setting.description;
              return [key, description];
            });
            const maxDescriptionLength = keysAndDescriptions.reduce((max, [, description]) => {
              return Math.max(max, description.length);
            }, 0);
            for (const [key, description] of keysAndDescriptions) {
              report2.reportInfo(null, `${key.padEnd(maxKeyLength, ` `)}   ${description.padEnd(maxDescriptionLength, ` `)}   ${(0, import_util7.inspect)(configuration.getSpecial(key, {hideSecrets: true, getNativePaths: true}), inspectConfig)}`);
            }
          } else {
            for (const key of keys) {
              report2.reportInfo(null, `${key.padEnd(maxKeyLength, ` `)}   ${(0, import_util7.inspect)(configuration.getSpecial(key, {hideSecrets: true, getNativePaths: true}), inspectConfig)}`);
            }
          }
        }
      });
      return report.exitCode();
    }
  };
  ConfigCommand.paths = [
    [`config`]
  ];
  ConfigCommand.usage = Command.Usage({
    description: `display the current configuration`,
    details: `
      This command prints the current active configuration settings.
    `,
    examples: [[
      `Print the active configuration settings`,
      `$0 config`
    ]]
  });
  var config_default = ConfigCommand;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/dedupe.ts
  init_lib();

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/dedupeUtils.ts
  var import_micromatch4 = __toModule(require_micromatch());
  var Strategy2;
  (function(Strategy3) {
    Strategy3["HIGHEST"] = `highest`;
  })(Strategy2 || (Strategy2 = {}));
  var acceptedStrategies = new Set(Object.values(Strategy2));
  var DEDUPE_ALGORITHMS = {
    highest: async (project, patterns, {resolver, fetcher, resolveOptions, fetchOptions}) => {
      const locatorsByIdent = new Map();
      for (const [descriptorHash, locatorHash] of project.storedResolutions) {
        const descriptor = project.storedDescriptors.get(descriptorHash);
        if (typeof descriptor === `undefined`)
          throw new Error(`Assertion failed: The descriptor (${descriptorHash}) should have been registered`);
        miscUtils_exports.getSetWithDefault(locatorsByIdent, descriptor.identHash).add(locatorHash);
      }
      return Array.from(project.storedDescriptors.values(), async (descriptor) => {
        if (patterns.length && !import_micromatch4.default.isMatch(structUtils_exports.stringifyIdent(descriptor), patterns))
          return null;
        const currentResolution = project.storedResolutions.get(descriptor.descriptorHash);
        if (typeof currentResolution === `undefined`)
          throw new Error(`Assertion failed: The resolution (${descriptor.descriptorHash}) should have been registered`);
        const currentPackage = project.originalPackages.get(currentResolution);
        if (typeof currentPackage === `undefined`)
          return null;
        if (!resolver.shouldPersistResolution(currentPackage, resolveOptions))
          return null;
        const locators = locatorsByIdent.get(descriptor.identHash);
        if (typeof locators === `undefined`)
          throw new Error(`Assertion failed: The resolutions (${descriptor.identHash}) should have been registered`);
        if (locators.size === 1)
          return null;
        const references = [...locators].map((locatorHash) => {
          const pkg = project.originalPackages.get(locatorHash);
          if (typeof pkg === `undefined`)
            throw new Error(`Assertion failed: The package (${locatorHash}) should have been registered`);
          return pkg.reference;
        });
        const candidates = await resolver.getSatisfying(descriptor, references, resolveOptions);
        const bestCandidate = candidates == null ? void 0 : candidates[0];
        if (typeof bestCandidate === `undefined`)
          return null;
        const updatedResolution = bestCandidate.locatorHash;
        const updatedPackage = project.originalPackages.get(updatedResolution);
        if (typeof updatedPackage === `undefined`)
          throw new Error(`Assertion failed: The package (${updatedResolution}) should have been registered`);
        if (updatedResolution === currentResolution)
          return null;
        return {descriptor, currentPackage, updatedPackage};
      });
    }
  };
  async function dedupe(project, {strategy, patterns, cache: cache2, report}) {
    const {configuration} = project;
    const throwReport = new ThrowReport();
    const resolver = configuration.makeResolver();
    const fetcher = configuration.makeFetcher();
    const fetchOptions = {
      cache: cache2,
      checksums: project.storedChecksums,
      fetcher,
      project,
      report: throwReport,
      skipIntegrityCheck: true
    };
    const resolveOptions = {
      project,
      resolver,
      report: throwReport,
      fetchOptions
    };
    return await report.startTimerPromise(`Deduplication step`, async () => {
      const algorithm = DEDUPE_ALGORITHMS[strategy];
      const dedupePromises = await algorithm(project, patterns, {resolver, resolveOptions, fetcher, fetchOptions});
      const progress = Report.progressViaCounter(dedupePromises.length);
      report.reportProgress(progress);
      let dedupedPackageCount = 0;
      await Promise.all(dedupePromises.map((dedupePromise) => dedupePromise.then((dedupe2) => {
        if (dedupe2 === null)
          return;
        dedupedPackageCount++;
        const {descriptor, currentPackage, updatedPackage} = dedupe2;
        report.reportInfo(MessageName.UNNAMED, `${structUtils_exports.prettyDescriptor(configuration, descriptor)} can be deduped from ${structUtils_exports.prettyLocator(configuration, currentPackage)} to ${structUtils_exports.prettyLocator(configuration, updatedPackage)}`);
        report.reportJson({
          descriptor: structUtils_exports.stringifyDescriptor(descriptor),
          currentResolution: structUtils_exports.stringifyLocator(currentPackage),
          updatedResolution: structUtils_exports.stringifyLocator(updatedPackage)
        });
        project.storedResolutions.set(descriptor.descriptorHash, updatedPackage.locatorHash);
      }).finally(() => progress.tick())));
      let packages;
      switch (dedupedPackageCount) {
        case 0:
          {
            packages = `No packages`;
          }
          break;
        case 1:
          {
            packages = `One package`;
          }
          break;
        default: {
          packages = `${dedupedPackageCount} packages`;
        }
      }
      const prettyStrategy = formatUtils_exports.pretty(configuration, strategy, formatUtils_exports.Type.CODE);
      report.reportInfo(MessageName.UNNAMED, `${packages} can be deduped using the ${prettyStrategy} strategy`);
      return dedupedPackageCount;
    });
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/dedupe.ts
  var DedupeCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.strategy = options_exports.String(`-s,--strategy`, Strategy2.HIGHEST, {
        description: `The strategy to use when deduping dependencies`,
        validator: isEnum(Strategy2)
      });
      this.check = options_exports.Boolean(`-c,--check`, false, {
        description: `Exit with exit code 1 when duplicates are found, without persisting the dependency tree`
      });
      this.json = options_exports.Boolean(`--json`, false, {
        description: `Format the output as an NDJSON stream`
      });
      this.patterns = options_exports.Rest();
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const {project} = await Project.find(configuration, this.context.cwd);
      const cache2 = await Cache.find(configuration);
      await project.restoreInstallState({
        restoreResolutions: false
      });
      let dedupedPackageCount = 0;
      const dedupeReport = await StreamReport.start({
        configuration,
        includeFooter: false,
        stdout: this.context.stdout,
        json: this.json
      }, async (report) => {
        dedupedPackageCount = await dedupe(project, {strategy: this.strategy, patterns: this.patterns, cache: cache2, report});
      });
      if (dedupeReport.hasErrors())
        return dedupeReport.exitCode();
      if (this.check) {
        return dedupedPackageCount ? 1 : 0;
      } else {
        const installReport = await StreamReport.start({
          configuration,
          stdout: this.context.stdout,
          json: this.json
        }, async (report) => {
          await project.install({cache: cache2, report});
        });
        return installReport.exitCode();
      }
    }
  };
  DedupeCommand.paths = [
    [`dedupe`]
  ];
  DedupeCommand.usage = Command.Usage({
    description: `deduplicate dependencies with overlapping ranges`,
    details: `
      Duplicates are defined as descriptors with overlapping ranges being resolved and locked to different locators. They are a natural consequence of Yarn's deterministic installs, but they can sometimes pile up and unnecessarily increase the size of your project.

      This command dedupes dependencies in the current project using different strategies (only one is implemented at the moment):

      - \`highest\`: Reuses (where possible) the locators with the highest versions. This means that dependencies can only be upgraded, never downgraded. It's also guaranteed that it never takes more than a single pass to dedupe the entire dependency tree.

      **Note:** Even though it never produces a wrong dependency tree, this command should be used with caution, as it modifies the dependency tree, which can sometimes cause problems when packages don't strictly follow semver recommendations. Because of this, it is recommended to also review the changes manually.

      If set, the \`-c,--check\` flag will only report the found duplicates, without persisting the modified dependency tree. If changes are found, the command will exit with a non-zero exit code, making it suitable for CI purposes.

      This command accepts glob patterns as arguments (if valid Idents and supported by [micromatch](https://github.com/micromatch/micromatch)). Make sure to escape the patterns, to prevent your own shell from trying to expand them.

      ### In-depth explanation:

      Yarn doesn't deduplicate dependencies by default, otherwise installs wouldn't be deterministic and the lockfile would be useless. What it actually does is that it tries to not duplicate dependencies in the first place.

      **Example:** If \`foo@^2.3.4\` (a dependency of a dependency) has already been resolved to \`foo@2.3.4\`, running \`yarn add foo@*\`will cause Yarn to reuse \`foo@2.3.4\`, even if the latest \`foo\` is actually \`foo@2.10.14\`, thus preventing unnecessary duplication.

      Duplication happens when Yarn can't unlock dependencies that have already been locked inside the lockfile.

      **Example:** If \`foo@^2.3.4\` (a dependency of a dependency) has already been resolved to \`foo@2.3.4\`, running \`yarn add foo@2.10.14\` will cause Yarn to install \`foo@2.10.14\` because the existing resolution doesn't satisfy the range \`2.10.14\`. This behavior can lead to (sometimes) unwanted duplication, since now the lockfile contains 2 separate resolutions for the 2 \`foo\` descriptors, even though they have overlapping ranges, which means that the lockfile can be simplified so that both descriptors resolve to \`foo@2.10.14\`.
    `,
    examples: [[
      `Dedupe all packages`,
      `$0 dedupe`
    ], [
      `Dedupe all packages using a specific strategy`,
      `$0 dedupe --strategy highest`
    ], [
      `Dedupe a specific package`,
      `$0 dedupe lodash`
    ], [
      `Dedupe all packages with the \`@babel/*\` scope`,
      `$0 dedupe '@babel/*'`
    ], [
      `Check for duplicates (can be used as a CI step)`,
      `$0 dedupe --check`
    ]]
  });
  var dedupe_default = DedupeCommand;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/entries/clipanion.ts
  var ClipanionCommand = class extends Command {
    async execute() {
      const {plugins} = await Configuration.find(this.context.cwd, this.context.plugins);
      const pluginDefinitions = [];
      for (const plugin16 of plugins) {
        const {commands} = plugin16[1];
        if (commands) {
          const cli = Cli.from(commands);
          const definitions = cli.definitions();
          pluginDefinitions.push([plugin16[0], definitions]);
        }
      }
      const clipanionDefinitions = this.cli.definitions();
      const arePathsEqual = (path1, path22) => path1.split(` `).slice(1).join() === path22.split(` `).slice(1).join();
      const defaultPlugins = require_package()[`@yarnpkg/builder`].bundles.standard;
      for (const pluginDefinition of pluginDefinitions) {
        const definitions = pluginDefinition[1];
        for (const definition of definitions) {
          clipanionDefinitions.find((clipanionDefinition) => arePathsEqual(clipanionDefinition.path, definition.path)).plugin = {
            name: pluginDefinition[0],
            isDefault: defaultPlugins.includes(pluginDefinition[0])
          };
        }
      }
      this.context.stdout.write(`${JSON.stringify({
        commands: clipanionDefinitions
      }, null, 2)}
`);
    }
  };
  ClipanionCommand.paths = [
    [`--clipanion=definitions`]
  ];
  var clipanion_default = ClipanionCommand;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/entries/help.ts
  var HelpCommand3 = class extends Command {
    async execute() {
      this.context.stdout.write(this.cli.usage(null));
    }
  };
  HelpCommand3.paths = [
    [`help`],
    [`--help`],
    [`-h`]
  ];
  var help_default = HelpCommand3;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/entries/run.ts
  var EntryCommand = class extends Command {
    constructor() {
      super(...arguments);
      this.leadingArgument = options_exports.String();
      this.args = options_exports.Proxy();
    }
    async execute() {
      if (this.leadingArgument.match(/[\\/]/) && !structUtils_exports.tryParseIdent(this.leadingArgument)) {
        const newCwd = ppath.resolve(this.context.cwd, npath.toPortablePath(this.leadingArgument));
        return await this.cli.run(this.args, {cwd: newCwd});
      } else {
        return await this.cli.run([`run`, this.leadingArgument, ...this.args]);
      }
    }
  };
  var run_default = EntryCommand;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/entries/version.ts
  var VersionCommand2 = class extends Command {
    async execute() {
      this.context.stdout.write(`${YarnVersion || `<unknown>`}
`);
    }
  };
  VersionCommand2.paths = [
    [`-v`],
    [`--version`]
  ];
  var version_default = VersionCommand2;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/exec.ts
  var ExecCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.commandName = options_exports.String();
      this.args = options_exports.Proxy();
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const {project, locator} = await Project.find(configuration, this.context.cwd);
      return await xfs.mktempPromise(async (binFolder) => {
        const {code} = await execUtils_exports.pipevp(this.commandName, this.args, {
          cwd: this.context.cwd,
          stdin: this.context.stdin,
          stdout: this.context.stdout,
          stderr: this.context.stderr,
          env: await scriptUtils_exports.makeScriptEnv({project, locator, binFolder})
        });
        return code;
      });
    }
  };
  ExecCommand.paths = [
    [`exec`]
  ];
  ExecCommand.usage = Command.Usage({
    description: `execute a shell command`,
    details: `
      This command simply executes a shell binary within the context of the root directory of the active workspace.

      It also makes sure to call it in a way that's compatible with the current project (for example, on PnP projects the environment will be setup in such a way that PnP will be correctly injected into the environment).
    `,
    examples: [[
      `Execute a shell command`,
      `$0 exec echo Hello World`
    ]]
  });
  var exec_default = ExecCommand;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/explain/peerRequirements.ts
  init_lib();
  var ExplainPeerRequirementsCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.hash = options_exports.String({
        required: false,
        validator: applyCascade(isString(), [
          matchesRegExp(/^p[0-9a-f]{5}$/)
        ])
      });
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const {project} = await Project.find(configuration, this.context.cwd);
      await project.restoreInstallState({
        restoreResolutions: false
      });
      await project.applyLightResolution();
      if (typeof this.hash !== `undefined`) {
        return await explainPeerRequirements(this.hash, project, {
          stdout: this.context.stdout
        });
      }
      const report = await StreamReport.start({
        configuration,
        stdout: this.context.stdout,
        includeFooter: false
      }, async (report2) => {
        var _a2;
        const sortCriterias = [
          ([, requirement]) => structUtils_exports.stringifyLocator(project.storedPackages.get(requirement.subject)),
          ([, requirement]) => structUtils_exports.stringifyIdent(requirement.requested)
        ];
        for (const [hash, requirement] of miscUtils_exports.sortMap(project.peerRequirements, sortCriterias)) {
          const subject = project.storedPackages.get(requirement.subject);
          if (typeof subject === `undefined`)
            throw new Error(`Assertion failed: Expected the subject package to have been registered`);
          const rootRequester = project.storedPackages.get(requirement.rootRequester);
          if (typeof rootRequester === `undefined`)
            throw new Error(`Assertion failed: Expected the root package to have been registered`);
          const providedDescriptor = (_a2 = subject.dependencies.get(requirement.requested.identHash)) != null ? _a2 : null;
          const prettyHash = formatUtils_exports.pretty(configuration, hash, formatUtils_exports.Type.CODE);
          const prettySubject = structUtils_exports.prettyLocator(configuration, subject);
          const prettyIdent2 = structUtils_exports.prettyIdent(configuration, requirement.requested);
          const prettyRoot = structUtils_exports.prettyIdent(configuration, rootRequester);
          const descendantCount = requirement.allRequesters.length - 1;
          const pluralized = `descendant${descendantCount === 1 ? `` : `s`}`;
          const maybeDescendants = descendantCount > 0 ? ` and ${descendantCount} ${pluralized}` : ``;
          const provides = providedDescriptor !== null ? `provides` : `doesn't provide`;
          report2.reportInfo(null, `${prettyHash} \u2192 ${prettySubject} ${provides} ${prettyIdent2} to ${prettyRoot}${maybeDescendants}`);
        }
      });
      return report.exitCode();
    }
  };
  ExplainPeerRequirementsCommand.paths = [
    [`explain`, `peer-requirements`]
  ];
  ExplainPeerRequirementsCommand.usage = Command.Usage({
    description: `explain a set of peer requirements`,
    details: `
      A set of peer requirements represents all peer requirements that a dependent must satisfy when providing a given peer request to a requester and its descendants.

      When the hash argument is specified, this command prints a detailed explanation of all requirements of the set corresponding to the hash and whether they're satisfied or not.

      When used without arguments, this command lists all sets of peer requirements and the corresponding hash that can be used to get detailed information about a given set.

      **Note:** A hash is a six-letter p-prefixed code that can be obtained from peer dependency warnings or from the list of all peer requirements (\`yarn explain peer-requirements\`).
    `,
    examples: [[
      `Explain the corresponding set of peer requirements for a hash`,
      `$0 explain peer-requirements p1a4ed`
    ], [
      `List all sets of peer requirements`,
      `$0 explain peer-requirements`
    ]]
  });
  var peerRequirements_default = ExplainPeerRequirementsCommand;
  async function explainPeerRequirements(peerRequirementsHash, project, opts) {
    const {configuration} = project;
    const requirement = project.peerRequirements.get(peerRequirementsHash);
    if (typeof requirement === `undefined`)
      throw new Error(`No peerDependency requirements found for hash: "${peerRequirementsHash}"`);
    const report = await StreamReport.start({
      configuration,
      stdout: opts.stdout,
      includeFooter: false
    }, async (report2) => {
      var _a2, _b;
      const subject = project.storedPackages.get(requirement.subject);
      if (typeof subject === `undefined`)
        throw new Error(`Assertion failed: Expected the subject package to have been registered`);
      const rootRequester = project.storedPackages.get(requirement.rootRequester);
      if (typeof rootRequester === `undefined`)
        throw new Error(`Assertion failed: Expected the root package to have been registered`);
      const providedDescriptor = (_a2 = subject.dependencies.get(requirement.requested.identHash)) != null ? _a2 : null;
      const providedResolution = providedDescriptor !== null ? project.storedResolutions.get(providedDescriptor.descriptorHash) : null;
      if (typeof providedResolution === `undefined`)
        throw new Error(`Assertion failed: Expected the resolution to have been registered`);
      const provided = providedResolution !== null ? project.storedPackages.get(providedResolution) : null;
      if (typeof provided === `undefined`)
        throw new Error(`Assertion failed: Expected the provided package to have been registered`);
      const allRequesters = [...requirement.allRequesters.values()].map((requesterHash) => {
        const pkg = project.storedPackages.get(requesterHash);
        if (typeof pkg === `undefined`)
          throw new Error(`Assertion failed: Expected the package to be registered`);
        const devirtualizedLocator = structUtils_exports.devirtualizeLocator(pkg);
        const devirtualizedPkg = project.storedPackages.get(devirtualizedLocator.locatorHash);
        if (typeof devirtualizedPkg === `undefined`)
          throw new Error(`Assertion failed: Expected the package to be registered`);
        const peerDependency = devirtualizedPkg.peerDependencies.get(requirement.requested.identHash);
        if (typeof peerDependency === `undefined`)
          throw new Error(`Assertion failed: Expected the peer dependency to be registered`);
        return {pkg, peerDependency};
      });
      if (provided !== null) {
        const satisfiesAllRanges = allRequesters.every(({peerDependency}) => {
          return semverUtils_exports.satisfiesWithPrereleases(provided.version, peerDependency.range);
        });
        report2.reportInfo(MessageName.UNNAMED, `${structUtils_exports.prettyLocator(configuration, subject)} provides ${structUtils_exports.prettyLocator(configuration, provided)} with version ${structUtils_exports.prettyReference(configuration, (_b = provided.version) != null ? _b : `<missing>`)}, which ${satisfiesAllRanges ? `satisfies` : `doesn't satisfy`} the following requirements:`);
      } else {
        report2.reportInfo(MessageName.UNNAMED, `${structUtils_exports.prettyLocator(configuration, subject)} doesn't provide ${structUtils_exports.prettyIdent(configuration, requirement.requested)}, breaking the following requirements:`);
      }
      report2.reportSeparator();
      const Mark = formatUtils_exports.mark(configuration);
      const requirements = [];
      for (const {pkg, peerDependency} of miscUtils_exports.sortMap(allRequesters, (requester) => structUtils_exports.stringifyLocator(requester.pkg))) {
        const isSatisfied = provided !== null ? semverUtils_exports.satisfiesWithPrereleases(provided.version, peerDependency.range) : false;
        const mark2 = isSatisfied ? Mark.Check : Mark.Cross;
        requirements.push({
          stringifiedLocator: structUtils_exports.stringifyLocator(pkg),
          prettyLocator: structUtils_exports.prettyLocator(configuration, pkg),
          prettyRange: structUtils_exports.prettyRange(configuration, peerDependency.range),
          mark: mark2
        });
      }
      const maxStringifiedLocatorLength = Math.max(...requirements.map(({stringifiedLocator}) => stringifiedLocator.length));
      const maxPrettyRangeLength = Math.max(...requirements.map(({prettyRange: prettyRange2}) => prettyRange2.length));
      for (const {stringifiedLocator, prettyLocator: prettyLocator2, prettyRange: prettyRange2, mark: mark2} of miscUtils_exports.sortMap(requirements, ({stringifiedLocator: stringifiedLocator2}) => stringifiedLocator2)) {
        report2.reportInfo(null, `${prettyLocator2.padEnd(maxStringifiedLocatorLength + (prettyLocator2.length - stringifiedLocator.length), ` `)} \u2192 ${prettyRange2.padEnd(maxPrettyRangeLength, ` `)} ${mark2}`);
      }
      if (requirements.length > 1) {
        report2.reportSeparator();
        report2.reportInfo(MessageName.UNNAMED, `Note: these requirements start with ${structUtils_exports.prettyLocator(project.configuration, rootRequester)}`);
      }
    });
    return report.exitCode();
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/info.ts
  var import_micromatch5 = __toModule(require_micromatch());
  var InfoCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.all = options_exports.Boolean(`-A,--all`, false, {
        description: `Print versions of a package from the whole project`
      });
      this.recursive = options_exports.Boolean(`-R,--recursive`, false, {
        description: `Print information for all packages, including transitive dependencies`
      });
      this.extra = options_exports.Array(`-X,--extra`, [], {
        description: `An array of requests of extra data provided by plugins`
      });
      this.cache = options_exports.Boolean(`--cache`, false, {
        description: `Print information about the cache entry of a package (path, size, checksum)`
      });
      this.dependents = options_exports.Boolean(`--dependents`, false, {
        description: `Print all dependents for each matching package`
      });
      this.manifest = options_exports.Boolean(`--manifest`, false, {
        description: `Print data obtained by looking at the package archive (license, homepage, ...)`
      });
      this.nameOnly = options_exports.Boolean(`--name-only`, false, {
        description: `Only print the name for the matching packages`
      });
      this.virtuals = options_exports.Boolean(`--virtuals`, false, {
        description: `Print each instance of the virtual packages`
      });
      this.json = options_exports.Boolean(`--json`, false, {
        description: `Format the output as an NDJSON stream`
      });
      this.patterns = options_exports.Rest();
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const {project, workspace} = await Project.find(configuration, this.context.cwd);
      const cache2 = await Cache.find(configuration);
      if (!workspace && !this.all)
        throw new WorkspaceRequiredError(project.cwd, this.context.cwd);
      await project.restoreInstallState();
      const extraSet = new Set(this.extra);
      if (this.cache)
        extraSet.add(`cache`);
      if (this.dependents)
        extraSet.add(`dependents`);
      if (this.manifest)
        extraSet.add(`manifest`);
      const traverseWorkspace = (workspace2, {recursive}) => {
        const initialHash = workspace2.anchoredLocator.locatorHash;
        const seen = new Map();
        const pass = [initialHash];
        while (pass.length > 0) {
          const hash = pass.shift();
          if (seen.has(hash))
            continue;
          const pkg = project.storedPackages.get(hash);
          if (typeof pkg === `undefined`)
            throw new Error(`Assertion failed: Expected the package to be registered`);
          seen.set(hash, pkg);
          if (structUtils_exports.isVirtualLocator(pkg))
            pass.push(structUtils_exports.devirtualizeLocator(pkg).locatorHash);
          if (!recursive && hash !== initialHash)
            continue;
          for (const dependency of pkg.dependencies.values()) {
            const resolution = project.storedResolutions.get(dependency.descriptorHash);
            if (typeof resolution === `undefined`)
              throw new Error(`Assertion failed: Expected the resolution to be registered`);
            pass.push(resolution);
          }
        }
        return seen.values();
      };
      const traverseAllWorkspaces = ({recursive}) => {
        const aggregate = new Map();
        for (const workspace2 of project.workspaces)
          for (const pkg of traverseWorkspace(workspace2, {recursive}))
            aggregate.set(pkg.locatorHash, pkg);
        return aggregate.values();
      };
      const getLookupSet = ({all, recursive}) => {
        if (all && recursive)
          return project.storedPackages.values();
        if (all) {
          return traverseAllWorkspaces({recursive});
        } else {
          return traverseWorkspace(workspace, {recursive});
        }
      };
      const findSelectedSet = ({all, recursive}) => {
        const lookupSet = getLookupSet({all, recursive});
        const matchers = this.patterns.map((pattern) => {
          const patternLocator = structUtils_exports.parseLocator(pattern);
          const identRegex = import_micromatch5.default.makeRe(structUtils_exports.stringifyIdent(patternLocator));
          const patternIsVirtual = structUtils_exports.isVirtualLocator(patternLocator);
          const uvPatternLocator = patternIsVirtual ? structUtils_exports.devirtualizeLocator(patternLocator) : patternLocator;
          return (pkg) => {
            const stringifiedIdent = structUtils_exports.stringifyIdent(pkg);
            if (!identRegex.test(stringifiedIdent))
              return false;
            if (patternLocator.reference === `unknown`)
              return true;
            const pkgIsVirtual = structUtils_exports.isVirtualLocator(pkg);
            const uvPkgLocator = pkgIsVirtual ? structUtils_exports.devirtualizeLocator(pkg) : pkg;
            if (patternIsVirtual && pkgIsVirtual && patternLocator.reference !== pkg.reference)
              return false;
            if (uvPatternLocator.reference !== uvPkgLocator.reference)
              return false;
            return true;
          };
        });
        const sortedLookup2 = miscUtils_exports.sortMap([...lookupSet], (pkg) => {
          return structUtils_exports.stringifyLocator(pkg);
        });
        const selection2 = sortedLookup2.filter((pkg) => {
          return matchers.length === 0 || matchers.some((matcher) => matcher(pkg));
        });
        return {selection: selection2, sortedLookup: sortedLookup2};
      };
      const {selection, sortedLookup} = findSelectedSet({
        all: this.all,
        recursive: this.recursive
      });
      if (selection.length === 0)
        throw new UsageError(`No package matched your request`);
      const dependentMap = new Map();
      if (this.dependents) {
        for (const pkg of sortedLookup) {
          for (const dependency of pkg.dependencies.values()) {
            const resolution = project.storedResolutions.get(dependency.descriptorHash);
            if (typeof resolution === `undefined`)
              throw new Error(`Assertion failed: Expected the resolution to be registered`);
            miscUtils_exports.getArrayWithDefault(dependentMap, resolution).push(pkg);
          }
        }
      }
      const allInstances = new Map();
      for (const pkg of sortedLookup) {
        if (!structUtils_exports.isVirtualLocator(pkg))
          continue;
        const base = structUtils_exports.devirtualizeLocator(pkg);
        miscUtils_exports.getArrayWithDefault(allInstances, base.locatorHash).push(pkg);
      }
      const infoTreeChildren = {};
      const infoTree = {children: infoTreeChildren};
      const fetcher = configuration.makeFetcher();
      const fetcherOptions = {project, fetcher, cache: cache2, checksums: project.storedChecksums, report: new ThrowReport(), skipIntegrityCheck: true};
      const builtinInfoBuilders = [
        async (pkg, extra, registerData) => {
          var _a2, _b;
          if (!extra.has(`manifest`))
            return;
          const fetchResult = await fetcher.fetch(pkg, fetcherOptions);
          let manifest;
          try {
            manifest = await Manifest.find(fetchResult.prefixPath, {baseFs: fetchResult.packageFs});
          } finally {
            (_a2 = fetchResult.releaseFs) == null ? void 0 : _a2.call(fetchResult);
          }
          registerData(`Manifest`, {
            [`License`]: formatUtils_exports.tuple(formatUtils_exports.Type.NO_HINT, manifest.license),
            [`Homepage`]: formatUtils_exports.tuple(formatUtils_exports.Type.URL, (_b = manifest.raw.homepage) != null ? _b : null)
          });
        },
        async (pkg, extra, registerData) => {
          var _a2;
          if (!extra.has(`cache`))
            return;
          const checksum = (_a2 = project.storedChecksums.get(pkg.locatorHash)) != null ? _a2 : null;
          const cachePath = cache2.getLocatorPath(pkg, checksum);
          let stat;
          if (cachePath !== null) {
            try {
              stat = xfs.statSync(cachePath);
            } catch {
            }
          }
          const size = typeof stat !== `undefined` ? [stat.size, formatUtils_exports.Type.SIZE] : void 0;
          registerData(`Cache`, {
            [`Checksum`]: formatUtils_exports.tuple(formatUtils_exports.Type.NO_HINT, checksum),
            [`Path`]: formatUtils_exports.tuple(formatUtils_exports.Type.PATH, cachePath),
            [`Size`]: size
          });
        }
      ];
      for (const pkg of selection) {
        const isVirtual = structUtils_exports.isVirtualLocator(pkg);
        if (!this.virtuals && isVirtual)
          continue;
        const nodeChildren = {};
        const node = {
          value: [pkg, formatUtils_exports.Type.LOCATOR],
          children: nodeChildren
        };
        infoTreeChildren[structUtils_exports.stringifyLocator(pkg)] = node;
        if (this.nameOnly) {
          delete node.children;
          continue;
        }
        const instances = allInstances.get(pkg.locatorHash);
        if (typeof instances !== `undefined`) {
          nodeChildren.Instances = {
            label: `Instances`,
            value: formatUtils_exports.tuple(formatUtils_exports.Type.NUMBER, instances.length)
          };
        }
        nodeChildren.Version = {
          label: `Version`,
          value: formatUtils_exports.tuple(formatUtils_exports.Type.NO_HINT, pkg.version)
        };
        const registerData = (namespace, info) => {
          const namespaceNode = {};
          nodeChildren[namespace] = namespaceNode;
          if (Array.isArray(info)) {
            namespaceNode.children = info.map((value) => ({value}));
          } else {
            const namespaceChildren = {};
            namespaceNode.children = namespaceChildren;
            for (const [key, value] of Object.entries(info)) {
              if (typeof value === `undefined`)
                continue;
              namespaceChildren[key] = {
                label: key,
                value
              };
            }
          }
        };
        if (!isVirtual) {
          for (const infoBuilder of builtinInfoBuilders)
            await infoBuilder(pkg, extraSet, registerData);
          await configuration.triggerHook((hooks) => {
            return hooks.fetchPackageInfo;
          }, pkg, extraSet, registerData);
        }
        if (pkg.bin.size > 0 && !isVirtual) {
          registerData(`Exported Binaries`, [...pkg.bin.keys()].map((name) => {
            return formatUtils_exports.tuple(formatUtils_exports.Type.PATH, name);
          }));
        }
        const dependents = dependentMap.get(pkg.locatorHash);
        if (typeof dependents !== `undefined` && dependents.length > 0) {
          registerData(`Dependents`, dependents.map((dependent) => {
            return formatUtils_exports.tuple(formatUtils_exports.Type.LOCATOR, dependent);
          }));
        }
        if (pkg.dependencies.size > 0 && !isVirtual) {
          registerData(`Dependencies`, [...pkg.dependencies.values()].map((dependency) => {
            var _a2;
            const resolutionHash = project.storedResolutions.get(dependency.descriptorHash);
            const resolution = typeof resolutionHash !== `undefined` ? (_a2 = project.storedPackages.get(resolutionHash)) != null ? _a2 : null : null;
            return formatUtils_exports.tuple(formatUtils_exports.Type.RESOLUTION, {
              descriptor: dependency,
              locator: resolution
            });
          }));
        }
        if (pkg.peerDependencies.size > 0 && isVirtual) {
          registerData(`Peer dependencies`, [...pkg.peerDependencies.values()].map((peerDependency) => {
            var _a2, _b;
            const dependency = pkg.dependencies.get(peerDependency.identHash);
            const resolutionHash = typeof dependency !== `undefined` ? (_a2 = project.storedResolutions.get(dependency.descriptorHash)) != null ? _a2 : null : null;
            const resolution = resolutionHash !== null ? (_b = project.storedPackages.get(resolutionHash)) != null ? _b : null : null;
            return formatUtils_exports.tuple(formatUtils_exports.Type.RESOLUTION, {
              descriptor: peerDependency,
              locator: resolution
            });
          }));
        }
      }
      treeUtils_exports.emitTree(infoTree, {
        configuration,
        json: this.json,
        stdout: this.context.stdout,
        separators: this.nameOnly ? 0 : 2
      });
    }
  };
  InfoCommand.paths = [
    [`info`]
  ];
  InfoCommand.usage = Command.Usage({
    description: `see information related to packages`,
    details: `
      This command prints various information related to the specified packages, accepting glob patterns.

      By default, if the locator reference is missing, Yarn will default to print the information about all the matching direct dependencies of the package for the active workspace. To instead print all versions of the package that are direct dependencies of any of your workspaces, use the \`-A,--all\` flag. Adding the \`-R,--recursive\` flag will also report transitive dependencies.

      Some fields will be hidden by default in order to keep the output readable, but can be selectively displayed by using additional options (\`--dependents\`, \`--manifest\`, \`--virtuals\`, ...) described in the option descriptions.

      Note that this command will only print the information directly related to the selected packages - if you wish to know why the package is there in the first place, use \`yarn why\` which will do just that (it also provides a \`-R,--recursive\` flag that may be of some help).
    `,
    examples: [[
      `Show information about Lodash`,
      `$0 info lodash`
    ]]
  });
  var info_default = InfoCommand;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/install.ts
  var YarnCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.json = options_exports.Boolean(`--json`, false, {
        description: `Format the output as an NDJSON stream`
      });
      this.immutable = options_exports.Boolean(`--immutable`, {
        description: `Abort with an error exit code if the lockfile was to be modified`
      });
      this.immutableCache = options_exports.Boolean(`--immutable-cache`, {
        description: `Abort with an error exit code if the cache folder was to be modified`
      });
      this.checkCache = options_exports.Boolean(`--check-cache`, false, {
        description: `Always refetch the packages and ensure that their checksums are consistent`
      });
      this.inlineBuilds = options_exports.Boolean(`--inline-builds`, {
        description: `Verbosely print the output of the build steps of dependencies`
      });
      this.skipBuilds = options_exports.Boolean(`--skip-builds`, false, {
        description: `Skip the build step altogether`
      });
      this.cacheFolder = options_exports.String(`--cache-folder`, {hidden: true});
      this.frozenLockfile = options_exports.Boolean(`--frozen-lockfile`, {hidden: true});
      this.ignoreEngines = options_exports.Boolean(`--ignore-engines`, {hidden: true});
      this.nonInteractive = options_exports.Boolean(`--non-interactive`, {hidden: true});
      this.preferOffline = options_exports.Boolean(`--prefer-offline`, {hidden: true});
      this.production = options_exports.Boolean(`--production`, {hidden: true});
      this.registry = options_exports.String(`--registry`, {hidden: true});
      this.silent = options_exports.Boolean(`--silent`, {hidden: true});
    }
    async execute() {
      var _a2;
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      if (typeof this.inlineBuilds !== `undefined`)
        configuration.useWithSource(`<cli>`, {enableInlineBuilds: this.inlineBuilds}, configuration.startingCwd, {overwrite: true});
      const isZeitNow = !!process.env.NOW_BUILDER;
      const isNetlify = !!process.env.NETLIFY;
      const isGCP = !!process.env.FUNCTION_TARGET || !!process.env.GOOGLE_RUNTIME;
      const reportDeprecation = async (message, {error}) => {
        const deprecationReport = await StreamReport.start({
          configuration,
          stdout: this.context.stdout,
          includeFooter: false
        }, async (report2) => {
          if (error) {
            report2.reportError(MessageName.DEPRECATED_CLI_SETTINGS, message);
          } else {
            report2.reportWarning(MessageName.DEPRECATED_CLI_SETTINGS, message);
          }
        });
        if (deprecationReport.hasErrors()) {
          return deprecationReport.exitCode();
        } else {
          return null;
        }
      };
      if (typeof this.ignoreEngines !== `undefined`) {
        const exitCode = await reportDeprecation(`The --ignore-engines option is deprecated; engine checking isn't a core feature anymore`, {
          error: !isZeitNow
        });
        if (exitCode !== null) {
          return exitCode;
        }
      }
      if (typeof this.registry !== `undefined`) {
        const exitCode = await reportDeprecation(`The --registry option is deprecated; prefer setting npmRegistryServer in your .yarnrc.yml file`, {
          error: false
        });
        if (exitCode !== null) {
          return exitCode;
        }
      }
      if (typeof this.preferOffline !== `undefined`) {
        const exitCode = await reportDeprecation(`The --prefer-offline flag is deprecated; use the --cached flag with 'yarn add' instead`, {
          error: !isZeitNow
        });
        if (exitCode !== null) {
          return exitCode;
        }
      }
      if (typeof this.production !== `undefined`) {
        const exitCode = await reportDeprecation(`The --production option is deprecated on 'install'; use 'yarn workspaces focus' instead`, {
          error: true
        });
        if (exitCode !== null) {
          return exitCode;
        }
      }
      if (typeof this.nonInteractive !== `undefined`) {
        const exitCode = await reportDeprecation(`The --non-interactive option is deprecated`, {
          error: !isGCP
        });
        if (exitCode !== null) {
          return exitCode;
        }
      }
      if (typeof this.frozenLockfile !== `undefined`) {
        await reportDeprecation(`The --frozen-lockfile option is deprecated; use --immutable and/or --immutable-cache instead`, {
          error: false
        });
        this.immutable = this.frozenLockfile;
      }
      if (typeof this.cacheFolder !== `undefined`) {
        const exitCode = await reportDeprecation(`The cache-folder option has been deprecated; use rc settings instead`, {
          error: !isNetlify
        });
        if (exitCode !== null) {
          return exitCode;
        }
      }
      const immutable = (_a2 = this.immutable) != null ? _a2 : configuration.get(`enableImmutableInstalls`);
      if (configuration.projectCwd !== null) {
        const fixReport = await StreamReport.start({
          configuration,
          json: this.json,
          stdout: this.context.stdout,
          includeFooter: false
        }, async (report2) => {
          if (await autofixMergeConflicts(configuration, immutable)) {
            report2.reportInfo(MessageName.AUTOMERGE_SUCCESS, `Automatically fixed merge conflicts \u{1F44D}`);
            report2.reportSeparator();
          }
        });
        if (fixReport.hasErrors()) {
          return fixReport.exitCode();
        }
      }
      if (configuration.projectCwd !== null && typeof configuration.sources.get(`nodeLinker`) === `undefined`) {
        const projectCwd = configuration.projectCwd;
        let content;
        try {
          content = await xfs.readFilePromise(ppath.join(projectCwd, Filename.lockfile), `utf8`);
        } catch {
        }
        if (content == null ? void 0 : content.includes(`yarn lockfile v1`)) {
          const nmReport = await StreamReport.start({
            configuration,
            json: this.json,
            stdout: this.context.stdout,
            includeFooter: false
          }, async (report2) => {
            report2.reportInfo(MessageName.AUTO_NM_SUCCESS, `Migrating from Yarn 1; automatically enabling the compatibility node-modules linker \u{1F44D}`);
            report2.reportSeparator();
            configuration.use(`<compat>`, {nodeLinker: `node-modules`}, projectCwd, {overwrite: true});
            await Configuration.updateConfiguration(projectCwd, {
              nodeLinker: `node-modules`
            });
          });
          if (nmReport.hasErrors()) {
            return nmReport.exitCode();
          }
        }
      }
      if (configuration.projectCwd !== null) {
        const telemetryReport = await StreamReport.start({
          configuration,
          json: this.json,
          stdout: this.context.stdout,
          includeFooter: false
        }, async (report2) => {
          var _a3;
          if ((_a3 = Configuration.telemetry) == null ? void 0 : _a3.isNew) {
            report2.reportInfo(MessageName.TELEMETRY_NOTICE, `Yarn will periodically gather anonymous telemetry: https://yarnpkg.com/advanced/telemetry`);
            report2.reportInfo(MessageName.TELEMETRY_NOTICE, `Run ${formatUtils_exports.pretty(configuration, `yarn config set --home enableTelemetry 0`, formatUtils_exports.Type.CODE)} to disable`);
            report2.reportSeparator();
          }
        });
        if (telemetryReport.hasErrors()) {
          return telemetryReport.exitCode();
        }
      }
      const {project, workspace} = await Project.find(configuration, this.context.cwd);
      const cache2 = await Cache.find(configuration, {immutable: this.immutableCache, check: this.checkCache});
      if (!workspace)
        throw new WorkspaceRequiredError(project.cwd, this.context.cwd);
      await project.restoreInstallState({
        restoreResolutions: false
      });
      const report = await StreamReport.start({
        configuration,
        json: this.json,
        stdout: this.context.stdout,
        includeLogs: true
      }, async (report2) => {
        await project.install({cache: cache2, report: report2, immutable, skipBuild: this.skipBuilds});
      });
      return report.exitCode();
    }
  };
  YarnCommand.paths = [
    [`install`],
    Command.Default
  ];
  YarnCommand.usage = Command.Usage({
    description: `install the project dependencies`,
    details: `
      This command setup your project if needed. The installation is splitted in four different steps that each have their own characteristics:

      - **Resolution:** First the package manager will resolve your dependencies. The exact way a dependency version is privileged over another isn't standardized outside of the regular semver guarantees. If a package doesn't resolve to what you would expect, check that all dependencies are correctly declared (also check our website for more information: ).

      - **Fetch:** Then we download all the dependencies if needed, and make sure that they're all stored within our cache (check the value of \`cacheFolder\` in \`yarn config\` to see where are stored the cache files).

      - **Link:** Then we send the dependency tree information to internal plugins tasked from writing them on the disk in some form (for example by generating the .pnp.cjs file you might know).

      - **Build:** Once the dependency tree has been written on the disk, the package manager will now be free to run the build scripts for all packages that might need it, in a topological order compatible with the way they depend on one another.

      Note that running this command is not part of the recommended workflow. Yarn supports zero-installs, which means that as long as you store your cache and your .pnp.cjs file inside your repository, everything will work without requiring any install right after cloning your repository or switching branches.

      If the \`--immutable\` option is set (defaults to true on CI), Yarn will abort with an error exit code if the lockfile was to be modified (other paths can be added using the \`immutablePatterns\` configuration setting). For backward compatibility we offer an alias under the name of \`--frozen-lockfile\`, but it will be removed in a later release.

      If the \`--immutable-cache\` option is set, Yarn will abort with an error exit code if the cache folder was to be modified (either because files would be added, or because they'd be removed).

      If the \`--check-cache\` option is set, Yarn will always refetch the packages and will ensure that their checksum matches what's 1/ described in the lockfile 2/ inside the existing cache files (if present). This is recommended as part of your CI workflow if you're both following the Zero-Installs model and accepting PRs from third-parties, as they'd otherwise have the ability to alter the checked-in packages before submitting them.

      If the \`--inline-builds\` option is set, Yarn will verbosely print the output of the build steps of your dependencies (instead of writing them into individual files). This is likely useful mostly for debug purposes only when using Docker-like environments.

      If the \`--skip-builds\` option is set, Yarn will not run the build scripts at all. Note that this is different from setting \`enableScripts\` to false because the later will disable build scripts, and thus affect the content of the artifacts generated on disk, whereas the former will just disable the build step - but not the scripts themselves, which just won't run.
    `,
    examples: [[
      `Install the project`,
      `$0 install`
    ], [
      `Validate a project when using Zero-Installs`,
      `$0 install --immutable --immutable-cache`
    ], [
      `Validate a project when using Zero-Installs (slightly safer if you accept external PRs)`,
      `$0 install --immutable --immutable-cache --check-cache`
    ]]
  });
  var install_default = YarnCommand;
  var MERGE_CONFLICT_ANCESTOR = `|||||||`;
  var MERGE_CONFLICT_END = `>>>>>>>`;
  var MERGE_CONFLICT_SEP = `=======`;
  var MERGE_CONFLICT_START = `<<<<<<<`;
  async function autofixMergeConflicts(configuration, immutable) {
    if (!configuration.projectCwd)
      return false;
    const lockfilePath = ppath.join(configuration.projectCwd, configuration.get(`lockfileFilename`));
    if (!await xfs.existsPromise(lockfilePath))
      return false;
    const file = await xfs.readFilePromise(lockfilePath, `utf8`);
    if (!file.includes(MERGE_CONFLICT_START))
      return false;
    if (immutable)
      throw new ReportError(MessageName.AUTOMERGE_IMMUTABLE, `Cannot autofix a lockfile when running an immutable install`);
    const [left, right] = getVariants(file);
    let parsedLeft;
    let parsedRight;
    try {
      parsedLeft = parseSyml(left);
      parsedRight = parseSyml(right);
    } catch (error) {
      throw new ReportError(MessageName.AUTOMERGE_FAILED_TO_PARSE, `The individual variants of the lockfile failed to parse`);
    }
    const merged = __spreadValues(__spreadValues({}, parsedLeft), parsedRight);
    for (const [key, value] of Object.entries(merged))
      if (typeof value === `string`)
        delete merged[key];
    await xfs.changeFilePromise(lockfilePath, stringifySyml(merged), {
      automaticNewlines: true
    });
    return true;
  }
  function getVariants(file) {
    const variants = [[], []];
    const lines = file.split(/\r?\n/g);
    let skip = false;
    while (lines.length > 0) {
      const line = lines.shift();
      if (typeof line === `undefined`)
        throw new Error(`Assertion failed: Some lines should remain`);
      if (line.startsWith(MERGE_CONFLICT_START)) {
        while (lines.length > 0) {
          const conflictLine = lines.shift();
          if (typeof conflictLine === `undefined`)
            throw new Error(`Assertion failed: Some lines should remain`);
          if (conflictLine === MERGE_CONFLICT_SEP) {
            skip = false;
            break;
          } else if (skip || conflictLine.startsWith(MERGE_CONFLICT_ANCESTOR)) {
            skip = true;
            continue;
          } else {
            variants[0].push(conflictLine);
          }
        }
        while (lines.length > 0) {
          const conflictLine = lines.shift();
          if (typeof conflictLine === `undefined`)
            throw new Error(`Assertion failed: Some lines should remain`);
          if (conflictLine.startsWith(MERGE_CONFLICT_END)) {
            break;
          } else {
            variants[1].push(conflictLine);
          }
        }
      } else {
        variants[0].push(line);
        variants[1].push(line);
      }
    }
    return [
      variants[0].join(`
`),
      variants[1].join(`
`)
    ];
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/link.ts
  var LinkCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.all = options_exports.Boolean(`-A,--all`, false, {
        description: `Link all workspaces belonging to the target project to the current one`
      });
      this.private = options_exports.Boolean(`-p,--private`, false, {
        description: `Also link private workspaces belonging to the target project to the current one`
      });
      this.relative = options_exports.Boolean(`-r,--relative`, false, {
        description: `Link workspaces using relative paths instead of absolute paths`
      });
      this.destination = options_exports.String();
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const {project, workspace} = await Project.find(configuration, this.context.cwd);
      const cache2 = await Cache.find(configuration);
      if (!workspace)
        throw new WorkspaceRequiredError(project.cwd, this.context.cwd);
      await project.restoreInstallState({
        restoreResolutions: false
      });
      const absoluteDestination = ppath.resolve(this.context.cwd, npath.toPortablePath(this.destination));
      const configuration2 = await Configuration.find(absoluteDestination, this.context.plugins, {useRc: false, strict: false});
      const {project: project2, workspace: workspace2} = await Project.find(configuration2, absoluteDestination);
      if (!workspace2)
        throw new WorkspaceRequiredError(project2.cwd, absoluteDestination);
      const topLevelWorkspace = project.topLevelWorkspace;
      const linkedWorkspaces = [];
      if (this.all) {
        for (const workspace3 of project2.workspaces)
          if (workspace3.manifest.name && (!workspace3.manifest.private || this.private))
            linkedWorkspaces.push(workspace3);
        if (linkedWorkspaces.length === 0) {
          throw new UsageError(`No workspace found to be linked in the target project`);
        }
      } else {
        if (!workspace2.manifest.name)
          throw new UsageError(`The target workspace doesn't have a name and thus cannot be linked`);
        if (workspace2.manifest.private && !this.private)
          throw new UsageError(`The target workspace is marked private - use the --private flag to link it anyway`);
        linkedWorkspaces.push(workspace2);
      }
      for (const workspace3 of linkedWorkspaces) {
        const fullName = structUtils_exports.stringifyIdent(workspace3.locator);
        const target = this.relative ? ppath.relative(project.cwd, workspace3.cwd) : workspace3.cwd;
        topLevelWorkspace.manifest.resolutions.push({
          pattern: {descriptor: {fullName}},
          reference: `portal:${target}`
        });
      }
      const report = await StreamReport.start({
        configuration,
        stdout: this.context.stdout
      }, async (report2) => {
        await project.install({cache: cache2, report: report2});
      });
      return report.exitCode();
    }
  };
  LinkCommand.paths = [
    [`link`]
  ];
  LinkCommand.usage = Command.Usage({
    description: `connect the local project to another one`,
    details: `
      This command will set a new \`resolutions\` field in the project-level manifest and point it to the workspace at the specified location (even if part of another project).
    `,
    examples: [[
      `Register a remote workspace for use in the current project`,
      `$0 link ~/ts-loader`
    ], [
      `Register all workspaces from a remote project for use in the current project`,
      `$0 link ~/jest --all`
    ]]
  });
  var link_default = LinkCommand;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/node.ts
  var NodeCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.args = options_exports.Proxy();
    }
    async execute() {
      return this.cli.run([`exec`, `node`, ...this.args]);
    }
  };
  NodeCommand.paths = [
    [`node`]
  ];
  NodeCommand.usage = Command.Usage({
    description: `run node with the hook already setup`,
    details: `
      This command simply runs Node. It also makes sure to call it in a way that's compatible with the current project (for example, on PnP projects the environment will be setup in such a way that PnP will be correctly injected into the environment).

      The Node process will use the exact same version of Node as the one used to run Yarn itself, which might be a good way to ensure that your commands always use a consistent Node version.
    `,
    examples: [[
      `Run a Node script`,
      `$0 node ./my-script.js`
    ]]
  });
  var node_default = NodeCommand;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/plugin/import/sources.ts
  var import_os7 = __toModule(require("os"));

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/set/version/sources.ts
  var import_os6 = __toModule(require("os"));

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/plugin/list.ts
  var REMOTE_REGISTRY = `https://raw.githubusercontent.com/yarnpkg/berry/master/plugins.yml`;
  async function getAvailablePlugins(configuration) {
    const raw = await httpUtils_exports.get(REMOTE_REGISTRY, {configuration});
    const data = parseSyml(raw.toString());
    return data;
  }
  var PluginDlCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.json = options_exports.Boolean(`--json`, false, {
        description: `Format the output as an NDJSON stream`
      });
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const report = await StreamReport.start({
        configuration,
        json: this.json,
        stdout: this.context.stdout
      }, async (report2) => {
        const data = await getAvailablePlugins(configuration);
        for (const _a2 of Object.entries(data)) {
          const [name, _b] = _a2, _c = _b, {experimental} = _c, rest = __objRest(_c, ["experimental"]);
          let label = name;
          if (experimental)
            label += ` [experimental]`;
          report2.reportJson(__spreadValues({name, experimental}, rest));
          report2.reportInfo(null, label);
        }
      });
      return report.exitCode();
    }
  };
  PluginDlCommand.paths = [
    [`plugin`, `list`]
  ];
  PluginDlCommand.usage = Command.Usage({
    category: `Plugin-related commands`,
    description: `list the available official plugins`,
    details: `
      This command prints the plugins available directly from the Yarn repository. Only those plugins can be referenced by name in \`yarn plugin import\`.
    `,
    examples: [[
      `List the official plugins`,
      `$0 plugin list`
    ]]
  });
  var list_default = PluginDlCommand;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/set/version.ts
  var import_semver8 = __toModule(require_semver2());
  var SetVersionCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.onlyIfNeeded = options_exports.Boolean(`--only-if-needed`, false, {
        description: `Only lock the Yarn version if it isn't already locked`
      });
      this.version = options_exports.String();
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      if (configuration.get(`yarnPath`) && this.onlyIfNeeded)
        return 0;
      let bundleUrl;
      if (this.version === `latest` || this.version === `berry`)
        bundleUrl = `https://github.com/yarnpkg/berry/raw/master/packages/yarnpkg-cli/bin/yarn.js`;
      else if (this.version === `classic`)
        bundleUrl = `https://nightly.yarnpkg.com/latest.js`;
      else if (semverUtils_exports.satisfiesWithPrereleases(this.version, `>=2.0.0`))
        bundleUrl = `https://github.com/yarnpkg/berry/raw/%40yarnpkg/cli/${this.version}/packages/yarnpkg-cli/bin/yarn.js`;
      else if (semverUtils_exports.satisfiesWithPrereleases(this.version, `^0.x || ^1.x`))
        bundleUrl = `https://github.com/yarnpkg/yarn/releases/download/v${this.version}/yarn-${this.version}.js`;
      else if (semverUtils_exports.validRange(this.version))
        throw new UsageError(`Support for ranges got removed - please use the exact version you want to install, or 'latest' to get the latest build available`);
      else
        throw new UsageError(`Invalid version descriptor "${this.version}"`);
      const report = await StreamReport.start({
        configuration,
        stdout: this.context.stdout
      }, async (report2) => {
        report2.reportInfo(MessageName.UNNAMED, `Downloading ${formatUtils_exports.pretty(configuration, bundleUrl, `green`)}`);
        const bundleBuffer = await httpUtils_exports.get(bundleUrl, {configuration});
        await setVersion(configuration, null, bundleBuffer, {report: report2});
      });
      return report.exitCode();
    }
  };
  SetVersionCommand.paths = [
    [`set`, `version`]
  ];
  SetVersionCommand.usage = Command.Usage({
    description: `lock the Yarn version used by the project`,
    details: `
      This command will download a specific release of Yarn directly from the Yarn GitHub repository, will store it inside your project, and will change the \`yarnPath\` settings from your project \`.yarnrc.yml\` file to point to the new file.

      A very good use case for this command is to enforce the version of Yarn used by the any single member of your team inside a same project - by doing this you ensure that you have control on Yarn upgrades and downgrades (including on your deployment servers), and get rid of most of the headaches related to someone using a slightly different version and getting a different behavior than you.
    `,
    examples: [[
      `Download the latest release from the Yarn repository`,
      `$0 set version latest`
    ], [
      `Download the latest classic release from the Yarn repository`,
      `$0 set version classic`
    ], [
      `Download a specific Yarn 2 build`,
      `$0 set version 2.0.0-rc.30`
    ], [
      `Switch back to a specific Yarn 1 release`,
      `$0 set version 1.22.1`
    ]]
  });
  var version_default2 = SetVersionCommand;
  async function setVersion(configuration, bundleVersion, bundleBuffer, {report}) {
    var _a2;
    if (bundleVersion === null) {
      await xfs.mktempPromise(async (tmpDir) => {
        const temporaryPath = ppath.join(tmpDir, `yarn.cjs`);
        await xfs.writeFilePromise(temporaryPath, bundleBuffer);
        const {stdout} = await execUtils_exports.execvp(process.execPath, [npath.fromPortablePath(temporaryPath), `--version`], {
          cwd: tmpDir,
          env: __spreadProps(__spreadValues({}, process.env), {YARN_IGNORE_PATH: `1`})
        });
        bundleVersion = stdout.trim();
        if (!import_semver8.default.valid(bundleVersion)) {
          throw new Error(`Invalid semver version. ${formatUtils_exports.pretty(configuration, `yarn --version`, formatUtils_exports.Type.CODE)} returned:
${bundleVersion}`);
        }
      });
    }
    const projectCwd = (_a2 = configuration.projectCwd) != null ? _a2 : configuration.startingCwd;
    const releaseFolder = ppath.resolve(projectCwd, `.yarn/releases`);
    const absolutePath = ppath.resolve(releaseFolder, `yarn-${bundleVersion}.cjs`);
    const displayPath = ppath.relative(configuration.startingCwd, absolutePath);
    const projectPath = ppath.relative(projectCwd, absolutePath);
    const yarnPath = configuration.get(`yarnPath`);
    const updateConfig = yarnPath === null || yarnPath.startsWith(`${releaseFolder}/`);
    report.reportInfo(MessageName.UNNAMED, `Saving the new release in ${formatUtils_exports.pretty(configuration, displayPath, `magenta`)}`);
    await xfs.removePromise(ppath.dirname(absolutePath));
    await xfs.mkdirPromise(ppath.dirname(absolutePath), {recursive: true});
    await xfs.writeFilePromise(absolutePath, bundleBuffer);
    await xfs.chmodPromise(absolutePath, 493);
    if (updateConfig) {
      await Configuration.updateConfiguration(projectCwd, {
        yarnPath: projectPath
      });
    }
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/set/version/sources.ts
  var PR_REGEXP = /^[0-9]+$/;
  function getBranchRef(branch) {
    if (PR_REGEXP.test(branch)) {
      return `pull/${branch}/head`;
    } else {
      return branch;
    }
  }
  var cloneWorkflow = ({repository, branch}, target) => [
    [`git`, `init`, npath.fromPortablePath(target)],
    [`git`, `remote`, `add`, `origin`, repository],
    [`git`, `fetch`, `origin`, getBranchRef(branch)],
    [`git`, `reset`, `--hard`, `FETCH_HEAD`]
  ];
  var updateWorkflow = ({branch}) => [
    [`git`, `fetch`, `origin`, getBranchRef(branch), `--force`],
    [`git`, `reset`, `--hard`, `FETCH_HEAD`],
    [`git`, `clean`, `-dfx`]
  ];
  var buildWorkflow = ({plugins, noMinify}, target) => [
    [`yarn`, `build:cli`, ...new Array().concat(...plugins.map((plugin16) => [`--plugin`, ppath.resolve(target, plugin16)])), ...noMinify ? [`--no-minify`] : [], `|`]
  ];
  var SetVersionSourcesCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.installPath = options_exports.String(`--path`, {
        description: `The path where the repository should be cloned to`
      });
      this.repository = options_exports.String(`--repository`, `https://github.com/yarnpkg/berry.git`, {
        description: `The repository that should be cloned`
      });
      this.branch = options_exports.String(`--branch`, `master`, {
        description: `The branch of the repository that should be cloned`
      });
      this.plugins = options_exports.Array(`--plugin`, [], {
        description: `An array of additional plugins that should be included in the bundle`
      });
      this.noMinify = options_exports.Boolean(`--no-minify`, false, {
        description: `Build a bundle for development (debugging) - non-minified and non-mangled`
      });
      this.force = options_exports.Boolean(`-f,--force`, false, {
        description: `Always clone the repository instead of trying to fetch the latest commits`
      });
      this.skipPlugins = options_exports.Boolean(`--skip-plugins`, false, {
        description: `Skip updating the contrib plugins`
      });
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const {project} = await Project.find(configuration, this.context.cwd);
      const target = typeof this.installPath !== `undefined` ? ppath.resolve(this.context.cwd, npath.toPortablePath(this.installPath)) : ppath.resolve(npath.toPortablePath((0, import_os6.tmpdir)()), `yarnpkg-sources`, hashUtils_exports.makeHash(this.repository).slice(0, 6));
      const report = await StreamReport.start({
        configuration,
        stdout: this.context.stdout
      }, async (report2) => {
        await prepareRepo(this, {configuration, report: report2, target});
        report2.reportSeparator();
        report2.reportInfo(MessageName.UNNAMED, `Building a fresh bundle`);
        report2.reportSeparator();
        await runWorkflow(buildWorkflow(this, target), {configuration, context: this.context, target});
        report2.reportSeparator();
        const bundlePath = ppath.resolve(target, `packages/yarnpkg-cli/bundles/yarn.js`);
        const bundleBuffer = await xfs.readFilePromise(bundlePath);
        await setVersion(configuration, `sources`, bundleBuffer, {
          report: report2
        });
        if (!this.skipPlugins) {
          await updatePlugins(this, {project, report: report2, target});
        }
      });
      return report.exitCode();
    }
  };
  SetVersionSourcesCommand.paths = [
    [`set`, `version`, `from`, `sources`]
  ];
  SetVersionSourcesCommand.usage = Command.Usage({
    description: `build Yarn from master`,
    details: `
      This command will clone the Yarn repository into a temporary folder, then build it. The resulting bundle will then be copied into the local project.

      By default, it also updates all contrib plugins to the same commit the bundle is built from. This behavior can be disabled by using the \`--skip-plugins\` flag.
    `,
    examples: [[
      `Build Yarn from master`,
      `$0 set version from sources`
    ]]
  });
  var sources_default = SetVersionSourcesCommand;
  async function runWorkflow(workflow, {configuration, context, target}) {
    for (const [fileName, ...args] of workflow) {
      const usePipe = args[args.length - 1] === `|`;
      if (usePipe)
        args.pop();
      if (usePipe) {
        await execUtils_exports.pipevp(fileName, args, {
          cwd: target,
          stdin: context.stdin,
          stdout: context.stdout,
          stderr: context.stderr,
          strict: true
        });
      } else {
        context.stdout.write(`${formatUtils_exports.pretty(configuration, `  $ ${[fileName, ...args].join(` `)}`, `grey`)}
`);
        try {
          await execUtils_exports.execvp(fileName, args, {
            cwd: target,
            strict: true
          });
        } catch (error) {
          context.stdout.write(error.stdout || error.stack);
          throw error;
        }
      }
    }
  }
  async function prepareRepo(spec, {configuration, report, target}) {
    let ready = false;
    if (!spec.force && xfs.existsSync(ppath.join(target, `.git`))) {
      report.reportInfo(MessageName.UNNAMED, `Fetching the latest commits`);
      report.reportSeparator();
      try {
        await runWorkflow(updateWorkflow(spec), {configuration, context: spec.context, target});
        ready = true;
      } catch (error) {
        report.reportSeparator();
        report.reportWarning(MessageName.UNNAMED, `Repository update failed; we'll try to regenerate it`);
      }
    }
    if (!ready) {
      report.reportInfo(MessageName.UNNAMED, `Cloning the remote repository`);
      report.reportSeparator();
      await xfs.removePromise(target);
      await xfs.mkdirPromise(target, {recursive: true});
      await runWorkflow(cloneWorkflow(spec, target), {configuration, context: spec.context, target});
    }
  }
  async function updatePlugins(context, {project, report, target}) {
    const data = await getAvailablePlugins(project.configuration);
    const contribPlugins = new Set(Object.keys(data));
    for (const name of project.configuration.plugins.keys()) {
      if (!contribPlugins.has(name))
        continue;
      await buildAndSavePlugin(name, context, {project, report, target});
    }
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/plugin/import.ts
  var import_semver9 = __toModule(require_semver2());
  var import_url3 = __toModule(require("url"));
  var import_vm = __toModule(require("vm"));
  var PluginDlCommand2 = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.name = options_exports.String();
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const report = await StreamReport.start({
        configuration,
        stdout: this.context.stdout
      }, async (report2) => {
        const {project} = await Project.find(configuration, this.context.cwd);
        let pluginSpec;
        let pluginBuffer;
        if (this.name.match(/^\.{0,2}[\\/]/) || npath.isAbsolute(this.name)) {
          const candidatePath = ppath.resolve(this.context.cwd, npath.toPortablePath(this.name));
          report2.reportInfo(MessageName.UNNAMED, `Reading ${formatUtils_exports.pretty(configuration, candidatePath, formatUtils_exports.Type.PATH)}`);
          pluginSpec = ppath.relative(project.cwd, candidatePath);
          pluginBuffer = await xfs.readFilePromise(candidatePath);
        } else {
          let pluginUrl;
          if (this.name.match(/^https?:/)) {
            try {
              new import_url3.URL(this.name);
            } catch {
              throw new ReportError(MessageName.INVALID_PLUGIN_REFERENCE, `Plugin specifier "${this.name}" is neither a plugin name nor a valid url`);
            }
            pluginSpec = this.name;
            pluginUrl = this.name;
          } else {
            const locator = structUtils_exports.parseLocator(this.name.replace(/^((@yarnpkg\/)?plugin-)?/, `@yarnpkg/plugin-`));
            if (locator.reference !== `unknown` && !import_semver9.default.valid(locator.reference))
              throw new ReportError(MessageName.UNNAMED, `Official plugins only accept strict version references. Use an explicit URL if you wish to download them from another location.`);
            const identStr = structUtils_exports.stringifyIdent(locator);
            const data = await getAvailablePlugins(configuration);
            if (!Object.prototype.hasOwnProperty.call(data, identStr))
              throw new ReportError(MessageName.PLUGIN_NAME_NOT_FOUND, `Couldn't find a plugin named "${identStr}" on the remote registry. Note that only the plugins referenced on our website (https://github.com/yarnpkg/berry/blob/master/plugins.yml) can be referenced by their name; any other plugin will have to be referenced through its public url (for example https://github.com/yarnpkg/berry/raw/master/packages/plugin-typescript/bin/%40yarnpkg/plugin-typescript.js).`);
            pluginSpec = identStr;
            pluginUrl = data[identStr].url;
            if (locator.reference !== `unknown`) {
              pluginUrl = pluginUrl.replace(/\/master\//, `/${identStr}/${locator.reference}/`);
            } else if (YarnVersion !== null) {
              pluginUrl = pluginUrl.replace(/\/master\//, `/@yarnpkg/cli/${YarnVersion}/`);
            }
          }
          report2.reportInfo(MessageName.UNNAMED, `Downloading ${formatUtils_exports.pretty(configuration, pluginUrl, `green`)}`);
          pluginBuffer = await httpUtils_exports.get(pluginUrl, {configuration});
        }
        await savePlugin(pluginSpec, pluginBuffer, {project, report: report2});
      });
      return report.exitCode();
    }
  };
  PluginDlCommand2.paths = [
    [`plugin`, `import`]
  ];
  PluginDlCommand2.usage = Command.Usage({
    category: `Plugin-related commands`,
    description: `download a plugin`,
    details: `
      This command downloads the specified plugin from its remote location and updates the configuration to reference it in further CLI invocations.

      Three types of plugin references are accepted:

      - If the plugin is stored within the Yarn repository, it can be referenced by name.
      - Third-party plugins can be referenced directly through their public urls.
      - Local plugins can be referenced by their path on the disk.

      Plugins cannot be downloaded from the npm registry, and aren't allowed to have dependencies (they need to be bundled into a single file, possibly thanks to the \`@yarnpkg/builder\` package).
    `,
    examples: [[
      `Download and activate the "@yarnpkg/plugin-exec" plugin`,
      `$0 plugin import @yarnpkg/plugin-exec`
    ], [
      `Download and activate the "@yarnpkg/plugin-exec" plugin (shorthand)`,
      `$0 plugin import exec`
    ], [
      `Download and activate a community plugin`,
      `$0 plugin import https://example.org/path/to/plugin.js`
    ], [
      `Activate a local plugin`,
      `$0 plugin import ./path/to/plugin.js`
    ]]
  });
  var import_default = PluginDlCommand2;
  async function savePlugin(pluginSpec, pluginBuffer, {project, report}) {
    const {configuration} = project;
    const vmExports = {};
    const vmModule = {exports: vmExports};
    (0, import_vm.runInNewContext)(pluginBuffer.toString(), {
      module: vmModule,
      exports: vmExports
    });
    const pluginName = vmModule.exports.name;
    const relativePath = `.yarn/plugins/${pluginName}.cjs`;
    const absolutePath = ppath.resolve(project.cwd, relativePath);
    report.reportInfo(MessageName.UNNAMED, `Saving the new plugin in ${formatUtils_exports.pretty(configuration, relativePath, `magenta`)}`);
    await xfs.mkdirPromise(ppath.dirname(absolutePath), {recursive: true});
    await xfs.writeFilePromise(absolutePath, pluginBuffer);
    const pluginMeta = {
      path: relativePath,
      spec: pluginSpec
    };
    await Configuration.updateConfiguration(project.cwd, (current) => {
      const plugins = [];
      let hasBeenReplaced = false;
      for (const entry of current.plugins || []) {
        const userProvidedPath = typeof entry !== `string` ? entry.path : entry;
        const pluginPath = ppath.resolve(project.cwd, npath.toPortablePath(userProvidedPath));
        const {name} = miscUtils_exports.dynamicRequire(npath.fromPortablePath(pluginPath));
        if (name !== pluginName) {
          plugins.push(entry);
        } else {
          plugins.push(pluginMeta);
          hasBeenReplaced = true;
        }
      }
      if (!hasBeenReplaced)
        plugins.push(pluginMeta);
      return __spreadProps(__spreadValues({}, current), {plugins});
    });
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/plugin/import/sources.ts
  var buildWorkflow2 = ({pluginName, noMinify}, target) => [
    [`yarn`, `build:${pluginName}`, ...noMinify ? [`--no-minify`] : [], `|`]
  ];
  var PluginDlSourcesCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.installPath = options_exports.String(`--path`, {
        description: `The path where the repository should be cloned to`
      });
      this.repository = options_exports.String(`--repository`, `https://github.com/yarnpkg/berry.git`, {
        description: `The repository that should be cloned`
      });
      this.branch = options_exports.String(`--branch`, `master`, {
        description: `The branch of the repository that should be cloned`
      });
      this.noMinify = options_exports.Boolean(`--no-minify`, false, {
        description: `Build a plugin for development (debugging) - non-minified and non-mangled`
      });
      this.force = options_exports.Boolean(`-f,--force`, false, {
        description: `Always clone the repository instead of trying to fetch the latest commits`
      });
      this.name = options_exports.String();
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const target = typeof this.installPath !== `undefined` ? ppath.resolve(this.context.cwd, npath.toPortablePath(this.installPath)) : ppath.resolve(npath.toPortablePath((0, import_os7.tmpdir)()), `yarnpkg-sources`, hashUtils_exports.makeHash(this.repository).slice(0, 6));
      const report = await StreamReport.start({
        configuration,
        stdout: this.context.stdout
      }, async (report2) => {
        const {project} = await Project.find(configuration, this.context.cwd);
        const ident = structUtils_exports.parseIdent(this.name.replace(/^((@yarnpkg\/)?plugin-)?/, `@yarnpkg/plugin-`));
        const identStr = structUtils_exports.stringifyIdent(ident);
        const data = await getAvailablePlugins(configuration);
        if (!Object.prototype.hasOwnProperty.call(data, identStr))
          throw new ReportError(MessageName.PLUGIN_NAME_NOT_FOUND, `Couldn't find a plugin named "${identStr}" on the remote registry. Note that only the plugins referenced on our website (https://github.com/yarnpkg/berry/blob/master/plugins.yml) can be built and imported from sources.`);
        const pluginSpec = identStr;
        await prepareRepo(this, {configuration, report: report2, target});
        await buildAndSavePlugin(pluginSpec, this, {project, report: report2, target});
      });
      return report.exitCode();
    }
  };
  PluginDlSourcesCommand.paths = [
    [`plugin`, `import`, `from`, `sources`]
  ];
  PluginDlSourcesCommand.usage = Command.Usage({
    category: `Plugin-related commands`,
    description: `build a plugin from sources`,
    details: `
      This command clones the Yarn repository into a temporary folder, builds the specified contrib plugin and updates the configuration to reference it in further CLI invocations.

      The plugins can be referenced by their short name if sourced from the official Yarn repository.
    `,
    examples: [[
      `Build and activate the "@yarnpkg/plugin-exec" plugin`,
      `$0 plugin import from sources @yarnpkg/plugin-exec`
    ], [
      `Build and activate the "@yarnpkg/plugin-exec" plugin (shorthand)`,
      `$0 plugin import from sources exec`
    ]]
  });
  var sources_default2 = PluginDlSourcesCommand;
  async function buildAndSavePlugin(pluginSpec, {context, noMinify}, {project, report, target}) {
    const pluginName = pluginSpec.replace(/@yarnpkg\//, ``);
    const {configuration} = project;
    report.reportSeparator();
    report.reportInfo(MessageName.UNNAMED, `Building a fresh ${pluginName}`);
    report.reportSeparator();
    await runWorkflow(buildWorkflow2({
      pluginName,
      noMinify
    }, target), {configuration, context, target});
    report.reportSeparator();
    const pluginPath = ppath.resolve(target, `packages/${pluginName}/bundles/${pluginSpec}.js`);
    const pluginBuffer = await xfs.readFilePromise(pluginPath);
    await savePlugin(pluginSpec, pluginBuffer, {project, report});
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/plugin/remove.ts
  var PluginRemoveCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.name = options_exports.String();
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const {project} = await Project.find(configuration, this.context.cwd);
      const report = await StreamReport.start({
        configuration,
        stdout: this.context.stdout
      }, async (report2) => {
        const pluginName = this.name;
        const pluginIdent = structUtils_exports.parseIdent(pluginName);
        if (!configuration.plugins.has(pluginName))
          throw new UsageError(`${structUtils_exports.prettyIdent(configuration, pluginIdent)} isn't referenced by the current configuration`);
        const relativePath = `.yarn/plugins/${pluginName}.cjs`;
        const absolutePath = ppath.resolve(project.cwd, relativePath);
        if (xfs.existsSync(absolutePath)) {
          report2.reportInfo(MessageName.UNNAMED, `Removing ${formatUtils_exports.pretty(configuration, relativePath, formatUtils_exports.Type.PATH)}...`);
          await xfs.removePromise(absolutePath);
        }
        report2.reportInfo(MessageName.UNNAMED, `Updating the configuration...`);
        await Configuration.updateConfiguration(project.cwd, (current) => {
          if (!Array.isArray(current.plugins))
            return current;
          const plugins = current.plugins.filter((plugin16) => {
            return plugin16.path !== relativePath;
          });
          if (current.plugins.length === plugins.length)
            return current;
          return __spreadProps(__spreadValues({}, current), {
            plugins
          });
        });
      });
      return report.exitCode();
    }
  };
  PluginRemoveCommand.paths = [
    [`plugin`, `remove`]
  ];
  PluginRemoveCommand.usage = Command.Usage({
    category: `Plugin-related commands`,
    description: `remove a plugin`,
    details: `
      This command deletes the specified plugin from the .yarn/plugins folder and removes it from the configuration.

      **Note:** The plugins have to be referenced by their name property, which can be obtained using the \`yarn plugin runtime\` command. Shorthands are not allowed.
   `,
    examples: [[
      `Remove a plugin imported from the Yarn repository`,
      `$0 plugin remove @yarnpkg/plugin-typescript`
    ], [
      `Remove a plugin imported from a local file`,
      `$0 plugin remove my-local-plugin`
    ]]
  });
  var remove_default = PluginRemoveCommand;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/plugin/runtime.ts
  var PluginListCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.json = options_exports.Boolean(`--json`, false, {
        description: `Format the output as an NDJSON stream`
      });
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const report = await StreamReport.start({
        configuration,
        json: this.json,
        stdout: this.context.stdout
      }, async (report2) => {
        for (const name of configuration.plugins.keys()) {
          const builtin = this.context.plugins.plugins.has(name);
          let label = name;
          if (builtin)
            label += ` [builtin]`;
          report2.reportJson({name, builtin});
          report2.reportInfo(null, `${label}`);
        }
      });
      return report.exitCode();
    }
  };
  PluginListCommand.paths = [
    [`plugin`, `runtime`]
  ];
  PluginListCommand.usage = Command.Usage({
    category: `Plugin-related commands`,
    description: `list the active plugins`,
    details: `
      This command prints the currently active plugins. Will be displayed both builtin plugins and external plugins.
    `,
    examples: [[
      `List the currently active plugins`,
      `$0 plugin runtime`
    ]]
  });
  var runtime_default = PluginListCommand;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/rebuild.ts
  var RunCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.idents = options_exports.Rest();
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const {project, workspace} = await Project.find(configuration, this.context.cwd);
      const cache2 = await Cache.find(configuration);
      if (!workspace)
        throw new WorkspaceRequiredError(project.cwd, this.context.cwd);
      const filteredIdents = new Set();
      for (const identStr of this.idents)
        filteredIdents.add(structUtils_exports.parseIdent(identStr).identHash);
      await project.restoreInstallState({
        restoreResolutions: false
      });
      await project.resolveEverything({
        cache: cache2,
        report: new ThrowReport()
      });
      if (filteredIdents.size > 0) {
        for (const pkg of project.storedPackages.values()) {
          if (filteredIdents.has(pkg.identHash)) {
            project.storedBuildState.delete(pkg.locatorHash);
          }
        }
      } else {
        project.storedBuildState.clear();
      }
      const installReport = await StreamReport.start({
        configuration,
        stdout: this.context.stdout,
        includeLogs: !this.context.quiet
      }, async (report) => {
        await project.install({cache: cache2, report});
      });
      return installReport.exitCode();
    }
  };
  RunCommand.paths = [
    [`rebuild`]
  ];
  RunCommand.usage = Command.Usage({
    description: `rebuild the project's native packages`,
    details: `
      This command will automatically cause Yarn to forget about previous compilations of the given packages and to run them again.

      Note that while Yarn forgets the compilation, the previous artifacts aren't erased from the filesystem and may affect the next builds (in good or bad). To avoid this, you may remove the .yarn/unplugged folder, or any other relevant location where packages might have been stored (Yarn may offer a way to do that automatically in the future).

      By default all packages will be rebuilt, but you can filter the list by specifying the names of the packages you want to clear from memory.
    `,
    examples: [[
      `Rebuild all packages`,
      `$0 rebuild`
    ], [
      `Rebuild fsevents only`,
      `$0 rebuild fsevents`
    ]]
  });
  var rebuild_default = RunCommand;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/remove.ts
  var import_micromatch6 = __toModule(require_micromatch());
  var RemoveCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.all = options_exports.Boolean(`-A,--all`, false, {
        description: `Apply the operation to all workspaces from the current project`
      });
      this.patterns = options_exports.Rest();
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const {project, workspace} = await Project.find(configuration, this.context.cwd);
      const cache2 = await Cache.find(configuration);
      if (!workspace)
        throw new WorkspaceRequiredError(project.cwd, this.context.cwd);
      await project.restoreInstallState({
        restoreResolutions: false
      });
      const affectedWorkspaces = this.all ? project.workspaces : [workspace];
      const targets = [
        Target.REGULAR,
        Target.DEVELOPMENT,
        Target.PEER
      ];
      const unreferencedPatterns = [];
      let hasChanged = false;
      const afterWorkspaceDependencyRemovalList = [];
      for (const pattern of this.patterns) {
        let isReferenced = false;
        const pseudoIdent = structUtils_exports.parseIdent(pattern);
        for (const workspace2 of affectedWorkspaces) {
          const peerDependenciesMeta = [...workspace2.manifest.peerDependenciesMeta.keys()];
          for (const stringifiedIdent of (0, import_micromatch6.default)(peerDependenciesMeta, pattern)) {
            workspace2.manifest.peerDependenciesMeta.delete(stringifiedIdent);
            hasChanged = true;
            isReferenced = true;
          }
          for (const target of targets) {
            const descriptors = workspace2.manifest.getForScope(target);
            const stringifiedIdents = [...descriptors.values()].map((descriptor) => {
              return structUtils_exports.stringifyIdent(descriptor);
            });
            for (const stringifiedIdent of (0, import_micromatch6.default)(stringifiedIdents, structUtils_exports.stringifyIdent(pseudoIdent))) {
              const {identHash} = structUtils_exports.parseIdent(stringifiedIdent);
              const removedDescriptor = descriptors.get(identHash);
              if (typeof removedDescriptor === `undefined`)
                throw new Error(`Assertion failed: Expected the descriptor to be registered`);
              workspace2.manifest[target].delete(identHash);
              afterWorkspaceDependencyRemovalList.push([
                workspace2,
                target,
                removedDescriptor
              ]);
              hasChanged = true;
              isReferenced = true;
            }
          }
        }
        if (!isReferenced) {
          unreferencedPatterns.push(pattern);
        }
      }
      const patterns = unreferencedPatterns.length > 1 ? `Patterns` : `Pattern`;
      const dont = unreferencedPatterns.length > 1 ? `don't` : `doesn't`;
      const which = this.all ? `any` : `this`;
      if (unreferencedPatterns.length > 0)
        throw new UsageError(`${patterns} ${formatUtils_exports.prettyList(configuration, unreferencedPatterns, FormatType.CODE)} ${dont} match any packages referenced by ${which} workspace`);
      if (hasChanged) {
        await configuration.triggerMultipleHooks((hooks) => hooks.afterWorkspaceDependencyRemoval, afterWorkspaceDependencyRemovalList);
        const report = await StreamReport.start({
          configuration,
          stdout: this.context.stdout
        }, async (report2) => {
          await project.install({cache: cache2, report: report2});
        });
        return report.exitCode();
      }
      return 0;
    }
  };
  RemoveCommand.paths = [
    [`remove`]
  ];
  RemoveCommand.usage = Command.Usage({
    description: `remove dependencies from the project`,
    details: `
      This command will remove the packages matching the specified patterns from the current workspace.

      This command accepts glob patterns as arguments (if valid Idents and supported by [micromatch](https://github.com/micromatch/micromatch)). Make sure to escape the patterns, to prevent your own shell from trying to expand them.
    `,
    examples: [[
      `Remove a dependency from the current project`,
      `$0 remove lodash`
    ], [
      `Remove a dependency from all workspaces at once`,
      `$0 remove lodash --all`
    ], [
      `Remove all dependencies starting with \`eslint-\``,
      `$0 remove 'eslint-*'`
    ], [
      `Remove all dependencies with the \`@babel\` scope`,
      `$0 remove '@babel/*'`
    ], [
      `Remove all dependencies matching \`react-dom\` or \`react-helmet\``,
      `$0 remove 'react-{dom,helmet}'`
    ]]
  });
  var remove_default2 = RemoveCommand;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/runIndex.ts
  var import_util8 = __toModule(require("util"));
  var RunCommand2 = class extends BaseCommand {
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const {project, workspace} = await Project.find(configuration, this.context.cwd);
      if (!workspace)
        throw new WorkspaceRequiredError(project.cwd, this.context.cwd);
      const report = await StreamReport.start({
        configuration,
        stdout: this.context.stdout
      }, async (report2) => {
        const scripts = workspace.manifest.scripts;
        const keys = miscUtils_exports.sortMap(scripts.keys(), (key) => key);
        const inspectConfig = {
          breakLength: Infinity,
          colors: configuration.get(`enableColors`),
          maxArrayLength: 2
        };
        const maxKeyLength = keys.reduce((max, key) => {
          return Math.max(max, key.length);
        }, 0);
        for (const [key, value] of scripts.entries()) {
          report2.reportInfo(null, `${key.padEnd(maxKeyLength, ` `)}   ${(0, import_util8.inspect)(value, inspectConfig)}`);
        }
      });
      return report.exitCode();
    }
  };
  RunCommand2.paths = [
    [`run`]
  ];
  var runIndex_default = RunCommand2;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/run.ts
  var RunCommand3 = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.inspect = options_exports.String(`--inspect`, false, {
        tolerateBoolean: true,
        description: `Forwarded to the underlying Node process when executing a binary`
      });
      this.inspectBrk = options_exports.String(`--inspect-brk`, false, {
        tolerateBoolean: true,
        description: `Forwarded to the underlying Node process when executing a binary`
      });
      this.topLevel = options_exports.Boolean(`-T,--top-level`, false, {hidden: true});
      this.binariesOnly = options_exports.Boolean(`-B,--binaries-only`, false, {hidden: true});
      this.silent = options_exports.Boolean(`--silent`, {hidden: true});
      this.scriptName = options_exports.String();
      this.args = options_exports.Proxy();
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const {project, workspace, locator} = await Project.find(configuration, this.context.cwd);
      await project.restoreInstallState();
      const effectiveLocator = this.topLevel ? project.topLevelWorkspace.anchoredLocator : locator;
      if (!this.binariesOnly && await scriptUtils_exports.hasPackageScript(effectiveLocator, this.scriptName, {project}))
        return await scriptUtils_exports.executePackageScript(effectiveLocator, this.scriptName, this.args, {project, stdin: this.context.stdin, stdout: this.context.stdout, stderr: this.context.stderr});
      const binaries = await scriptUtils_exports.getPackageAccessibleBinaries(effectiveLocator, {project});
      const binary = binaries.get(this.scriptName);
      if (binary) {
        const nodeArgs = [];
        if (this.inspect) {
          if (typeof this.inspect === `string`) {
            nodeArgs.push(`--inspect=${this.inspect}`);
          } else {
            nodeArgs.push(`--inspect`);
          }
        }
        if (this.inspectBrk) {
          if (typeof this.inspectBrk === `string`) {
            nodeArgs.push(`--inspect-brk=${this.inspectBrk}`);
          } else {
            nodeArgs.push(`--inspect-brk`);
          }
        }
        return await scriptUtils_exports.executePackageAccessibleBinary(effectiveLocator, this.scriptName, this.args, {
          cwd: this.context.cwd,
          project,
          stdin: this.context.stdin,
          stdout: this.context.stdout,
          stderr: this.context.stderr,
          nodeArgs,
          packageAccessibleBinaries: binaries
        });
      }
      if (!this.topLevel && !this.binariesOnly && workspace && this.scriptName.includes(`:`)) {
        const candidateWorkspaces = await Promise.all(project.workspaces.map(async (workspace2) => {
          return workspace2.manifest.scripts.has(this.scriptName) ? workspace2 : null;
        }));
        const filteredWorkspaces = candidateWorkspaces.filter((workspace2) => {
          return workspace2 !== null;
        });
        if (filteredWorkspaces.length === 1) {
          return await scriptUtils_exports.executeWorkspaceScript(filteredWorkspaces[0], this.scriptName, this.args, {stdin: this.context.stdin, stdout: this.context.stdout, stderr: this.context.stderr});
        }
      }
      if (this.topLevel) {
        if (this.scriptName === `node-gyp`) {
          throw new UsageError(`Couldn't find a script name "${this.scriptName}" in the top-level (used by ${structUtils_exports.prettyLocator(configuration, locator)}). This typically happens because some package depends on "node-gyp" to build itself, but didn't list it in their dependencies. To fix that, please run "yarn add node-gyp" into your top-level workspace. You also can open an issue on the repository of the specified package to suggest them to use an optional peer dependency.`);
        } else {
          throw new UsageError(`Couldn't find a script name "${this.scriptName}" in the top-level (used by ${structUtils_exports.prettyLocator(configuration, locator)}).`);
        }
      } else {
        if (this.scriptName === `global`)
          throw new UsageError(`The 'yarn global' commands have been removed in 2.x - consider using 'yarn dlx' or a third-party plugin instead`);
        const userCommand = [this.scriptName].concat(this.args);
        for (const [pluginName, candidates] of pluginCommands)
          for (const candidate of candidates)
            if (userCommand.length >= candidate.length && JSON.stringify(userCommand.slice(0, candidate.length)) === JSON.stringify(candidate))
              throw new UsageError(`Couldn't find a script named "${this.scriptName}", but a matching command can be found in the ${pluginName} plugin. You can install it with "yarn plugin import ${pluginName}".`);
        throw new UsageError(`Couldn't find a script named "${this.scriptName}".`);
      }
    }
  };
  RunCommand3.paths = [
    [`run`]
  ];
  RunCommand3.usage = Command.Usage({
    description: `run a script defined in the package.json`,
    details: `
      This command will run a tool. The exact tool that will be executed will depend on the current state of your workspace:

      - If the \`scripts\` field from your local package.json contains a matching script name, its definition will get executed.

      - Otherwise, if one of the local workspace's dependencies exposes a binary with a matching name, this binary will get executed.

      - Otherwise, if the specified name contains a colon character and if one of the workspaces in the project contains exactly one script with a matching name, then this script will get executed.

      Whatever happens, the cwd of the spawned process will be the workspace that declares the script (which makes it possible to call commands cross-workspaces using the third syntax).
    `,
    examples: [[
      `Run the tests from the local workspace`,
      `$0 run test`
    ], [
      `Same thing, but without the "run" keyword`,
      `$0 test`
    ], [
      `Inspect Webpack while running`,
      `$0 run --inspect-brk webpack`
    ]]
  });
  var run_default2 = RunCommand3;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/set/resolution.ts
  var SetResolutionCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.save = options_exports.Boolean(`-s,--save`, false, {
        description: `Persist the resolution inside the top-level manifest`
      });
      this.descriptor = options_exports.String();
      this.resolution = options_exports.String();
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const {project, workspace} = await Project.find(configuration, this.context.cwd);
      const cache2 = await Cache.find(configuration);
      await project.restoreInstallState({
        restoreResolutions: false
      });
      if (!workspace)
        throw new WorkspaceRequiredError(project.cwd, this.context.cwd);
      const fromDescriptor = structUtils_exports.parseDescriptor(this.descriptor, true);
      const toDescriptor = structUtils_exports.makeDescriptor(fromDescriptor, this.resolution);
      project.storedDescriptors.set(fromDescriptor.descriptorHash, fromDescriptor);
      project.storedDescriptors.set(toDescriptor.descriptorHash, toDescriptor);
      project.resolutionAliases.set(fromDescriptor.descriptorHash, toDescriptor.descriptorHash);
      const report = await StreamReport.start({
        configuration,
        stdout: this.context.stdout
      }, async (report2) => {
        await project.install({cache: cache2, report: report2});
      });
      return report.exitCode();
    }
  };
  SetResolutionCommand.paths = [
    [`set`, `resolution`]
  ];
  SetResolutionCommand.usage = Command.Usage({
    description: `enforce a package resolution`,
    details: `
      This command updates the resolution table so that \`descriptor\` is resolved by \`resolution\`.

      Note that by default this command only affect the current resolution table - meaning that this "manual override" will disappear if you remove the lockfile, or if the package disappear from the table. If you wish to make the enforced resolution persist whatever happens, add the \`-s,--save\` flag which will also edit the \`resolutions\` field from your top-level manifest.

      Note that no attempt is made at validating that \`resolution\` is a valid resolution entry for \`descriptor\`.
    `,
    examples: [[
      `Force all instances of lodash@npm:^1.2.3 to resolve to 1.5.0`,
      `$0 set resolution lodash@npm:^1.2.3 1.5.0`
    ]]
  });
  var resolution_default = SetResolutionCommand;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/unlink.ts
  var import_micromatch7 = __toModule(require_micromatch());
  var UnlinkCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.all = options_exports.Boolean(`-A,--all`, false, {
        description: `Unlink all workspaces belonging to the target project from the current one`
      });
      this.leadingArguments = options_exports.Rest();
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const {project, workspace} = await Project.find(configuration, this.context.cwd);
      const cache2 = await Cache.find(configuration);
      if (!workspace)
        throw new WorkspaceRequiredError(project.cwd, this.context.cwd);
      const topLevelWorkspace = project.topLevelWorkspace;
      const workspacesToUnlink = new Set();
      if (this.leadingArguments.length === 0 && this.all) {
        for (const {pattern, reference} of topLevelWorkspace.manifest.resolutions) {
          if (reference.startsWith(`portal:`)) {
            workspacesToUnlink.add(pattern.descriptor.fullName);
          }
        }
      }
      if (this.leadingArguments.length > 0) {
        for (const leadingArgument of this.leadingArguments) {
          const absoluteDestination = ppath.resolve(this.context.cwd, npath.toPortablePath(leadingArgument));
          if (miscUtils_exports.isPathLike(leadingArgument)) {
            const configuration2 = await Configuration.find(absoluteDestination, this.context.plugins, {useRc: false, strict: false});
            const {project: project2, workspace: workspace2} = await Project.find(configuration2, absoluteDestination);
            if (!workspace2)
              throw new WorkspaceRequiredError(project2.cwd, absoluteDestination);
            if (this.all) {
              for (const workspace3 of project2.workspaces)
                if (workspace3.manifest.name)
                  workspacesToUnlink.add(structUtils_exports.stringifyIdent(workspace3.locator));
              if (workspacesToUnlink.size === 0) {
                throw new UsageError(`No workspace found to be unlinked in the target project`);
              }
            } else {
              if (!workspace2.manifest.name)
                throw new UsageError(`The target workspace doesn't have a name and thus cannot be unlinked`);
              workspacesToUnlink.add(structUtils_exports.stringifyIdent(workspace2.locator));
            }
          } else {
            const fullNames = [...topLevelWorkspace.manifest.resolutions.map(({pattern}) => pattern.descriptor.fullName)];
            for (const fullName of (0, import_micromatch7.default)(fullNames, leadingArgument)) {
              workspacesToUnlink.add(fullName);
            }
          }
        }
      }
      topLevelWorkspace.manifest.resolutions = topLevelWorkspace.manifest.resolutions.filter(({pattern}) => {
        return !workspacesToUnlink.has(pattern.descriptor.fullName);
      });
      const report = await StreamReport.start({
        configuration,
        stdout: this.context.stdout
      }, async (report2) => {
        await project.install({cache: cache2, report: report2});
      });
      return report.exitCode();
    }
  };
  UnlinkCommand.paths = [
    [`unlink`]
  ];
  UnlinkCommand.usage = Command.Usage({
    description: `disconnect the local project from another one`,
    details: `
      This command will remove any resolutions in the project-level manifest that would have been added via a yarn link with similar arguments.
    `,
    examples: [[
      `Unregister a remote workspace in the current project`,
      `$0 unlink ~/ts-loader`
    ], [
      `Unregister all workspaces from a remote project in the current project`,
      `$0 unlink ~/jest --all`
    ], [
      `Unregister all previously linked workspaces`,
      `$0 unlink --all`
    ], [
      `Unregister all workspaces matching a glob`,
      `$0 unlink '@babel/*' 'pkg-{a,b}'`
    ]]
  });
  var unlink_default = UnlinkCommand;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/up.ts
  var import_enquirer2 = __toModule(require_enquirer());
  var import_micromatch8 = __toModule(require_micromatch());
  init_lib();
  var UpCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.interactive = options_exports.Boolean(`-i,--interactive`, {
        description: `Offer various choices, depending on the detected upgrade paths`
      });
      this.exact = options_exports.Boolean(`-E,--exact`, false, {
        description: `Don't use any semver modifier on the resolved range`
      });
      this.tilde = options_exports.Boolean(`-T,--tilde`, false, {
        description: `Use the \`~\` semver modifier on the resolved range`
      });
      this.caret = options_exports.Boolean(`-C,--caret`, false, {
        description: `Use the \`^\` semver modifier on the resolved range`
      });
      this.recursive = options_exports.Boolean(`-R,--recursive`, false, {
        description: `Resolve again ALL resolutions for those packages`
      });
      this.patterns = options_exports.Rest();
    }
    async execute() {
      if (this.recursive) {
        return await this.executeUpRecursive();
      } else {
        return await this.executeUpClassic();
      }
    }
    async executeUpRecursive() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const {project, workspace} = await Project.find(configuration, this.context.cwd);
      const cache2 = await Cache.find(configuration);
      if (!workspace)
        throw new WorkspaceRequiredError(project.cwd, this.context.cwd);
      await project.restoreInstallState({
        restoreResolutions: false
      });
      const allDescriptors = [...project.storedDescriptors.values()];
      const stringifiedIdents = allDescriptors.map((descriptor) => {
        return structUtils_exports.stringifyIdent(descriptor);
      });
      const relevantIdents = new Set();
      for (const pattern of this.patterns) {
        if (structUtils_exports.parseDescriptor(pattern).range !== `unknown`)
          throw new UsageError(`Ranges aren't allowed when using --recursive`);
        for (const stringifiedIdent of (0, import_micromatch8.default)(stringifiedIdents, pattern)) {
          const ident = structUtils_exports.parseIdent(stringifiedIdent);
          relevantIdents.add(ident.identHash);
        }
      }
      const relevantDescriptors = allDescriptors.filter((descriptor) => {
        return relevantIdents.has(descriptor.identHash);
      });
      for (const descriptor of relevantDescriptors) {
        project.storedDescriptors.delete(descriptor.descriptorHash);
        project.storedResolutions.delete(descriptor.descriptorHash);
      }
      const installReport = await StreamReport.start({
        configuration,
        stdout: this.context.stdout
      }, async (report) => {
        await project.install({cache: cache2, report});
      });
      return installReport.exitCode();
    }
    async executeUpClassic() {
      var _a2;
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const {project, workspace} = await Project.find(configuration, this.context.cwd);
      const cache2 = await Cache.find(configuration);
      if (!workspace)
        throw new WorkspaceRequiredError(project.cwd, this.context.cwd);
      await project.restoreInstallState({
        restoreResolutions: false
      });
      const interactive = (_a2 = this.interactive) != null ? _a2 : configuration.get(`preferInteractive`);
      const modifier = getModifier(this, project);
      const strategies = interactive ? [
        Strategy.KEEP,
        Strategy.REUSE,
        Strategy.PROJECT,
        Strategy.LATEST
      ] : [
        Strategy.PROJECT,
        Strategy.LATEST
      ];
      const allSuggestionsPromises = [];
      const unreferencedPatterns = [];
      for (const pattern of this.patterns) {
        let isReferenced = false;
        const pseudoDescriptor = structUtils_exports.parseDescriptor(pattern);
        for (const workspace2 of project.workspaces) {
          for (const target of [Target.REGULAR, Target.DEVELOPMENT]) {
            const descriptors = workspace2.manifest.getForScope(target);
            const stringifiedIdents = [...descriptors.values()].map((descriptor) => {
              return structUtils_exports.stringifyIdent(descriptor);
            });
            for (const stringifiedIdent of (0, import_micromatch8.default)(stringifiedIdents, structUtils_exports.stringifyIdent(pseudoDescriptor))) {
              const ident = structUtils_exports.parseIdent(stringifiedIdent);
              const existingDescriptor = workspace2.manifest[target].get(ident.identHash);
              if (typeof existingDescriptor === `undefined`)
                throw new Error(`Assertion failed: Expected the descriptor to be registered`);
              const request2 = structUtils_exports.makeDescriptor(ident, pseudoDescriptor.range);
              allSuggestionsPromises.push(Promise.resolve().then(async () => {
                return [
                  workspace2,
                  target,
                  existingDescriptor,
                  await getSuggestedDescriptors(request2, {project, workspace: workspace2, cache: cache2, target, modifier, strategies})
                ];
              }));
              isReferenced = true;
            }
          }
        }
        if (!isReferenced) {
          unreferencedPatterns.push(pattern);
        }
      }
      if (unreferencedPatterns.length > 1)
        throw new UsageError(`Patterns ${formatUtils_exports.prettyList(configuration, unreferencedPatterns, FormatType.CODE)} don't match any packages referenced by any workspace`);
      if (unreferencedPatterns.length > 0)
        throw new UsageError(`Pattern ${formatUtils_exports.prettyList(configuration, unreferencedPatterns, FormatType.CODE)} doesn't match any packages referenced by any workspace`);
      const allSuggestions = await Promise.all(allSuggestionsPromises);
      const checkReport = await LightReport.start({
        configuration,
        stdout: this.context.stdout,
        suggestInstall: false
      }, async (report) => {
        for (const [, , existing, {suggestions, rejections}] of allSuggestions) {
          const nonNullSuggestions = suggestions.filter((suggestion) => {
            return suggestion.descriptor !== null;
          });
          if (nonNullSuggestions.length === 0) {
            const [firstError] = rejections;
            if (typeof firstError === `undefined`)
              throw new Error(`Assertion failed: Expected an error to have been set`);
            const prettyError = this.cli.error(firstError);
            if (!project.configuration.get(`enableNetwork`)) {
              report.reportError(MessageName.CANT_SUGGEST_RESOLUTIONS, `${structUtils_exports.prettyDescriptor(configuration, existing)} can't be resolved to a satisfying range (note: network resolution has been disabled)

${prettyError}`);
            } else {
              report.reportError(MessageName.CANT_SUGGEST_RESOLUTIONS, `${structUtils_exports.prettyDescriptor(configuration, existing)} can't be resolved to a satisfying range

${prettyError}`);
            }
          } else if (nonNullSuggestions.length > 1 && !interactive) {
            report.reportError(MessageName.CANT_SUGGEST_RESOLUTIONS, `${structUtils_exports.prettyDescriptor(configuration, existing)} has multiple possible upgrade strategies; use -i to disambiguate manually`);
          }
        }
      });
      if (checkReport.hasErrors())
        return checkReport.exitCode();
      let askedQuestions = false;
      const afterWorkspaceDependencyReplacementList = [];
      for (const [workspace2, target, , {suggestions}] of allSuggestions) {
        let selected;
        const nonNullSuggestions = suggestions.filter((suggestion) => {
          return suggestion.descriptor !== null;
        });
        const firstSuggestedDescriptor = nonNullSuggestions[0].descriptor;
        const areAllTheSame = nonNullSuggestions.every((suggestion) => structUtils_exports.areDescriptorsEqual(suggestion.descriptor, firstSuggestedDescriptor));
        if (nonNullSuggestions.length === 1 || areAllTheSame) {
          selected = firstSuggestedDescriptor;
        } else {
          askedQuestions = true;
          ({answer: selected} = await (0, import_enquirer2.prompt)({
            type: `select`,
            name: `answer`,
            message: `Which range to you want to use in ${structUtils_exports.prettyWorkspace(configuration, workspace2)} \u276F ${target}?`,
            choices: suggestions.map(({descriptor, name, reason}) => descriptor ? {
              name,
              hint: reason,
              descriptor
            } : {
              name,
              hint: reason,
              disabled: true
            }),
            onCancel: () => process.exit(130),
            result(name) {
              return this.find(name, `descriptor`);
            },
            stdin: this.context.stdin,
            stdout: this.context.stdout
          }));
        }
        const current = workspace2.manifest[target].get(selected.identHash);
        if (typeof current === `undefined`)
          throw new Error(`Assertion failed: This descriptor should have a matching entry`);
        if (current.descriptorHash !== selected.descriptorHash) {
          workspace2.manifest[target].set(selected.identHash, selected);
          afterWorkspaceDependencyReplacementList.push([
            workspace2,
            target,
            current,
            selected
          ]);
        } else {
          const resolver = configuration.makeResolver();
          const resolveOptions = {project, resolver};
          const bound = resolver.bindDescriptor(current, workspace2.anchoredLocator, resolveOptions);
          project.forgetResolution(bound);
        }
      }
      await configuration.triggerMultipleHooks((hooks) => hooks.afterWorkspaceDependencyReplacement, afterWorkspaceDependencyReplacementList);
      if (askedQuestions)
        this.context.stdout.write(`
`);
      const installReport = await StreamReport.start({
        configuration,
        stdout: this.context.stdout
      }, async (report) => {
        await project.install({cache: cache2, report});
      });
      return installReport.exitCode();
    }
  };
  UpCommand.paths = [
    [`up`]
  ];
  UpCommand.usage = Command.Usage({
    description: `upgrade dependencies across the project`,
    details: `
      This command upgrades the packages matching the list of specified patterns to their latest available version across the whole project (regardless of whether they're part of \`dependencies\` or \`devDependencies\` - \`peerDependencies\` won't be affected). This is a project-wide command: all workspaces will be upgraded in the process.

      If \`-R,--recursive\` is set the command will change behavior and no other switch will be allowed. When operating under this mode \`yarn up\` will force all ranges matching the selected packages to be resolved again (often to the highest available versions) before being stored in the lockfile. It however won't touch your manifests anymore, so depending on your needs you might want to run both \`yarn up\` and \`yarn up -R\` to cover all bases.

      If \`-i,--interactive\` is set (or if the \`preferInteractive\` settings is toggled on) the command will offer various choices, depending on the detected upgrade paths. Some upgrades require this flag in order to resolve ambiguities.

      The, \`-C,--caret\`, \`-E,--exact\` and  \`-T,--tilde\` options have the same meaning as in the \`add\` command (they change the modifier used when the range is missing or a tag, and are ignored when the range is explicitly set).

      Generally you can see \`yarn up\` as a counterpart to what was \`yarn upgrade --latest\` in Yarn 1 (ie it ignores the ranges previously listed in your manifests), but unlike \`yarn upgrade\` which only upgraded dependencies in the current workspace, \`yarn up\` will upgrade all workspaces at the same time.

      This command accepts glob patterns as arguments (if valid Descriptors and supported by [micromatch](https://github.com/micromatch/micromatch)). Make sure to escape the patterns, to prevent your own shell from trying to expand them.

      **Note:** The ranges have to be static, only the package scopes and names can contain glob patterns.
    `,
    examples: [[
      `Upgrade all instances of lodash to the latest release`,
      `$0 up lodash`
    ], [
      `Upgrade all instances of lodash to the latest release, but ask confirmation for each`,
      `$0 up lodash -i`
    ], [
      `Upgrade all instances of lodash to 1.2.3`,
      `$0 up lodash@1.2.3`
    ], [
      `Upgrade all instances of packages with the \`@babel\` scope to the latest release`,
      `$0 up '@babel/*'`
    ], [
      `Upgrade all instances of packages containing the word \`jest\` to the latest release`,
      `$0 up '*jest*'`
    ], [
      `Upgrade all instances of packages with the \`@babel\` scope to 7.0.0`,
      `$0 up '@babel/*@7.0.0'`
    ]]
  });
  UpCommand.schema = [
    hasKeyRelationship(`recursive`, KeyRelationship.Forbids, [`interactive`, `exact`, `tilde`, `caret`], {ignore: [void 0, false]})
  ];
  var up_default = UpCommand;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/why.ts
  var WhyCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.recursive = options_exports.Boolean(`-R,--recursive`, false, {
        description: `List, for each workspace, what are all the paths that lead to the dependency`
      });
      this.json = options_exports.Boolean(`--json`, false, {
        description: `Format the output as an NDJSON stream`
      });
      this.peers = options_exports.Boolean(`--peers`, false, {
        description: `Also print the peer dependencies that match the specified name`
      });
      this.package = options_exports.String();
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const {project, workspace} = await Project.find(configuration, this.context.cwd);
      if (!workspace)
        throw new WorkspaceRequiredError(project.cwd, this.context.cwd);
      await project.restoreInstallState();
      const identHash = structUtils_exports.parseIdent(this.package).identHash;
      const whyTree = this.recursive ? whyRecursive(project, identHash, {configuration, peers: this.peers}) : whySimple(project, identHash, {configuration, peers: this.peers});
      treeUtils_exports.emitTree(whyTree, {
        configuration,
        stdout: this.context.stdout,
        json: this.json,
        separators: 1
      });
    }
  };
  WhyCommand.paths = [
    [`why`]
  ];
  WhyCommand.usage = Command.Usage({
    description: `display the reason why a package is needed`,
    details: `
      This command prints the exact reasons why a package appears in the dependency tree.

      If \`-R,--recursive\` is set, the listing will go in depth and will list, for each workspaces, what are all the paths that lead to the dependency. Note that the display is somewhat optimized in that it will not print the package listing twice for a single package, so if you see a leaf named "Foo" when looking for "Bar", it means that "Foo" already got printed higher in the tree.
    `,
    examples: [[
      `Explain why lodash is used in your project`,
      `$0 why lodash`
    ]]
  });
  var why_default = WhyCommand;
  function whySimple(project, identHash, {configuration, peers}) {
    const sortedPackages = miscUtils_exports.sortMap(project.storedPackages.values(), (pkg) => {
      return structUtils_exports.stringifyLocator(pkg);
    });
    const rootChildren = {};
    const root = {children: rootChildren};
    for (const pkg of sortedPackages) {
      const nodeChildren = {};
      const node = null;
      for (const dependency of pkg.dependencies.values()) {
        if (!peers && pkg.peerDependencies.has(dependency.identHash))
          continue;
        const resolution = project.storedResolutions.get(dependency.descriptorHash);
        if (!resolution)
          throw new Error(`Assertion failed: The resolution should have been registered`);
        const nextPkg = project.storedPackages.get(resolution);
        if (!nextPkg)
          throw new Error(`Assertion failed: The package should have been registered`);
        if (nextPkg.identHash !== identHash)
          continue;
        if (node === null) {
          const key2 = structUtils_exports.stringifyLocator(pkg);
          rootChildren[key2] = {value: [pkg, formatUtils_exports.Type.LOCATOR], children: nodeChildren};
        }
        const key = structUtils_exports.stringifyLocator(nextPkg);
        nodeChildren[key] = {value: [{
          descriptor: dependency,
          locator: nextPkg
        }, formatUtils_exports.Type.DEPENDENT]};
      }
    }
    return root;
  }
  function whyRecursive(project, identHash, {configuration, peers}) {
    const sortedWorkspaces = miscUtils_exports.sortMap(project.workspaces, (workspace) => {
      return structUtils_exports.stringifyLocator(workspace.anchoredLocator);
    });
    const seen = new Set();
    const dependents = new Set();
    const markAllDependents = (pkg) => {
      if (seen.has(pkg.locatorHash))
        return dependents.has(pkg.locatorHash);
      seen.add(pkg.locatorHash);
      if (pkg.identHash === identHash) {
        dependents.add(pkg.locatorHash);
        return true;
      }
      let depends = false;
      if (pkg.identHash === identHash)
        depends = true;
      for (const dependency of pkg.dependencies.values()) {
        if (!peers && pkg.peerDependencies.has(dependency.identHash))
          continue;
        const resolution = project.storedResolutions.get(dependency.descriptorHash);
        if (!resolution)
          throw new Error(`Assertion failed: The resolution should have been registered`);
        const nextPkg = project.storedPackages.get(resolution);
        if (!nextPkg)
          throw new Error(`Assertion failed: The package should have been registered`);
        if (markAllDependents(nextPkg)) {
          depends = true;
        }
      }
      if (depends)
        dependents.add(pkg.locatorHash);
      return depends;
    };
    for (const workspace of sortedWorkspaces) {
      const pkg = project.storedPackages.get(workspace.anchoredLocator.locatorHash);
      if (!pkg)
        throw new Error(`Assertion failed: The package should have been registered`);
      markAllDependents(pkg);
    }
    const printed = new Set();
    const rootChildren = {};
    const root = {children: rootChildren};
    const printAllDependents = (pkg, parentChildren, dependency) => {
      if (!dependents.has(pkg.locatorHash))
        return;
      const nodeValue = dependency !== null ? formatUtils_exports.tuple(formatUtils_exports.Type.DEPENDENT, {locator: pkg, descriptor: dependency}) : formatUtils_exports.tuple(formatUtils_exports.Type.LOCATOR, pkg);
      const nodeChildren = {};
      const node = {
        value: nodeValue,
        children: nodeChildren
      };
      const key = structUtils_exports.stringifyLocator(pkg);
      parentChildren[key] = node;
      if (printed.has(pkg.locatorHash))
        return;
      printed.add(pkg.locatorHash);
      if (dependency !== null && project.tryWorkspaceByLocator(pkg))
        return;
      for (const dependency2 of pkg.dependencies.values()) {
        if (!peers && pkg.peerDependencies.has(dependency2.identHash))
          continue;
        const resolution = project.storedResolutions.get(dependency2.descriptorHash);
        if (!resolution)
          throw new Error(`Assertion failed: The resolution should have been registered`);
        const nextPkg = project.storedPackages.get(resolution);
        if (!nextPkg)
          throw new Error(`Assertion failed: The package should have been registered`);
        printAllDependents(nextPkg, nodeChildren, dependency2);
      }
    };
    for (const workspace of sortedWorkspaces) {
      const pkg = project.storedPackages.get(workspace.anchoredLocator.locatorHash);
      if (!pkg)
        throw new Error(`Assertion failed: The package should have been registered`);
      printAllDependents(pkg, rootChildren, null);
    }
    return root;
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/workspaces/list.ts
  var WorkspacesListCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.verbose = options_exports.Boolean(`-v,--verbose`, false, {
        description: `Also return the cross-dependencies between workspaces`
      });
      this.json = options_exports.Boolean(`--json`, false, {
        description: `Format the output as an NDJSON stream`
      });
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const {project} = await Project.find(configuration, this.context.cwd);
      const report = await StreamReport.start({
        configuration,
        json: this.json,
        stdout: this.context.stdout
      }, async (report2) => {
        for (const workspace of project.workspaces) {
          const {manifest} = workspace;
          let extra;
          if (this.verbose) {
            const workspaceDependencies = new Set();
            const mismatchedWorkspaceDependencies = new Set();
            for (const dependencyType of Manifest.hardDependencies) {
              for (const [identHash, descriptor] of manifest.getForScope(dependencyType)) {
                const matchingWorkspace = project.tryWorkspaceByDescriptor(descriptor);
                if (matchingWorkspace === null) {
                  if (project.workspacesByIdent.has(identHash)) {
                    mismatchedWorkspaceDependencies.add(descriptor);
                  }
                } else {
                  workspaceDependencies.add(matchingWorkspace);
                }
              }
            }
            extra = {
              workspaceDependencies: Array.from(workspaceDependencies).map((workspace2) => {
                return workspace2.relativeCwd;
              }),
              mismatchedWorkspaceDependencies: Array.from(mismatchedWorkspaceDependencies).map((descriptor) => {
                return structUtils_exports.stringifyDescriptor(descriptor);
              })
            };
          }
          report2.reportInfo(null, `${workspace.relativeCwd}`);
          report2.reportJson(__spreadValues({
            location: workspace.relativeCwd,
            name: manifest.name ? structUtils_exports.stringifyIdent(manifest.name) : null
          }, extra));
        }
      });
      return report.exitCode();
    }
  };
  WorkspacesListCommand.paths = [
    [`workspaces`, `list`]
  ];
  WorkspacesListCommand.usage = Command.Usage({
    category: `Workspace-related commands`,
    description: `list all available workspaces`,
    details: `
      This command will print the list of all workspaces in the project. If both the \`-v,--verbose\` and \`--json\` options are set, Yarn will also return the cross-dependencies between each workspaces (useful when you wish to automatically generate Buck / Bazel rules).
    `
  });
  var list_default2 = WorkspacesListCommand;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/commands/workspace.ts
  var WorkspaceCommand = class extends Command {
    constructor() {
      super(...arguments);
      this.workspaceName = options_exports.String();
      this.commandName = options_exports.String();
      this.args = options_exports.Proxy();
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const {project, workspace: cwdWorkspace} = await Project.find(configuration, this.context.cwd);
      if (!cwdWorkspace)
        throw new WorkspaceRequiredError(project.cwd, this.context.cwd);
      const candidates = project.workspaces;
      const candidatesByName = new Map(candidates.map((workspace2) => {
        const ident = structUtils_exports.convertToIdent(workspace2.locator);
        return [structUtils_exports.stringifyIdent(ident), workspace2];
      }));
      const workspace = candidatesByName.get(this.workspaceName);
      if (workspace === void 0) {
        const otherNames = Array.from(candidatesByName.keys()).sort();
        throw new UsageError(`Workspace '${this.workspaceName}' not found. Did you mean any of the following:
  - ${otherNames.join(`
  - `)}?`);
      }
      return this.cli.run([this.commandName, ...this.args], {cwd: workspace.cwd});
    }
  };
  WorkspaceCommand.paths = [
    [`workspace`]
  ];
  WorkspaceCommand.usage = Command.Usage({
    category: `Workspace-related commands`,
    description: `run a command within the specified workspace`,
    details: `
      This command will run a given sub-command on a single workspace.
    `,
    examples: [[
      `Add a package to a single workspace`,
      `yarn workspace components add -D react`
    ], [
      `Run build script on a single workspace`,
      `yarn workspace components run build`
    ]]
  });
  var workspace_default = WorkspaceCommand;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-essentials-virtual-ba2aa356ff/1/packages/plugin-essentials/sources/index.ts
  var plugin = {
    configuration: {
      enableImmutableInstalls: {
        description: `If true (the default on CI), prevents the install command from modifying the lockfile`,
        type: SettingsType.BOOLEAN,
        default: import_ci_info4.isCI
      },
      defaultSemverRangePrefix: {
        description: `The default save prefix: '^', '~' or ''`,
        type: SettingsType.STRING,
        values: [`^`, `~`, ``],
        default: Modifier.CARET
      }
    },
    commands: [
      clean_default,
      get_default,
      set_default,
      unset_default,
      resolution_default,
      sources_default,
      version_default2,
      list_default2,
      clipanion_default,
      help_default,
      run_default,
      version_default,
      add_default,
      bin_default,
      config_default,
      dedupe_default,
      exec_default,
      peerRequirements_default,
      info_default,
      install_default,
      link_default,
      unlink_default,
      node_default,
      sources_default2,
      import_default,
      remove_default,
      list_default,
      runtime_default,
      rebuild_default,
      remove_default2,
      runIndex_default,
      run_default2,
      up_default,
      why_default,
      workspace_default
    ]
  };
  var sources_default3 = plugin;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-compat-virtual-5fe64685a8/1/packages/plugin-compat/sources/index.ts
  var sources_exports7 = {};
  __export(sources_exports7, {
    default: () => sources_default4
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-compat-virtual-5fe64685a8/1/packages/plugin-compat/sources/extensions.ts
  var optionalPeerDep = {
    optional: true
  };
  var packageExtensions = [
    [`@samverschueren/stream-to-observable@<0.3.1`, {
      peerDependenciesMeta: {
        [`rxjs`]: optionalPeerDep,
        [`zenObservable`]: optionalPeerDep
      }
    }],
    [`any-observable@<0.5.1`, {
      peerDependenciesMeta: {
        [`rxjs`]: optionalPeerDep,
        [`zenObservable`]: optionalPeerDep
      }
    }],
    [`@pm2/agent@<1.0.4`, {
      dependencies: {
        [`debug`]: `*`
      }
    }],
    [`debug@<4.2.0`, {
      peerDependenciesMeta: {
        [`supports-color`]: optionalPeerDep
      }
    }],
    [`got@<11`, {
      dependencies: {
        [`@types/responselike`]: `^1.0.0`,
        [`@types/keyv`]: `^3.1.1`
      }
    }],
    [`cacheable-lookup@<4.1.2`, {
      dependencies: {
        [`@types/keyv`]: `^3.1.1`
      }
    }],
    [`http-link-dataloader@*`, {
      peerDependencies: {
        [`graphql`]: `^0.13.1 || ^14.0.0`
      }
    }],
    [`typescript-language-server@*`, {
      dependencies: {
        [`vscode-jsonrpc`]: `^5.0.1`,
        [`vscode-languageserver-protocol`]: `^3.15.0`
      }
    }],
    [`postcss-syntax@*`, {
      peerDependenciesMeta: {
        [`postcss-html`]: optionalPeerDep,
        [`postcss-jsx`]: optionalPeerDep,
        [`postcss-less`]: optionalPeerDep,
        [`postcss-markdown`]: optionalPeerDep,
        [`postcss-scss`]: optionalPeerDep
      }
    }],
    [`jss-plugin-rule-value-function@<=10.1.1`, {
      dependencies: {
        [`tiny-warning`]: `^1.0.2`
      }
    }],
    [`ink-select-input@<4.1.0`, {
      peerDependencies: {
        react: `^16.8.2`
      }
    }],
    [`license-webpack-plugin@*`, {
      peerDependenciesMeta: {
        [`webpack`]: optionalPeerDep
      }
    }],
    [`snowpack@>=3.3.0`, {
      dependencies: {
        [`node-gyp`]: `^7.1.0`
      }
    }],
    [`promise-inflight@*`, {
      peerDependenciesMeta: {
        [`bluebird`]: optionalPeerDep
      }
    }],
    [`reactcss@*`, {
      peerDependencies: {
        react: `*`
      }
    }],
    [`react-color@<=2.19.0`, {
      peerDependencies: {
        react: `*`
      }
    }],
    [`gatsby-plugin-i18n@*`, {
      dependencies: {
        ramda: `^0.24.1`
      }
    }],
    [`useragent@^2.0.0`, {
      dependencies: {
        request: `^2.88.0`,
        yamlparser: `0.0.x`,
        semver: `5.5.x`
      }
    }],
    [`@apollographql/apollo-tools@*`, {
      peerDependencies: {
        graphql: `^14.2.1 || ^15.0.0`
      }
    }],
    [`material-table@^2.0.0`, {
      dependencies: {
        "@babel/runtime": `^7.11.2`
      }
    }],
    [`@babel/parser@*`, {
      dependencies: {
        "@babel/types": `^7.8.3`
      }
    }],
    [`fork-ts-checker-webpack-plugin@*`, {
      peerDependencies: {
        eslint: `>= 6`,
        typescript: `>= 2.7`,
        webpack: `>= 4`,
        "vue-template-compiler": `*`
      },
      peerDependenciesMeta: {
        eslint: optionalPeerDep,
        "vue-template-compiler": optionalPeerDep
      }
    }],
    [`rc-animate@<=3.1.1`, {
      peerDependencies: {
        react: `>=16.9.0`,
        "react-dom": `>=16.9.0`
      }
    }],
    [`react-bootstrap-table2-paginator@*`, {
      dependencies: {
        classnames: `^2.2.6`
      }
    }],
    [`react-draggable@<=4.4.3`, {
      peerDependencies: {
        react: `>= 16.3.0`,
        "react-dom": `>= 16.3.0`
      }
    }],
    [`apollo-upload-client@<14`, {
      peerDependencies: {
        graphql: `14 - 15`
      }
    }],
    [`react-instantsearch-core@<=6.7.0`, {
      peerDependencies: {
        algoliasearch: `>= 3.1 < 5`
      }
    }],
    [`react-instantsearch-dom@<=6.7.0`, {
      dependencies: {
        "react-fast-compare": `^3.0.0`
      }
    }],
    [`ws@<7.2.1`, {
      peerDependencies: {
        bufferutil: `^4.0.1`,
        "utf-8-validate": `^5.0.2`
      },
      peerDependenciesMeta: {
        bufferutil: optionalPeerDep,
        "utf-8-validate": optionalPeerDep
      }
    }],
    [`react-portal@*`, {
      peerDependencies: {
        "react-dom": `^15.0.0-0 || ^16.0.0-0 || ^17.0.0-0`
      }
    }],
    [`react-scripts@<=4.0.1`, {
      peerDependencies: {
        [`react`]: `*`
      }
    }],
    [`testcafe@<=1.10.1`, {
      dependencies: {
        "@babel/plugin-transform-for-of": `^7.12.1`,
        "@babel/runtime": `^7.12.5`
      }
    }],
    [`testcafe-legacy-api@<=4.2.0`, {
      dependencies: {
        "testcafe-hammerhead": `^17.0.1`,
        "read-file-relative": `^1.2.0`
      }
    }],
    [`@google-cloud/firestore@<=4.9.3`, {
      dependencies: {
        protobufjs: `^6.8.6`
      }
    }],
    [`gatsby-source-apiserver@*`, {
      dependencies: {
        [`babel-polyfill`]: `^6.26.0`
      }
    }],
    [`@webpack-cli/package-utils@<=1.0.1-alpha.4`, {
      dependencies: {
        [`cross-spawn`]: `^7.0.3`
      }
    }],
    [`gatsby-remark-prismjs@<3.3.28`, {
      dependencies: {
        [`lodash`]: `^4`
      }
    }],
    [`gatsby-plugin-favicon@*`, {
      peerDependencies: {
        [`webpack`]: `*`
      }
    }],
    [`gatsby-plugin-sharp@*`, {
      dependencies: {
        [`debug`]: `^4.3.1`
      }
    }],
    [`gatsby-react-router-scroll@*`, {
      dependencies: {
        [`prop-types`]: `^15.7.2`
      }
    }],
    [`@rebass/forms@*`, {
      dependencies: {
        [`@styled-system/should-forward-prop`]: `^5.0.0`
      },
      peerDependencies: {
        react: `^16.8.6`
      }
    }],
    [`rebass@*`, {
      peerDependencies: {
        react: `^16.8.6`
      }
    }]
  ];

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-compat-virtual-5fe64685a8/1/packages/plugin-compat/sources/patches/fsevents.patch.ts
  var patch;
  function getPatch() {
    if (typeof patch === `undefined`)
      patch = require("zlib").brotliDecompressSync(Buffer.from(`G7weAByFTVk3Vs7UfHhq4yykgEM7pbW7TI43SG2S5tvGrwHBAzdz+s/npQ6tgEvobvxisrPIadkXeUAJotBn5bDZ5kAhcRqsIHe3F75Walet5hNalwgFDtxb0BiDUjiUQkjG0yW2hto9HPgiCkm316d6bC0kST72YN7D7rfkhCE9x4J0XwB0yavalxpUu2t9xszHrmtwalOxT7VslsxWcB1qpqZwERUra4psWhTV8BgwWeizurec82Caf1ABL11YMfbf8FJ9JBceZOkgmvrQPbC9DUldX/yMbmX06UQluCEjSwUoyO+EZPIjofr+/oAZUck2enraRD+oWLlnlYnj8xB+gwSo9lmmks4fXv574qSqcWA6z21uYkzMu3EWj+K23RxeQlLqiE35/rC8GcS4CGkKHKKq+zAIQwD9iRDNfiAqueLLpicFFrNsAI4zeTD/eO9MHcnRa5m8UT+M2+V+AkFST4BlKneiAQRSdST8KEAIyFlULt6wa9EBd0Ds28VmpaxquJdVt+nwdEs5xUskI13OVtFyY0UrQIRAlCuvvWivvlSKQfTO+2Q8OyUR1W5RvetaPz4jD27hdtwHFFA1Ptx6Ee/t2cY2rg2G46M1pNDRf2pWhvpy8pqMnuI3++4OF3+7OFIWXGjh+o7Nr2jNvbiYcQdQS1h903/jVFgOpA0yJ78z+x759bFA0rq+6aY5qPB4FzS3oYoLupDUhD9nDz6F6H7hpnlMf18KNKDu4IKjTWwrAnY6MFQw1W6ymOALHlFyCZmQhldg1MQHaMVVQTVgDC60TfaBqG++Y8PEoFhN/PBTZT175KNP/BlHDYGOOBmnBdzqJKplZ/ljiVG0ZBzfqeBRrrUkn6rA54462SgiliKoYVnbeptMdXNfAuaupIEi0bApF10TlgHfmEJAPUVidRVFyDupSem5po5vErPqWKhKbUIp0LozpYsIKK57dM/HKr+nguF+7924IIWMICkQ8JUigs9D+W+c4LnNoRtPPKNRUiCYmP+Jfo2lfKCKw8qpraEeWU3uiNRO6zcyKQoXPR5htmzzLznke7b4YbXW3I1lIRzmgG02Udb58U+7TpwyN7XymCgH+wuPDthZVQvRZuEP+SnLtMicz9m5zASWOBiAcLmkuFlTKuHspSIhCBD0yUPKcxu81A+4YD78rA2vtwsUEday9WNyrShyrl60rWmA+SmbYZkQOwFJWArxRYYc5jGhA5ikxYw1rx3ei4NmeX/lKiwpZ9Ln1tV2Ae7sArvxuVLbJjqJRjW1vFXAyHpvLG+8MJ6T2Ubx5M2KDa2SN6vuIGxJ9WQM9Mk3Q7aCNiZONXllhqq24DmoLbQfW2rYWsOgHWjtOmIQMyMKdiHZDjoyIq5+U700nZ6odJAoYXPQBvFNiQ78d5jaXliBqLTJEqUCwi+LiH2mx92EmNKDsJL74Z613+3lf20pxkV1+erOrjj8pW00vsPaahKUM+05ssd5uwM7K482KWEf3TCwlg/o3e5ngto7qSMz7YteIgCsF1UOcsLk7F7MxWbvrPMY473ew0G+noVL8EPbkmEMftMSeL6HFub/zy+2JQ==`, `base64`)).toString();
    return patch;
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-compat-virtual-5fe64685a8/1/packages/plugin-compat/sources/patches/resolve.patch.ts
  var patch2;
  function getPatch2() {
    if (typeof patch2 === `undefined`)
      patch2 = require("zlib").brotliDecompressSync(Buffer.from(`G1QTIIzURnVBnGa0VPvr81orV8AFIqdU0sqrdcVgCdukgAZwi8a50gLk9+19Z2NcUILjmzXkzt4dzm5a6Yoys+/9qnKiaApXukOiuoyUaMcynG4X7X4vBaIE/PL30gwG6HSGJkLxb9PnLjfMr+748n7sM6C/NycK6ber/bX1reVVxta6W/31tZIhfrS+upoE/TPRHj0S/l0T59gTGdtKOp1OmMOJt9rhfucDdLJ2tgyfnO+u4YMkQAcYq/nebTcDmbXhqhgo6iQA4M3m4xya4Cos3p6klmkmQT+S4DLDZfwfMF+sUCx36KleOtaHLQfEIz0Bmncj/Ngi3lqOl4391EWEfIss6gVp3oDUGwsSZJKeOVONJWZg+Mue3KUMV3aMqYJ+7b2219D+GFDi8EV5y/Y+5J+He0oNjKAgqLsJziEsS9uIaCu3BHBKSXxNKKa2ShbfglcWoiiVT2kfGI7Gw+YJ/Sqy1H6wdFWtyVUQIa82JPwbeV25YKLzc5ZIFM6GCPSA+J9dTvJbs5LuuKnLP3f09gCu2jxqsAv6CA+ZySVaUJr2d3A70BC/uBCKr2OVrWgC3fSwb7NlfkgSEEiejrMGvhya9lMbVI6lMsFKN330A1/FOaefHQdNGLEZ3IwFF87H3xVlM0Xxsmbi/7A60oymRcIe0tH90alG6ez/yA7jwYotxuHWZdR+1HlMcddGHAV6QD/gXYPV0wnNv47I+5FGevzZFMqWSO8GU4nQ3FjsdgdJcD+c1rvudERKuLyd7bxiBpnsMDHsvPP4nXdXkld/gUNks3GAE1Otmb90bavDyiw4Mrx496Iw+jbLTgsCZGZXSZ9vM55C7KGe4HyJAKXEk0iT/Cj/PFwLJBN7pcP7ZFfYtUApGTWKkYhI9IE2zt/5ByH72wdvH+88b71zuv/FMCX3w6x5nzhY44Cg5IYv9LeKwHuHIWgPbfgrAcUxOlKkPRdQOIDF/aBuLPJAXD+TgxCNXx4jQxeR/qlBWVikFPfEI4rXMUc4kZ2w9KbPKYRvFUag0dVlVoyUP4zfidbTXAdZF88jAckl+NHjLFCNdX7EQ1PbLSOl+P+MqgwEOCi6dxgWZ7NCwJBjWKpk1LaxwKrhZ4aEC/0lMPJYe5S8xAakDcmA2kSS86GjEMTrv3VEu0S0YGZcxToMV524G4WAc4CReePePdipvs4aXRL5p+aeN96yfMGjsiTbQNxgbdRKc+keQ+NxYIEm1mBtEO29WrcbrqNbQRMR66KpGG4aG0NtmRyZ2JhUvu0paCklRlID8PT3gSiwZrqr4XZXoBBzBMrveWCuOg7iTgGDXDdbGi8XHkQf5KXDGFUxWueu5wkSa6gMWY1599g2piQjwBKIAPt4N5cOZdFBidz2feGwEAy1j1UydGxDSCCUsh314cUIIRV/dWCheceubL2gU8CibewmP7UxmN5kN4I7zfQhPxkP0NCcei8GXQpw4c3krEzW7PR2hgi/hqqqR58UJ/ZVfWxfcH5ZKMo4itkmPK0FCGxzzIRP20lK/gz28Y03sY233KvSVWUKl9rcbX6MbHjpUG8MvNlw72p6FwTejv92zgpnCxVJnIHHZhCBxNcHF5RTveRp513hUtTHHq4BIndlytZT5xoTSYfHKqKNr4o9kcGINIz6tZSKRdtbON3Ydr9cgqxHIeisMNIsvPg/IFMZuBbSqqDLeSO5dak1cGr76FtH2PC7hs0S0Oq3GsmF1Ga4YABAMGcdPAWzTk26B7cKV91I2b0V/GYvnsEQ1YGntRqi5EQqTlgZszbV/32GuZtUF49JOA/r4jAdwUOsbPo6mNoBlJPYjM5axrZaWQf33bFsLWqiyvvDOM4x0Ng802T7cuP2a3q98GWq6yiq6q3M77hcZlOUnmryctRYmI4Hb2F5XixFohkBmySCjU+M7/WQVE5YAtnlxiUJDhFN0y1tNeMWY9E0MfZi2rQ4eC72WXjsAA==`, `base64`)).toString();
    return patch2;
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-compat-virtual-5fe64685a8/1/packages/plugin-compat/sources/patches/typescript.patch.ts
  var patch3;
  function getPatch3() {
    if (typeof patch3 === `undefined`)
      patch3 = require("zlib").brotliDecompressSync(Buffer.from(``, `base64`)).toString();
    return patch3;
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-compat-virtual-5fe64685a8/1/packages/plugin-compat/sources/index.ts
  var PATCHES = new Map([
    [structUtils_exports.makeIdent(null, `fsevents`).identHash, getPatch],
    [structUtils_exports.makeIdent(null, `resolve`).identHash, getPatch2],
    [structUtils_exports.makeIdent(null, `typescript`).identHash, getPatch3]
  ]);
  var plugin2 = {
    hooks: {
      registerPackageExtensions: async (configuration, registerPackageExtension) => {
        for (const [descriptorStr, extensionData] of packageExtensions) {
          registerPackageExtension(structUtils_exports.parseDescriptor(descriptorStr, true), extensionData);
        }
      },
      getBuiltinPatch: async (project, name) => {
        var _a2;
        const TAG = `compat/`;
        if (!name.startsWith(TAG))
          return void 0;
        const ident = structUtils_exports.parseIdent(name.slice(TAG.length));
        const patch4 = (_a2 = PATCHES.get(ident.identHash)) == null ? void 0 : _a2();
        return typeof patch4 !== `undefined` ? patch4 : null;
      },
      reduceDependency: async (dependency, project, locator, initialDescriptor) => {
        const patch4 = PATCHES.get(dependency.identHash);
        if (typeof patch4 === `undefined`)
          return dependency;
        return structUtils_exports.makeDescriptor(dependency, structUtils_exports.makeRange({
          protocol: `patch:`,
          source: structUtils_exports.stringifyDescriptor(dependency),
          selector: `~builtin<compat/${structUtils_exports.stringifyIdent(dependency)}>`,
          params: null
        }));
      }
    }
  };
  var sources_default4 = plugin2;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-dlx-virtual-0ee854167a/1/packages/plugin-dlx/sources/index.ts
  var sources_exports8 = {};
  __export(sources_exports8, {
    default: () => sources_default5
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-dlx-virtual-0ee854167a/1/packages/plugin-dlx/sources/commands/create.ts
  var CreateCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.pkg = options_exports.String(`-p,--package`, {
        description: `The package to run the provided command from`
      });
      this.quiet = options_exports.Boolean(`-q,--quiet`, false, {
        description: `Only report critical errors instead of printing the full install logs`
      });
      this.command = options_exports.String();
      this.args = options_exports.Proxy();
    }
    async execute() {
      const flags = [];
      if (this.pkg)
        flags.push(`--package`, this.pkg);
      if (this.quiet)
        flags.push(`--quiet`);
      const ident = structUtils_exports.parseIdent(this.command);
      const modified = structUtils_exports.makeIdent(ident.scope, `create-${ident.name}`);
      return this.cli.run([`dlx`, ...flags, structUtils_exports.stringifyIdent(modified), ...this.args]);
    }
  };
  CreateCommand.paths = [
    [`create`]
  ];
  var create_default = CreateCommand;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-dlx-virtual-0ee854167a/1/packages/plugin-dlx/sources/commands/dlx.ts
  var DlxCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.packages = options_exports.Array(`-p,--package`, {
        description: `The package(s) to install before running the command`
      });
      this.quiet = options_exports.Boolean(`-q,--quiet`, false, {
        description: `Only report critical errors instead of printing the full install logs`
      });
      this.command = options_exports.String();
      this.args = options_exports.Proxy();
    }
    async execute() {
      Configuration.telemetry = null;
      return await xfs.mktempPromise(async (baseDir) => {
        var _a2;
        const tmpDir = ppath.join(baseDir, `dlx-${process.pid}`);
        await xfs.mkdirPromise(tmpDir);
        await xfs.writeFilePromise(ppath.join(tmpDir, `package.json`), `{}
`);
        await xfs.writeFilePromise(ppath.join(tmpDir, `yarn.lock`), ``);
        const targetYarnrc = ppath.join(tmpDir, `.yarnrc.yml`);
        const projectCwd = await Configuration.findProjectCwd(this.context.cwd, Filename.lockfile);
        const enableGlobalCache = !(await Configuration.find(this.context.cwd, null, {strict: false})).get(`enableGlobalCache`);
        const sourceYarnrc = projectCwd !== null ? ppath.join(projectCwd, `.yarnrc.yml`) : null;
        if (sourceYarnrc !== null && xfs.existsSync(sourceYarnrc)) {
          await xfs.copyFilePromise(sourceYarnrc, targetYarnrc);
          await Configuration.updateConfiguration(tmpDir, (current) => {
            const nextConfiguration = __spreadProps(__spreadValues({}, current), {
              enableGlobalCache,
              enableTelemetry: false
            });
            if (Array.isArray(current.plugins)) {
              nextConfiguration.plugins = current.plugins.map((plugin16) => {
                const sourcePath = typeof plugin16 === `string` ? plugin16 : plugin16.path;
                const remapPath = npath.isAbsolute(sourcePath) ? sourcePath : npath.resolve(npath.fromPortablePath(projectCwd), sourcePath);
                if (typeof plugin16 === `string`) {
                  return remapPath;
                } else {
                  return {path: remapPath, spec: plugin16.spec};
                }
              });
            }
            return nextConfiguration;
          });
        } else {
          await xfs.writeFilePromise(targetYarnrc, `enableGlobalCache: ${enableGlobalCache}
enableTelemetry: false
`);
        }
        const pkgs = (_a2 = this.packages) != null ? _a2 : [this.command];
        let command = structUtils_exports.parseDescriptor(this.command).name;
        const addExitCode = await this.cli.run([`add`, `--`, ...pkgs], {cwd: tmpDir, quiet: this.quiet});
        if (addExitCode !== 0)
          return addExitCode;
        if (!this.quiet)
          this.context.stdout.write(`
`);
        const configuration = await Configuration.find(tmpDir, this.context.plugins);
        const {project, workspace} = await Project.find(configuration, tmpDir);
        if (workspace === null)
          throw new WorkspaceRequiredError(project.cwd, tmpDir);
        await project.restoreInstallState();
        const binaries = await scriptUtils_exports.getWorkspaceAccessibleBinaries(workspace);
        if (binaries.has(command) === false && binaries.size === 1 && typeof this.packages === `undefined`)
          command = Array.from(binaries)[0][0];
        return await scriptUtils_exports.executeWorkspaceAccessibleBinary(workspace, command, this.args, {
          packageAccessibleBinaries: binaries,
          cwd: this.context.cwd,
          stdin: this.context.stdin,
          stdout: this.context.stdout,
          stderr: this.context.stderr
        });
      });
    }
  };
  DlxCommand.paths = [
    [`dlx`]
  ];
  DlxCommand.usage = Command.Usage({
    description: `run a package in a temporary environment`,
    details: `
      This command will install a package within a temporary environment, and run its binary script if it contains any. The binary will run within the current cwd.

      By default Yarn will download the package named \`command\`, but this can be changed through the use of the \`-p,--package\` flag which will instruct Yarn to still run the same command but from a different package.

      Using \`yarn dlx\` as a replacement of \`yarn add\` isn't recommended, as it makes your project non-deterministic (Yarn doesn't keep track of the packages installed through \`dlx\` - neither their name, nor their version).
    `,
    examples: [[
      `Use create-react-app to create a new React app`,
      `yarn dlx create-react-app ./my-app`
    ]]
  });
  var dlx_default = DlxCommand;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-dlx-virtual-0ee854167a/1/packages/plugin-dlx/sources/index.ts
  var plugin3 = {
    commands: [
      create_default,
      dlx_default
    ]
  };
  var sources_default5 = plugin3;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-file-virtual-8057b73875/1/packages/plugin-file/sources/index.ts
  var sources_exports9 = {};
  __export(sources_exports9, {
    default: () => sources_default6,
    fileUtils: () => fileUtils_exports
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-file-virtual-8057b73875/1/packages/plugin-file/sources/constants.ts
  var FILE_REGEXP = /^(?:[a-zA-Z]:[\\/]|\.{0,2}\/)/;
  var TARBALL_REGEXP = /^[^?]*\.(?:tar\.gz|tgz)(?:::.*)?$/;
  var PROTOCOL = `file:`;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-file-virtual-8057b73875/1/packages/plugin-file/sources/fileUtils.ts
  var fileUtils_exports = {};
  __export(fileUtils_exports, {
    makeArchiveFromLocator: () => makeArchiveFromLocator,
    makeBufferFromLocator: () => makeBufferFromLocator,
    makeLocator: () => makeLocator2,
    makeSpec: () => makeSpec,
    parseSpec: () => parseSpec
  });
  function parseSpec(spec) {
    const {params, selector} = structUtils_exports.parseRange(spec);
    const path3 = npath.toPortablePath(selector);
    const parentLocator = params && typeof params.locator === `string` ? structUtils_exports.parseLocator(params.locator) : null;
    return {parentLocator, path: path3};
  }
  function makeSpec({parentLocator, path: path3, folderHash, protocol}) {
    const parentLocatorSpread = parentLocator !== null ? {locator: structUtils_exports.stringifyLocator(parentLocator)} : {};
    const folderHashSpread = typeof folderHash !== `undefined` ? {hash: folderHash} : {};
    return structUtils_exports.makeRange({
      protocol,
      source: path3,
      selector: path3,
      params: __spreadValues(__spreadValues({}, folderHashSpread), parentLocatorSpread)
    });
  }
  function makeLocator2(ident, {parentLocator, path: path3, folderHash, protocol}) {
    return structUtils_exports.makeLocator(ident, makeSpec({parentLocator, path: path3, folderHash, protocol}));
  }
  async function makeArchiveFromLocator(locator, {protocol, fetchOptions, inMemory = false}) {
    const {parentLocator, path: path3} = structUtils_exports.parseFileStyleRange(locator.reference, {protocol});
    const parentFetch = ppath.isAbsolute(path3) ? {packageFs: new CwdFS(PortablePath.root), prefixPath: PortablePath.dot, localPath: PortablePath.root} : await fetchOptions.fetcher.fetch(parentLocator, fetchOptions);
    const effectiveParentFetch = parentFetch.localPath ? {packageFs: new CwdFS(PortablePath.root), prefixPath: ppath.relative(PortablePath.root, parentFetch.localPath)} : parentFetch;
    if (parentFetch !== effectiveParentFetch && parentFetch.releaseFs)
      parentFetch.releaseFs();
    const sourceFs = effectiveParentFetch.packageFs;
    const sourcePath = ppath.join(effectiveParentFetch.prefixPath, path3);
    return await miscUtils_exports.releaseAfterUseAsync(async () => {
      return await tgzUtils_exports.makeArchiveFromDirectory(sourcePath, {
        baseFs: sourceFs,
        prefixPath: structUtils_exports.getIdentVendorPath(locator),
        compressionLevel: fetchOptions.project.configuration.get(`compressionLevel`),
        inMemory
      });
    }, effectiveParentFetch.releaseFs);
  }
  async function makeBufferFromLocator(locator, {protocol, fetchOptions}) {
    const folderFs = await makeArchiveFromLocator(locator, {protocol, fetchOptions, inMemory: true});
    return folderFs.getBufferAndClose();
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-file-virtual-8057b73875/1/packages/plugin-file/sources/FileFetcher.ts
  var FileFetcher = class {
    supports(locator, opts) {
      if (!locator.reference.startsWith(PROTOCOL))
        return false;
      return true;
    }
    getLocalPath(locator, opts) {
      const {parentLocator, path: path3} = structUtils_exports.parseFileStyleRange(locator.reference, {protocol: PROTOCOL});
      if (ppath.isAbsolute(path3))
        return path3;
      const parentLocalPath = opts.fetcher.getLocalPath(parentLocator, opts);
      if (parentLocalPath === null)
        return null;
      return ppath.resolve(parentLocalPath, path3);
    }
    async fetch(locator, opts) {
      const expectedChecksum = opts.checksums.get(locator.locatorHash) || null;
      const [packageFs, releaseFs, checksum] = await opts.cache.fetchPackageFromCache(locator, expectedChecksum, {
        onHit: () => opts.report.reportCacheHit(locator),
        onMiss: () => opts.report.reportCacheMiss(locator, `${structUtils_exports.prettyLocator(opts.project.configuration, locator)} can't be found in the cache and will be fetched from the disk`),
        loader: () => this.fetchFromDisk(locator, opts),
        skipIntegrityCheck: opts.skipIntegrityCheck
      });
      return {
        packageFs,
        releaseFs,
        prefixPath: structUtils_exports.getIdentVendorPath(locator),
        localPath: this.getLocalPath(locator, opts),
        checksum
      };
    }
    async fetchFromDisk(locator, opts) {
      return makeArchiveFromLocator(locator, {protocol: PROTOCOL, fetchOptions: opts});
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-file-virtual-8057b73875/1/packages/plugin-file/sources/FileResolver.ts
  var CACHE_VERSION2 = 1;
  var FileResolver = class {
    supportsDescriptor(descriptor, opts) {
      if (descriptor.range.match(FILE_REGEXP))
        return true;
      if (!descriptor.range.startsWith(PROTOCOL))
        return false;
      return true;
    }
    supportsLocator(locator, opts) {
      if (!locator.reference.startsWith(PROTOCOL))
        return false;
      return true;
    }
    shouldPersistResolution(locator, opts) {
      return false;
    }
    bindDescriptor(descriptor, fromLocator, opts) {
      if (FILE_REGEXP.test(descriptor.range))
        descriptor = structUtils_exports.makeDescriptor(descriptor, `${PROTOCOL}${descriptor.range}`);
      return structUtils_exports.bindDescriptor(descriptor, {
        locator: structUtils_exports.stringifyLocator(fromLocator)
      });
    }
    getResolutionDependencies(descriptor, opts) {
      return [];
    }
    async getCandidates(descriptor, dependencies, opts) {
      if (!opts.fetchOptions)
        throw new Error(`Assertion failed: This resolver cannot be used unless a fetcher is configured`);
      const {path: path3, parentLocator} = parseSpec(descriptor.range);
      if (parentLocator === null)
        throw new Error(`Assertion failed: The descriptor should have been bound`);
      const archiveBuffer = await makeBufferFromLocator(structUtils_exports.makeLocator(descriptor, structUtils_exports.makeRange({
        protocol: PROTOCOL,
        source: path3,
        selector: path3,
        params: {
          locator: structUtils_exports.stringifyLocator(parentLocator)
        }
      })), {protocol: PROTOCOL, fetchOptions: opts.fetchOptions});
      const folderHash = hashUtils_exports.makeHash(`${CACHE_VERSION2}`, archiveBuffer).slice(0, 6);
      return [makeLocator2(descriptor, {parentLocator, path: path3, folderHash, protocol: PROTOCOL})];
    }
    async getSatisfying(descriptor, references, opts) {
      return null;
    }
    async resolve(locator, opts) {
      if (!opts.fetchOptions)
        throw new Error(`Assertion failed: This resolver cannot be used unless a fetcher is configured`);
      const packageFetch = await opts.fetchOptions.fetcher.fetch(locator, opts.fetchOptions);
      const manifest = await miscUtils_exports.releaseAfterUseAsync(async () => {
        return await Manifest.find(packageFetch.prefixPath, {baseFs: packageFetch.packageFs});
      }, packageFetch.releaseFs);
      return __spreadProps(__spreadValues({}, locator), {
        version: manifest.version || `0.0.0`,
        languageName: opts.project.configuration.get(`defaultLanguageName`),
        linkType: LinkType.HARD,
        dependencies: manifest.dependencies,
        peerDependencies: manifest.peerDependencies,
        dependenciesMeta: manifest.dependenciesMeta,
        peerDependenciesMeta: manifest.peerDependenciesMeta,
        bin: manifest.bin
      });
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-file-virtual-8057b73875/1/packages/plugin-file/sources/TarballFileFetcher.ts
  var TarballFileFetcher = class {
    supports(locator, opts) {
      if (!TARBALL_REGEXP.test(locator.reference))
        return false;
      if (locator.reference.startsWith(PROTOCOL))
        return true;
      return false;
    }
    getLocalPath(locator, opts) {
      return null;
    }
    async fetch(locator, opts) {
      const expectedChecksum = opts.checksums.get(locator.locatorHash) || null;
      const [packageFs, releaseFs, checksum] = await opts.cache.fetchPackageFromCache(locator, expectedChecksum, {
        onHit: () => opts.report.reportCacheHit(locator),
        onMiss: () => opts.report.reportCacheMiss(locator, `${structUtils_exports.prettyLocator(opts.project.configuration, locator)} can't be found in the cache and will be fetched from the disk`),
        loader: () => this.fetchFromDisk(locator, opts),
        skipIntegrityCheck: opts.skipIntegrityCheck
      });
      return {
        packageFs,
        releaseFs,
        prefixPath: structUtils_exports.getIdentVendorPath(locator),
        checksum
      };
    }
    async fetchFromDisk(locator, opts) {
      const {parentLocator, path: path3} = structUtils_exports.parseFileStyleRange(locator.reference, {protocol: PROTOCOL});
      const parentFetch = ppath.isAbsolute(path3) ? {packageFs: new CwdFS(PortablePath.root), prefixPath: PortablePath.dot, localPath: PortablePath.root} : await opts.fetcher.fetch(parentLocator, opts);
      const effectiveParentFetch = parentFetch.localPath ? {packageFs: new CwdFS(PortablePath.root), prefixPath: ppath.relative(PortablePath.root, parentFetch.localPath)} : parentFetch;
      if (parentFetch !== effectiveParentFetch && parentFetch.releaseFs)
        parentFetch.releaseFs();
      const sourceFs = effectiveParentFetch.packageFs;
      const sourcePath = ppath.join(effectiveParentFetch.prefixPath, path3);
      const sourceBuffer = await sourceFs.readFilePromise(sourcePath);
      return await miscUtils_exports.releaseAfterUseAsync(async () => {
        return await tgzUtils_exports.convertToZip(sourceBuffer, {
          compressionLevel: opts.project.configuration.get(`compressionLevel`),
          prefixPath: structUtils_exports.getIdentVendorPath(locator),
          stripComponents: 1
        });
      }, effectiveParentFetch.releaseFs);
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-file-virtual-8057b73875/1/packages/plugin-file/sources/TarballFileResolver.ts
  var TarballFileResolver = class {
    supportsDescriptor(descriptor, opts) {
      if (!TARBALL_REGEXP.test(descriptor.range))
        return false;
      if (descriptor.range.startsWith(PROTOCOL))
        return true;
      if (FILE_REGEXP.test(descriptor.range))
        return true;
      return false;
    }
    supportsLocator(locator, opts) {
      if (!TARBALL_REGEXP.test(locator.reference))
        return false;
      if (locator.reference.startsWith(PROTOCOL))
        return true;
      return false;
    }
    shouldPersistResolution(locator, opts) {
      return true;
    }
    bindDescriptor(descriptor, fromLocator, opts) {
      if (FILE_REGEXP.test(descriptor.range))
        descriptor = structUtils_exports.makeDescriptor(descriptor, `${PROTOCOL}${descriptor.range}`);
      return structUtils_exports.bindDescriptor(descriptor, {
        locator: structUtils_exports.stringifyLocator(fromLocator)
      });
    }
    getResolutionDependencies(descriptor, opts) {
      return [];
    }
    async getCandidates(descriptor, dependencies, opts) {
      let path3 = descriptor.range;
      if (path3.startsWith(PROTOCOL))
        path3 = path3.slice(PROTOCOL.length);
      return [structUtils_exports.makeLocator(descriptor, `${PROTOCOL}${npath.toPortablePath(path3)}`)];
    }
    async getSatisfying(descriptor, references, opts) {
      return null;
    }
    async resolve(locator, opts) {
      if (!opts.fetchOptions)
        throw new Error(`Assertion failed: This resolver cannot be used unless a fetcher is configured`);
      const packageFetch = await opts.fetchOptions.fetcher.fetch(locator, opts.fetchOptions);
      const manifest = await miscUtils_exports.releaseAfterUseAsync(async () => {
        return await Manifest.find(packageFetch.prefixPath, {baseFs: packageFetch.packageFs});
      }, packageFetch.releaseFs);
      return __spreadProps(__spreadValues({}, locator), {
        version: manifest.version || `0.0.0`,
        languageName: opts.project.configuration.get(`defaultLanguageName`),
        linkType: LinkType.HARD,
        dependencies: manifest.dependencies,
        peerDependencies: manifest.peerDependencies,
        dependenciesMeta: manifest.dependenciesMeta,
        peerDependenciesMeta: manifest.peerDependenciesMeta,
        bin: manifest.bin
      });
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-file-virtual-8057b73875/1/packages/plugin-file/sources/index.ts
  var plugin4 = {
    fetchers: [
      TarballFileFetcher,
      FileFetcher
    ],
    resolvers: [
      TarballFileResolver,
      FileResolver
    ]
  };
  var sources_default6 = plugin4;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-git-virtual-10be4489c8/1/packages/plugin-git/sources/index.ts
  var sources_exports10 = {};
  __export(sources_exports10, {
    default: () => sources_default7,
    gitUtils: () => gitUtils_exports
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-git-virtual-10be4489c8/1/packages/plugin-git/sources/gitUtils.ts
  var gitUtils_exports = {};
  __export(gitUtils_exports, {
    TreeishProtocols: () => TreeishProtocols,
    clone: () => clone,
    isGitUrl: () => isGitUrl,
    lsRemote: () => lsRemote,
    normalizeLocator: () => normalizeLocator,
    normalizeRepoUrl: () => normalizeRepoUrl,
    resolveUrl: () => resolveUrl,
    splitRepoUrl: () => splitRepoUrl
  });
  var import_git_url_parse = __toModule(require_lib8());
  var import_querystring2 = __toModule(require("querystring"));
  var import_semver10 = __toModule(require_semver2());
  var import_url4 = __toModule(require("url"));
  function makeGitEnvironment() {
    return __spreadProps(__spreadValues({}, process.env), {
      GIT_SSH_COMMAND: `ssh -o BatchMode=yes`
    });
  }
  var gitPatterns = [
    /^ssh:/,
    /^git(?:\+[^:]+)?:/,
    /^(?:git\+)?https?:[^#]+\/[^#]+(?:\.git)(?:#.*)?$/,
    /^git@[^#]+\/[^#]+\.git(?:#.*)?$/,
    /^(?:github:|https:\/\/github\.com\/)?(?!\.{1,2}\/)([a-zA-Z._0-9-]+)\/(?!\.{1,2}(?:#|$))([a-zA-Z._0-9-]+?)(?:\.git)?(?:#.*)?$/,
    /^https:\/\/github\.com\/(?!\.{1,2}\/)([a-zA-Z0-9._-]+)\/(?!\.{1,2}(?:#|$))([a-zA-Z0-9._-]+?)\/tarball\/(.+)?$/
  ];
  var TreeishProtocols;
  (function(TreeishProtocols2) {
    TreeishProtocols2["Commit"] = `commit`;
    TreeishProtocols2["Head"] = `head`;
    TreeishProtocols2["Tag"] = `tag`;
    TreeishProtocols2["Semver"] = `semver`;
  })(TreeishProtocols || (TreeishProtocols = {}));
  function isGitUrl(url) {
    return url ? gitPatterns.some((pattern) => !!url.match(pattern)) : false;
  }
  function splitRepoUrl(url) {
    url = normalizeRepoUrl(url);
    const hashIndex = url.indexOf(`#`);
    if (hashIndex === -1) {
      return {
        repo: url,
        treeish: {
          protocol: TreeishProtocols.Head,
          request: `HEAD`
        },
        extra: {}
      };
    }
    const repo = url.slice(0, hashIndex);
    const subsequent = url.slice(hashIndex + 1);
    if (subsequent.match(/^[a-z]+=/)) {
      const extra = import_querystring2.default.parse(subsequent);
      for (const [key, value] of Object.entries(extra))
        if (typeof value !== `string`)
          throw new Error(`Assertion failed: The ${key} parameter must be a literal string`);
      const requestedProtocol = Object.values(TreeishProtocols).find((protocol2) => {
        return Object.prototype.hasOwnProperty.call(extra, protocol2);
      });
      let protocol;
      let request2;
      if (typeof requestedProtocol !== `undefined`) {
        protocol = requestedProtocol;
        request2 = extra[requestedProtocol];
      } else {
        protocol = TreeishProtocols.Head;
        request2 = `HEAD`;
      }
      for (const key of Object.values(TreeishProtocols))
        delete extra[key];
      return {
        repo,
        treeish: {protocol, request: request2},
        extra
      };
    } else {
      const colonIndex = subsequent.indexOf(`:`);
      let protocol;
      let request2;
      if (colonIndex === -1) {
        protocol = null;
        request2 = subsequent;
      } else {
        protocol = subsequent.slice(0, colonIndex);
        request2 = subsequent.slice(colonIndex + 1);
      }
      return {
        repo,
        treeish: {protocol, request: request2},
        extra: {}
      };
    }
  }
  function normalizeRepoUrl(url, {git = false} = {}) {
    var _a2;
    url = url.replace(/^git\+https:/, `https:`);
    url = url.replace(/^(?:github:|https:\/\/github\.com\/)?(?!\.{1,2}\/)([a-zA-Z0-9._-]+)\/(?!\.{1,2}(?:#|$))([a-zA-Z0-9._-]+?)(?:\.git)?(#.*)?$/, `https://github.com/$1/$2.git$3`);
    url = url.replace(/^https:\/\/github\.com\/(?!\.{1,2}\/)([a-zA-Z0-9._-]+)\/(?!\.{1,2}(?:#|$))([a-zA-Z0-9._-]+?)\/tarball\/(.+)?$/, `https://github.com/$1/$2.git#$3`);
    if (git) {
      url = url.replace(/^git\+([^:]+):/, `$1:`);
      let parsedUrl;
      try {
        parsedUrl = import_url4.default.parse(url);
      } catch {
        parsedUrl = null;
      }
      if (parsedUrl && parsedUrl.protocol === `ssh:` && ((_a2 = parsedUrl.path) == null ? void 0 : _a2.startsWith(`/:`))) {
        url = url.replace(/^ssh:\/\//, ``);
      }
    }
    return url;
  }
  function normalizeLocator(locator) {
    return structUtils_exports.makeLocator(locator, normalizeRepoUrl(locator.reference));
  }
  async function lsRemote(repo, configuration) {
    const normalizedRepoUrl = normalizeRepoUrl(repo, {git: true});
    const networkSettings = httpUtils_exports.getNetworkSettings(`https://${(0, import_git_url_parse.default)(normalizedRepoUrl).resource}`, {configuration});
    if (!networkSettings.enableNetwork)
      throw new Error(`Request to '${normalizedRepoUrl}' has been blocked because of your configuration settings`);
    let res;
    try {
      res = await execUtils_exports.execvp(`git`, [`ls-remote`, normalizedRepoUrl], {
        cwd: configuration.startingCwd,
        env: makeGitEnvironment(),
        strict: true
      });
    } catch (error) {
      error.message = `Listing the refs for ${repo} failed`;
      throw error;
    }
    const refs = new Map();
    const matcher = /^([a-f0-9]{40})\t([^\n]+)/gm;
    let match2;
    while ((match2 = matcher.exec(res.stdout)) !== null)
      refs.set(match2[2], match2[1]);
    return refs;
  }
  async function resolveUrl(url, configuration) {
    const {repo, treeish: {protocol, request: request2}, extra} = splitRepoUrl(url);
    const refs = await lsRemote(repo, configuration);
    const resolve = (protocol2, request3) => {
      switch (protocol2) {
        case TreeishProtocols.Commit: {
          if (!request3.match(/^[a-f0-9]{40}$/))
            throw new Error(`Invalid commit hash`);
          return import_querystring2.default.stringify(__spreadProps(__spreadValues({}, extra), {
            commit: request3
          }));
        }
        case TreeishProtocols.Head: {
          const head = refs.get(request3 === `HEAD` ? request3 : `refs/heads/${request3}`);
          if (typeof head === `undefined`)
            throw new Error(`Unknown head ("${request3}")`);
          return import_querystring2.default.stringify(__spreadProps(__spreadValues({}, extra), {
            commit: head
          }));
        }
        case TreeishProtocols.Tag: {
          const tag = refs.get(`refs/tags/${request3}`);
          if (typeof tag === `undefined`)
            throw new Error(`Unknown tag ("${request3}")`);
          return import_querystring2.default.stringify(__spreadProps(__spreadValues({}, extra), {
            commit: tag
          }));
        }
        case TreeishProtocols.Semver: {
          const validRange2 = semverUtils_exports.validRange(request3);
          if (!validRange2)
            throw new Error(`Invalid range ("${request3}")`);
          const semverTags = new Map([...refs.entries()].filter(([ref]) => {
            return ref.startsWith(`refs/tags/`);
          }).map(([ref, hash]) => {
            return [import_semver10.default.parse(ref.slice(10)), hash];
          }).filter((entry) => {
            return entry[0] !== null;
          }));
          const bestVersion = import_semver10.default.maxSatisfying([...semverTags.keys()], validRange2);
          if (bestVersion === null)
            throw new Error(`No matching range ("${request3}")`);
          return import_querystring2.default.stringify(__spreadProps(__spreadValues({}, extra), {
            commit: semverTags.get(bestVersion)
          }));
        }
        case null: {
          let result;
          if ((result = tryResolve(TreeishProtocols.Commit, request3)) !== null)
            return result;
          if ((result = tryResolve(TreeishProtocols.Tag, request3)) !== null)
            return result;
          if ((result = tryResolve(TreeishProtocols.Head, request3)) !== null)
            return result;
          if (request3.match(/^[a-f0-9]+$/)) {
            throw new Error(`Couldn't resolve "${request3}" as either a commit, a tag, or a head - if a commit, use the 40-characters commit hash`);
          } else {
            throw new Error(`Couldn't resolve "${request3}" as either a commit, a tag, or a head`);
          }
        }
        default: {
          throw new Error(`Invalid Git resolution protocol ("${protocol2}")`);
        }
      }
    };
    const tryResolve = (protocol2, request3) => {
      try {
        return resolve(protocol2, request3);
      } catch (err) {
        return null;
      }
    };
    return `${repo}#${resolve(protocol, request2)}`;
  }
  async function clone(url, configuration) {
    return await configuration.getLimit(`cloneConcurrency`)(async () => {
      const {repo, treeish: {protocol, request: request2}} = splitRepoUrl(url);
      if (protocol !== `commit`)
        throw new Error(`Invalid treeish protocol when cloning`);
      const normalizedRepoUrl = normalizeRepoUrl(repo, {git: true});
      if (httpUtils_exports.getNetworkSettings(`https://${(0, import_git_url_parse.default)(normalizedRepoUrl).resource}`, {configuration}).enableNetwork === false)
        throw new Error(`Request to '${normalizedRepoUrl}' has been blocked because of your configuration settings`);
      const directory = await xfs.mktempPromise();
      const execOpts = {cwd: directory, env: makeGitEnvironment(), strict: true};
      try {
        await execUtils_exports.execvp(`git`, [`clone`, `-c core.autocrlf=false`, normalizedRepoUrl, npath.fromPortablePath(directory)], execOpts);
        await execUtils_exports.execvp(`git`, [`checkout`, `${request2}`], execOpts);
      } catch (error) {
        error.message = `Repository clone failed: ${error.message}`;
        throw error;
      }
      return directory;
    });
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-git-virtual-10be4489c8/1/packages/plugin-git/sources/GitFetcher.ts
  var GitFetcher = class {
    supports(locator, opts) {
      return isGitUrl(locator.reference);
    }
    getLocalPath(locator, opts) {
      return null;
    }
    async fetch(locator, opts) {
      const expectedChecksum = opts.checksums.get(locator.locatorHash) || null;
      const normalizedLocator = normalizeLocator(locator);
      const checksums = new Map(opts.checksums);
      checksums.set(normalizedLocator.locatorHash, expectedChecksum);
      const nextOpts = __spreadProps(__spreadValues({}, opts), {checksums});
      const result = await this.downloadHosted(normalizedLocator, nextOpts);
      if (result !== null)
        return result;
      const [packageFs, releaseFs, checksum] = await opts.cache.fetchPackageFromCache(locator, expectedChecksum, {
        onHit: () => opts.report.reportCacheHit(locator),
        onMiss: () => opts.report.reportCacheMiss(locator, `${structUtils_exports.prettyLocator(opts.project.configuration, locator)} can't be found in the cache and will be fetched from the remote repository`),
        loader: () => this.cloneFromRemote(normalizedLocator, nextOpts),
        skipIntegrityCheck: opts.skipIntegrityCheck
      });
      return {
        packageFs,
        releaseFs,
        prefixPath: structUtils_exports.getIdentVendorPath(locator),
        checksum
      };
    }
    async downloadHosted(locator, opts) {
      return opts.project.configuration.reduceHook((hooks) => {
        return hooks.fetchHostedRepository;
      }, null, locator, opts);
    }
    async cloneFromRemote(locator, opts) {
      const cloneTarget = await clone(locator.reference, opts.project.configuration);
      const repoUrlParts = splitRepoUrl(locator.reference);
      const packagePath = ppath.join(cloneTarget, `package.tgz`);
      await scriptUtils_exports.prepareExternalProject(cloneTarget, packagePath, {
        configuration: opts.project.configuration,
        report: opts.report,
        workspace: repoUrlParts.extra.workspace,
        locator
      });
      const sourceBuffer = await xfs.readFilePromise(packagePath);
      return await miscUtils_exports.releaseAfterUseAsync(async () => {
        return await tgzUtils_exports.convertToZip(sourceBuffer, {
          compressionLevel: opts.project.configuration.get(`compressionLevel`),
          prefixPath: structUtils_exports.getIdentVendorPath(locator),
          stripComponents: 1
        });
      });
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-git-virtual-10be4489c8/1/packages/plugin-git/sources/GitResolver.ts
  var GitResolver = class {
    supportsDescriptor(descriptor, opts) {
      return isGitUrl(descriptor.range);
    }
    supportsLocator(locator, opts) {
      return isGitUrl(locator.reference);
    }
    shouldPersistResolution(locator, opts) {
      return true;
    }
    bindDescriptor(descriptor, fromLocator, opts) {
      return descriptor;
    }
    getResolutionDependencies(descriptor, opts) {
      return [];
    }
    async getCandidates(descriptor, dependencies, opts) {
      const reference = await resolveUrl(descriptor.range, opts.project.configuration);
      const locator = structUtils_exports.makeLocator(descriptor, reference);
      return [locator];
    }
    async getSatisfying(descriptor, references, opts) {
      return null;
    }
    async resolve(locator, opts) {
      if (!opts.fetchOptions)
        throw new Error(`Assertion failed: This resolver cannot be used unless a fetcher is configured`);
      const packageFetch = await opts.fetchOptions.fetcher.fetch(locator, opts.fetchOptions);
      const manifest = await miscUtils_exports.releaseAfterUseAsync(async () => {
        return await Manifest.find(packageFetch.prefixPath, {baseFs: packageFetch.packageFs});
      }, packageFetch.releaseFs);
      return __spreadProps(__spreadValues({}, locator), {
        version: manifest.version || `0.0.0`,
        languageName: opts.project.configuration.get(`defaultLanguageName`),
        linkType: LinkType.HARD,
        dependencies: manifest.dependencies,
        peerDependencies: manifest.peerDependencies,
        dependenciesMeta: manifest.dependenciesMeta,
        peerDependenciesMeta: manifest.peerDependenciesMeta,
        bin: manifest.bin
      });
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-git-virtual-10be4489c8/1/packages/plugin-git/sources/index.ts
  var plugin5 = {
    configuration: {
      cloneConcurrency: {
        description: `Maximal number of concurrent clones`,
        type: SettingsType.NUMBER,
        default: 2
      }
    },
    fetchers: [
      GitFetcher
    ],
    resolvers: [
      GitResolver
    ]
  };
  var sources_default7 = plugin5;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-github-virtual-63e7e81f62/1/packages/plugin-github/sources/index.ts
  var sources_exports11 = {};
  __export(sources_exports11, {
    default: () => sources_default8
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-github-virtual-63e7e81f62/1/packages/plugin-github/sources/githubUtils.ts
  var import_querystring3 = __toModule(require("querystring"));
  var githubPatterns = [
    /^https?:\/\/(?:([^/]+?)@)?github.com\/([^/#]+)\/([^/#]+)\/tarball\/([^/#]+)(?:#(.*))?$/,
    /^https?:\/\/(?:([^/]+?)@)?github.com\/([^/#]+)\/([^/#]+?)(?:\.git)?(?:#(.*))?$/
  ];
  function isGithubUrl(url) {
    return url ? githubPatterns.some((pattern) => !!url.match(pattern)) : false;
  }
  function parseGithubUrl(urlStr) {
    let match2;
    for (const pattern of githubPatterns) {
      match2 = urlStr.match(pattern);
      if (match2) {
        break;
      }
    }
    if (!match2)
      throw new Error(invalidGithubUrlMessage(urlStr));
    let [, auth, username, reponame, treeish = `master`] = match2;
    const {commit} = import_querystring3.default.parse(treeish);
    treeish = commit || treeish.replace(/[^:]*:/, ``);
    return {auth, username, reponame, treeish};
  }
  function invalidGithubUrlMessage(url) {
    return `Input cannot be parsed as a valid GitHub URL ('${url}').`;
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-github-virtual-63e7e81f62/1/packages/plugin-github/sources/GithubFetcher.ts
  var GithubFetcher = class {
    supports(locator, opts) {
      if (!isGithubUrl(locator.reference))
        return false;
      return true;
    }
    getLocalPath(locator, opts) {
      return null;
    }
    async fetch(locator, opts) {
      const expectedChecksum = opts.checksums.get(locator.locatorHash) || null;
      const [packageFs, releaseFs, checksum] = await opts.cache.fetchPackageFromCache(locator, expectedChecksum, {
        onHit: () => opts.report.reportCacheHit(locator),
        onMiss: () => opts.report.reportCacheMiss(locator, `${structUtils_exports.prettyLocator(opts.project.configuration, locator)} can't be found in the cache and will be fetched from GitHub`),
        loader: () => this.fetchFromNetwork(locator, opts),
        skipIntegrityCheck: opts.skipIntegrityCheck
      });
      return {
        packageFs,
        releaseFs,
        prefixPath: structUtils_exports.getIdentVendorPath(locator),
        checksum
      };
    }
    async fetchFromNetwork(locator, opts) {
      const sourceBuffer = await httpUtils_exports.get(this.getLocatorUrl(locator, opts), {
        configuration: opts.project.configuration
      });
      return await xfs.mktempPromise(async (extractPath) => {
        const extractTarget = new CwdFS(extractPath);
        await tgzUtils_exports.extractArchiveTo(sourceBuffer, extractTarget, {
          stripComponents: 1
        });
        const repoUrlParts = gitUtils_exports.splitRepoUrl(locator.reference);
        const packagePath = ppath.join(extractPath, `package.tgz`);
        await scriptUtils_exports.prepareExternalProject(extractPath, packagePath, {
          configuration: opts.project.configuration,
          report: opts.report,
          workspace: repoUrlParts.extra.workspace,
          locator
        });
        const packedBuffer = await xfs.readFilePromise(packagePath);
        return await tgzUtils_exports.convertToZip(packedBuffer, {
          compressionLevel: opts.project.configuration.get(`compressionLevel`),
          prefixPath: structUtils_exports.getIdentVendorPath(locator),
          stripComponents: 1
        });
      });
    }
    getLocatorUrl(locator, opts) {
      const {auth, username, reponame, treeish} = parseGithubUrl(locator.reference);
      return `https://${auth ? `${auth}@` : ``}github.com/${username}/${reponame}/archive/${treeish}.tar.gz`;
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-github-virtual-63e7e81f62/1/packages/plugin-github/sources/index.ts
  var plugin6 = {
    hooks: {
      async fetchHostedRepository(previous, locator, opts) {
        if (previous !== null)
          return previous;
        const fetcher = new GithubFetcher();
        if (!fetcher.supports(locator, opts))
          return null;
        try {
          return await fetcher.fetch(locator, opts);
        } catch (error) {
          return null;
        }
      }
    }
  };
  var sources_default8 = plugin6;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-http-virtual-efdd0ad8a8/1/packages/plugin-http/sources/index.ts
  var sources_exports12 = {};
  __export(sources_exports12, {
    default: () => sources_default9
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-http-virtual-efdd0ad8a8/1/packages/plugin-http/sources/constants.ts
  var TARBALL_REGEXP2 = /^[^?]*\.(?:tar\.gz|tgz)(?:\?.*)?$/;
  var PROTOCOL_REGEXP = /^https?:/;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-http-virtual-efdd0ad8a8/1/packages/plugin-http/sources/TarballHttpFetcher.ts
  var TarballHttpFetcher = class {
    supports(locator, opts) {
      if (!TARBALL_REGEXP2.test(locator.reference))
        return false;
      if (PROTOCOL_REGEXP.test(locator.reference))
        return true;
      return false;
    }
    getLocalPath(locator, opts) {
      return null;
    }
    async fetch(locator, opts) {
      const expectedChecksum = opts.checksums.get(locator.locatorHash) || null;
      const [packageFs, releaseFs, checksum] = await opts.cache.fetchPackageFromCache(locator, expectedChecksum, {
        onHit: () => opts.report.reportCacheHit(locator),
        onMiss: () => opts.report.reportCacheMiss(locator, `${structUtils_exports.prettyLocator(opts.project.configuration, locator)} can't be found in the cache and will be fetched from the remote server`),
        loader: () => this.fetchFromNetwork(locator, opts),
        skipIntegrityCheck: opts.skipIntegrityCheck
      });
      return {
        packageFs,
        releaseFs,
        prefixPath: structUtils_exports.getIdentVendorPath(locator),
        checksum
      };
    }
    async fetchFromNetwork(locator, opts) {
      const sourceBuffer = await httpUtils_exports.get(locator.reference, {
        configuration: opts.project.configuration
      });
      return await tgzUtils_exports.convertToZip(sourceBuffer, {
        compressionLevel: opts.project.configuration.get(`compressionLevel`),
        prefixPath: structUtils_exports.getIdentVendorPath(locator),
        stripComponents: 1
      });
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-http-virtual-efdd0ad8a8/1/packages/plugin-http/sources/TarballHttpResolver.ts
  var TarballHttpResolver = class {
    supportsDescriptor(descriptor, opts) {
      if (!TARBALL_REGEXP2.test(descriptor.range))
        return false;
      if (PROTOCOL_REGEXP.test(descriptor.range))
        return true;
      return false;
    }
    supportsLocator(locator, opts) {
      if (!TARBALL_REGEXP2.test(locator.reference))
        return false;
      if (PROTOCOL_REGEXP.test(locator.reference))
        return true;
      return false;
    }
    shouldPersistResolution(locator, opts) {
      return true;
    }
    bindDescriptor(descriptor, fromLocator, opts) {
      return descriptor;
    }
    getResolutionDependencies(descriptor, opts) {
      return [];
    }
    async getCandidates(descriptor, dependencies, opts) {
      return [structUtils_exports.convertDescriptorToLocator(descriptor)];
    }
    async getSatisfying(descriptor, references, opts) {
      return null;
    }
    async resolve(locator, opts) {
      if (!opts.fetchOptions)
        throw new Error(`Assertion failed: This resolver cannot be used unless a fetcher is configured`);
      const packageFetch = await opts.fetchOptions.fetcher.fetch(locator, opts.fetchOptions);
      const manifest = await miscUtils_exports.releaseAfterUseAsync(async () => {
        return await Manifest.find(packageFetch.prefixPath, {baseFs: packageFetch.packageFs});
      }, packageFetch.releaseFs);
      return __spreadProps(__spreadValues({}, locator), {
        version: manifest.version || `0.0.0`,
        languageName: opts.project.configuration.get(`defaultLanguageName`),
        linkType: LinkType.HARD,
        dependencies: manifest.dependencies,
        peerDependencies: manifest.peerDependencies,
        dependenciesMeta: manifest.dependenciesMeta,
        peerDependenciesMeta: manifest.peerDependenciesMeta,
        bin: manifest.bin
      });
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-http-virtual-efdd0ad8a8/1/packages/plugin-http/sources/index.ts
  var plugin7 = {
    fetchers: [
      TarballHttpFetcher
    ],
    resolvers: [
      TarballHttpResolver
    ]
  };
  var sources_default9 = plugin7;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-init-virtual-bb60ce87e8/1/packages/plugin-init/sources/index.ts
  var sources_exports13 = {};
  __export(sources_exports13, {
    default: () => sources_default10
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-init-virtual-bb60ce87e8/1/packages/plugin-init/sources/commands/init.ts
  var import_merge = __toModule(require_merge4());
  var import_util9 = __toModule(require("util"));
  var InitCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.private = options_exports.Boolean(`-p,--private`, false, {
        description: `Initialize a private package`
      });
      this.workspace = options_exports.Boolean(`-w,--workspace`, false, {
        description: `Initialize a workspace root with a \`packages/\` directory`
      });
      this.install = options_exports.String(`-i,--install`, false, {
        tolerateBoolean: true,
        description: `Initialize a package with a specific bundle that will be locked in the project`
      });
      this.usev2 = options_exports.Boolean(`-2`, false, {hidden: true});
      this.yes = options_exports.Boolean(`-y,--yes`, {hidden: true});
      this.assumeFreshProject = options_exports.Boolean(`--assume-fresh-project`, false, {hidden: true});
    }
    async execute() {
      if (xfs.existsSync(ppath.join(this.context.cwd, Manifest.fileName)))
        throw new UsageError(`A package.json already exists in the specified directory`);
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const install = this.install ? this.install === true ? `latest` : this.install : null;
      if (install !== null) {
        return await this.executeProxy(configuration, install);
      } else {
        return await this.executeRegular(configuration);
      }
    }
    async executeProxy(configuration, version) {
      if (configuration.get(`yarnPath`) !== null)
        throw new UsageError(`Cannot use the --install flag when the current directory already uses yarnPath (from ${configuration.sources.get(`yarnPath`)})`);
      if (configuration.projectCwd !== null)
        throw new UsageError(`Cannot use the --install flag when the current directory is already part of a project`);
      if (!xfs.existsSync(this.context.cwd))
        await xfs.mkdirPromise(this.context.cwd, {recursive: true});
      const lockfilePath = ppath.join(this.context.cwd, configuration.get(`lockfileFilename`));
      if (!xfs.existsSync(lockfilePath))
        await xfs.writeFilePromise(lockfilePath, ``);
      const versionExitCode = await this.cli.run([`set`, `version`, version]);
      if (versionExitCode !== 0)
        return versionExitCode;
      this.context.stdout.write(`
`);
      const args = [`--assume-fresh-project`];
      if (this.private)
        args.push(`-p`);
      if (this.workspace)
        args.push(`-w`);
      if (this.yes)
        args.push(`-y`);
      return await xfs.mktempPromise(async (binFolder) => {
        const {code} = await execUtils_exports.pipevp(`yarn`, [`init`, ...args], {
          cwd: this.context.cwd,
          stdin: this.context.stdin,
          stdout: this.context.stdout,
          stderr: this.context.stderr,
          env: await scriptUtils_exports.makeScriptEnv({binFolder})
        });
        return code;
      });
    }
    async executeRegular(configuration) {
      let existingProject = null;
      if (!this.assumeFreshProject) {
        try {
          existingProject = await Project.find(configuration, this.context.cwd);
        } catch {
          existingProject = null;
        }
      }
      if (!xfs.existsSync(this.context.cwd))
        await xfs.mkdirPromise(this.context.cwd, {recursive: true});
      const manifest = new Manifest();
      const fields = Object.fromEntries(configuration.get(`initFields`).entries());
      manifest.load(fields);
      manifest.name = structUtils_exports.makeIdent(configuration.get(`initScope`), ppath.basename(this.context.cwd));
      manifest.private = this.private || this.workspace;
      if (this.workspace) {
        await xfs.mkdirPromise(ppath.join(this.context.cwd, `packages`), {recursive: true});
        manifest.workspaceDefinitions = [{
          pattern: `packages/*`
        }];
      }
      const serialized = {};
      manifest.exportTo(serialized);
      import_util9.inspect.styles.name = `cyan`;
      this.context.stdout.write(`${(0, import_util9.inspect)(serialized, {
        depth: Infinity,
        colors: true,
        compact: false
      })}
`);
      const manifestPath = ppath.join(this.context.cwd, Manifest.fileName);
      await xfs.changeFilePromise(manifestPath, `${JSON.stringify(serialized, null, 2)}
`);
      const readmePath = ppath.join(this.context.cwd, `README.md`);
      if (!xfs.existsSync(readmePath))
        await xfs.writeFilePromise(readmePath, `# ${structUtils_exports.stringifyIdent(manifest.name)}
`);
      if (!existingProject) {
        const lockfilePath = ppath.join(this.context.cwd, Filename.lockfile);
        await xfs.writeFilePromise(lockfilePath, ``);
        const gitignoreLines = [
          `/.yarn/*`,
          `!/.yarn/patches`,
          `!/.yarn/plugins`,
          `!/.yarn/releases`,
          `!/.yarn/sdks`,
          ``,
          `# Swap the comments on the following lines if you don't wish to use zero-installs`,
          `# Documentation here: https://yarnpkg.com/features/zero-installs`,
          `!/.yarn/cache`,
          `#/.pnp.*`
        ];
        const gitignoreBody = gitignoreLines.map((line) => {
          return `${line}
`;
        }).join(``);
        const gitignorePath = ppath.join(this.context.cwd, `.gitignore`);
        if (!xfs.existsSync(gitignorePath))
          await xfs.writeFilePromise(gitignorePath, gitignoreBody);
        const editorConfigProperties = {
          [`*`]: {
            endOfLine: `lf`,
            insertFinalNewline: true
          },
          [`*.{js,json,yml}`]: {
            charset: `utf-8`,
            indentStyle: `space`,
            indentSize: 2
          }
        };
        (0, import_merge.default)(editorConfigProperties, configuration.get(`initEditorConfig`));
        let editorConfigBody = `root = true
`;
        for (const [selector, props] of Object.entries(editorConfigProperties)) {
          editorConfigBody += `
[${selector}]
`;
          for (const [propName, propValue] of Object.entries(props)) {
            const snakeCaseName = propName.replace(/[A-Z]/g, ($0) => `_${$0.toLowerCase()}`);
            editorConfigBody += `${snakeCaseName} = ${propValue}
`;
          }
        }
        const editorConfigPath = ppath.join(this.context.cwd, `.editorconfig`);
        if (!xfs.existsSync(editorConfigPath))
          await xfs.writeFilePromise(editorConfigPath, editorConfigBody);
        await execUtils_exports.execvp(`git`, [`init`], {
          cwd: this.context.cwd
        });
      }
    }
  };
  InitCommand.paths = [
    [`init`]
  ];
  InitCommand.usage = Command.Usage({
    description: `create a new package`,
    details: `
      This command will setup a new package in your local directory.

      If the \`-p,--private\` or \`-w,--workspace\` options are set, the package will be private by default.

      If the \`-w,--workspace\` option is set, the package will be configured to accept a set of workspaces in the \`packages/\` directory.

      If the \`-i,--install\` option is given a value, Yarn will first download it using \`yarn set version\` and only then forward the init call to the newly downloaded bundle. Without arguments, the downloaded bundle will be \`latest\`.

      The initial settings of the manifest can be changed by using the \`initScope\` and \`initFields\` configuration values. Additionally, Yarn will generate an EditorConfig file whose rules can be altered via \`initEditorConfig\`, and will initialize a Git repository in the current directory.
    `,
    examples: [[
      `Create a new package in the local directory`,
      `yarn init`
    ], [
      `Create a new private package in the local directory`,
      `yarn init -p`
    ], [
      `Create a new package and store the Yarn release inside`,
      `yarn init -i=latest`
    ], [
      `Create a new private package and defines it as a workspace root`,
      `yarn init -w`
    ]]
  });
  var init_default = InitCommand;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-init-virtual-bb60ce87e8/1/packages/plugin-init/sources/index.ts
  var plugin8 = {
    configuration: {
      initScope: {
        description: `Scope used when creating packages via the init command`,
        type: SettingsType.STRING,
        default: null
      },
      initFields: {
        description: `Additional fields to set when creating packages via the init command`,
        type: SettingsType.MAP,
        valueDefinition: {
          description: ``,
          type: SettingsType.ANY
        }
      },
      initEditorConfig: {
        description: `Extra rules to define in the generator editorconfig`,
        type: SettingsType.MAP,
        valueDefinition: {
          description: ``,
          type: SettingsType.ANY
        }
      }
    },
    commands: [
      init_default
    ]
  };
  var sources_default10 = plugin8;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-link-virtual-71ac88a7be/1/packages/plugin-link/sources/index.ts
  var sources_exports14 = {};
  __export(sources_exports14, {
    default: () => sources_default11
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-link-virtual-71ac88a7be/1/packages/plugin-link/sources/constants.ts
  var LINK_PROTOCOL = `portal:`;
  var RAW_LINK_PROTOCOL = `link:`;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-link-virtual-71ac88a7be/1/packages/plugin-link/sources/LinkFetcher.ts
  var LinkFetcher = class {
    supports(locator, opts) {
      if (!locator.reference.startsWith(LINK_PROTOCOL))
        return false;
      return true;
    }
    getLocalPath(locator, opts) {
      const {parentLocator, path: path3} = structUtils_exports.parseFileStyleRange(locator.reference, {protocol: LINK_PROTOCOL});
      if (ppath.isAbsolute(path3))
        return path3;
      const parentLocalPath = opts.fetcher.getLocalPath(parentLocator, opts);
      if (parentLocalPath === null)
        return null;
      return ppath.resolve(parentLocalPath, path3);
    }
    async fetch(locator, opts) {
      const {parentLocator, path: path3} = structUtils_exports.parseFileStyleRange(locator.reference, {protocol: LINK_PROTOCOL});
      const parentFetch = ppath.isAbsolute(path3) ? {packageFs: new CwdFS(PortablePath.root), prefixPath: PortablePath.dot, localPath: PortablePath.root} : await opts.fetcher.fetch(parentLocator, opts);
      const effectiveParentFetch = parentFetch.localPath ? {packageFs: new CwdFS(PortablePath.root), prefixPath: ppath.relative(PortablePath.root, parentFetch.localPath)} : parentFetch;
      if (parentFetch !== effectiveParentFetch && parentFetch.releaseFs)
        parentFetch.releaseFs();
      const sourceFs = effectiveParentFetch.packageFs;
      const sourcePath = ppath.join(effectiveParentFetch.prefixPath, path3);
      if (parentFetch.localPath) {
        return {packageFs: new CwdFS(sourcePath, {baseFs: sourceFs}), releaseFs: effectiveParentFetch.releaseFs, prefixPath: PortablePath.dot, localPath: sourcePath};
      } else {
        return {packageFs: new JailFS(sourcePath, {baseFs: sourceFs}), releaseFs: effectiveParentFetch.releaseFs, prefixPath: PortablePath.dot};
      }
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-link-virtual-71ac88a7be/1/packages/plugin-link/sources/LinkResolver.ts
  var LinkResolver = class {
    supportsDescriptor(descriptor, opts) {
      if (!descriptor.range.startsWith(LINK_PROTOCOL))
        return false;
      return true;
    }
    supportsLocator(locator, opts) {
      if (!locator.reference.startsWith(LINK_PROTOCOL))
        return false;
      return true;
    }
    shouldPersistResolution(locator, opts) {
      return false;
    }
    bindDescriptor(descriptor, fromLocator, opts) {
      return structUtils_exports.bindDescriptor(descriptor, {
        locator: structUtils_exports.stringifyLocator(fromLocator)
      });
    }
    getResolutionDependencies(descriptor, opts) {
      return [];
    }
    async getCandidates(descriptor, dependencies, opts) {
      const path3 = descriptor.range.slice(LINK_PROTOCOL.length);
      return [structUtils_exports.makeLocator(descriptor, `${LINK_PROTOCOL}${npath.toPortablePath(path3)}`)];
    }
    async getSatisfying(descriptor, references, opts) {
      return null;
    }
    async resolve(locator, opts) {
      if (!opts.fetchOptions)
        throw new Error(`Assertion failed: This resolver cannot be used unless a fetcher is configured`);
      const packageFetch = await opts.fetchOptions.fetcher.fetch(locator, opts.fetchOptions);
      const manifest = await miscUtils_exports.releaseAfterUseAsync(async () => {
        return await Manifest.find(packageFetch.prefixPath, {baseFs: packageFetch.packageFs});
      }, packageFetch.releaseFs);
      return __spreadProps(__spreadValues({}, locator), {
        version: manifest.version || `0.0.0`,
        languageName: opts.project.configuration.get(`defaultLanguageName`),
        linkType: LinkType.SOFT,
        dependencies: new Map([...manifest.dependencies]),
        peerDependencies: manifest.peerDependencies,
        dependenciesMeta: manifest.dependenciesMeta,
        peerDependenciesMeta: manifest.peerDependenciesMeta,
        bin: manifest.bin
      });
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-link-virtual-71ac88a7be/1/packages/plugin-link/sources/RawLinkFetcher.ts
  var RawLinkFetcher = class {
    supports(locator, opts) {
      if (!locator.reference.startsWith(RAW_LINK_PROTOCOL))
        return false;
      return true;
    }
    getLocalPath(locator, opts) {
      const {parentLocator, path: path3} = structUtils_exports.parseFileStyleRange(locator.reference, {protocol: RAW_LINK_PROTOCOL});
      if (ppath.isAbsolute(path3))
        return path3;
      const parentLocalPath = opts.fetcher.getLocalPath(parentLocator, opts);
      if (parentLocalPath === null)
        return null;
      return ppath.resolve(parentLocalPath, path3);
    }
    async fetch(locator, opts) {
      const {parentLocator, path: path3} = structUtils_exports.parseFileStyleRange(locator.reference, {protocol: RAW_LINK_PROTOCOL});
      const parentFetch = ppath.isAbsolute(path3) ? {packageFs: new CwdFS(PortablePath.root), prefixPath: PortablePath.dot, localPath: PortablePath.root} : await opts.fetcher.fetch(parentLocator, opts);
      const effectiveParentFetch = parentFetch.localPath ? {packageFs: new CwdFS(PortablePath.root), prefixPath: ppath.relative(PortablePath.root, parentFetch.localPath)} : parentFetch;
      if (parentFetch !== effectiveParentFetch && parentFetch.releaseFs)
        parentFetch.releaseFs();
      const sourceFs = effectiveParentFetch.packageFs;
      const sourcePath = ppath.join(effectiveParentFetch.prefixPath, path3);
      if (parentFetch.localPath) {
        return {packageFs: new CwdFS(sourcePath, {baseFs: sourceFs}), releaseFs: effectiveParentFetch.releaseFs, prefixPath: PortablePath.dot, discardFromLookup: true, localPath: sourcePath};
      } else {
        return {packageFs: new JailFS(sourcePath, {baseFs: sourceFs}), releaseFs: effectiveParentFetch.releaseFs, prefixPath: PortablePath.dot, discardFromLookup: true};
      }
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-link-virtual-71ac88a7be/1/packages/plugin-link/sources/RawLinkResolver.ts
  var RawLinkResolver = class {
    supportsDescriptor(descriptor, opts) {
      if (!descriptor.range.startsWith(RAW_LINK_PROTOCOL))
        return false;
      return true;
    }
    supportsLocator(locator, opts) {
      if (!locator.reference.startsWith(RAW_LINK_PROTOCOL))
        return false;
      return true;
    }
    shouldPersistResolution(locator, opts) {
      return false;
    }
    bindDescriptor(descriptor, fromLocator, opts) {
      return structUtils_exports.bindDescriptor(descriptor, {
        locator: structUtils_exports.stringifyLocator(fromLocator)
      });
    }
    getResolutionDependencies(descriptor, opts) {
      return [];
    }
    async getCandidates(descriptor, dependencies, opts) {
      const path3 = descriptor.range.slice(RAW_LINK_PROTOCOL.length);
      return [structUtils_exports.makeLocator(descriptor, `${RAW_LINK_PROTOCOL}${npath.toPortablePath(path3)}`)];
    }
    async getSatisfying(descriptor, references, opts) {
      return null;
    }
    async resolve(locator, opts) {
      return __spreadProps(__spreadValues({}, locator), {
        version: `0.0.0`,
        languageName: opts.project.configuration.get(`defaultLanguageName`),
        linkType: LinkType.SOFT,
        dependencies: new Map(),
        peerDependencies: new Map(),
        dependenciesMeta: new Map(),
        peerDependenciesMeta: new Map(),
        bin: new Map()
      });
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-link-virtual-71ac88a7be/1/packages/plugin-link/sources/index.ts
  var plugin9 = {
    fetchers: [
      RawLinkFetcher,
      LinkFetcher
    ],
    resolvers: [
      RawLinkResolver,
      LinkResolver
    ]
  };
  var sources_default11 = plugin9;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-node-modules-virtual-6c4ffdc97c/1/packages/plugin-node-modules/sources/index.ts
  var sources_exports16 = {};
  __export(sources_exports16, {
    default: () => sources_default13
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-pnpify-virtual-cb1929e62b/1/packages/yarnpkg-pnpify/sources/index.ts
  var import_fs9 = __toModule(require("fs"));

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-pnpify-virtual-cb1929e62b/1/packages/yarnpkg-pnpify/sources/NodeModulesFS.ts
  var import_fs8 = __toModule(require("fs"));

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-pnpify-virtual-cb1929e62b/1/packages/yarnpkg-pnpify/sources/WatchManager.ts
  var import_events2 = __toModule(require("events"));
  var WatchEventEmitter = class extends import_events2.EventEmitter {
    constructor(dirWatchers, watchPath, watcherId) {
      super();
      this.dirWatchers = dirWatchers;
      this.watchPath = watchPath;
      this.watcherId = watcherId;
    }
    close() {
      const dirWatcher = this.dirWatchers.get(this.watchPath);
      dirWatcher.eventEmitters.delete(this.watcherId);
      if (dirWatcher.eventEmitters.size === 0) {
        this.dirWatchers.delete(this.watchPath);
      }
    }
  };
  var WatchManager = class extends import_events2.EventEmitter {
    constructor() {
      super(...arguments);
      this.dirWatchers = new Map();
      this.lastWatcherId = 0;
    }
    registerWatcher(watchPath, dirList, callback) {
      let dirWatcher = this.dirWatchers.get(watchPath);
      if (!dirWatcher) {
        dirWatcher = {eventEmitters: new Map(), dirEntries: dirList};
        this.dirWatchers.set(watchPath, dirWatcher);
      }
      const watcherId = this.lastWatcherId++;
      const watchEventEmitter = new WatchEventEmitter(this.dirWatchers, watchPath, watcherId);
      dirWatcher.eventEmitters.set(watcherId, watchEventEmitter);
      watchEventEmitter.on(`rename`, (filename) => callback(`rename`, filename));
      return watchEventEmitter;
    }
    notifyWatchers(resolvePath) {
      for (const [watchPath, dirWatcher] of this.dirWatchers) {
        const newDirEntries = resolvePath(watchPath).dirList || new Set();
        const dirEntryDiff = new Set();
        for (const entry of newDirEntries) {
          if (!dirWatcher.dirEntries.has(entry)) {
            dirEntryDiff.add(entry);
          }
        }
        for (const entry of dirWatcher.dirEntries) {
          if (!newDirEntries.has(entry)) {
            dirEntryDiff.add(entry);
          }
        }
        for (const entry of dirEntryDiff) {
          for (const watchEventEmitter of dirWatcher.eventEmitters.values()) {
            watchEventEmitter.emit(`rename`, entry);
          }
        }
        dirWatcher.dirEntries = newDirEntries;
      }
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-pnpify-virtual-cb1929e62b/1/packages/yarnpkg-pnpify/sources/hoist.ts
  var Hoistable;
  (function(Hoistable2) {
    Hoistable2[Hoistable2["YES"] = 0] = "YES";
    Hoistable2[Hoistable2["NO"] = 1] = "NO";
    Hoistable2[Hoistable2["DEPENDS"] = 2] = "DEPENDS";
  })(Hoistable || (Hoistable = {}));
  var makeLocator3 = (name, reference) => `${name}@${reference}`;
  var makeIdent2 = (name, reference) => {
    const hashIdx = reference.indexOf(`#`);
    const realReference = hashIdx >= 0 ? reference.substring(hashIdx + 1) : reference;
    return makeLocator3(name, realReference);
  };
  var DebugLevel;
  (function(DebugLevel2) {
    DebugLevel2[DebugLevel2["NONE"] = -1] = "NONE";
    DebugLevel2[DebugLevel2["PERF"] = 0] = "PERF";
    DebugLevel2[DebugLevel2["CHECK"] = 1] = "CHECK";
    DebugLevel2[DebugLevel2["REASONS"] = 2] = "REASONS";
    DebugLevel2[DebugLevel2["INTENSIVE_CHECK"] = 9] = "INTENSIVE_CHECK";
  })(DebugLevel || (DebugLevel = {}));
  var hoist = (tree, opts = {}) => {
    const debugLevel = opts.debugLevel || Number(process.env.NM_DEBUG_LEVEL || -1);
    const check = opts.check || debugLevel >= 9;
    const hoistingLimits = opts.hoistingLimits || new Map();
    const options = {check, debugLevel, hoistingLimits, fastLookupPossible: true};
    let startTime;
    if (options.debugLevel >= 0)
      startTime = Date.now();
    const treeCopy = cloneTree(tree, options);
    let anotherRoundNeeded = false;
    let round = 0;
    do {
      anotherRoundNeeded = hoistTo(treeCopy, [treeCopy], new Set([treeCopy.locator]), new Map(), options).anotherRoundNeeded;
      options.fastLookupPossible = false;
      round++;
    } while (anotherRoundNeeded);
    if (options.debugLevel >= 0)
      console.log(`hoist time: ${Date.now() - startTime}ms, rounds: ${round}`);
    if (options.debugLevel >= 1) {
      const prevTreeDump = dumpDepTree(treeCopy);
      const isGraphChanged = hoistTo(treeCopy, [treeCopy], new Set([treeCopy.locator]), new Map(), options).isGraphChanged;
      if (isGraphChanged)
        throw new Error(`The hoisting result is not terminal, prev tree:
${prevTreeDump}, next tree:
${dumpDepTree(treeCopy)}`);
      const checkLog = selfCheck(treeCopy);
      if (checkLog) {
        throw new Error(`${checkLog}, after hoisting finished:
${dumpDepTree(treeCopy)}`);
      }
    }
    if (options.debugLevel >= 2)
      console.log(dumpDepTree(treeCopy));
    return shrinkTree(treeCopy);
  };
  var getZeroRoundUsedDependencies = (rootNodePath) => {
    const rootNode = rootNodePath[rootNodePath.length - 1];
    const usedDependencies = new Map();
    const seenNodes = new Set();
    const addUsedDependencies = (node) => {
      if (seenNodes.has(node))
        return;
      seenNodes.add(node);
      for (const dep of node.hoistedDependencies.values())
        usedDependencies.set(dep.name, dep);
      for (const dep of node.dependencies.values()) {
        if (!node.peerNames.has(dep.name)) {
          addUsedDependencies(dep);
        }
      }
    };
    addUsedDependencies(rootNode);
    return usedDependencies;
  };
  var getUsedDependencies = (rootNodePath) => {
    const rootNode = rootNodePath[rootNodePath.length - 1];
    const usedDependencies = new Map();
    const seenNodes = new Set();
    const reachableDependencies = new Map();
    for (const node of rootNodePath)
      for (const dep of node.dependencies.values())
        reachableDependencies.set(dep.name, dep);
    const hiddenDependencies = new Set();
    const addUsedDependencies = (node, hiddenDependencies2) => {
      if (seenNodes.has(node))
        return;
      seenNodes.add(node);
      for (const dep of node.hoistedDependencies.values()) {
        if (!hiddenDependencies2.has(dep.name)) {
          const reachableDependency = reachableDependencies.get(dep.name);
          if (reachableDependency) {
            usedDependencies.set(reachableDependency.name, reachableDependency);
          }
        }
      }
      const childrenHiddenDependencies = new Set();
      for (const dep of node.dependencies.values())
        childrenHiddenDependencies.add(dep.name);
      for (const dep of node.dependencies.values()) {
        if (!node.peerNames.has(dep.name)) {
          addUsedDependencies(dep, childrenHiddenDependencies);
        }
      }
    };
    addUsedDependencies(rootNode, hiddenDependencies);
    return usedDependencies;
  };
  var decoupleGraphNode = (parent, node) => {
    if (node.decoupled)
      return node;
    const {name, references, ident, locator, dependencies, originalDependencies, hoistedDependencies, peerNames, reasons, isHoistBorder} = node;
    const clone2 = {
      name,
      references: new Set(references),
      ident,
      locator,
      dependencies: new Map(dependencies),
      originalDependencies: new Map(originalDependencies),
      hoistedDependencies: new Map(hoistedDependencies),
      peerNames: new Set(peerNames),
      reasons: new Map(reasons),
      decoupled: true,
      isHoistBorder,
      hoistedFrom: []
    };
    const selfDep = clone2.dependencies.get(name);
    if (selfDep && selfDep.ident == clone2.ident)
      clone2.dependencies.set(name, clone2);
    parent.dependencies.set(clone2.name, clone2);
    return clone2;
  };
  var getHoistIdentMap = (rootNode, preferenceMap) => {
    const identMap = new Map([[rootNode.name, [rootNode.ident]]]);
    for (const dep of rootNode.dependencies.values()) {
      if (!rootNode.peerNames.has(dep.name)) {
        identMap.set(dep.name, [dep.ident]);
      }
    }
    const keyList = Array.from(preferenceMap.keys());
    keyList.sort((key1, key2) => {
      const entry1 = preferenceMap.get(key1);
      const entry2 = preferenceMap.get(key2);
      if (entry2.peerDependents.size !== entry1.peerDependents.size) {
        return entry2.peerDependents.size - entry1.peerDependents.size;
      } else {
        return entry2.dependents.size - entry1.dependents.size;
      }
    });
    for (const key of keyList) {
      const name = key.substring(0, key.indexOf(`@`, 1));
      const ident = key.substring(name.length + 1);
      if (!rootNode.peerNames.has(name)) {
        let idents = identMap.get(name);
        if (!idents) {
          idents = [];
          identMap.set(name, idents);
        }
        if (idents.indexOf(ident) < 0) {
          idents.push(ident);
        }
      }
    }
    return identMap;
  };
  var getSortedRegularDependencies = (node) => {
    const dependencies = new Set();
    const addDep = (dep, seenDeps = new Set()) => {
      if (seenDeps.has(dep))
        return;
      seenDeps.add(dep);
      for (const peerName of dep.peerNames) {
        if (!node.peerNames.has(peerName)) {
          const peerDep = node.dependencies.get(peerName);
          if (peerDep && !dependencies.has(peerDep)) {
            addDep(peerDep, seenDeps);
          }
        }
      }
      dependencies.add(dep);
    };
    for (const dep of node.dependencies.values()) {
      if (!node.peerNames.has(dep.name)) {
        addDep(dep);
      }
    }
    return dependencies;
  };
  var hoistTo = (tree, rootNodePath, rootNodePathLocators, parentShadowedNodes, options, seenNodes = new Set()) => {
    const rootNode = rootNodePath[rootNodePath.length - 1];
    if (seenNodes.has(rootNode))
      return {anotherRoundNeeded: false, isGraphChanged: false};
    seenNodes.add(rootNode);
    const preferenceMap = buildPreferenceMap(rootNode);
    const hoistIdentMap = getHoistIdentMap(rootNode, preferenceMap);
    const usedDependencies = tree == rootNode ? new Map() : options.fastLookupPossible ? getZeroRoundUsedDependencies(rootNodePath) : getUsedDependencies(rootNodePath);
    let wasStateChanged;
    let anotherRoundNeeded = false;
    let isGraphChanged = false;
    const hoistIdents = new Map(Array.from(hoistIdentMap.entries()).map(([k, v]) => [k, v[0]]));
    const shadowedNodes = new Map();
    do {
      const result = hoistGraph(tree, rootNodePath, rootNodePathLocators, usedDependencies, hoistIdents, hoistIdentMap, parentShadowedNodes, shadowedNodes, options);
      if (result.isGraphChanged)
        isGraphChanged = true;
      if (result.anotherRoundNeeded)
        anotherRoundNeeded = true;
      wasStateChanged = false;
      for (const [name, idents] of hoistIdentMap) {
        if (idents.length > 1 && !rootNode.dependencies.has(name)) {
          hoistIdents.delete(name);
          idents.shift();
          hoistIdents.set(name, idents[0]);
          wasStateChanged = true;
        }
      }
    } while (wasStateChanged);
    for (const dependency of rootNode.dependencies.values()) {
      if (!rootNode.peerNames.has(dependency.name) && !rootNodePathLocators.has(dependency.locator)) {
        rootNodePathLocators.add(dependency.locator);
        const result = hoistTo(tree, [...rootNodePath, dependency], rootNodePathLocators, shadowedNodes, options);
        if (result.isGraphChanged)
          isGraphChanged = true;
        if (result.anotherRoundNeeded)
          anotherRoundNeeded = true;
        rootNodePathLocators.delete(dependency.locator);
      }
    }
    return {anotherRoundNeeded, isGraphChanged};
  };
  var getNodeHoistInfo = (rootNode, rootNodePathLocators, nodePath, node, usedDependencies, hoistIdents, hoistIdentMap, shadowedNodes, {outputReason}) => {
    let reasonRoot;
    let reason = null;
    let dependsOn = new Set();
    if (outputReason)
      reasonRoot = `${Array.from(rootNodePathLocators).map((x) => prettyPrintLocator(x)).join(`\u2192`)}`;
    const parentNode = nodePath[nodePath.length - 1];
    const isSelfReference = node.ident === parentNode.ident;
    let isHoistable = !isSelfReference;
    if (outputReason && !isHoistable)
      reason = `- self-reference`;
    if (isHoistable) {
      isHoistable = !rootNode.peerNames.has(node.name);
      if (outputReason && !isHoistable) {
        reason = `- cannot shadow peer: ${prettyPrintLocator(rootNode.originalDependencies.get(node.name).locator)} at ${reasonRoot}`;
      }
    }
    if (isHoistable) {
      let isNameAvailable = false;
      const usedDep = usedDependencies.get(node.name);
      isNameAvailable = !usedDep || usedDep.ident === node.ident;
      if (outputReason && !isNameAvailable)
        reason = `- filled by: ${prettyPrintLocator(usedDep.locator)} at ${reasonRoot}`;
      if (isNameAvailable) {
        for (let idx = nodePath.length - 1; idx >= 1; idx--) {
          const parent = nodePath[idx];
          const parentDep = parent.dependencies.get(node.name);
          if (parentDep && parentDep.ident !== node.ident) {
            isNameAvailable = false;
            let shadowedNames = shadowedNodes.get(parentNode);
            if (!shadowedNames) {
              shadowedNames = new Set();
              shadowedNodes.set(parentNode, shadowedNames);
            }
            shadowedNames.add(node.name);
            if (outputReason)
              reason = `- filled by ${prettyPrintLocator(parentDep.locator)} at ${nodePath.slice(0, idx).map((x) => prettyPrintLocator(x.locator)).join(`\u2192`)}`;
            break;
          }
        }
      }
      isHoistable = isNameAvailable;
    }
    if (isHoistable) {
      const hoistedIdent = hoistIdents.get(node.name);
      isHoistable = hoistedIdent === node.ident;
      if (outputReason && !isHoistable) {
        reason = `- filled by: ${prettyPrintLocator(hoistIdentMap.get(node.name)[0])} at ${reasonRoot}`;
      }
    }
    if (isHoistable) {
      let arePeerDepsSatisfied = true;
      const checkList = new Set(node.peerNames);
      for (let idx = nodePath.length - 1; idx >= 1; idx--) {
        const parent = nodePath[idx];
        for (const name of checkList) {
          if (parent.peerNames.has(name) && parent.originalDependencies.has(name))
            continue;
          const parentDepNode = parent.dependencies.get(name);
          if (parentDepNode && rootNode.dependencies.get(name) !== parentDepNode) {
            if (idx === nodePath.length - 1) {
              dependsOn.add(parentDepNode);
            } else {
              dependsOn = null;
              arePeerDepsSatisfied = false;
              if (outputReason) {
                reason = `- peer dependency ${prettyPrintLocator(parentDepNode.locator)} from parent ${prettyPrintLocator(parent.locator)} was not hoisted to ${reasonRoot}`;
              }
            }
          }
          checkList.delete(name);
        }
        if (!arePeerDepsSatisfied) {
          break;
        }
      }
      isHoistable = arePeerDepsSatisfied;
    }
    if (dependsOn !== null && dependsOn.size > 0) {
      return {isHoistable: 2, dependsOn, reason};
    } else {
      return {isHoistable: isHoistable ? 0 : 1, reason};
    }
  };
  var hoistGraph = (tree, rootNodePath, rootNodePathLocators, usedDependencies, hoistIdents, hoistIdentMap, parentShadowedNodes, shadowedNodes, options) => {
    const rootNode = rootNodePath[rootNodePath.length - 1];
    const seenNodes = new Set();
    let anotherRoundNeeded = false;
    let isGraphChanged = false;
    const hoistNodeDependencies = (nodePath, locatorPath, parentNode, newNodes2) => {
      if (seenNodes.has(parentNode))
        return;
      const nextLocatorPath = [...locatorPath, parentNode.locator];
      const dependantTree = new Map();
      const hoistInfos = new Map();
      for (const subDependency of getSortedRegularDependencies(parentNode)) {
        const hoistInfo = getNodeHoistInfo(rootNode, rootNodePathLocators, [rootNode, ...nodePath, parentNode], subDependency, usedDependencies, hoistIdents, hoistIdentMap, shadowedNodes, {outputReason: options.debugLevel >= 2});
        hoistInfos.set(subDependency, hoistInfo);
        if (hoistInfo.isHoistable === 2) {
          for (const node of hoistInfo.dependsOn) {
            const nodeDependants = dependantTree.get(node.name) || new Set();
            nodeDependants.add(subDependency.name);
            dependantTree.set(node.name, nodeDependants);
          }
        }
      }
      const unhoistableNodes = new Set();
      const addUnhoistableNode = (node, hoistInfo, reason) => {
        if (!unhoistableNodes.has(node)) {
          unhoistableNodes.add(node);
          hoistInfos.set(node, {isHoistable: 1, reason});
          for (const dependantName of dependantTree.get(node.name) || []) {
            addUnhoistableNode(parentNode.dependencies.get(dependantName), hoistInfo, options.debugLevel >= 2 ? `- peer dependency ${prettyPrintLocator(node.locator)} from parent ${prettyPrintLocator(parentNode.locator)} was not hoisted` : ``);
          }
        }
      };
      for (const [node, hoistInfo] of hoistInfos)
        if (hoistInfo.isHoistable === 1)
          addUnhoistableNode(node, hoistInfo, hoistInfo.reason);
      for (const node of hoistInfos.keys()) {
        if (!unhoistableNodes.has(node)) {
          isGraphChanged = true;
          const shadowedNames = parentShadowedNodes.get(parentNode);
          if (shadowedNames && shadowedNames.has(node.name))
            anotherRoundNeeded = true;
          parentNode.dependencies.delete(node.name);
          parentNode.hoistedDependencies.set(node.name, node);
          parentNode.reasons.delete(node.name);
          const hoistedNode = rootNode.dependencies.get(node.name);
          let hoistedFrom = null;
          if (options.debugLevel >= 2)
            hoistedFrom = Array.from(locatorPath).concat([parentNode.locator]).map((x) => prettyPrintLocator(x)).join(`\u2192`);
          if (!hoistedNode) {
            if (rootNode.ident !== node.ident) {
              rootNode.dependencies.set(node.name, node);
              if (options.debugLevel >= 2)
                node.hoistedFrom.push(hoistedFrom);
              newNodes2.add(node);
            }
          } else {
            for (const reference of node.references) {
              hoistedNode.references.add(reference);
              if (options.debugLevel >= 2) {
                hoistedNode.hoistedFrom.push(hoistedFrom);
              }
            }
          }
        }
      }
      if (options.check) {
        const checkLog = selfCheck(tree);
        if (checkLog) {
          throw new Error(`${checkLog}, after hoisting dependencies of ${[rootNode, ...nodePath, parentNode].map((x) => prettyPrintLocator(x.locator)).join(`\u2192`)}:
${dumpDepTree(tree)}`);
        }
      }
      const children = getSortedRegularDependencies(parentNode);
      for (const node of children) {
        if (unhoistableNodes.has(node)) {
          const hoistInfo = hoistInfos.get(node);
          const hoistableIdent = hoistIdents.get(node.name);
          if ((hoistableIdent === node.ident || !parentNode.reasons.has(node.name)) && hoistInfo.isHoistable !== 0)
            parentNode.reasons.set(node.name, hoistInfo.reason);
          if (!node.isHoistBorder && nextLocatorPath.indexOf(node.locator) < 0) {
            seenNodes.add(parentNode);
            const decoupledNode = decoupleGraphNode(parentNode, node);
            hoistNodeDependencies([...nodePath, parentNode], [...locatorPath, parentNode.locator], decoupledNode, nextNewNodes);
            seenNodes.delete(parentNode);
          }
        }
      }
    };
    let newNodes;
    let nextNewNodes = new Set(getSortedRegularDependencies(rootNode));
    do {
      newNodes = nextNewNodes;
      nextNewNodes = new Set();
      for (const dep of newNodes) {
        if (dep.locator === rootNode.locator || dep.isHoistBorder)
          continue;
        const decoupledDependency = decoupleGraphNode(rootNode, dep);
        hoistNodeDependencies([], Array.from(rootNodePathLocators), decoupledDependency, nextNewNodes);
      }
    } while (nextNewNodes.size > 0);
    return {anotherRoundNeeded, isGraphChanged};
  };
  var selfCheck = (tree) => {
    const log = [];
    const seenNodes = new Set();
    const parents = new Set();
    const checkNode = (node, parentDeps) => {
      if (seenNodes.has(node))
        return;
      seenNodes.add(node);
      if (parents.has(node))
        return;
      const dependencies = new Map(parentDeps);
      for (const dep of node.dependencies.values())
        if (!node.peerNames.has(dep.name))
          dependencies.set(dep.name, dep);
      for (const origDep of node.originalDependencies.values()) {
        const dep = dependencies.get(origDep.name);
        const prettyPrintTreePath = () => `${Array.from(parents).concat([node]).map((x) => prettyPrintLocator(x.locator)).join(`\u2192`)}`;
        if (node.peerNames.has(origDep.name)) {
          const parentDep = parentDeps.get(origDep.name);
          if (parentDep !== dep || !parentDep || parentDep.ident !== origDep.ident) {
            log.push(`${prettyPrintTreePath()} - broken peer promise: expected ${origDep.ident} but found ${parentDep ? parentDep.ident : parentDep}`);
          }
        } else {
          if (!dep) {
            log.push(`${prettyPrintTreePath()} - broken require promise: no required dependency ${origDep.locator} found`);
          } else if (dep.ident !== origDep.ident) {
            log.push(`${prettyPrintTreePath()} - broken require promise for ${origDep.name}: expected ${origDep.ident}, but found: ${dep.ident}`);
          }
        }
      }
      parents.add(node);
      for (const dep of node.dependencies.values()) {
        if (!node.peerNames.has(dep.name)) {
          checkNode(dep, dependencies);
        }
      }
      parents.delete(node);
    };
    checkNode(tree, tree.dependencies);
    return log.join(`
`);
  };
  var cloneTree = (tree, options) => {
    const {identName, name, reference, peerNames} = tree;
    const treeCopy = {
      name,
      references: new Set([reference]),
      locator: makeLocator3(identName, reference),
      ident: makeIdent2(identName, reference),
      dependencies: new Map(),
      originalDependencies: new Map(),
      hoistedDependencies: new Map(),
      peerNames: new Set(peerNames),
      reasons: new Map(),
      decoupled: true,
      isHoistBorder: true,
      hoistedFrom: []
    };
    const seenNodes = new Map([[tree, treeCopy]]);
    const addNode = (node, parentNode) => {
      let workNode = seenNodes.get(node);
      const isSeen = !!workNode;
      if (!workNode) {
        const {name: name2, identName: identName2, reference: reference2, peerNames: peerNames2} = node;
        const dependenciesNmHoistingLimits = options.hoistingLimits.get(parentNode.locator);
        workNode = {
          name: name2,
          references: new Set([reference2]),
          locator: makeLocator3(identName2, reference2),
          ident: makeIdent2(identName2, reference2),
          dependencies: new Map(),
          originalDependencies: new Map(),
          hoistedDependencies: new Map(),
          peerNames: new Set(peerNames2),
          reasons: new Map(),
          decoupled: true,
          isHoistBorder: dependenciesNmHoistingLimits ? dependenciesNmHoistingLimits.has(name2) : false,
          hoistedFrom: []
        };
        seenNodes.set(node, workNode);
      }
      parentNode.dependencies.set(node.name, workNode);
      parentNode.originalDependencies.set(node.name, workNode);
      if (!isSeen) {
        for (const dep of node.dependencies) {
          addNode(dep, workNode);
        }
      } else {
        const seenCoupledNodes = new Set();
        const markNodeCoupled = (node2) => {
          if (seenCoupledNodes.has(node2))
            return;
          seenCoupledNodes.add(node2);
          node2.decoupled = false;
          for (const dep of node2.dependencies.values()) {
            if (!node2.peerNames.has(dep.name)) {
              markNodeCoupled(dep);
            }
          }
        };
        markNodeCoupled(workNode);
      }
    };
    for (const dep of tree.dependencies)
      addNode(dep, treeCopy);
    return treeCopy;
  };
  var getIdentName = (locator) => locator.substring(0, locator.indexOf(`@`, 1));
  var shrinkTree = (tree) => {
    const treeCopy = {
      name: tree.name,
      identName: getIdentName(tree.locator),
      references: new Set(tree.references),
      dependencies: new Set()
    };
    const seenNodes = new Set([tree]);
    const addNode = (node, parentWorkNode, parentNode) => {
      const isSeen = seenNodes.has(node);
      let resultNode;
      if (parentWorkNode === node) {
        resultNode = parentNode;
      } else {
        const {name, references, locator} = node;
        resultNode = {
          name,
          identName: getIdentName(locator),
          references,
          dependencies: new Set()
        };
      }
      parentNode.dependencies.add(resultNode);
      if (!isSeen) {
        seenNodes.add(node);
        for (const dep of node.dependencies.values()) {
          if (!node.peerNames.has(dep.name)) {
            addNode(dep, node, resultNode);
          }
        }
        seenNodes.delete(node);
      }
    };
    for (const dep of tree.dependencies.values())
      addNode(dep, tree, treeCopy);
    return treeCopy;
  };
  var buildPreferenceMap = (rootNode) => {
    const preferenceMap = new Map();
    const seenNodes = new Set([rootNode]);
    const getPreferenceKey = (node) => `${node.name}@${node.ident}`;
    const getOrCreatePreferenceEntry = (node) => {
      const key = getPreferenceKey(node);
      let entry = preferenceMap.get(key);
      if (!entry) {
        entry = {dependents: new Set(), peerDependents: new Set()};
        preferenceMap.set(key, entry);
      }
      return entry;
    };
    const addDependent = (dependent, node) => {
      const isSeen = !!seenNodes.has(node);
      const entry = getOrCreatePreferenceEntry(node);
      entry.dependents.add(dependent.ident);
      if (!isSeen) {
        seenNodes.add(node);
        for (const dep of node.dependencies.values()) {
          if (node.peerNames.has(dep.name)) {
            const entry2 = getOrCreatePreferenceEntry(dep);
            entry2.peerDependents.add(node.ident);
          } else {
            addDependent(node, dep);
          }
        }
      }
    };
    for (const dep of rootNode.dependencies.values())
      if (!rootNode.peerNames.has(dep.name))
        addDependent(rootNode, dep);
    return preferenceMap;
  };
  var prettyPrintLocator = (locator) => {
    const idx = locator.indexOf(`@`, 1);
    let name = locator.substring(0, idx);
    if (name.endsWith(`$wsroot$`))
      name = `wh:${name.replace(`$wsroot$`, ``)}`;
    const reference = locator.substring(idx + 1);
    if (reference === `workspace:.`) {
      return `.`;
    } else if (!reference) {
      return `${name}`;
    } else {
      let version = (reference.indexOf(`#`) > 0 ? reference.split(`#`)[1] : reference).replace(`npm:`, ``);
      if (reference.startsWith(`virtual`))
        name = `v:${name}`;
      if (version.startsWith(`workspace`)) {
        name = `w:${name}`;
        version = ``;
      }
      return `${name}${version ? `@${version}` : ``}`;
    }
  };
  var MAX_NODES_TO_DUMP = 5e4;
  var dumpDepTree = (tree) => {
    let nodeCount = 0;
    const dumpPackage = (pkg, parents, prefix = ``) => {
      if (nodeCount > MAX_NODES_TO_DUMP || parents.has(pkg))
        return ``;
      nodeCount++;
      const dependencies = Array.from(pkg.dependencies.values()).sort((n1, n2) => n1.name.localeCompare(n2.name));
      let str = ``;
      parents.add(pkg);
      for (let idx = 0; idx < dependencies.length; idx++) {
        const dep = dependencies[idx];
        if (!pkg.peerNames.has(dep.name) && dep !== pkg) {
          const reason = pkg.reasons.get(dep.name);
          const identName = getIdentName(dep.locator);
          str += `${prefix}${idx < dependencies.length - 1 ? `\u251C\u2500` : `\u2514\u2500`}${(parents.has(dep) ? `>` : ``) + (identName !== dep.name ? `a:${dep.name}:` : ``) + prettyPrintLocator(dep.locator) + (reason ? ` ${reason}` : ``) + (dep !== pkg && dep.hoistedFrom.length > 0 ? `, hoisted from: ${dep.hoistedFrom.join(`, `)}` : ``)}
`;
          str += dumpPackage(dep, parents, `${prefix}${idx < dependencies.length - 1 ? `\u2502 ` : `  `}`);
        }
      }
      parents.delete(pkg);
      return str;
    };
    const treeDump = dumpPackage(tree, new Set());
    return treeDump + (nodeCount > MAX_NODES_TO_DUMP ? `
Tree is too large, part of the tree has been dunped
` : ``);
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-pnpify-virtual-cb1929e62b/1/packages/yarnpkg-pnpify/sources/buildNodeModulesTree.ts
  var LinkType2;
  (function(LinkType4) {
    LinkType4["HARD"] = `HARD`;
    LinkType4["SOFT"] = `SOFT`;
  })(LinkType2 || (LinkType2 = {}));
  var NodeModulesHoistingLimits;
  (function(NodeModulesHoistingLimits2) {
    NodeModulesHoistingLimits2["WORKSPACES"] = `workspaces`;
    NodeModulesHoistingLimits2["DEPENDENCIES"] = `dependencies`;
    NodeModulesHoistingLimits2["NONE"] = `none`;
  })(NodeModulesHoistingLimits || (NodeModulesHoistingLimits = {}));
  var NODE_MODULES = `node_modules`;
  var WORKSPACE_NAME_SUFFIX = `$wsroot$`;
  var buildNodeModulesTree = (pnp2, options) => {
    const {packageTree, hoistingLimits, errors: errors4, preserveSymlinksRequired} = buildPackageTree(pnp2, options);
    let tree = null;
    if (errors4.length === 0) {
      const hoistedTree = hoist(packageTree, {hoistingLimits});
      tree = populateNodeModulesTree(pnp2, hoistedTree, options);
    }
    return {tree, errors: errors4, preserveSymlinksRequired};
  };
  var stringifyLocator2 = (locator) => `${locator.name}@${locator.reference}`;
  var buildLocatorMap = (nodeModulesTree) => {
    const map = new Map();
    for (const [location, val] of nodeModulesTree.entries()) {
      if (!val.dirList) {
        let entry = map.get(val.locator);
        if (!entry) {
          entry = {target: val.target, linkType: val.linkType, locations: [], aliases: val.aliases};
          map.set(val.locator, entry);
        }
        entry.locations.push(location);
      }
    }
    for (const val of map.values()) {
      val.locations = val.locations.sort((loc1, loc2) => {
        const len1 = loc1.split(ppath.delimiter).length;
        const len2 = loc2.split(ppath.delimiter).length;
        return len1 !== len2 ? len2 - len1 : loc2.localeCompare(loc1);
      });
    }
    return map;
  };
  var areRealLocatorsEqual = (a, b) => {
    const realA = structUtils_exports.isVirtualLocator(a) ? structUtils_exports.devirtualizeLocator(a) : a;
    const realB = structUtils_exports.isVirtualLocator(b) ? structUtils_exports.devirtualizeLocator(b) : b;
    return structUtils_exports.areLocatorsEqual(realA, realB);
  };
  var buildPackageTree = (pnp2, options) => {
    const pnpRoots = pnp2.getDependencyTreeRoots();
    const errors4 = [];
    let preserveSymlinksRequired = false;
    const hoistingLimits = new Map();
    const workspaceDependenciesMap = new Map();
    const topPkg = pnp2.getPackageInformation(pnp2.topLevel);
    if (topPkg === null)
      throw new Error(`Assertion failed: Expected the top-level package to have been registered`);
    const topLocator = pnp2.findPackageLocator(topPkg.packageLocation);
    if (topLocator === null)
      throw new Error(`Assertion failed: Expected the top-level package to have a physical locator`);
    const topPkgPortableLocation = npath.toPortablePath(topPkg.packageLocation);
    const topLocatorKey = stringifyLocator2(topLocator);
    if (options.project) {
      const workspaceTree = {children: new Map()};
      const cwdSegments = options.project.cwd.split(ppath.sep);
      for (const [cwd, workspace] of options.project.workspacesByCwd) {
        const segments = cwd.split(ppath.sep).slice(cwdSegments.length);
        let node = workspaceTree;
        for (const segment of segments) {
          let nextNode = node.children.get(segment);
          if (!nextNode) {
            nextNode = {children: new Map()};
            node.children.set(segment, nextNode);
          }
          node = nextNode;
        }
        node.workspaceLocator = {name: structUtils_exports.stringifyIdent(workspace.anchoredLocator), reference: workspace.anchoredLocator.reference};
      }
      const addWorkspace = (node, parentWorkspaceLocator) => {
        if (node.workspaceLocator) {
          const parentLocatorKey = stringifyLocator2(parentWorkspaceLocator);
          let dependencies = workspaceDependenciesMap.get(parentLocatorKey);
          if (!dependencies) {
            dependencies = new Set();
            workspaceDependenciesMap.set(parentLocatorKey, dependencies);
          }
          dependencies.add(node.workspaceLocator);
        }
        for (const child of node.children.values()) {
          addWorkspace(child, node.workspaceLocator || parentWorkspaceLocator);
        }
      };
      for (const child of workspaceTree.children.values()) {
        addWorkspace(child, workspaceTree.workspaceLocator);
      }
    } else {
      for (const locator of pnpRoots) {
        if (locator.name !== topLocator.name || locator.reference !== topLocator.reference) {
          let dependencies = workspaceDependenciesMap.get(topLocatorKey);
          if (!dependencies) {
            dependencies = new Set();
            workspaceDependenciesMap.set(topLocatorKey, dependencies);
          }
          dependencies.add(locator);
        }
      }
    }
    const packageTree = {
      name: topLocator.name,
      identName: topLocator.name,
      reference: topLocator.reference,
      peerNames: topPkg.packagePeers,
      dependencies: new Set()
    };
    const nodes = new Map();
    const getNodeKey = (name, locator) => `${stringifyLocator2(locator)}:${name}`;
    const isExternalSoftLink = (pkg, locator) => {
      if (pkg.linkType !== LinkType2.SOFT || !options.project)
        return false;
      const realSoftLinkPath = npath.toPortablePath(pnp2.resolveVirtual && locator.reference && locator.reference.startsWith(`virtual:`) ? pnp2.resolveVirtual(pkg.packageLocation) : pkg.packageLocation);
      return ppath.contains(options.project.cwd, realSoftLinkPath) === null;
    };
    const addPackageToTree = (name, pkg, locator, parent, parentDependencies, parentRelativeCwd, isHoistBorder) => {
      var _a2, _b;
      const nodeKey = getNodeKey(name, locator);
      let node = nodes.get(nodeKey);
      const isSeen = !!node;
      if (!isSeen && locator.name === topLocator.name && locator.reference === topLocator.reference) {
        node = packageTree;
        nodes.set(nodeKey, packageTree);
      }
      if (!node) {
        node = {
          name,
          identName: locator.name,
          reference: locator.reference,
          dependencies: new Set(),
          peerNames: pkg.packagePeers
        };
        nodes.set(nodeKey, node);
      }
      if (isHoistBorder && !isExternalSoftLink(pkg, locator)) {
        const parentLocatorKey = stringifyLocator2({name: parent.identName, reference: parent.reference});
        const dependencyBorders = hoistingLimits.get(parentLocatorKey) || new Set();
        hoistingLimits.set(parentLocatorKey, dependencyBorders);
        dependencyBorders.add(node.name);
      }
      const allDependencies = new Map(pkg.packageDependencies);
      if (options.project) {
        const workspace = options.project.workspacesByCwd.get(npath.toPortablePath(pkg.packageLocation.slice(0, -1)));
        if (workspace) {
          const peerCandidates = new Set([
            ...Array.from(workspace.manifest.peerDependencies.values(), (x) => structUtils_exports.stringifyIdent(x)),
            ...Array.from(workspace.manifest.peerDependenciesMeta.keys())
          ]);
          for (const peerName of peerCandidates) {
            if (!allDependencies.has(peerName)) {
              allDependencies.set(peerName, parentDependencies.get(peerName) || null);
              node.peerNames.add(peerName);
            }
          }
        }
      }
      const locatorKey = stringifyLocator2(locator);
      const workspaceDependencies = workspaceDependenciesMap.get(locatorKey);
      if (workspaceDependencies) {
        for (const workspaceLocator of workspaceDependencies) {
          allDependencies.set(`${workspaceLocator.name}${WORKSPACE_NAME_SUFFIX}`, workspaceLocator.reference);
        }
      }
      parent.dependencies.add(node);
      if (!isSeen) {
        const siblingPortalDependencyMap = new Map();
        for (const [depName, referencish] of allDependencies) {
          if (referencish !== null) {
            const depLocator = pnp2.getLocator(depName, referencish);
            const pkgLocator = pnp2.getLocator(depName.replace(WORKSPACE_NAME_SUFFIX, ``), referencish);
            const depPkg = pnp2.getPackageInformation(pkgLocator);
            if (depPkg === null)
              throw new Error(`Assertion failed: Expected the package to have been registered`);
            const isExternalSoftLinkDep = isExternalSoftLink(depPkg, depLocator);
            if (options.validateExternalSoftLinks && options.project && isExternalSoftLinkDep) {
              if (depPkg.packageDependencies.size > 0)
                preserveSymlinksRequired = true;
              for (const [name2, referencish2] of depPkg.packageDependencies) {
                const portalDependencyLocator = structUtils_exports.parseLocator(Array.isArray(referencish2) ? `${referencish2[0]}@${referencish2[1]}` : `${name2}@${referencish2}`);
                if (stringifyLocator2(portalDependencyLocator) !== stringifyLocator2(depLocator)) {
                  const parentDependencyReferencish = allDependencies.get(name2);
                  if (parentDependencyReferencish) {
                    const parentDependencyLocator = structUtils_exports.parseLocator(Array.isArray(parentDependencyReferencish) ? `${parentDependencyReferencish[0]}@${parentDependencyReferencish[1]}` : `${name2}@${parentDependencyReferencish}`);
                    if (!areRealLocatorsEqual(parentDependencyLocator, portalDependencyLocator)) {
                      errors4.push({
                        messageName: MessageName.NM_CANT_INSTALL_EXTERNAL_SOFT_LINK,
                        text: `Cannot link ${structUtils_exports.prettyIdent(options.project.configuration, structUtils_exports.parseIdent(depLocator.name))} into ${structUtils_exports.prettyLocator(options.project.configuration, structUtils_exports.parseLocator(`${locator.name}@${locator.reference}`))} dependency ${structUtils_exports.prettyLocator(options.project.configuration, portalDependencyLocator)} conflicts with parent dependency ${structUtils_exports.prettyLocator(options.project.configuration, parentDependencyLocator)}`
                      });
                    }
                  } else {
                    const siblingPortalDependency = siblingPortalDependencyMap.get(name2);
                    if (siblingPortalDependency) {
                      const siblingReferncish = siblingPortalDependency.target;
                      const siblingPortalDependencyLocator = structUtils_exports.parseLocator(Array.isArray(siblingReferncish) ? `${siblingReferncish[0]}@${siblingReferncish[1]}` : `${name2}@${siblingReferncish}`);
                      if (!areRealLocatorsEqual(siblingPortalDependencyLocator, portalDependencyLocator)) {
                        errors4.push({
                          messageName: MessageName.NM_CANT_INSTALL_EXTERNAL_SOFT_LINK,
                          text: `Cannot link ${structUtils_exports.prettyIdent(options.project.configuration, structUtils_exports.parseIdent(depLocator.name))} into ${structUtils_exports.prettyLocator(options.project.configuration, structUtils_exports.parseLocator(`${locator.name}@${locator.reference}`))} dependency ${structUtils_exports.prettyLocator(options.project.configuration, portalDependencyLocator)} conflicts with dependency ${structUtils_exports.prettyLocator(options.project.configuration, siblingPortalDependencyLocator)} from sibling portal ${structUtils_exports.prettyIdent(options.project.configuration, structUtils_exports.parseIdent(siblingPortalDependency.portal.name))}`
                        });
                      }
                    } else {
                      siblingPortalDependencyMap.set(name2, {target: portalDependencyLocator.reference, portal: depLocator});
                    }
                  }
                }
              }
            }
            const parentHoistingLimits = (_a2 = options.hoistingLimitsByCwd) == null ? void 0 : _a2.get(parentRelativeCwd);
            const relativeDepCwd = isExternalSoftLinkDep ? parentRelativeCwd : ppath.relative(topPkgPortableLocation, npath.toPortablePath(depPkg.packageLocation)) || PortablePath.dot;
            const depHoistingLimits = (_b = options.hoistingLimitsByCwd) == null ? void 0 : _b.get(relativeDepCwd);
            const isHoistBorder2 = parentHoistingLimits === NodeModulesHoistingLimits.DEPENDENCIES || depHoistingLimits === NodeModulesHoistingLimits.DEPENDENCIES || depHoistingLimits === NodeModulesHoistingLimits.WORKSPACES;
            addPackageToTree(stringifyLocator2(depLocator) === stringifyLocator2(locator) ? name : depName, depPkg, depLocator, node, allDependencies, relativeDepCwd, isHoistBorder2);
          }
        }
      }
    };
    addPackageToTree(topLocator.name, topPkg, topLocator, packageTree, topPkg.packageDependencies, PortablePath.dot, false);
    return {packageTree, hoistingLimits, errors: errors4, preserveSymlinksRequired};
  };
  function getTargetLocatorPath(locator, pnp2, options) {
    const pkgLocator = pnp2.getLocator(locator.name.replace(WORKSPACE_NAME_SUFFIX, ``), locator.reference);
    const info = pnp2.getPackageInformation(pkgLocator);
    if (info === null)
      throw new Error(`Assertion failed: Expected the package to be registered`);
    let linkType;
    let target;
    if (options.pnpifyFs) {
      target = npath.toPortablePath(info.packageLocation);
      linkType = LinkType2.SOFT;
    } else {
      const truePath = pnp2.resolveVirtual && locator.reference && locator.reference.startsWith(`virtual:`) ? pnp2.resolveVirtual(info.packageLocation) : info.packageLocation;
      target = npath.toPortablePath(truePath || info.packageLocation);
      linkType = info.linkType;
    }
    return {linkType, target};
  }
  var populateNodeModulesTree = (pnp2, hoistedTree, options) => {
    const tree = new Map();
    const makeLeafNode = (locator, nodePath, aliases) => {
      const {linkType, target} = getTargetLocatorPath(locator, pnp2, options);
      return {
        locator: stringifyLocator2(locator),
        nodePath,
        target,
        linkType,
        aliases
      };
    };
    const getPackageName = (identName) => {
      const [nameOrScope, name] = identName.split(`/`);
      return name ? {
        scope: toFilename(nameOrScope),
        name: toFilename(name)
      } : {
        scope: null,
        name: toFilename(nameOrScope)
      };
    };
    const seenNodes = new Set();
    const buildTree = (pkg, locationPrefix, parentNodePath) => {
      if (seenNodes.has(pkg))
        return;
      seenNodes.add(pkg);
      for (const dep of pkg.dependencies) {
        if (dep === pkg)
          continue;
        const references = Array.from(dep.references).sort();
        const locator = {name: dep.identName, reference: references[0]};
        const {name, scope} = getPackageName(dep.name);
        const packageNameParts = scope ? [scope, name] : [name];
        const nodeModulesDirPath = ppath.join(locationPrefix, NODE_MODULES);
        const nodeModulesLocation = ppath.join(nodeModulesDirPath, ...packageNameParts);
        const nodePath = `${parentNodePath}/${locator.name}`;
        const leafNode = makeLeafNode(locator, parentNodePath, references.slice(1));
        if (!dep.name.endsWith(WORKSPACE_NAME_SUFFIX)) {
          const prevNode = tree.get(nodeModulesLocation);
          if (prevNode) {
            if (prevNode.dirList) {
              throw new Error(`Assertion failed: ${nodeModulesLocation} cannot merge dir node with leaf node`);
            } else {
              const locator1 = structUtils_exports.parseLocator(prevNode.locator);
              const locator2 = structUtils_exports.parseLocator(leafNode.locator);
              if (prevNode.linkType !== leafNode.linkType)
                throw new Error(`Assertion failed: ${nodeModulesLocation} cannot merge nodes with different link types ${prevNode.nodePath}/${structUtils_exports.stringifyLocator(locator1)} and ${parentNodePath}/${structUtils_exports.stringifyLocator(locator2)}`);
              else if (locator1.identHash !== locator2.identHash)
                throw new Error(`Assertion failed: ${nodeModulesLocation} cannot merge nodes with different idents ${prevNode.nodePath}/${structUtils_exports.stringifyLocator(locator1)} and ${parentNodePath}/s${structUtils_exports.stringifyLocator(locator2)}`);
              leafNode.aliases = [...leafNode.aliases, ...prevNode.aliases, structUtils_exports.parseLocator(prevNode.locator).reference];
            }
          }
          tree.set(nodeModulesLocation, leafNode);
          const segments = nodeModulesLocation.split(`/`);
          const nodeModulesIdx = segments.indexOf(NODE_MODULES);
          let segCount = segments.length - 1;
          while (nodeModulesIdx >= 0 && segCount > nodeModulesIdx) {
            const dirPath = npath.toPortablePath(segments.slice(0, segCount).join(ppath.sep));
            const targetDir = toFilename(segments[segCount]);
            const subdirs = tree.get(dirPath);
            if (!subdirs) {
              tree.set(dirPath, {dirList: new Set([targetDir])});
            } else if (subdirs.dirList) {
              if (subdirs.dirList.has(targetDir)) {
                break;
              } else {
                subdirs.dirList.add(targetDir);
              }
            }
            segCount--;
          }
        }
        buildTree(dep, leafNode.linkType === LinkType2.SOFT ? leafNode.target : nodeModulesLocation, nodePath);
      }
    };
    const rootNode = makeLeafNode({name: hoistedTree.name, reference: Array.from(hoistedTree.references)[0]}, ``, []);
    const rootPath = rootNode.target;
    tree.set(rootPath, rootNode);
    buildTree(hoistedTree, rootPath, ``);
    return tree;
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-pnpify-virtual-cb1929e62b/1/packages/yarnpkg-pnpify/sources/dynamicRequire.ts
  var dynamicRequire2 = eval(`require`);
  function dynamicRequireNoCache2(path) {
    const physicalPath = npath.fromPortablePath(path);
    const currentCacheEntry = dynamicRequire2.cache[physicalPath];
    delete dynamicRequire2.cache[physicalPath];
    let result;
    try {
      result = dynamicRequire2(physicalPath);
      const freshCacheEntry = dynamicRequire2.cache[physicalPath];
      const dynamicModule = eval(`module`);
      const freshCacheIndex = dynamicModule.children.indexOf(freshCacheEntry);
      if (freshCacheIndex !== -1) {
        dynamicModule.children.splice(freshCacheIndex, 1);
      }
    } finally {
      dynamicRequire2.cache[physicalPath] = currentCacheEntry;
    }
    return result;
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-pnpify-virtual-cb1929e62b/1/packages/yarnpkg-pnpify/sources/resolveNodeModulesPath.ts
  var NODE_MODULES2 = `node_modules`;
  var resolveNodeModulesPath = (inputPath, nodeModulesTree) => {
    const result = {resolvedPath: inputPath};
    const segments = inputPath.split(ppath.sep);
    const firstIdx = segments.indexOf(NODE_MODULES2);
    if (firstIdx < 0)
      return result;
    let lastIdx = segments.lastIndexOf(NODE_MODULES2);
    if (typeof segments[lastIdx + 1] !== `undefined`)
      lastIdx++;
    if (segments[lastIdx][0] === `@` && typeof segments[lastIdx + 1] !== `undefined`)
      lastIdx++;
    let locationCandidate = npath.toPortablePath(segments.slice(0, firstIdx).join(ppath.sep));
    let node, lastNode, lastNodeLocation;
    let curIdx = firstIdx;
    let request2 = PortablePath.dot;
    while (curIdx <= lastIdx) {
      const curSegment = toFilename(segments[curIdx]);
      locationCandidate = ppath.join(locationCandidate, curSegment);
      node = nodeModulesTree.get(locationCandidate);
      if (node) {
        if (node.linkType === LinkType2.SOFT)
          locationCandidate = node.target;
        lastNode = node;
        request2 = PortablePath.dot;
        lastNodeLocation = node.dirList ? locationCandidate : node.target;
      } else {
        request2 = ppath.join(request2, curSegment);
      }
      curIdx++;
    }
    request2 = ppath.join(request2, ...segments.slice(lastIdx + 1).map((x) => toFilename(x)));
    if (lastNode) {
      if (!lastNode.dirList || request2 !== PortablePath.dot) {
        result.resolvedPath = ppath.join(lastNodeLocation, request2);
        result.isSymlink = lastNode && lastNode.linkType === LinkType2.SOFT && request2 === PortablePath.dot;
      } else if (request2 === PortablePath.dot) {
        result.dirList = lastNode.dirList;
        result.forwardedDirPath = npath.toPortablePath(segments.slice(0, firstIdx).join(ppath.sep));
        if (result.forwardedDirPath.endsWith(`.zip`)) {
          result.forwardedDirPath = ppath.dirname(result.forwardedDirPath);
        }
      }
    }
    return result;
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-pnpify-virtual-cb1929e62b/1/packages/yarnpkg-pnpify/sources/NodeModulesFS.ts
  var NodeModulesFS = class extends ProxiedFS {
    constructor(pnp2, {realFs = import_fs8.default, pnpifyFs = true} = {}) {
      super(npath);
      this.baseFs = new PortableNodeModulesFS(pnp2, {baseFs: new NodeFS(realFs), pnpifyFs});
    }
    mapFromBase(path3) {
      return npath.fromPortablePath(path3);
    }
    mapToBase(path3) {
      return npath.toPortablePath(path3);
    }
  };
  var WRITE_FLAGS_REGEX = /[+wa]/;
  var PortableNodeModulesFS = class extends FakeFS {
    constructor(pnp2, {baseFs = new NodeFS(), pnpifyFs = true} = {}) {
      super(ppath);
      if (!pnp2.getDependencyTreeRoots)
        throw new Error(`NodeModulesFS supports PnP API versions 3+, please upgrade your PnP API provider`);
      this.options = {baseFs, pnpifyFs};
      this.baseFs = baseFs;
      const {tree, errors: errors4} = buildNodeModulesTree(pnp2, this.options);
      if (!tree)
        throw new Error(`Assertion failed. Have got non-persistable node_modules graph, errors:
${JSON.stringify(errors4)}`);
      this.nodeModulesTree = tree;
      this.watchManager = new WatchManager();
      const pnpRootPath = npath.toPortablePath(pnp2.getPackageInformation(pnp2.topLevel).packageLocation);
      this.pnpFilePath = ppath.join(pnpRootPath, Filename.pnpCjs);
      this.watchPnpFile(pnpRootPath);
    }
    watchPnpFile(pnpRootPath) {
      this.baseFs.watch(pnpRootPath, {persistent: false}, (_, filename) => {
        if (filename === Filename.pnpCjs) {
          const pnp2 = dynamicRequireNoCache2(this.pnpFilePath);
          const nodeModulesTree = buildNodeModulesTree(pnp2, this.options);
          if (!nodeModulesTree)
            throw new Error(`Assertion failed. Have got non-persistable node_modules graph`);
          this.watchManager.notifyWatchers((nodePath) => resolveNodeModulesPath(nodePath, this.nodeModulesTree));
        }
      });
    }
    persistPath(dir) {
      const pathStack = [];
      let curPath = dir;
      while (!this.baseFs.existsSync(curPath)) {
        pathStack.push(curPath);
        curPath = ppath.dirname(curPath);
      }
      for (const fullPath of pathStack.reverse()) {
        this.baseFs.mkdirSync(fullPath);
      }
    }
    persistVirtualParentFolder(p) {
      if (typeof p !== `number`) {
        const parentPath = this.resolvePath(ppath.dirname(p));
        if (parentPath.dirList) {
          this.persistPath(parentPath.resolvedPath);
        }
      }
    }
    getExtractHint(hints) {
      return this.baseFs.getExtractHint(hints);
    }
    resolve(path3) {
      return this.baseFs.resolve(this.resolvePath(path3).resolvedPath);
    }
    getBaseFs() {
      return this.baseFs;
    }
    resolvePath(p) {
      if (typeof p === `number`) {
        return {resolvedPath: p, fullOriginalPath: p};
      } else {
        const fullOriginalPath = this.pathUtils.resolve(p);
        return __spreadProps(__spreadValues({}, resolveNodeModulesPath(fullOriginalPath, this.nodeModulesTree)), {fullOriginalPath});
      }
    }
    resolveFilePath(p) {
      if (typeof p === `number`)
        return p;
      const pnpPath = this.resolvePath(p);
      return pnpPath.resolvedPath;
    }
    resolveDirOrFilePath(p) {
      if (typeof p === `number`)
        return p;
      const pnpPath = this.resolvePath(p);
      return pnpPath.forwardedDirPath || pnpPath.resolvedPath;
    }
    resolveLink(opts) {
      const {p, onSymlink, onRealPath, statOptions} = opts;
      const pnpPath = this.resolvePath(p);
      if (pnpPath.isSymlink) {
        let stat;
        try {
          stat = this.baseFs.lstatSync(pnpPath.resolvedPath, statOptions);
        } catch (e) {
        }
        if (stat) {
          return onSymlink(stat, this.pathUtils.relative(this.pathUtils.dirname(pnpPath.fullOriginalPath), pnpPath.resolvedPath));
        }
      }
      return onRealPath(pnpPath.forwardedDirPath || pnpPath.resolvedPath);
    }
    static makeSymlinkStats(stats) {
      return Object.assign(stats, {
        isFile: () => false,
        isDirectory: () => false,
        isSymbolicLink: () => true
      });
    }
    getRealPath() {
      return this.baseFs.getRealPath();
    }
    async openPromise(p, flags, mode) {
      if (WRITE_FLAGS_REGEX.test(flags))
        this.persistVirtualParentFolder(p);
      return await this.baseFs.openPromise(this.resolveFilePath(p), flags, mode);
    }
    openSync(p, flags, mode) {
      if (WRITE_FLAGS_REGEX.test(flags))
        this.persistVirtualParentFolder(p);
      return this.baseFs.openSync(this.resolveFilePath(p), flags, mode);
    }
    async opendirPromise(p, opts) {
      const pnpPath = this.resolvePath(p);
      if (pnpPath.dirList || this.resolvePath(ppath.join(p, `node_modules`)).dirList) {
        let fsDirList = [];
        try {
          fsDirList = await this.baseFs.readdirPromise(pnpPath.resolvedPath);
        } catch (e) {
        }
        const entries = Array.from(pnpPath.dirList || [`node_modules`]).concat(fsDirList).sort();
        return opendir(this, p, entries);
      } else {
        return await this.baseFs.opendirPromise(pnpPath.resolvedPath, opts);
      }
    }
    opendirSync(p, opts) {
      const pnpPath = this.resolvePath(p);
      if (pnpPath.dirList || this.resolvePath(ppath.join(p, `node_modules`)).dirList) {
        let fsDirList = [];
        try {
          fsDirList = this.baseFs.readdirSync(pnpPath.resolvedPath);
        } catch (e) {
        }
        const entries = Array.from(pnpPath.dirList || [`node_modules`]).concat(fsDirList).sort();
        return opendir(this, p, entries);
      } else {
        return this.baseFs.opendirSync(pnpPath.resolvedPath, opts);
      }
    }
    async readPromise(fd, buffer, offset, length, position) {
      return await this.baseFs.readPromise(fd, buffer, offset, length, position);
    }
    readSync(fd, buffer, offset, length, position) {
      return this.baseFs.readSync(fd, buffer, offset, length, position);
    }
    async writePromise(fd, buffer, offset, length, position) {
      if (typeof buffer === `string`) {
        return await this.baseFs.writePromise(fd, buffer, offset);
      } else {
        return await this.baseFs.writePromise(fd, buffer, offset, length, position);
      }
    }
    writeSync(fd, buffer, offset, length, position) {
      if (typeof buffer === `string`) {
        return this.baseFs.writeSync(fd, buffer, offset);
      } else {
        return this.baseFs.writeSync(fd, buffer, offset, length, position);
      }
    }
    async closePromise(fd) {
      await this.baseFs.closePromise(fd);
    }
    closeSync(fd) {
      this.baseFs.closeSync(fd);
    }
    createReadStream(p, opts) {
      return this.baseFs.createReadStream(p !== null ? this.resolveFilePath(p) : p, opts);
    }
    createWriteStream(p, opts) {
      return this.baseFs.createWriteStream(p !== null ? this.resolveDirOrFilePath(p) : p, opts);
    }
    async realpathPromise(p) {
      const pnpPath = this.resolvePath(p);
      return pnpPath.dirList ? pnpPath.resolvedPath : this.baseFs.realpathPromise(pnpPath.resolvedPath);
    }
    realpathSync(p) {
      const pnpPath = this.resolvePath(p);
      return pnpPath.dirList ? pnpPath.resolvedPath : this.baseFs.realpathSync(pnpPath.resolvedPath);
    }
    async existsPromise(p) {
      const pnpPath = this.resolvePath(p);
      if (pnpPath.dirList) {
        return true;
      } else {
        return await this.baseFs.existsPromise(pnpPath.resolvedPath);
      }
    }
    existsSync(p) {
      const pnpPath = this.resolvePath(p);
      if (pnpPath.dirList) {
        return true;
      } else {
        return this.baseFs.existsSync(pnpPath.resolvedPath);
      }
    }
    async accessPromise(p, mode) {
      return await this.baseFs.accessPromise(this.resolveDirOrFilePath(p), mode);
    }
    accessSync(p, mode) {
      return this.baseFs.accessSync(this.resolveDirOrFilePath(p), mode);
    }
    async statPromise(p, opts) {
      return await this.baseFs.statPromise(this.resolveDirOrFilePath(p), opts);
    }
    statSync(p, opts) {
      return this.baseFs.statSync(this.resolveDirOrFilePath(p), opts);
    }
    async fstatPromise(fd, opts) {
      return await this.baseFs.fstatPromise(fd, opts);
    }
    fstatSync(fd, opts) {
      return this.baseFs.fstatSync(fd, opts);
    }
    async lstatPromise(p, opts) {
      return this.resolveLink({
        p,
        op: `lstat`,
        onSymlink: (stats) => PortableNodeModulesFS.makeSymlinkStats(stats),
        onRealPath: async (resolvedPath) => await this.baseFs.lstatPromise(resolvedPath, opts),
        statOptions: opts
      });
    }
    lstatSync(p, opts) {
      return this.resolveLink({
        p,
        op: `lstat`,
        onSymlink: (stats) => PortableNodeModulesFS.makeSymlinkStats(stats),
        onRealPath: (resolvedPath) => this.baseFs.lstatSync(resolvedPath, opts),
        statOptions: opts
      });
    }
    async chmodPromise(p, mask) {
      return await this.baseFs.chmodPromise(this.resolveDirOrFilePath(p), mask);
    }
    chmodSync(p, mask) {
      return this.baseFs.chmodSync(this.resolveDirOrFilePath(p), mask);
    }
    async chownPromise(p, uid, gid) {
      return await this.baseFs.chownPromise(this.resolveDirOrFilePath(p), uid, gid);
    }
    chownSync(p, uid, gid) {
      return this.baseFs.chownSync(this.resolveDirOrFilePath(p), uid, gid);
    }
    async renamePromise(oldP, newP) {
      return await this.baseFs.renamePromise(this.resolveDirOrFilePath(oldP), this.resolveDirOrFilePath(newP));
    }
    renameSync(oldP, newP) {
      return this.baseFs.renameSync(this.resolveDirOrFilePath(oldP), this.resolveDirOrFilePath(newP));
    }
    async copyFilePromise(sourceP, destP, flags) {
      return await this.baseFs.copyFilePromise(this.resolveFilePath(sourceP), this.resolveDirOrFilePath(destP), flags);
    }
    copyFileSync(sourceP, destP, flags) {
      return this.baseFs.copyFileSync(this.resolveFilePath(sourceP), this.resolveDirOrFilePath(destP), flags);
    }
    async appendFilePromise(p, content, opts) {
      return await this.baseFs.appendFilePromise(this.resolveDirOrFilePath(p), content, opts);
    }
    appendFileSync(p, content, opts) {
      return this.baseFs.appendFileSync(this.resolveDirOrFilePath(p), content, opts);
    }
    async writeFilePromise(p, content, opts) {
      return await this.baseFs.writeFilePromise(this.resolveDirOrFilePath(p), content, opts);
    }
    writeFileSync(p, content, opts) {
      return this.baseFs.writeFileSync(this.resolveDirOrFilePath(p), content, opts);
    }
    async unlinkPromise(p) {
      return await this.baseFs.unlinkPromise(this.resolveDirOrFilePath(p));
    }
    unlinkSync(p) {
      return this.baseFs.unlinkSync(this.resolveDirOrFilePath(p));
    }
    async utimesPromise(p, atime, mtime) {
      return await this.baseFs.utimesPromise(this.resolveDirOrFilePath(p), atime, mtime);
    }
    utimesSync(p, atime, mtime) {
      return this.baseFs.utimesSync(this.resolveDirOrFilePath(p), atime, mtime);
    }
    async mkdirPromise(p, opts) {
      const pnpPath = this.resolvePath(p);
      this.persistVirtualParentFolder(p);
      return this.baseFs.mkdirPromise(pnpPath.resolvedPath, opts);
    }
    mkdirSync(p, opts) {
      const pnpPath = this.resolvePath(p);
      this.persistVirtualParentFolder(p);
      return this.baseFs.mkdirSync(pnpPath.resolvedPath, opts);
    }
    async rmdirPromise(p, opts) {
      return await this.baseFs.rmdirPromise(this.resolveDirOrFilePath(p), opts);
    }
    rmdirSync(p, opts) {
      return this.baseFs.rmdirSync(this.resolveDirOrFilePath(p), opts);
    }
    async linkPromise(existingP, newP) {
      return await this.baseFs.linkPromise(this.resolveDirOrFilePath(existingP), this.resolveDirOrFilePath(newP));
    }
    linkSync(existingP, newP) {
      return this.baseFs.linkSync(this.resolveDirOrFilePath(existingP), this.resolveDirOrFilePath(newP));
    }
    async symlinkPromise(target, p) {
      return await this.baseFs.symlinkPromise(this.resolveDirOrFilePath(target), this.resolveDirOrFilePath(p));
    }
    symlinkSync(target, p) {
      return this.baseFs.symlinkSync(this.resolveDirOrFilePath(target), this.resolveDirOrFilePath(p));
    }
    async readFilePromise(p, encoding) {
      switch (encoding) {
        case `utf8`:
          return await this.baseFs.readFilePromise(this.resolveFilePath(p), encoding);
        default:
          return await this.baseFs.readFilePromise(this.resolveFilePath(p), encoding);
      }
    }
    readFileSync(p, encoding) {
      switch (encoding) {
        case `utf8`:
          return this.baseFs.readFileSync(this.resolveFilePath(p), encoding);
        default:
          return this.baseFs.readFileSync(this.resolveFilePath(p), encoding);
      }
    }
    async readdirPromise(p, {withFileTypes} = {}) {
      const pnpPath = this.resolvePath(p);
      if (pnpPath.dirList || this.resolvePath(ppath.join(p, `node_modules`)).dirList) {
        let fsDirList = [];
        try {
          fsDirList = await this.baseFs.readdirPromise(pnpPath.resolvedPath);
        } catch (e) {
        }
        const entries = Array.from(pnpPath.dirList || [`node_modules`]).concat(fsDirList).sort();
        if (!withFileTypes)
          return entries;
        return entries.map((name) => {
          return Object.assign(this.lstatSync(ppath.join(p, name)), {
            name
          });
        });
      } else {
        return await this.baseFs.readdirPromise(pnpPath.resolvedPath, {withFileTypes});
      }
    }
    readdirSync(p, {withFileTypes} = {}) {
      const pnpPath = this.resolvePath(p);
      if (pnpPath.dirList || this.resolvePath(ppath.join(p, `node_modules`)).dirList) {
        let fsDirList = [];
        try {
          fsDirList = this.baseFs.readdirSync(pnpPath.resolvedPath);
        } catch (e) {
        }
        const entries = Array.from(pnpPath.dirList || [`node_modules`]).concat(fsDirList).sort();
        if (!withFileTypes)
          return entries;
        return entries.map((name) => {
          return Object.assign(this.lstatSync(ppath.join(p, name)), {
            name
          });
        });
      } else {
        return this.baseFs.readdirSync(pnpPath.resolvedPath, {withFileTypes});
      }
    }
    async readlinkPromise(p) {
      return this.resolveLink({
        p,
        op: `readlink`,
        onSymlink: (_stats, targetPath) => targetPath,
        onRealPath: async (targetPath) => await this.baseFs.readlinkPromise(this.resolveDirOrFilePath(targetPath))
      });
    }
    readlinkSync(p) {
      return this.resolveLink({
        p,
        op: `readlink`,
        onSymlink: (_stats, targetPath) => targetPath,
        onRealPath: (targetPath) => this.baseFs.readlinkSync(this.resolveDirOrFilePath(targetPath))
      });
    }
    async truncatePromise(p, len) {
      return await this.baseFs.truncatePromise(this.resolveDirOrFilePath(p), len);
    }
    truncateSync(p, len) {
      return this.baseFs.truncateSync(this.resolveDirOrFilePath(p), len);
    }
    watch(p, a, b) {
      const pnpPath = this.resolvePath(p);
      const watchPath = pnpPath.resolvedPath;
      if (watchPath && pnpPath.dirList) {
        const callback = typeof a === `function` ? a : typeof b === `function` ? b : () => {
        };
        return this.watchManager.registerWatcher(watchPath, pnpPath.dirList, callback);
      } else {
        return this.baseFs.watch(this.resolveDirOrFilePath(p), a, b);
      }
    }
    watchFile(p, a, b) {
      return this.baseFs.watchFile(this.resolveDirOrFilePath(p), a, b);
    }
    unwatchFile(p, cb) {
      return this.baseFs.unwatchFile(this.resolveDirOrFilePath(p), cb);
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-pnpify-virtual-cb1929e62b/1/packages/yarnpkg-pnpify/sources/index.ts
  var fsPatched = false;
  var pnp;
  try {
    pnp = dynamicRequire2(`pnpapi`);
  } catch (e) {
  }
  var patchFs2 = () => {
    if (pnp && !fsPatched) {
      const realFs = __spreadValues({}, import_fs9.default);
      const nodeModulesFS = new NodeModulesFS(pnp, {realFs});
      patchFs(import_fs9.default, nodeModulesFS);
      fsPatched = true;
    }
  };
  if (!process.mainModule)
    patchFs2();

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-pnp-virtual-afab17303c/1/packages/plugin-pnp/sources/index.ts
  var sources_exports15 = {};
  __export(sources_exports15, {
    PnpInstaller: () => PnpInstaller,
    PnpLinker: () => PnpLinker,
    default: () => sources_default12,
    getPnpPath: () => getPnpPath,
    jsInstallUtils: () => jsInstallUtils_exports,
    pnpUtils: () => pnpUtils_exports,
    quotePathIfNeeded: () => quotePathIfNeeded
  });
  var import_semver11 = __toModule(require_semver2());

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-pnp/sources/types.ts
  var LinkType3;
  (function(LinkType4) {
    LinkType4["HARD"] = `HARD`;
    LinkType4["SOFT"] = `SOFT`;
  })(LinkType3 || (LinkType3 = {}));

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-pnp/sources/generatePrettyJson.ts
  var PrettyJsonState;
  (function(PrettyJsonState2) {
    PrettyJsonState2["DEFAULT"] = `DEFAULT`;
    PrettyJsonState2["TOP_LEVEL"] = `TOP_LEVEL`;
    PrettyJsonState2["FALLBACK_EXCLUSION_LIST"] = `FALLBACK_EXCLUSION_LIST`;
    PrettyJsonState2["FALLBACK_EXCLUSION_ENTRIES"] = `FALLBACK_EXCLUSION_ENTRIES`;
    PrettyJsonState2["FALLBACK_EXCLUSION_DATA"] = `FALLBACK_EXCLUSION_DATA`;
    PrettyJsonState2["PACKAGE_REGISTRY_DATA"] = `PACKAGE_REGISTRY_DATA`;
    PrettyJsonState2["PACKAGE_REGISTRY_ENTRIES"] = `PACKAGE_REGISTRY_ENTRIES`;
    PrettyJsonState2["PACKAGE_STORE_DATA"] = `PACKAGE_STORE_DATA`;
    PrettyJsonState2["PACKAGE_STORE_ENTRIES"] = `PACKAGE_STORE_ENTRIES`;
    PrettyJsonState2["PACKAGE_INFORMATION_DATA"] = `PACKAGE_INFORMATION_DATA`;
    PrettyJsonState2["PACKAGE_DEPENDENCIES"] = `PACKAGE_DEPENDENCIES`;
    PrettyJsonState2["PACKAGE_DEPENDENCY"] = `PACKAGE_DEPENDENCY`;
  })(PrettyJsonState || (PrettyJsonState = {}));
  var prettyJsonMachine = {
    [PrettyJsonState.DEFAULT]: {
      collapsed: false,
      next: {
        [`*`]: PrettyJsonState.DEFAULT
      }
    },
    [PrettyJsonState.TOP_LEVEL]: {
      collapsed: false,
      next: {
        [`fallbackExclusionList`]: PrettyJsonState.FALLBACK_EXCLUSION_LIST,
        [`packageRegistryData`]: PrettyJsonState.PACKAGE_REGISTRY_DATA,
        [`*`]: PrettyJsonState.DEFAULT
      }
    },
    [PrettyJsonState.FALLBACK_EXCLUSION_LIST]: {
      collapsed: false,
      next: {
        [`*`]: PrettyJsonState.FALLBACK_EXCLUSION_ENTRIES
      }
    },
    [PrettyJsonState.FALLBACK_EXCLUSION_ENTRIES]: {
      collapsed: true,
      next: {
        [`*`]: PrettyJsonState.FALLBACK_EXCLUSION_DATA
      }
    },
    [PrettyJsonState.FALLBACK_EXCLUSION_DATA]: {
      collapsed: true,
      next: {
        [`*`]: PrettyJsonState.DEFAULT
      }
    },
    [PrettyJsonState.PACKAGE_REGISTRY_DATA]: {
      collapsed: false,
      next: {
        [`*`]: PrettyJsonState.PACKAGE_REGISTRY_ENTRIES
      }
    },
    [PrettyJsonState.PACKAGE_REGISTRY_ENTRIES]: {
      collapsed: true,
      next: {
        [`*`]: PrettyJsonState.PACKAGE_STORE_DATA
      }
    },
    [PrettyJsonState.PACKAGE_STORE_DATA]: {
      collapsed: false,
      next: {
        [`*`]: PrettyJsonState.PACKAGE_STORE_ENTRIES
      }
    },
    [PrettyJsonState.PACKAGE_STORE_ENTRIES]: {
      collapsed: true,
      next: {
        [`*`]: PrettyJsonState.PACKAGE_INFORMATION_DATA
      }
    },
    [PrettyJsonState.PACKAGE_INFORMATION_DATA]: {
      collapsed: false,
      next: {
        [`packageDependencies`]: PrettyJsonState.PACKAGE_DEPENDENCIES,
        [`*`]: PrettyJsonState.DEFAULT
      }
    },
    [PrettyJsonState.PACKAGE_DEPENDENCIES]: {
      collapsed: false,
      next: {
        [`*`]: PrettyJsonState.PACKAGE_DEPENDENCY
      }
    },
    [PrettyJsonState.PACKAGE_DEPENDENCY]: {
      collapsed: true,
      next: {
        [`*`]: PrettyJsonState.DEFAULT
      }
    }
  };
  function generateCollapsedArray(data, state, indent) {
    let result = ``;
    result += `[`;
    for (let t5 = 0, T = data.length; t5 < T; ++t5) {
      result += generateNext(String(t5), data[t5], state, indent).replace(/^ +/g, ``);
      if (t5 + 1 < T) {
        result += `, `;
      }
    }
    result += `]`;
    return result;
  }
  function generateExpandedArray(data, state, indent) {
    const nextIndent = `${indent}  `;
    let result = ``;
    result += indent;
    result += `[
`;
    for (let t5 = 0, T = data.length; t5 < T; ++t5) {
      result += nextIndent + generateNext(String(t5), data[t5], state, nextIndent).replace(/^ +/, ``);
      if (t5 + 1 < T)
        result += `,`;
      result += `
`;
    }
    result += indent;
    result += `]`;
    return result;
  }
  function generateCollapsedObject(data, state, indent) {
    const keys = Object.keys(data);
    let result = ``;
    result += `{`;
    for (let t5 = 0, T = keys.length; t5 < T; ++t5) {
      const key = keys[t5];
      const value = data[key];
      if (typeof value === `undefined`)
        continue;
      result += JSON.stringify(key);
      result += `: `;
      result += generateNext(key, value, state, indent).replace(/^ +/g, ``);
      if (t5 + 1 < T) {
        result += `, `;
      }
    }
    result += `}`;
    return result;
  }
  function generateExpandedObject(data, state, indent) {
    const keys = Object.keys(data);
    const nextIndent = `${indent}  `;
    let result = ``;
    result += indent;
    result += `{
`;
    for (let t5 = 0, T = keys.length; t5 < T; ++t5) {
      const key = keys[t5];
      const value = data[key];
      if (typeof value === `undefined`)
        continue;
      result += nextIndent;
      result += JSON.stringify(key);
      result += `: `;
      result += generateNext(key, value, state, nextIndent).replace(/^ +/g, ``);
      if (t5 + 1 < T)
        result += `,`;
      result += `
`;
    }
    result += indent;
    result += `}`;
    return result;
  }
  function generateNext(key, data, state, indent) {
    const {next} = prettyJsonMachine[state];
    const nextState = next[key] || next[`*`];
    return generate(data, nextState, indent);
  }
  function generate(data, state, indent) {
    const {collapsed} = prettyJsonMachine[state];
    if (Array.isArray(data)) {
      if (collapsed) {
        return generateCollapsedArray(data, state, indent);
      } else {
        return generateExpandedArray(data, state, indent);
      }
    }
    if (typeof data === `object` && data !== null) {
      if (collapsed) {
        return generateCollapsedObject(data, state, indent);
      } else {
        return generateExpandedObject(data, state, indent);
      }
    }
    return JSON.stringify(data);
  }
  function generatePrettyJson(data) {
    return generate(data, PrettyJsonState.TOP_LEVEL, ``);
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-pnp/sources/generateSerializedState.ts
  function sortMap2(values, mappers) {
    const asArray = Array.from(values);
    if (!Array.isArray(mappers))
      mappers = [mappers];
    const stringified = [];
    for (const mapper of mappers)
      stringified.push(asArray.map((value) => mapper(value)));
    const indices = asArray.map((_, index) => index);
    indices.sort((a, b) => {
      for (const layer of stringified) {
        const comparison = layer[a] < layer[b] ? -1 : layer[a] > layer[b] ? 1 : 0;
        if (comparison !== 0) {
          return comparison;
        }
      }
      return 0;
    });
    return indices.map((index) => {
      return asArray[index];
    });
  }
  function generateFallbackExclusionList(settings) {
    const fallbackExclusionList = new Map();
    const sortedData = sortMap2(settings.fallbackExclusionList || [], [
      ({name, reference}) => name,
      ({name, reference}) => reference
    ]);
    for (const {name, reference} of sortedData) {
      let references = fallbackExclusionList.get(name);
      if (typeof references === `undefined`)
        fallbackExclusionList.set(name, references = new Set());
      references.add(reference);
    }
    return Array.from(fallbackExclusionList).map(([name, references]) => {
      return [name, Array.from(references)];
    });
  }
  function generateFallbackPoolData(settings) {
    return sortMap2(settings.fallbackPool || [], ([name]) => name);
  }
  function generatePackageRegistryData(settings) {
    const packageRegistryData = [];
    for (const [packageName, packageStore] of sortMap2(settings.packageRegistry, ([packageName2]) => packageName2 === null ? `0` : `1${packageName2}`)) {
      const packageStoreData = [];
      packageRegistryData.push([packageName, packageStoreData]);
      for (const [packageReference, {packageLocation, packageDependencies, packagePeers, linkType, discardFromLookup}] of sortMap2(packageStore, ([packageReference2]) => packageReference2 === null ? `0` : `1${packageReference2}`)) {
        const normalizedDependencies = [];
        if (packageName !== null && packageReference !== null && !packageDependencies.has(packageName))
          normalizedDependencies.push([packageName, packageReference]);
        for (const [dependencyName, dependencyReference] of sortMap2(packageDependencies.entries(), ([dependencyName2]) => dependencyName2))
          normalizedDependencies.push([dependencyName, dependencyReference]);
        const normalizedPeers = packagePeers && packagePeers.size > 0 ? Array.from(packagePeers) : void 0;
        const normalizedDiscardFromLookup = discardFromLookup ? discardFromLookup : void 0;
        packageStoreData.push([packageReference, {
          packageLocation,
          packageDependencies: normalizedDependencies,
          packagePeers: normalizedPeers,
          linkType,
          discardFromLookup: normalizedDiscardFromLookup
        }]);
      }
    }
    return packageRegistryData;
  }
  function generateSerializedState(settings) {
    return {
      __info: [
        `This file is automatically generated. Do not touch it, or risk`,
        `your modifications being lost. We also recommend you not to read`,
        `it either without using the @yarnpkg/pnp package, as the data layout`,
        `is entirely unspecified and WILL change from a version to another.`
      ],
      dependencyTreeRoots: settings.dependencyTreeRoots,
      enableTopLevelFallback: settings.enableTopLevelFallback || false,
      ignorePatternData: settings.ignorePattern || null,
      fallbackExclusionList: generateFallbackExclusionList(settings),
      fallbackPool: generateFallbackPoolData(settings),
      packageRegistryData: generatePackageRegistryData(settings)
    };
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-pnp/sources/generatePnpScript.ts
  var import_hook = __toModule(require_hook());
  function generateLoader(shebang, loader) {
    return [
      shebang ? `${shebang}
` : ``,
      `/* eslint-disable */

`,
      `try {
`,
      `  Object.freeze({}).detectStrictMode = true;
`,
      `} catch (error) {
`,
      `  throw new Error(\`The whole PnP file got strict-mode-ified, which is known to break (Emscripten libraries aren't strict mode). This usually happens when the file goes through Babel.\`);
`,
      `}
`,
      `
`,
      `var __non_webpack_module__ = module;
`,
      `
`,
      `function $$SETUP_STATE(hydrateRuntimeState, basePath) {
`,
      loader.replace(/^/gm, `  `),
      `}
`,
      `
`,
      (0, import_hook.default)()
    ].join(``);
  }
  function generateJsonString(data) {
    return JSON.stringify(data, null, 2);
  }
  function generateInlinedSetup(data) {
    return [
      `return hydrateRuntimeState(${generatePrettyJson(data)}, {basePath: basePath || __dirname});
`
    ].join(``);
  }
  function generateSplitSetup(dataLocation) {
    return [
      `var path = require('path');
`,
      `var dataLocation = path.resolve(__dirname, ${JSON.stringify(dataLocation)});
`,
      `return hydrateRuntimeState(require(dataLocation), {basePath: basePath || path.dirname(dataLocation)});
`
    ].join(``);
  }
  function generateInlinedScript(settings) {
    const data = generateSerializedState(settings);
    const setup = generateInlinedSetup(data);
    const loaderFile = generateLoader(settings.shebang, setup);
    return loaderFile;
  }
  function generateSplitScript(settings) {
    const data = generateSerializedState(settings);
    const setup = generateSplitSetup(settings.dataLocation);
    const loaderFile = generateLoader(settings.shebang, setup);
    return {dataFile: generateJsonString(data), loaderFile};
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-pnp/sources/hydratePnpApi.ts
  var import_fs10 = __toModule(require("fs"));
  var import_path16 = __toModule(require("path"));
  var import_util11 = __toModule(require("util"));

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-pnp/sources/loader/hydrateRuntimeState.ts
  function hydrateRuntimeState(data, {basePath}) {
    const portablePath = npath.toPortablePath(basePath);
    const absolutePortablePath = ppath.resolve(portablePath);
    const ignorePattern = data.ignorePatternData !== null ? new RegExp(data.ignorePatternData) : null;
    const packageLocatorsByLocations = new Map();
    const packageRegistry = new Map(data.packageRegistryData.map(([packageName, packageStoreData]) => {
      return [packageName, new Map(packageStoreData.map(([packageReference, packageInformationData]) => {
        var _a2;
        if (packageName === null !== (packageReference === null))
          throw new Error(`Assertion failed: The name and reference should be null, or neither should`);
        const discardFromLookup = (_a2 = packageInformationData.discardFromLookup) != null ? _a2 : false;
        const packageLocator = {name: packageName, reference: packageReference};
        const entry = packageLocatorsByLocations.get(packageInformationData.packageLocation);
        if (!entry) {
          packageLocatorsByLocations.set(packageInformationData.packageLocation, {locator: packageLocator, discardFromLookup});
        } else {
          entry.discardFromLookup = entry.discardFromLookup && discardFromLookup;
          if (!discardFromLookup) {
            entry.locator = packageLocator;
          }
        }
        let resolvedPackageLocation = null;
        return [packageReference, {
          packageDependencies: new Map(packageInformationData.packageDependencies),
          packagePeers: new Set(packageInformationData.packagePeers),
          linkType: packageInformationData.linkType,
          discardFromLookup,
          get packageLocation() {
            return resolvedPackageLocation || (resolvedPackageLocation = ppath.join(absolutePortablePath, packageInformationData.packageLocation));
          }
        }];
      }))];
    }));
    const fallbackExclusionList = new Map(data.fallbackExclusionList.map(([packageName, packageReferences]) => {
      return [packageName, new Set(packageReferences)];
    }));
    const fallbackPool = new Map(data.fallbackPool);
    const dependencyTreeRoots = data.dependencyTreeRoots;
    const enableTopLevelFallback = data.enableTopLevelFallback;
    return {
      basePath: portablePath,
      dependencyTreeRoots,
      enableTopLevelFallback,
      fallbackExclusionList,
      fallbackPool,
      ignorePattern,
      packageLocatorsByLocations,
      packageRegistry
    };
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-pnp/sources/loader/makeApi.ts
  var import_module2 = __toModule(require("module"));
  var import_resolve2 = __toModule(require_dist3());
  var import_util10 = __toModule(require("util"));

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-pnp/sources/loader/internalTools.ts
  var ErrorCode;
  (function(ErrorCode2) {
    ErrorCode2["API_ERROR"] = `API_ERROR`;
    ErrorCode2["BUILTIN_NODE_RESOLUTION_FAILED"] = `BUILTIN_NODE_RESOLUTION_FAILED`;
    ErrorCode2["MISSING_DEPENDENCY"] = `MISSING_DEPENDENCY`;
    ErrorCode2["MISSING_PEER_DEPENDENCY"] = `MISSING_PEER_DEPENDENCY`;
    ErrorCode2["QUALIFIED_PATH_RESOLUTION_FAILED"] = `QUALIFIED_PATH_RESOLUTION_FAILED`;
    ErrorCode2["INTERNAL"] = `INTERNAL`;
    ErrorCode2["UNDECLARED_DEPENDENCY"] = `UNDECLARED_DEPENDENCY`;
    ErrorCode2["UNSUPPORTED"] = `UNSUPPORTED`;
  })(ErrorCode || (ErrorCode = {}));
  var MODULE_NOT_FOUND_ERRORS = new Set([
    ErrorCode.BUILTIN_NODE_RESOLUTION_FAILED,
    ErrorCode.MISSING_DEPENDENCY,
    ErrorCode.MISSING_PEER_DEPENDENCY,
    ErrorCode.QUALIFIED_PATH_RESOLUTION_FAILED,
    ErrorCode.UNDECLARED_DEPENDENCY
  ]);
  function makeError3(pnpCode, message, data = {}) {
    const code = MODULE_NOT_FOUND_ERRORS.has(pnpCode) ? `MODULE_NOT_FOUND` : pnpCode;
    const propertySpec = {
      configurable: true,
      writable: true,
      enumerable: false
    };
    return Object.defineProperties(new Error(message), {
      code: __spreadProps(__spreadValues({}, propertySpec), {
        value: code
      }),
      pnpCode: __spreadProps(__spreadValues({}, propertySpec), {
        value: pnpCode
      }),
      data: __spreadProps(__spreadValues({}, propertySpec), {
        value: data
      })
    });
  }
  function getPathForDisplay(p) {
    return npath.normalize(npath.fromPortablePath(p));
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-pnp/sources/loader/makeApi.ts
  function makeApi(runtimeState, opts) {
    const alwaysWarnOnFallback = Number(process.env.PNP_ALWAYS_WARN_ON_FALLBACK) > 0;
    const debugLevel = Number(process.env.PNP_DEBUG_LEVEL);
    const builtinModules2 = new Set(import_module2.Module.builtinModules || Object.keys(process.binding(`natives`)));
    const isBuiltinModule = (request2) => builtinModules2.has(request2) || request2.startsWith(`node:`);
    const pathRegExp = /^(?![a-zA-Z]:[\\/]|\\\\|\.{0,2}(?:\/|$))((?:node:)?(?:@[^/]+\/)?[^/]+)\/*(.*|)$/;
    const isStrictRegExp = /^(\/|\.{1,2}(\/|$))/;
    const isDirRegExp = /\/$/;
    const isRelativeRegexp = /^\.{0,2}\//;
    const topLevelLocator = {name: null, reference: null};
    const fallbackLocators = [];
    const emittedWarnings = new Set();
    if (runtimeState.enableTopLevelFallback === true)
      fallbackLocators.push(topLevelLocator);
    if (opts.compatibilityMode !== false) {
      for (const name of [`react-scripts`, `gatsby`]) {
        const packageStore = runtimeState.packageRegistry.get(name);
        if (packageStore) {
          for (const reference of packageStore.keys()) {
            if (reference === null) {
              throw new Error(`Assertion failed: This reference shouldn't be null`);
            } else {
              fallbackLocators.push({name, reference});
            }
          }
        }
      }
    }
    const {
      ignorePattern,
      packageRegistry,
      packageLocatorsByLocations
    } = runtimeState;
    function makeLogEntry(name, args) {
      return {
        fn: name,
        args,
        error: null,
        result: null
      };
    }
    function trace(entry) {
      var _a2, _b, _c, _d, _e, _f;
      const colors2 = (_c = (_b = (_a2 = process.stderr) == null ? void 0 : _a2.hasColors) == null ? void 0 : _b.call(_a2)) != null ? _c : process.stdout.isTTY;
      const c = (n, str) => `[${n}m${str}[0m`;
      const error = entry.error;
      if (error)
        console.error(c(`31;1`, `\u2716 ${(_d = entry.error) == null ? void 0 : _d.message.replace(/\n.*/s, ``)}`));
      else
        console.error(c(`33;1`, `\u203C Resolution`));
      if (entry.args.length > 0)
        console.error();
      for (const arg of entry.args)
        console.error(`  ${c(`37;1`, `In \u2190`)} ${(0, import_util10.inspect)(arg, {colors: colors2, compact: true})}`);
      if (entry.result) {
        console.error();
        console.error(`  ${c(`37;1`, `Out \u2192`)} ${(0, import_util10.inspect)(entry.result, {colors: colors2, compact: true})}`);
      }
      const stack = (_f = (_e = new Error().stack.match(/(?<=^ +)at.*/gm)) == null ? void 0 : _e.slice(2)) != null ? _f : [];
      if (stack.length > 0) {
        console.error();
        for (const line of stack) {
          console.error(`  ${c(`38;5;244`, line)}`);
        }
      }
      console.error();
    }
    function maybeLog(name, fn) {
      if (opts.allowDebug === false)
        return fn;
      if (Number.isFinite(debugLevel)) {
        if (debugLevel >= 2) {
          return (...args) => {
            const logEntry = makeLogEntry(name, args);
            try {
              return logEntry.result = fn(...args);
            } catch (error) {
              throw logEntry.error = error;
            } finally {
              trace(logEntry);
            }
          };
        } else if (debugLevel >= 1) {
          return (...args) => {
            try {
              return fn(...args);
            } catch (error) {
              const logEntry = makeLogEntry(name, args);
              logEntry.error = error;
              trace(logEntry);
              throw error;
            }
          };
        }
      }
      return fn;
    }
    function getPackageInformationSafe(packageLocator) {
      const packageInformation = getPackageInformation(packageLocator);
      if (!packageInformation) {
        throw makeError3(ErrorCode.INTERNAL, `Couldn't find a matching entry in the dependency tree for the specified parent (this is probably an internal error)`);
      }
      return packageInformation;
    }
    function isDependencyTreeRoot(packageLocator) {
      if (packageLocator.name === null)
        return true;
      for (const dependencyTreeRoot of runtimeState.dependencyTreeRoots)
        if (dependencyTreeRoot.name === packageLocator.name && dependencyTreeRoot.reference === packageLocator.reference)
          return true;
      return false;
    }
    function applyNodeExportsResolution(unqualifiedPath) {
      const locator = findPackageLocator(ppath.join(unqualifiedPath, `internal.js`), {
        resolveIgnored: true,
        includeDiscardFromLookup: true
      });
      if (locator === null) {
        throw makeError3(ErrorCode.INTERNAL, `The locator that owns the "${unqualifiedPath}" path can't be found inside the dependency tree (this is probably an internal error)`);
      }
      const {packageLocation} = getPackageInformationSafe(locator);
      const manifestPath = ppath.join(packageLocation, Filename.manifest);
      if (!opts.fakeFs.existsSync(manifestPath))
        return null;
      const pkgJson = JSON.parse(opts.fakeFs.readFileSync(manifestPath, `utf8`));
      let subpath = ppath.contains(packageLocation, unqualifiedPath);
      if (subpath === null) {
        throw makeError3(ErrorCode.INTERNAL, `unqualifiedPath doesn't contain the packageLocation (this is probably an internal error)`);
      }
      if (!isRelativeRegexp.test(subpath))
        subpath = `./${subpath}`;
      const resolvedExport = (0, import_resolve2.resolve)(pkgJson, ppath.normalize(subpath), {
        browser: false,
        require: true,
        conditions: []
      });
      if (typeof resolvedExport === `string`)
        return ppath.join(packageLocation, resolvedExport);
      return null;
    }
    function applyNodeExtensionResolution(unqualifiedPath, candidates, {extensions}) {
      let stat;
      try {
        candidates.push(unqualifiedPath);
        stat = opts.fakeFs.statSync(unqualifiedPath);
      } catch (error) {
      }
      if (stat && !stat.isDirectory())
        return opts.fakeFs.realpathSync(unqualifiedPath);
      if (stat && stat.isDirectory()) {
        let pkgJson;
        try {
          pkgJson = JSON.parse(opts.fakeFs.readFileSync(ppath.join(unqualifiedPath, Filename.manifest), `utf8`));
        } catch (error) {
        }
        let nextUnqualifiedPath;
        if (pkgJson && pkgJson.main)
          nextUnqualifiedPath = ppath.resolve(unqualifiedPath, pkgJson.main);
        if (nextUnqualifiedPath && nextUnqualifiedPath !== unqualifiedPath) {
          const resolution = applyNodeExtensionResolution(nextUnqualifiedPath, candidates, {extensions});
          if (resolution !== null) {
            return resolution;
          }
        }
      }
      for (let i = 0, length = extensions.length; i < length; i++) {
        const candidateFile = `${unqualifiedPath}${extensions[i]}`;
        candidates.push(candidateFile);
        if (opts.fakeFs.existsSync(candidateFile)) {
          return candidateFile;
        }
      }
      if (stat && stat.isDirectory()) {
        for (let i = 0, length = extensions.length; i < length; i++) {
          const candidateFile = ppath.format({dir: unqualifiedPath, name: `index`, ext: extensions[i]});
          candidates.push(candidateFile);
          if (opts.fakeFs.existsSync(candidateFile)) {
            return candidateFile;
          }
        }
      }
      return null;
    }
    function makeFakeModule(path3) {
      const fakeModule = new import_module2.Module(path3, null);
      fakeModule.filename = path3;
      fakeModule.paths = import_module2.Module._nodeModulePaths(path3);
      return fakeModule;
    }
    function callNativeResolution(request2, issuer) {
      if (issuer.endsWith(`/`))
        issuer = ppath.join(issuer, `internal.js`);
      return import_module2.Module._resolveFilename(npath.fromPortablePath(request2), makeFakeModule(npath.fromPortablePath(issuer)), false, {plugnplay: false});
    }
    function isPathIgnored(path3) {
      if (ignorePattern === null)
        return false;
      const subPath = ppath.contains(runtimeState.basePath, path3);
      if (subPath === null)
        return false;
      if (ignorePattern.test(subPath.replace(/\/$/, ``))) {
        return true;
      } else {
        return false;
      }
    }
    const VERSIONS = {std: 3, resolveVirtual: 1, getAllLocators: 1};
    const topLevel = topLevelLocator;
    function getPackageInformation({name, reference}) {
      const packageInformationStore = packageRegistry.get(name);
      if (!packageInformationStore)
        return null;
      const packageInformation = packageInformationStore.get(reference);
      if (!packageInformation)
        return null;
      return packageInformation;
    }
    function findPackageDependents({name, reference}) {
      const dependents = [];
      for (const [dependentName, packageInformationStore] of packageRegistry) {
        if (dependentName === null)
          continue;
        for (const [dependentReference, packageInformation] of packageInformationStore) {
          if (dependentReference === null)
            continue;
          const dependencyReference = packageInformation.packageDependencies.get(name);
          if (dependencyReference !== reference)
            continue;
          if (dependentName === name && dependentReference === reference)
            continue;
          dependents.push({
            name: dependentName,
            reference: dependentReference
          });
        }
      }
      return dependents;
    }
    function findBrokenPeerDependencies(dependency, initialPackage) {
      const brokenPackages = new Map();
      const alreadyVisited = new Set();
      const traversal = (currentPackage) => {
        const identifier = JSON.stringify(currentPackage.name);
        if (alreadyVisited.has(identifier))
          return;
        alreadyVisited.add(identifier);
        const dependents = findPackageDependents(currentPackage);
        for (const dependent of dependents) {
          const dependentInformation = getPackageInformationSafe(dependent);
          if (dependentInformation.packagePeers.has(dependency)) {
            traversal(dependent);
          } else {
            let brokenSet = brokenPackages.get(dependent.name);
            if (typeof brokenSet === `undefined`)
              brokenPackages.set(dependent.name, brokenSet = new Set());
            brokenSet.add(dependent.reference);
          }
        }
      };
      traversal(initialPackage);
      const brokenList = [];
      for (const name of [...brokenPackages.keys()].sort())
        for (const reference of [...brokenPackages.get(name)].sort())
          brokenList.push({name, reference});
      return brokenList;
    }
    function findPackageLocator(location, {resolveIgnored = false, includeDiscardFromLookup = false} = {}) {
      if (isPathIgnored(location) && !resolveIgnored)
        return null;
      let relativeLocation = ppath.relative(runtimeState.basePath, location);
      if (!relativeLocation.match(isStrictRegExp))
        relativeLocation = `./${relativeLocation}`;
      if (!relativeLocation.endsWith(`/`))
        relativeLocation = `${relativeLocation}/`;
      do {
        const entry = packageLocatorsByLocations.get(relativeLocation);
        if (typeof entry === `undefined` || entry.discardFromLookup && !includeDiscardFromLookup) {
          relativeLocation = relativeLocation.substring(0, relativeLocation.lastIndexOf(`/`, relativeLocation.length - 2) + 1);
          continue;
        }
        return entry.locator;
      } while (relativeLocation !== ``);
      return null;
    }
    function resolveToUnqualified(request2, issuer, {considerBuiltins = true} = {}) {
      if (request2 === `pnpapi`)
        return npath.toPortablePath(opts.pnpapiResolution);
      if (considerBuiltins && isBuiltinModule(request2))
        return null;
      const requestForDisplay = getPathForDisplay(request2);
      const issuerForDisplay = issuer && getPathForDisplay(issuer);
      if (issuer && isPathIgnored(issuer)) {
        if (!ppath.isAbsolute(request2) || findPackageLocator(request2) === null) {
          const result = callNativeResolution(request2, issuer);
          if (result === false) {
            throw makeError3(ErrorCode.BUILTIN_NODE_RESOLUTION_FAILED, `The builtin node resolution algorithm was unable to resolve the requested module (it didn't go through the pnp resolver because the issuer was explicitely ignored by the regexp)

Require request: "${requestForDisplay}"
Required by: ${issuerForDisplay}
`, {request: requestForDisplay, issuer: issuerForDisplay});
          }
          return npath.toPortablePath(result);
        }
      }
      let unqualifiedPath;
      const dependencyNameMatch = request2.match(pathRegExp);
      if (!dependencyNameMatch) {
        if (ppath.isAbsolute(request2)) {
          unqualifiedPath = ppath.normalize(request2);
        } else {
          if (!issuer) {
            throw makeError3(ErrorCode.API_ERROR, `The resolveToUnqualified function must be called with a valid issuer when the path isn't a builtin nor absolute`, {request: requestForDisplay, issuer: issuerForDisplay});
          }
          const absoluteIssuer = ppath.resolve(issuer);
          if (issuer.match(isDirRegExp)) {
            unqualifiedPath = ppath.normalize(ppath.join(absoluteIssuer, request2));
          } else {
            unqualifiedPath = ppath.normalize(ppath.join(ppath.dirname(absoluteIssuer), request2));
          }
        }
      } else {
        if (!issuer) {
          throw makeError3(ErrorCode.API_ERROR, `The resolveToUnqualified function must be called with a valid issuer when the path isn't a builtin nor absolute`, {request: requestForDisplay, issuer: issuerForDisplay});
        }
        const [, dependencyName, subPath] = dependencyNameMatch;
        const issuerLocator = findPackageLocator(issuer);
        if (!issuerLocator) {
          const result = callNativeResolution(request2, issuer);
          if (result === false) {
            throw makeError3(ErrorCode.BUILTIN_NODE_RESOLUTION_FAILED, `The builtin node resolution algorithm was unable to resolve the requested module (it didn't go through the pnp resolver because the issuer doesn't seem to be part of the Yarn-managed dependency tree).

Require path: "${requestForDisplay}"
Required by: ${issuerForDisplay}
`, {request: requestForDisplay, issuer: issuerForDisplay});
          }
          return npath.toPortablePath(result);
        }
        const issuerInformation = getPackageInformationSafe(issuerLocator);
        let dependencyReference = issuerInformation.packageDependencies.get(dependencyName);
        let fallbackReference = null;
        if (dependencyReference == null) {
          if (issuerLocator.name !== null) {
            const exclusionEntry = runtimeState.fallbackExclusionList.get(issuerLocator.name);
            const canUseFallbacks = !exclusionEntry || !exclusionEntry.has(issuerLocator.reference);
            if (canUseFallbacks) {
              for (let t5 = 0, T = fallbackLocators.length; t5 < T; ++t5) {
                const fallbackInformation = getPackageInformationSafe(fallbackLocators[t5]);
                const reference = fallbackInformation.packageDependencies.get(dependencyName);
                if (reference == null)
                  continue;
                if (alwaysWarnOnFallback)
                  fallbackReference = reference;
                else
                  dependencyReference = reference;
                break;
              }
              if (runtimeState.enableTopLevelFallback) {
                if (dependencyReference == null && fallbackReference === null) {
                  const reference = runtimeState.fallbackPool.get(dependencyName);
                  if (reference != null) {
                    fallbackReference = reference;
                  }
                }
              }
            }
          }
        }
        let error = null;
        if (dependencyReference === null) {
          if (isDependencyTreeRoot(issuerLocator)) {
            error = makeError3(ErrorCode.MISSING_PEER_DEPENDENCY, `Your application tried to access ${dependencyName} (a peer dependency); this isn't allowed as there is no ancestor to satisfy the requirement. Use a devDependency if needed.

Required package: ${dependencyName}${dependencyName !== requestForDisplay ? ` (via "${requestForDisplay}")` : ``}
Required by: ${issuerForDisplay}
`, {request: requestForDisplay, issuer: issuerForDisplay, dependencyName});
          } else {
            const brokenAncestors = findBrokenPeerDependencies(dependencyName, issuerLocator);
            if (brokenAncestors.every((ancestor) => isDependencyTreeRoot(ancestor))) {
              error = makeError3(ErrorCode.MISSING_PEER_DEPENDENCY, `${issuerLocator.name} tried to access ${dependencyName} (a peer dependency) but it isn't provided by your application; this makes the require call ambiguous and unsound.

Required package: ${dependencyName}${dependencyName !== requestForDisplay ? ` (via "${requestForDisplay}")` : ``}
Required by: ${issuerLocator.name}@${issuerLocator.reference} (via ${issuerForDisplay})
${brokenAncestors.map((ancestorLocator) => `Ancestor breaking the chain: ${ancestorLocator.name}@${ancestorLocator.reference}
`).join(``)}
`, {request: requestForDisplay, issuer: issuerForDisplay, issuerLocator: Object.assign({}, issuerLocator), dependencyName, brokenAncestors});
            } else {
              error = makeError3(ErrorCode.MISSING_PEER_DEPENDENCY, `${issuerLocator.name} tried to access ${dependencyName} (a peer dependency) but it isn't provided by its ancestors; this makes the require call ambiguous and unsound.

Required package: ${dependencyName}${dependencyName !== requestForDisplay ? ` (via "${requestForDisplay}")` : ``}
Required by: ${issuerLocator.name}@${issuerLocator.reference} (via ${issuerForDisplay})

${brokenAncestors.map((ancestorLocator) => `Ancestor breaking the chain: ${ancestorLocator.name}@${ancestorLocator.reference}
`).join(``)}
`, {request: requestForDisplay, issuer: issuerForDisplay, issuerLocator: Object.assign({}, issuerLocator), dependencyName, brokenAncestors});
            }
          }
        } else if (dependencyReference === void 0) {
          if (!considerBuiltins && isBuiltinModule(request2)) {
            if (isDependencyTreeRoot(issuerLocator)) {
              error = makeError3(ErrorCode.UNDECLARED_DEPENDENCY, `Your application tried to access ${dependencyName}. While this module is usually interpreted as a Node builtin, your resolver is running inside a non-Node resolution context where such builtins are ignored. Since ${dependencyName} isn't otherwise declared in your dependencies, this makes the require call ambiguous and unsound.

Required package: ${dependencyName}${dependencyName !== requestForDisplay ? ` (via "${requestForDisplay}")` : ``}
Required by: ${issuerForDisplay}
`, {request: requestForDisplay, issuer: issuerForDisplay, dependencyName});
            } else {
              error = makeError3(ErrorCode.UNDECLARED_DEPENDENCY, `${issuerLocator.name} tried to access ${dependencyName}. While this module is usually interpreted as a Node builtin, your resolver is running inside a non-Node resolution context where such builtins are ignored. Since ${dependencyName} isn't otherwise declared in ${issuerLocator.name}'s dependencies, this makes the require call ambiguous and unsound.

Required package: ${dependencyName}${dependencyName !== requestForDisplay ? ` (via "${requestForDisplay}")` : ``}
Required by: ${issuerForDisplay}
`, {request: requestForDisplay, issuer: issuerForDisplay, issuerLocator: Object.assign({}, issuerLocator), dependencyName});
            }
          } else {
            if (isDependencyTreeRoot(issuerLocator)) {
              error = makeError3(ErrorCode.UNDECLARED_DEPENDENCY, `Your application tried to access ${dependencyName}, but it isn't declared in your dependencies; this makes the require call ambiguous and unsound.

Required package: ${dependencyName}${dependencyName !== requestForDisplay ? ` (via "${requestForDisplay}")` : ``}
Required by: ${issuerForDisplay}
`, {request: requestForDisplay, issuer: issuerForDisplay, dependencyName});
            } else {
              error = makeError3(ErrorCode.UNDECLARED_DEPENDENCY, `${issuerLocator.name} tried to access ${dependencyName}, but it isn't declared in its dependencies; this makes the require call ambiguous and unsound.

Required package: ${dependencyName}${dependencyName !== requestForDisplay ? ` (via "${requestForDisplay}")` : ``}
Required by: ${issuerLocator.name}@${issuerLocator.reference} (via ${issuerForDisplay})
`, {request: requestForDisplay, issuer: issuerForDisplay, issuerLocator: Object.assign({}, issuerLocator), dependencyName});
            }
          }
        }
        if (dependencyReference == null) {
          if (fallbackReference === null || error === null)
            throw error || new Error(`Assertion failed: Expected an error to have been set`);
          dependencyReference = fallbackReference;
          const message = error.message.replace(/\n.*/g, ``);
          error.message = message;
          if (!emittedWarnings.has(message) && debugLevel !== 0) {
            emittedWarnings.add(message);
            process.emitWarning(error);
          }
        }
        const dependencyLocator = Array.isArray(dependencyReference) ? {name: dependencyReference[0], reference: dependencyReference[1]} : {name: dependencyName, reference: dependencyReference};
        const dependencyInformation = getPackageInformationSafe(dependencyLocator);
        if (!dependencyInformation.packageLocation) {
          throw makeError3(ErrorCode.MISSING_DEPENDENCY, `A dependency seems valid but didn't get installed for some reason. This might be caused by a partial install, such as dev vs prod.

Required package: ${dependencyLocator.name}@${dependencyLocator.reference}${dependencyLocator.name !== requestForDisplay ? ` (via "${requestForDisplay}")` : ``}
Required by: ${issuerLocator.name}@${issuerLocator.reference} (via ${issuerForDisplay})
`, {request: requestForDisplay, issuer: issuerForDisplay, dependencyLocator: Object.assign({}, dependencyLocator)});
        }
        const dependencyLocation = dependencyInformation.packageLocation;
        if (subPath) {
          unqualifiedPath = ppath.join(dependencyLocation, subPath);
        } else {
          unqualifiedPath = dependencyLocation;
        }
      }
      return ppath.normalize(unqualifiedPath);
    }
    function resolveUnqualifiedExport(request2, unqualifiedPath) {
      if (isStrictRegExp.test(request2))
        return unqualifiedPath;
      const unqualifiedExportPath = applyNodeExportsResolution(unqualifiedPath);
      if (unqualifiedExportPath) {
        return ppath.normalize(unqualifiedExportPath);
      } else {
        return unqualifiedPath;
      }
    }
    function resolveUnqualified(unqualifiedPath, {extensions = Object.keys(import_module2.Module._extensions)} = {}) {
      const candidates = [];
      const qualifiedPath = applyNodeExtensionResolution(unqualifiedPath, candidates, {extensions});
      if (qualifiedPath) {
        return ppath.normalize(qualifiedPath);
      } else {
        const unqualifiedPathForDisplay = getPathForDisplay(unqualifiedPath);
        throw makeError3(ErrorCode.QUALIFIED_PATH_RESOLUTION_FAILED, `Qualified path resolution failed - none of those files can be found on the disk.

Source path: ${unqualifiedPathForDisplay}
${candidates.map((candidate) => `Not found: ${getPathForDisplay(candidate)}
`).join(``)}`, {unqualifiedPath: unqualifiedPathForDisplay});
      }
    }
    function resolveRequest(request2, issuer, {considerBuiltins, extensions} = {}) {
      const unqualifiedPath = resolveToUnqualified(request2, issuer, {considerBuiltins});
      if (unqualifiedPath === null)
        return null;
      const isIssuerIgnored = () => issuer !== null ? isPathIgnored(issuer) : false;
      const remappedPath = (!considerBuiltins || !isBuiltinModule(request2)) && !isIssuerIgnored() ? resolveUnqualifiedExport(request2, unqualifiedPath) : unqualifiedPath;
      try {
        return resolveUnqualified(remappedPath, {extensions});
      } catch (resolutionError) {
        if (resolutionError.pnpCode === `QUALIFIED_PATH_RESOLUTION_FAILED`)
          Object.assign(resolutionError.data, {request: getPathForDisplay(request2), issuer: issuer && getPathForDisplay(issuer)});
        throw resolutionError;
      }
    }
    function resolveVirtual(request2) {
      const normalized = ppath.normalize(request2);
      const resolved = VirtualFS.resolveVirtual(normalized);
      return resolved !== normalized ? resolved : null;
    }
    return {
      VERSIONS,
      topLevel,
      getLocator: (name, referencish) => {
        if (Array.isArray(referencish)) {
          return {name: referencish[0], reference: referencish[1]};
        } else {
          return {name, reference: referencish};
        }
      },
      getDependencyTreeRoots: () => {
        return [...runtimeState.dependencyTreeRoots];
      },
      getAllLocators() {
        const locators = [];
        for (const [name, entry] of packageRegistry)
          for (const reference of entry.keys())
            if (name !== null && reference !== null)
              locators.push({name, reference});
        return locators;
      },
      getPackageInformation: (locator) => {
        const info = getPackageInformation(locator);
        if (info === null)
          return null;
        const packageLocation = npath.fromPortablePath(info.packageLocation);
        const nativeInfo = __spreadProps(__spreadValues({}, info), {packageLocation});
        return nativeInfo;
      },
      findPackageLocator: (path3) => {
        return findPackageLocator(npath.toPortablePath(path3));
      },
      resolveToUnqualified: maybeLog(`resolveToUnqualified`, (request2, issuer, opts2) => {
        const portableIssuer = issuer !== null ? npath.toPortablePath(issuer) : null;
        const resolution = resolveToUnqualified(npath.toPortablePath(request2), portableIssuer, opts2);
        if (resolution === null)
          return null;
        return npath.fromPortablePath(resolution);
      }),
      resolveUnqualified: maybeLog(`resolveUnqualified`, (unqualifiedPath, opts2) => {
        return npath.fromPortablePath(resolveUnqualified(npath.toPortablePath(unqualifiedPath), opts2));
      }),
      resolveRequest: maybeLog(`resolveRequest`, (request2, issuer, opts2) => {
        const portableIssuer = issuer !== null ? npath.toPortablePath(issuer) : null;
        const resolution = resolveRequest(npath.toPortablePath(request2), portableIssuer, opts2);
        if (resolution === null)
          return null;
        return npath.fromPortablePath(resolution);
      }),
      resolveVirtual: maybeLog(`resolveVirtual`, (path3) => {
        const result = resolveVirtual(npath.toPortablePath(path3));
        if (result !== null) {
          return npath.fromPortablePath(result);
        } else {
          return null;
        }
      })
    };
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-pnp/sources/hydratePnpApi.ts
  var readFileP = (0, import_util11.promisify)(import_fs10.readFile);

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-pnp/sources/makeRuntimeApi.ts
  var makeRuntimeApi = (settings, basePath, fakeFs) => {
    const data = generateSerializedState(settings);
    const state = hydrateRuntimeState(data, {basePath});
    const pnpapiResolution = npath.join(basePath, Filename.pnpCjs);
    return makeApi(state, {fakeFs, pnpapiResolution});
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-pnp-virtual-afab17303c/1/packages/plugin-pnp/sources/jsInstallUtils.ts
  var jsInstallUtils_exports = {};
  __export(jsInstallUtils_exports, {
    checkAndReportManifestCompatibility: () => checkAndReportManifestCompatibility,
    extractBuildScripts: () => extractBuildScripts,
    getExtractHint: () => getExtractHint,
    hasBindingGyp: () => hasBindingGyp
  });
  function checkAndReportManifestCompatibility(pkg, requirements, label, {configuration, report}) {
    if (!Manifest.isManifestFieldCompatible(requirements.manifest.os, process.platform)) {
      report == null ? void 0 : report.reportWarningOnce(MessageName.INCOMPATIBLE_OS, `${structUtils_exports.prettyLocator(configuration, pkg)} The platform ${process.platform} is incompatible with this module, ${label} skipped.`);
      return false;
    }
    if (!Manifest.isManifestFieldCompatible(requirements.manifest.cpu, process.arch)) {
      report == null ? void 0 : report.reportWarningOnce(MessageName.INCOMPATIBLE_CPU, `${structUtils_exports.prettyLocator(configuration, pkg)} The CPU architecture ${process.arch} is incompatible with this module, ${label} skipped.`);
      return false;
    }
    return true;
  }
  function extractBuildScripts(pkg, requirements, dependencyMeta, {configuration, report}) {
    const buildScripts = [];
    for (const scriptName of [`preinstall`, `install`, `postinstall`])
      if (requirements.manifest.scripts.has(scriptName))
        buildScripts.push([BuildType.SCRIPT, scriptName]);
    if (!requirements.manifest.scripts.has(`install`) && requirements.misc.hasBindingGyp)
      buildScripts.push([BuildType.SHELLCODE, `node-gyp rebuild`]);
    if (buildScripts.length === 0)
      return [];
    if (pkg.linkType !== LinkType.HARD) {
      report == null ? void 0 : report.reportWarningOnce(MessageName.SOFT_LINK_BUILD, `${structUtils_exports.prettyLocator(configuration, pkg)} lists build scripts, but is referenced through a soft link. Soft links don't support build scripts, so they'll be ignored.`);
      return [];
    }
    if (dependencyMeta && dependencyMeta.built === false) {
      report == null ? void 0 : report.reportInfoOnce(MessageName.BUILD_DISABLED, `${structUtils_exports.prettyLocator(configuration, pkg)} lists build scripts, but its build has been explicitly disabled through configuration.`);
      return [];
    }
    if (!configuration.get(`enableScripts`) && !dependencyMeta.built) {
      report == null ? void 0 : report.reportWarningOnce(MessageName.DISABLED_BUILD_SCRIPTS, `${structUtils_exports.prettyLocator(configuration, pkg)} lists build scripts, but all build scripts have been disabled.`);
      return [];
    }
    const isManifestCompatible = checkAndReportManifestCompatibility(pkg, requirements, `build`, {configuration, report});
    if (!isManifestCompatible)
      return [];
    return buildScripts;
  }
  var FORCED_EXTRACT_FILETYPES = new Set([
    `.exe`,
    `.h`,
    `.hh`,
    `.hpp`,
    `.c`,
    `.cc`,
    `.cpp`,
    `.java`,
    `.jar`,
    `.node`
  ]);
  function getExtractHint(fetchResult) {
    return fetchResult.packageFs.getExtractHint({relevantExtensions: FORCED_EXTRACT_FILETYPES});
  }
  function hasBindingGyp(fetchResult) {
    const bindingFilePath = ppath.join(fetchResult.prefixPath, `binding.gyp`);
    return fetchResult.packageFs.existsSync(bindingFilePath);
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-pnp-virtual-afab17303c/1/packages/plugin-pnp/sources/pnpUtils.ts
  var pnpUtils_exports = {};
  __export(pnpUtils_exports, {
    getUnpluggedPath: () => getUnpluggedPath
  });
  function getUnpluggedPath(locator, {configuration}) {
    return ppath.resolve(configuration.get(`pnpUnpluggedFolder`), structUtils_exports.slugifyLocator(locator));
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-pnp-virtual-afab17303c/1/packages/plugin-pnp/sources/PnpLinker.ts
  var FORCED_UNPLUG_PACKAGES = new Set([
    structUtils_exports.makeIdent(null, `nan`).identHash,
    structUtils_exports.makeIdent(null, `node-gyp`).identHash,
    structUtils_exports.makeIdent(null, `node-pre-gyp`).identHash,
    structUtils_exports.makeIdent(null, `node-addon-api`).identHash,
    structUtils_exports.makeIdent(null, `fsevents`).identHash
  ]);
  var PnpLinker = class {
    constructor() {
      this.mode = `strict`;
      this.pnpCache = new Map();
    }
    supportsPackage(pkg, opts) {
      if (opts.project.configuration.get(`nodeLinker`) !== `pnp`)
        return false;
      if (opts.project.configuration.get(`pnpMode`) !== this.mode)
        return false;
      return true;
    }
    async findPackageLocation(locator, opts) {
      const pnpPath = getPnpPath(opts.project).cjs;
      if (!xfs.existsSync(pnpPath))
        throw new UsageError(`The project in ${formatUtils_exports.pretty(opts.project.configuration, `${opts.project.cwd}/package.json`, formatUtils_exports.Type.PATH)} doesn't seem to have been installed - running an install there might help`);
      const pnpFile = miscUtils_exports.getFactoryWithDefault(this.pnpCache, pnpPath, () => {
        return miscUtils_exports.dynamicRequireNoCache(pnpPath);
      });
      const packageLocator = {name: structUtils_exports.stringifyIdent(locator), reference: locator.reference};
      const packageInformation = pnpFile.getPackageInformation(packageLocator);
      if (!packageInformation)
        throw new UsageError(`Couldn't find ${structUtils_exports.prettyLocator(opts.project.configuration, locator)} in the currently installed PnP map - running an install might help`);
      return npath.toPortablePath(packageInformation.packageLocation);
    }
    async findPackageLocator(location, opts) {
      const pnpPath = getPnpPath(opts.project).cjs;
      if (!xfs.existsSync(pnpPath))
        return null;
      const pnpFile = miscUtils_exports.getFactoryWithDefault(this.pnpCache, pnpPath, () => {
        return miscUtils_exports.dynamicRequireNoCache(pnpPath);
      });
      const locator = pnpFile.findPackageLocator(npath.fromPortablePath(location));
      if (!locator)
        return null;
      return structUtils_exports.makeLocator(structUtils_exports.parseIdent(locator.name), locator.reference);
    }
    makeInstaller(opts) {
      return new PnpInstaller(opts);
    }
  };
  var PnpInstaller = class {
    constructor(opts) {
      this.opts = opts;
      this.mode = `strict`;
      this.packageRegistry = new Map();
      this.virtualTemplates = new Map();
      this.customData = {
        store: new Map()
      };
      this.unpluggedPaths = new Set();
      this.opts = opts;
    }
    getCustomDataKey() {
      return JSON.stringify({
        name: `PnpInstaller`,
        version: 1
      });
    }
    attachCustomData(customData) {
      this.customData = customData;
    }
    async installPackage(pkg, fetchResult) {
      const key1 = structUtils_exports.stringifyIdent(pkg);
      const key2 = pkg.reference;
      const isWorkspace = !!this.opts.project.tryWorkspaceByLocator(pkg);
      const hasVirtualInstances = pkg.peerDependencies.size > 0 && !structUtils_exports.isVirtualLocator(pkg);
      const mayNeedToBeBuilt = !hasVirtualInstances && !isWorkspace;
      const mayNeedToBeUnplugged = !hasVirtualInstances && pkg.linkType !== LinkType.SOFT;
      let customPackageData = this.customData.store.get(pkg.locatorHash);
      if (typeof customPackageData === `undefined`) {
        customPackageData = await extractCustomPackageData(pkg, fetchResult);
        if (pkg.linkType === LinkType.HARD) {
          this.customData.store.set(pkg.locatorHash, customPackageData);
        }
      }
      const dependencyMeta = this.opts.project.getDependencyMeta(pkg, pkg.version);
      const buildScripts = mayNeedToBeBuilt ? extractBuildScripts(pkg, customPackageData, dependencyMeta, {configuration: this.opts.project.configuration, report: this.opts.report}) : [];
      const packageFs = mayNeedToBeUnplugged ? await this.unplugPackageIfNeeded(pkg, customPackageData, fetchResult, dependencyMeta) : fetchResult.packageFs;
      if (ppath.isAbsolute(fetchResult.prefixPath))
        throw new Error(`Assertion failed: Expected the prefix path (${fetchResult.prefixPath}) to be relative to the parent`);
      const packageRawLocation = ppath.resolve(packageFs.getRealPath(), fetchResult.prefixPath);
      const packageLocation = normalizeDirectoryPath(this.opts.project.cwd, packageRawLocation);
      const packageDependencies = new Map();
      const packagePeers = new Set();
      if (structUtils_exports.isVirtualLocator(pkg)) {
        for (const descriptor of pkg.peerDependencies.values()) {
          packageDependencies.set(structUtils_exports.stringifyIdent(descriptor), null);
          packagePeers.add(structUtils_exports.stringifyIdent(descriptor));
        }
        if (!this.opts.project.tryWorkspaceByLocator(pkg)) {
          const devirtualized = structUtils_exports.devirtualizeLocator(pkg);
          this.virtualTemplates.set(devirtualized.locatorHash, {
            location: normalizeDirectoryPath(this.opts.project.cwd, VirtualFS.resolveVirtual(packageRawLocation)),
            locator: devirtualized
          });
        }
      }
      miscUtils_exports.getMapWithDefault(this.packageRegistry, key1).set(key2, {
        packageLocation,
        packageDependencies,
        packagePeers,
        linkType: pkg.linkType,
        discardFromLookup: fetchResult.discardFromLookup || false
      });
      return {
        packageLocation: packageRawLocation,
        buildDirective: buildScripts.length > 0 ? buildScripts : null
      };
    }
    async attachInternalDependencies(locator, dependencies) {
      const packageInformation = this.getPackageInformation(locator);
      for (const [descriptor, locator2] of dependencies) {
        const target = !structUtils_exports.areIdentsEqual(descriptor, locator2) ? [structUtils_exports.stringifyIdent(locator2), locator2.reference] : locator2.reference;
        packageInformation.packageDependencies.set(structUtils_exports.stringifyIdent(descriptor), target);
      }
    }
    async attachExternalDependents(locator, dependentPaths) {
      for (const dependentPath of dependentPaths) {
        const packageInformation = this.getDiskInformation(dependentPath);
        packageInformation.packageDependencies.set(structUtils_exports.stringifyIdent(locator), locator.reference);
      }
    }
    async finalizeInstall() {
      if (this.opts.project.configuration.get(`pnpMode`) !== this.mode)
        return void 0;
      const pnpPath = getPnpPath(this.opts.project);
      if (xfs.existsSync(pnpPath.cjsLegacy)) {
        this.opts.report.reportWarning(MessageName.UNNAMED, `Removing the old ${formatUtils_exports.pretty(this.opts.project.configuration, Filename.pnpJs, formatUtils_exports.Type.PATH)} file. You might need to manually update existing references to reference the new ${formatUtils_exports.pretty(this.opts.project.configuration, Filename.pnpCjs, formatUtils_exports.Type.PATH)} file. If you use PnPify SDKs, you'll have to rerun ${formatUtils_exports.pretty(this.opts.project.configuration, `yarn pnpify --sdk`, formatUtils_exports.Type.CODE)}.`);
        await xfs.removePromise(pnpPath.cjsLegacy);
      }
      if (this.opts.project.configuration.get(`nodeLinker`) !== `pnp`) {
        await xfs.removePromise(pnpPath.cjs);
        await xfs.removePromise(this.opts.project.configuration.get(`pnpDataPath`));
        return void 0;
      }
      for (const {locator, location} of this.virtualTemplates.values()) {
        miscUtils_exports.getMapWithDefault(this.packageRegistry, structUtils_exports.stringifyIdent(locator)).set(locator.reference, {
          packageLocation: location,
          packageDependencies: new Map(),
          packagePeers: new Set(),
          linkType: LinkType.SOFT,
          discardFromLookup: false
        });
      }
      this.packageRegistry.set(null, new Map([
        [null, this.getPackageInformation(this.opts.project.topLevelWorkspace.anchoredLocator)]
      ]));
      const pnpFallbackMode = this.opts.project.configuration.get(`pnpFallbackMode`);
      const dependencyTreeRoots = this.opts.project.workspaces.map(({anchoredLocator}) => ({name: structUtils_exports.stringifyIdent(anchoredLocator), reference: anchoredLocator.reference}));
      const enableTopLevelFallback = pnpFallbackMode !== `none`;
      const fallbackExclusionList = [];
      const fallbackPool = new Map();
      const ignorePattern = miscUtils_exports.buildIgnorePattern([`.yarn/sdks/**`, ...this.opts.project.configuration.get(`pnpIgnorePatterns`)]);
      const packageRegistry = this.packageRegistry;
      const shebang = this.opts.project.configuration.get(`pnpShebang`);
      if (pnpFallbackMode === `dependencies-only`) {
        for (const pkg of this.opts.project.storedPackages.values())
          if (this.opts.project.tryWorkspaceByLocator(pkg))
            fallbackExclusionList.push({name: structUtils_exports.stringifyIdent(pkg), reference: pkg.reference});
      }
      await this.finalizeInstallWithPnp({
        dependencyTreeRoots,
        enableTopLevelFallback,
        fallbackExclusionList,
        fallbackPool,
        ignorePattern,
        packageRegistry,
        shebang
      });
      return {
        customData: this.customData
      };
    }
    async transformPnpSettings(pnpSettings) {
    }
    async finalizeInstallWithPnp(pnpSettings) {
      const pnpPath = getPnpPath(this.opts.project);
      const pnpDataPath = this.opts.project.configuration.get(`pnpDataPath`);
      const nodeModules = await this.locateNodeModules(pnpSettings.ignorePattern);
      if (nodeModules.length > 0) {
        this.opts.report.reportWarning(MessageName.DANGEROUS_NODE_MODULES, `One or more node_modules have been detected and will be removed. This operation may take some time.`);
        for (const nodeModulesPath of nodeModules) {
          await xfs.removePromise(nodeModulesPath);
        }
      }
      await this.transformPnpSettings(pnpSettings);
      if (this.opts.project.configuration.get(`pnpEnableInlining`)) {
        const loaderFile = generateInlinedScript(pnpSettings);
        await xfs.changeFilePromise(pnpPath.cjs, loaderFile, {automaticNewlines: true});
        await xfs.chmodPromise(pnpPath.cjs, 493);
        await xfs.removePromise(pnpDataPath);
      } else {
        const dataLocation = ppath.relative(ppath.dirname(pnpPath.cjs), pnpDataPath);
        const {dataFile, loaderFile} = generateSplitScript(__spreadProps(__spreadValues({}, pnpSettings), {dataLocation}));
        await xfs.changeFilePromise(pnpPath.cjs, loaderFile, {automaticNewlines: true});
        await xfs.chmodPromise(pnpPath.cjs, 493);
        await xfs.changeFilePromise(pnpDataPath, dataFile, {automaticNewlines: true});
        await xfs.chmodPromise(pnpDataPath, 420);
      }
      const pnpUnpluggedFolder = this.opts.project.configuration.get(`pnpUnpluggedFolder`);
      if (this.unpluggedPaths.size === 0) {
        await xfs.removePromise(pnpUnpluggedFolder);
      } else {
        for (const entry of await xfs.readdirPromise(pnpUnpluggedFolder)) {
          const unpluggedPath = ppath.resolve(pnpUnpluggedFolder, entry);
          if (!this.unpluggedPaths.has(unpluggedPath)) {
            await xfs.removePromise(unpluggedPath);
          }
        }
      }
    }
    async locateNodeModules(ignorePattern) {
      const nodeModules = [];
      const ignoreRegExp = ignorePattern ? new RegExp(ignorePattern) : null;
      for (const workspace of this.opts.project.workspaces) {
        const nodeModulesPath = ppath.join(workspace.cwd, `node_modules`);
        if (ignoreRegExp && ignoreRegExp.test(ppath.relative(this.opts.project.cwd, workspace.cwd)) || !xfs.existsSync(nodeModulesPath))
          continue;
        const directoryListing = await xfs.readdirPromise(nodeModulesPath, {
          withFileTypes: true
        });
        const nonCacheEntries = directoryListing.filter((entry) => {
          return !entry.isDirectory() || entry.name === `.bin` || !entry.name.startsWith(`.`);
        });
        if (nonCacheEntries.length === directoryListing.length) {
          nodeModules.push(nodeModulesPath);
        } else {
          for (const entry of nonCacheEntries) {
            nodeModules.push(ppath.join(nodeModulesPath, entry.name));
          }
        }
      }
      return nodeModules;
    }
    async unplugPackageIfNeeded(pkg, customPackageData, fetchResult, dependencyMeta) {
      if (this.shouldBeUnplugged(pkg, customPackageData, dependencyMeta)) {
        return this.unplugPackage(pkg, fetchResult);
      } else {
        return fetchResult.packageFs;
      }
    }
    shouldBeUnplugged(pkg, customPackageData, dependencyMeta) {
      if (typeof dependencyMeta.unplugged !== `undefined`)
        return dependencyMeta.unplugged;
      if (FORCED_UNPLUG_PACKAGES.has(pkg.identHash))
        return true;
      if (customPackageData.manifest.preferUnplugged !== null)
        return customPackageData.manifest.preferUnplugged;
      if (extractBuildScripts(pkg, customPackageData, dependencyMeta, {configuration: this.opts.project.configuration}).length > 0 || customPackageData.misc.extractHint)
        return true;
      return false;
    }
    async unplugPackage(locator, fetchResult) {
      const unplugPath = getUnpluggedPath(locator, {configuration: this.opts.project.configuration});
      this.unpluggedPaths.add(unplugPath);
      const readyFile = ppath.join(unplugPath, fetchResult.prefixPath, `.ready`);
      if (await xfs.existsPromise(readyFile))
        return new CwdFS(unplugPath);
      this.opts.project.storedBuildState.delete(locator.locatorHash);
      await xfs.mkdirPromise(unplugPath, {recursive: true});
      await xfs.copyPromise(unplugPath, PortablePath.dot, {baseFs: fetchResult.packageFs, overwrite: false});
      await xfs.writeFilePromise(readyFile, ``);
      return new CwdFS(unplugPath);
    }
    getPackageInformation(locator) {
      const key1 = structUtils_exports.stringifyIdent(locator);
      const key2 = locator.reference;
      const packageInformationStore = this.packageRegistry.get(key1);
      if (!packageInformationStore)
        throw new Error(`Assertion failed: The package information store should have been available (for ${structUtils_exports.prettyIdent(this.opts.project.configuration, locator)})`);
      const packageInformation = packageInformationStore.get(key2);
      if (!packageInformation)
        throw new Error(`Assertion failed: The package information should have been available (for ${structUtils_exports.prettyLocator(this.opts.project.configuration, locator)})`);
      return packageInformation;
    }
    getDiskInformation(path3) {
      const packageStore = miscUtils_exports.getMapWithDefault(this.packageRegistry, `@@disk`);
      const normalizedPath = normalizeDirectoryPath(this.opts.project.cwd, path3);
      return miscUtils_exports.getFactoryWithDefault(packageStore, normalizedPath, () => ({
        packageLocation: normalizedPath,
        packageDependencies: new Map(),
        packagePeers: new Set(),
        linkType: LinkType.SOFT,
        discardFromLookup: false
      }));
    }
  };
  function normalizeDirectoryPath(root, folder) {
    let relativeFolder = ppath.relative(root, folder);
    if (!relativeFolder.match(/^\.{0,2}\//))
      relativeFolder = `./${relativeFolder}`;
    return relativeFolder.replace(/\/?$/, `/`);
  }
  async function extractCustomPackageData(pkg, fetchResult) {
    var _a2;
    const manifest = (_a2 = await Manifest.tryFind(fetchResult.prefixPath, {baseFs: fetchResult.packageFs})) != null ? _a2 : new Manifest();
    const preservedScripts = new Set([`preinstall`, `install`, `postinstall`]);
    for (const scriptName of manifest.scripts.keys())
      if (!preservedScripts.has(scriptName))
        manifest.scripts.delete(scriptName);
    return {
      manifest: {
        os: manifest.os,
        cpu: manifest.cpu,
        scripts: manifest.scripts,
        preferUnplugged: manifest.preferUnplugged
      },
      misc: {
        extractHint: getExtractHint(fetchResult),
        hasBindingGyp: hasBindingGyp(fetchResult)
      }
    };
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-pnp-virtual-afab17303c/1/packages/plugin-pnp/sources/commands/unplug.ts
  var import_micromatch9 = __toModule(require_micromatch());
  var UnplugCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.all = options_exports.Boolean(`-A,--all`, false, {
        description: `Unplug direct dependencies from the entire project`
      });
      this.recursive = options_exports.Boolean(`-R,--recursive`, false, {
        description: `Unplug both direct and transitive dependencies`
      });
      this.json = options_exports.Boolean(`--json`, false, {
        description: `Format the output as an NDJSON stream`
      });
      this.patterns = options_exports.Rest();
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const {project, workspace} = await Project.find(configuration, this.context.cwd);
      const cache2 = await Cache.find(configuration);
      if (!workspace)
        throw new WorkspaceRequiredError(project.cwd, this.context.cwd);
      if (configuration.get(`nodeLinker`) !== `pnp`)
        throw new UsageError(`This command can only be used if the \`nodeLinker\` option is set to \`pnp\``);
      await project.restoreInstallState();
      const unreferencedPatterns = new Set(this.patterns);
      const matchers = this.patterns.map((pattern) => {
        const patternDescriptor = structUtils_exports.parseDescriptor(pattern);
        const pseudoDescriptor = patternDescriptor.range !== `unknown` ? patternDescriptor : structUtils_exports.makeDescriptor(patternDescriptor, `*`);
        if (!semverUtils_exports.validRange(pseudoDescriptor.range))
          throw new UsageError(`The range of the descriptor patterns must be a valid semver range (${structUtils_exports.prettyDescriptor(configuration, pseudoDescriptor)})`);
        return (pkg) => {
          const stringifiedIdent = structUtils_exports.stringifyIdent(pkg);
          if (!import_micromatch9.default.isMatch(stringifiedIdent, structUtils_exports.stringifyIdent(pseudoDescriptor)))
            return false;
          if (pkg.version && !semverUtils_exports.satisfiesWithPrereleases(pkg.version, pseudoDescriptor.range))
            return false;
          unreferencedPatterns.delete(pattern);
          return true;
        };
      });
      const getAllMatchingPackages = () => {
        const selection2 = [];
        for (const pkg of project.storedPackages.values())
          if (!project.tryWorkspaceByLocator(pkg) && !structUtils_exports.isVirtualLocator(pkg) && matchers.some((matcher) => matcher(pkg)))
            selection2.push(pkg);
        return selection2;
      };
      const getSelectedPackages = (roots) => {
        const seen = new Set();
        const selection2 = [];
        const traverse = (pkg, depth) => {
          if (seen.has(pkg.locatorHash))
            return;
          seen.add(pkg.locatorHash);
          if (!project.tryWorkspaceByLocator(pkg) && matchers.some((matcher) => matcher(pkg)))
            selection2.push(pkg);
          if (depth > 0 && !this.recursive)
            return;
          for (const dependency of pkg.dependencies.values()) {
            const resolution = project.storedResolutions.get(dependency.descriptorHash);
            if (!resolution)
              throw new Error(`Assertion failed: The resolution should have been registered`);
            const nextPkg = project.storedPackages.get(resolution);
            if (!nextPkg)
              throw new Error(`Assertion failed: The package should have been registered`);
            traverse(nextPkg, depth + 1);
          }
        };
        for (const workspace2 of roots) {
          const pkg = project.storedPackages.get(workspace2.anchoredLocator.locatorHash);
          if (!pkg)
            throw new Error(`Assertion failed: The package should have been registered`);
          traverse(pkg, 0);
        }
        return selection2;
      };
      let selection;
      let projectOrWorkspaces;
      if (this.all && this.recursive) {
        selection = getAllMatchingPackages();
        projectOrWorkspaces = `the project`;
      } else if (this.all) {
        selection = getSelectedPackages(project.workspaces);
        projectOrWorkspaces = `any workspace`;
      } else {
        selection = getSelectedPackages([workspace]);
        projectOrWorkspaces = `this workspace`;
      }
      if (unreferencedPatterns.size > 1)
        throw new UsageError(`Patterns ${formatUtils_exports.prettyList(configuration, unreferencedPatterns, formatUtils_exports.Type.CODE)} don't match any packages referenced by ${projectOrWorkspaces}`);
      if (unreferencedPatterns.size > 0)
        throw new UsageError(`Pattern ${formatUtils_exports.prettyList(configuration, unreferencedPatterns, formatUtils_exports.Type.CODE)} doesn't match any packages referenced by ${projectOrWorkspaces}`);
      selection = miscUtils_exports.sortMap(selection, (pkg) => {
        return structUtils_exports.stringifyLocator(pkg);
      });
      const report = await StreamReport.start({
        configuration,
        stdout: this.context.stdout,
        json: this.json
      }, async (report2) => {
        var _a2;
        for (const pkg of selection) {
          const version = (_a2 = pkg.version) != null ? _a2 : `unknown`;
          const dependencyMeta = project.topLevelWorkspace.manifest.ensureDependencyMeta(structUtils_exports.makeDescriptor(pkg, version));
          dependencyMeta.unplugged = true;
          report2.reportInfo(MessageName.UNNAMED, `Will unpack ${structUtils_exports.prettyLocator(configuration, pkg)} to ${formatUtils_exports.pretty(configuration, getUnpluggedPath(pkg, {configuration}), formatUtils_exports.Type.PATH)}`);
          report2.reportJson({
            locator: structUtils_exports.stringifyLocator(pkg),
            version
          });
        }
        await project.topLevelWorkspace.persistManifest();
        report2.reportSeparator();
        await project.install({cache: cache2, report: report2});
      });
      return report.exitCode();
    }
  };
  UnplugCommand.paths = [
    [`unplug`]
  ];
  UnplugCommand.usage = Command.Usage({
    description: `force the unpacking of a list of packages`,
    details: `
      This command will add the selectors matching the specified patterns to the list of packages that must be unplugged when installed.

      A package being unplugged means that instead of being referenced directly through its archive, it will be unpacked at install time in the directory configured via \`pnpUnpluggedFolder\`. Note that unpacking packages this way is generally not recommended because it'll make it harder to store your packages within the repository. However, it's a good approach to quickly and safely debug some packages, and can even sometimes be required depending on the context (for example when the package contains shellscripts).

      Running the command will set a persistent flag inside your top-level \`package.json\`, in the \`dependenciesMeta\` field. As such, to undo its effects, you'll need to revert the changes made to the manifest and run \`yarn install\` to apply the modification.

      By default, only direct dependencies from the current workspace are affected. If \`-A,--all\` is set, direct dependencies from the entire project are affected. Using the \`-R,--recursive\` flag will affect transitive dependencies as well as direct ones.

      This command accepts glob patterns inside the scope and name components (not the range). Make sure to escape the patterns to prevent your own shell from trying to expand them.
    `,
    examples: [[
      `Unplug the lodash dependency from the active workspace`,
      `yarn unplug lodash`
    ], [
      `Unplug all instances of lodash referenced by any workspace`,
      `yarn unplug lodash -A`
    ], [
      `Unplug all instances of lodash referenced by the active workspace and its dependencies`,
      `yarn unplug lodash -R`
    ], [
      `Unplug all instances of lodash, anywhere`,
      `yarn unplug lodash -AR`
    ], [
      `Unplug one specific version of lodash`,
      `yarn unplug lodash@1.2.3`
    ], [
      `Unplug all packages with the \`@babel\` scope`,
      `yarn unplug '@babel/*'`
    ], [
      `Unplug all packages (only for testing, not recommended)`,
      `yarn unplug -R '*'`
    ]]
  });
  var unplug_default = UnplugCommand;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-pnp-virtual-afab17303c/1/packages/plugin-pnp/sources/index.ts
  var getPnpPath = (project) => {
    return {
      cjs: ppath.join(project.cwd, Filename.pnpCjs),
      cjsLegacy: ppath.join(project.cwd, Filename.pnpJs)
    };
  };
  var quotePathIfNeeded = (path3) => {
    return /\s/.test(path3) ? JSON.stringify(path3) : path3;
  };
  async function setupScriptEnvironment(project, env, makePathWrapper2) {
    const pnpPath = getPnpPath(project).cjs;
    const pnpRequire = `--require ${quotePathIfNeeded(npath.fromPortablePath(pnpPath))}`;
    if (pnpPath.includes(` `) && import_semver11.default.lt(process.versions.node, `12.0.0`))
      throw new Error(`Expected the build location to not include spaces when using Node < 12.0.0 (${process.versions.node})`);
    if (xfs.existsSync(pnpPath)) {
      let nodeOptions = env.NODE_OPTIONS || ``;
      const pnpRegularExpression = /\s*--require\s+\S*\.pnp\.c?js\s*/g;
      nodeOptions = nodeOptions.replace(pnpRegularExpression, ` `).trim();
      nodeOptions = nodeOptions ? `${pnpRequire} ${nodeOptions}` : pnpRequire;
      env.NODE_OPTIONS = nodeOptions;
    }
  }
  async function populateYarnPaths(project, definePath) {
    definePath(getPnpPath(project).cjs);
    definePath(project.configuration.get(`pnpDataPath`));
    definePath(project.configuration.get(`pnpUnpluggedFolder`));
  }
  var plugin10 = {
    hooks: {
      populateYarnPaths,
      setupScriptEnvironment
    },
    configuration: {
      nodeLinker: {
        description: `The linker used for installing Node packages, one of: "pnp", "node-modules"`,
        type: SettingsType.STRING,
        default: `pnp`
      },
      pnpMode: {
        description: `If 'strict', generates standard PnP maps. If 'loose', merges them with the n_m resolution.`,
        type: SettingsType.STRING,
        default: `strict`
      },
      pnpShebang: {
        description: `String to prepend to the generated PnP script`,
        type: SettingsType.STRING,
        default: `#!/usr/bin/env node`
      },
      pnpIgnorePatterns: {
        description: `Array of glob patterns; files matching them will use the classic resolution`,
        type: SettingsType.STRING,
        default: [],
        isArray: true
      },
      pnpEnableInlining: {
        description: `If true, the PnP data will be inlined along with the generated loader`,
        type: SettingsType.BOOLEAN,
        default: true
      },
      pnpFallbackMode: {
        description: `If true, the generated PnP loader will follow the top-level fallback rule`,
        type: SettingsType.STRING,
        default: `dependencies-only`
      },
      pnpUnpluggedFolder: {
        description: `Folder where the unplugged packages must be stored`,
        type: SettingsType.ABSOLUTE_PATH,
        default: `./.yarn/unplugged`
      },
      pnpDataPath: {
        description: `Path of the file where the PnP data (used by the loader) must be written`,
        type: SettingsType.ABSOLUTE_PATH,
        default: `./.pnp.data.json`
      }
    },
    linkers: [
      PnpLinker
    ],
    commands: [
      unplug_default
    ]
  };
  var sources_default12 = plugin10;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-node-modules-virtual-6c4ffdc97c/1/packages/plugin-node-modules/sources/NodeModulesLinker.ts
  var import_cmd_shim = __toModule(require_cmd_shim());
  var import_crypto3 = __toModule(require("crypto"));
  var import_fs11 = __toModule(require("fs"));
  var STATE_FILE_VERSION = 1;
  var NODE_MODULES3 = `node_modules`;
  var DOT_BIN = `.bin`;
  var INSTALL_STATE_FILE = `.yarn-state.yml`;
  var NodeModulesMode;
  (function(NodeModulesMode2) {
    NodeModulesMode2["CLASSIC"] = `classic`;
    NodeModulesMode2["HARDLINKS_LOCAL"] = `hardlinks-local`;
    NodeModulesMode2["HARDLINKS_GLOBAL"] = `hardlinks-global`;
  })(NodeModulesMode || (NodeModulesMode = {}));
  var NodeModulesLinker = class {
    constructor() {
      this.installStateCache = new Map();
    }
    supportsPackage(pkg, opts) {
      return opts.project.configuration.get(`nodeLinker`) === `node-modules`;
    }
    async findPackageLocation(locator, opts) {
      const workspace = opts.project.tryWorkspaceByLocator(locator);
      if (workspace)
        return workspace.cwd;
      const installState = await miscUtils_exports.getFactoryWithDefault(this.installStateCache, opts.project.cwd, async () => {
        return await findInstallState(opts.project, {unrollAliases: true});
      });
      if (installState === null)
        throw new UsageError(`Couldn't find the node_modules state file - running an install might help (findPackageLocation)`);
      const locatorInfo = installState.locatorMap.get(structUtils_exports.stringifyLocator(locator));
      if (!locatorInfo) {
        const err = new UsageError(`Couldn't find ${structUtils_exports.prettyLocator(opts.project.configuration, locator)} in the currently installed node_modules map - running an install might help`);
        err.code = `LOCATOR_NOT_INSTALLED`;
        throw err;
      }
      const startingCwd = opts.project.configuration.startingCwd;
      return locatorInfo.locations.find((location) => ppath.contains(startingCwd, location)) || locatorInfo.locations[0];
    }
    async findPackageLocator(location, opts) {
      const installState = await miscUtils_exports.getFactoryWithDefault(this.installStateCache, opts.project.cwd, async () => {
        return await findInstallState(opts.project, {unrollAliases: true});
      });
      if (installState === null)
        return null;
      const {locationRoot, segments} = parseLocation(ppath.resolve(location), {skipPrefix: opts.project.cwd});
      let locationNode = installState.locationTree.get(locationRoot);
      if (!locationNode)
        return null;
      let locator = locationNode.locator;
      for (const segment of segments) {
        locationNode = locationNode.children.get(segment);
        if (!locationNode)
          break;
        locator = locationNode.locator || locator;
      }
      return structUtils_exports.parseLocator(locator);
    }
    makeInstaller(opts) {
      return new NodeModulesInstaller(opts);
    }
  };
  var NodeModulesInstaller = class {
    constructor(opts) {
      this.opts = opts;
      this.localStore = new Map();
      this.realLocatorChecksums = new Map();
      this.customData = {
        store: new Map()
      };
    }
    getCustomDataKey() {
      return JSON.stringify({
        name: `NodeModulesInstaller`,
        version: 1
      });
    }
    attachCustomData(customData) {
      this.customData = customData;
    }
    async installPackage(pkg, fetchResult) {
      var _a2;
      const packageLocation = ppath.resolve(fetchResult.packageFs.getRealPath(), fetchResult.prefixPath);
      let customPackageData = this.customData.store.get(pkg.locatorHash);
      if (typeof customPackageData === `undefined`) {
        customPackageData = await extractCustomPackageData2(pkg, fetchResult);
        if (pkg.linkType === LinkType.HARD) {
          this.customData.store.set(pkg.locatorHash, customPackageData);
        }
      }
      if (!jsInstallUtils_exports.checkAndReportManifestCompatibility(pkg, customPackageData, `link`, {configuration: this.opts.project.configuration, report: this.opts.report}))
        return {packageLocation: null, buildDirective: null};
      const packageDependencies = new Map();
      const packagePeers = new Set();
      if (!packageDependencies.has(structUtils_exports.stringifyIdent(pkg)))
        packageDependencies.set(structUtils_exports.stringifyIdent(pkg), pkg.reference);
      let realLocator = pkg;
      if (structUtils_exports.isVirtualLocator(pkg)) {
        realLocator = structUtils_exports.devirtualizeLocator(pkg);
        for (const descriptor of pkg.peerDependencies.values()) {
          packageDependencies.set(structUtils_exports.stringifyIdent(descriptor), null);
          packagePeers.add(structUtils_exports.stringifyIdent(descriptor));
        }
      }
      const pnpNode = {
        packageLocation: `${npath.fromPortablePath(packageLocation)}/`,
        packageDependencies,
        packagePeers,
        linkType: pkg.linkType,
        discardFromLookup: (_a2 = fetchResult.discardFromLookup) != null ? _a2 : false
      };
      this.localStore.set(pkg.locatorHash, {
        pkg,
        customPackageData,
        dependencyMeta: this.opts.project.getDependencyMeta(pkg, pkg.version),
        pnpNode
      });
      const checksum = fetchResult.checksum ? fetchResult.checksum.substring(fetchResult.checksum.indexOf(`/`) + 1) : null;
      this.realLocatorChecksums.set(realLocator.locatorHash, checksum);
      return {
        packageLocation,
        buildDirective: null
      };
    }
    async attachInternalDependencies(locator, dependencies) {
      const slot = this.localStore.get(locator.locatorHash);
      if (typeof slot === `undefined`)
        throw new Error(`Assertion failed: Expected information object to have been registered`);
      for (const [descriptor, locator2] of dependencies) {
        const target = !structUtils_exports.areIdentsEqual(descriptor, locator2) ? [structUtils_exports.stringifyIdent(locator2), locator2.reference] : locator2.reference;
        slot.pnpNode.packageDependencies.set(structUtils_exports.stringifyIdent(descriptor), target);
      }
    }
    async attachExternalDependents(locator, dependentPaths) {
      throw new Error(`External dependencies haven't been implemented for the node-modules linker`);
    }
    async finalizeInstall() {
      if (this.opts.project.configuration.get(`nodeLinker`) !== `node-modules`)
        return void 0;
      const defaultFsLayer = new VirtualFS({
        baseFs: new ZipOpenFS({
          libzip: await getLibzipPromise(),
          maxOpenFiles: 80,
          readOnlyArchives: true
        })
      });
      let preinstallState = await findInstallState(this.opts.project);
      const nmMode = this.opts.project.configuration.get(`nmMode`);
      if (preinstallState === null || nmMode !== preinstallState.nmMode) {
        this.opts.project.storedBuildState.clear();
        preinstallState = {locatorMap: new Map(), binSymlinks: new Map(), locationTree: new Map(), nmMode};
      }
      const hoistingLimitsByCwd = new Map(this.opts.project.workspaces.map((workspace) => {
        var _a2, _b;
        let hoistingLimits = this.opts.project.configuration.get(`nmHoistingLimits`);
        try {
          hoistingLimits = miscUtils_exports.validateEnum(NodeModulesHoistingLimits, (_b = (_a2 = workspace.manifest.installConfig) == null ? void 0 : _a2.hoistingLimits) != null ? _b : hoistingLimits);
        } catch (e) {
          const workspaceName = structUtils_exports.prettyWorkspace(this.opts.project.configuration, workspace);
          this.opts.report.reportWarning(MessageName.INVALID_MANIFEST, `${workspaceName}: Invalid 'installConfig.hoistingLimits' value. Expected one of ${Object.values(NodeModulesHoistingLimits).join(`, `)}, using default: "${hoistingLimits}"`);
        }
        return [workspace.relativeCwd, hoistingLimits];
      }));
      const pnpApi = {
        VERSIONS: {
          std: 1
        },
        topLevel: {
          name: null,
          reference: null
        },
        getLocator: (name, referencish) => {
          if (Array.isArray(referencish)) {
            return {name: referencish[0], reference: referencish[1]};
          } else {
            return {name, reference: referencish};
          }
        },
        getDependencyTreeRoots: () => {
          return this.opts.project.workspaces.map((workspace) => {
            const anchoredLocator = workspace.anchoredLocator;
            return {name: structUtils_exports.stringifyIdent(workspace.locator), reference: anchoredLocator.reference};
          });
        },
        getPackageInformation: (pnpLocator) => {
          const locator = pnpLocator.reference === null ? this.opts.project.topLevelWorkspace.anchoredLocator : structUtils_exports.makeLocator(structUtils_exports.parseIdent(pnpLocator.name), pnpLocator.reference);
          const slot = this.localStore.get(locator.locatorHash);
          if (typeof slot === `undefined`)
            throw new Error(`Assertion failed: Expected the package reference to have been registered`);
          return slot.pnpNode;
        },
        findPackageLocator: (location) => {
          const workspace = this.opts.project.tryWorkspaceByCwd(npath.toPortablePath(location));
          if (workspace !== null) {
            const anchoredLocator = workspace.anchoredLocator;
            return {name: structUtils_exports.stringifyIdent(anchoredLocator), reference: anchoredLocator.reference};
          }
          throw new Error(`Assertion failed: Unimplemented`);
        },
        resolveToUnqualified: () => {
          throw new Error(`Assertion failed: Unimplemented`);
        },
        resolveUnqualified: () => {
          throw new Error(`Assertion failed: Unimplemented`);
        },
        resolveRequest: () => {
          throw new Error(`Assertion failed: Unimplemented`);
        },
        resolveVirtual: (path3) => {
          return npath.fromPortablePath(VirtualFS.resolveVirtual(npath.toPortablePath(path3)));
        }
      };
      const {tree, errors: errors4, preserveSymlinksRequired} = buildNodeModulesTree(pnpApi, {pnpifyFs: false, validateExternalSoftLinks: true, hoistingLimitsByCwd, project: this.opts.project});
      if (!tree) {
        for (const {messageName, text} of errors4)
          this.opts.report.reportError(messageName, text);
        return void 0;
      }
      const locatorMap = buildLocatorMap(tree);
      await persistNodeModules(preinstallState, locatorMap, {
        baseFs: defaultFsLayer,
        project: this.opts.project,
        report: this.opts.report,
        realLocatorChecksums: this.realLocatorChecksums,
        loadManifest: async (locatorKey) => {
          const locator = structUtils_exports.parseLocator(locatorKey);
          const slot = this.localStore.get(locator.locatorHash);
          if (typeof slot === `undefined`)
            throw new Error(`Assertion failed: Expected the slot to exist`);
          return slot.customPackageData.manifest;
        }
      });
      const installStatuses = [];
      for (const [locatorKey, installRecord] of locatorMap.entries()) {
        if (isLinkLocator(locatorKey))
          continue;
        const locator = structUtils_exports.parseLocator(locatorKey);
        const slot = this.localStore.get(locator.locatorHash);
        if (typeof slot === `undefined`)
          throw new Error(`Assertion failed: Expected the slot to exist`);
        if (this.opts.project.tryWorkspaceByLocator(slot.pkg))
          continue;
        const buildScripts = jsInstallUtils_exports.extractBuildScripts(slot.pkg, slot.customPackageData, slot.dependencyMeta, {configuration: this.opts.project.configuration, report: this.opts.report});
        if (buildScripts.length === 0)
          continue;
        installStatuses.push({
          buildLocations: installRecord.locations,
          locatorHash: locator.locatorHash,
          buildDirective: buildScripts
        });
      }
      if (preserveSymlinksRequired)
        this.opts.report.reportWarning(MessageName.NM_PRESERVE_SYMLINKS_REQUIRED, `The application uses portals and that's why ${formatUtils_exports.pretty(this.opts.project.configuration, `--preserve-symlinks`, formatUtils_exports.Type.CODE)} Node option is required for launching it`);
      return {
        customData: this.customData,
        records: installStatuses
      };
    }
  };
  async function extractCustomPackageData2(pkg, fetchResult) {
    var _a2;
    const manifest = (_a2 = await Manifest.tryFind(fetchResult.prefixPath, {baseFs: fetchResult.packageFs})) != null ? _a2 : new Manifest();
    const preservedScripts = new Set([`preinstall`, `install`, `postinstall`]);
    for (const scriptName of manifest.scripts.keys())
      if (!preservedScripts.has(scriptName))
        manifest.scripts.delete(scriptName);
    return {
      manifest: {
        bin: manifest.bin,
        os: manifest.os,
        cpu: manifest.cpu,
        scripts: manifest.scripts
      },
      misc: {
        extractHint: jsInstallUtils_exports.getExtractHint(fetchResult),
        hasBindingGyp: jsInstallUtils_exports.hasBindingGyp(fetchResult)
      }
    };
  }
  async function writeInstallState(project, locatorMap, binSymlinks, nmMode) {
    let locatorState = ``;
    locatorState += `# Warning: This file is automatically generated. Removing it is fine, but will
`;
    locatorState += `# cause your node_modules installation to become invalidated.
`;
    locatorState += `
`;
    locatorState += `__metadata:
`;
    locatorState += `  version: ${STATE_FILE_VERSION}
`;
    locatorState += `  nmMode: ${nmMode}
`;
    const locators = Array.from(locatorMap.keys()).sort();
    const topLevelLocator = structUtils_exports.stringifyLocator(project.topLevelWorkspace.anchoredLocator);
    for (const locator of locators) {
      const installRecord = locatorMap.get(locator);
      locatorState += `
`;
      locatorState += `${JSON.stringify(locator)}:
`;
      locatorState += `  locations:
`;
      for (const location of installRecord.locations) {
        const internalPath = ppath.contains(project.cwd, location);
        if (internalPath === null)
          throw new Error(`Assertion failed: Expected the path to be within the project (${location})`);
        locatorState += `    - ${JSON.stringify(internalPath)}
`;
      }
      if (installRecord.aliases.length > 0) {
        locatorState += `  aliases:
`;
        for (const alias of installRecord.aliases) {
          locatorState += `    - ${JSON.stringify(alias)}
`;
        }
      }
      if (locator === topLevelLocator && binSymlinks.size > 0) {
        locatorState += `  bin:
`;
        for (const [location, symlinks] of binSymlinks) {
          const internalPath = ppath.contains(project.cwd, location);
          if (internalPath === null)
            throw new Error(`Assertion failed: Expected the path to be within the project (${location})`);
          locatorState += `    ${JSON.stringify(internalPath)}:
`;
          for (const [name, target] of symlinks) {
            const relativePath = ppath.relative(ppath.join(location, NODE_MODULES3), target);
            locatorState += `      ${JSON.stringify(name)}: ${JSON.stringify(relativePath)}
`;
          }
        }
      }
    }
    const rootPath = project.cwd;
    const installStatePath = ppath.join(rootPath, NODE_MODULES3, INSTALL_STATE_FILE);
    await xfs.changeFilePromise(installStatePath, locatorState, {
      automaticNewlines: true
    });
  }
  async function findInstallState(project, {unrollAliases = false} = {}) {
    const rootPath = project.cwd;
    const installStatePath = ppath.join(rootPath, NODE_MODULES3, INSTALL_STATE_FILE);
    if (!xfs.existsSync(installStatePath))
      return null;
    const locatorState = parseSyml(await xfs.readFilePromise(installStatePath, `utf8`));
    if (locatorState.__metadata.version > STATE_FILE_VERSION)
      return null;
    const nmMode = locatorState.__metadata.nmMode || NodeModulesMode.CLASSIC;
    const locatorMap = new Map();
    const binSymlinks = new Map();
    delete locatorState.__metadata;
    for (const [locatorStr, installRecord] of Object.entries(locatorState)) {
      const locations = installRecord.locations.map((location) => {
        return ppath.join(rootPath, location);
      });
      const recordSymlinks = installRecord.bin;
      if (recordSymlinks) {
        for (const [relativeLocation, locationSymlinks] of Object.entries(recordSymlinks)) {
          const location = ppath.join(rootPath, npath.toPortablePath(relativeLocation));
          const symlinks = miscUtils_exports.getMapWithDefault(binSymlinks, location);
          for (const [name, target] of Object.entries(locationSymlinks)) {
            symlinks.set(toFilename(name), npath.toPortablePath([location, NODE_MODULES3, target].join(ppath.delimiter)));
          }
        }
      }
      locatorMap.set(locatorStr, {
        target: PortablePath.dot,
        linkType: LinkType.HARD,
        locations,
        aliases: installRecord.aliases || []
      });
      if (unrollAliases && installRecord.aliases) {
        for (const reference of installRecord.aliases) {
          const {scope, name} = structUtils_exports.parseLocator(locatorStr);
          const alias = structUtils_exports.makeLocator(structUtils_exports.makeIdent(scope, name), reference);
          const aliasStr = structUtils_exports.stringifyLocator(alias);
          locatorMap.set(aliasStr, {
            target: PortablePath.dot,
            linkType: LinkType.HARD,
            locations,
            aliases: []
          });
        }
      }
    }
    return {locatorMap, binSymlinks, locationTree: buildLocationTree(locatorMap, {skipPrefix: project.cwd}), nmMode};
  }
  var removeDir = async (dir, options) => {
    if (dir.split(ppath.sep).indexOf(NODE_MODULES3) < 0)
      throw new Error(`Assertion failed: trying to remove dir that doesn't contain node_modules: ${dir}`);
    try {
      if (!options.innerLoop) {
        const stats = await xfs.lstatPromise(dir);
        if (stats.isSymbolicLink()) {
          await xfs.unlinkPromise(dir);
          return;
        }
      }
      const entries = await xfs.readdirPromise(dir, {withFileTypes: true});
      for (const entry of entries) {
        const targetPath = ppath.join(dir, toFilename(entry.name));
        if (entry.isDirectory()) {
          if (entry.name !== NODE_MODULES3 || options && options.innerLoop) {
            await removeDir(targetPath, {innerLoop: true, contentsOnly: false});
          }
        } else {
          await xfs.unlinkPromise(targetPath);
        }
      }
      if (!options.contentsOnly) {
        await xfs.rmdirPromise(dir);
      }
    } catch (e) {
      if (e.code !== `ENOENT` && e.code !== `ENOTEMPTY`) {
        throw e;
      }
    }
  };
  var CONCURRENT_OPERATION_LIMIT = 4;
  var parseLocation = (location, {skipPrefix}) => {
    const projectRelativePath = ppath.contains(skipPrefix, location);
    if (projectRelativePath === null)
      throw new Error(`Assertion failed: Writing attempt prevented to ${location} which is outside project root: ${skipPrefix}`);
    const allSegments = projectRelativePath.split(ppath.sep).filter((segment) => segment !== ``);
    const nmIndex = allSegments.indexOf(NODE_MODULES3);
    const relativeRoot = allSegments.slice(0, nmIndex).join(ppath.sep);
    const locationRoot = ppath.join(skipPrefix, relativeRoot);
    const segments = allSegments.slice(nmIndex);
    return {locationRoot, segments};
  };
  var buildLocationTree = (locatorMap, {skipPrefix}) => {
    const locationTree = new Map();
    if (locatorMap === null)
      return locationTree;
    const makeNode2 = () => ({
      children: new Map(),
      linkType: LinkType.HARD
    });
    for (const [locator, info] of locatorMap.entries()) {
      if (info.linkType === LinkType.SOFT) {
        const internalPath = ppath.contains(skipPrefix, info.target);
        if (internalPath !== null) {
          const node = miscUtils_exports.getFactoryWithDefault(locationTree, info.target, makeNode2);
          node.locator = locator;
          node.linkType = info.linkType;
        }
      }
      for (const location of info.locations) {
        const {locationRoot, segments} = parseLocation(location, {skipPrefix});
        let node = miscUtils_exports.getFactoryWithDefault(locationTree, locationRoot, makeNode2);
        for (let idx = 0; idx < segments.length; ++idx) {
          const segment = segments[idx];
          if (segment !== `.`) {
            const nextNode = miscUtils_exports.getFactoryWithDefault(node.children, segment, makeNode2);
            node.children.set(segment, nextNode);
            node = nextNode;
          }
          if (idx === segments.length - 1) {
            node.locator = locator;
            node.linkType = info.linkType;
          }
        }
      }
    }
    return locationTree;
  };
  var symlinkPromise = async (srcPath, dstPath) => {
    let stats;
    try {
      if (process.platform === `win32`) {
        stats = await xfs.lstatPromise(srcPath);
      }
    } catch (e) {
    }
    if (process.platform == `win32` && (!stats || stats.isDirectory())) {
      await xfs.symlinkPromise(srcPath, dstPath, `junction`);
    } else {
      await xfs.symlinkPromise(ppath.relative(ppath.dirname(dstPath), srcPath), dstPath);
    }
  };
  async function atomicFileWrite(tmpDir, dstPath, content) {
    const tmpPath = ppath.join(tmpDir, toFilename(`${import_crypto3.default.randomBytes(16).toString(`hex`)}.tmp`));
    try {
      await xfs.writeFilePromise(tmpPath, content);
      try {
        await xfs.linkPromise(tmpPath, dstPath);
      } catch (e) {
      }
    } finally {
      await xfs.unlinkPromise(tmpPath);
    }
  }
  async function copyFilePromise({srcPath, dstPath, srcMode, globalHardlinksStore, baseFs, nmMode, digest}) {
    if (nmMode === NodeModulesMode.HARDLINKS_GLOBAL && globalHardlinksStore && digest) {
      const contentFilePath = ppath.join(globalHardlinksStore, digest.substring(0, 2), `${digest.substring(2)}.dat`);
      let doesContentFileExist;
      try {
        const contentDigest = await hashUtils_exports.checksumFile(contentFilePath, {baseFs: xfs, algorithm: `sha1`});
        if (contentDigest !== digest) {
          const tmpPath = ppath.join(globalHardlinksStore, toFilename(`${import_crypto3.default.randomBytes(16).toString(`hex`)}.tmp`));
          await xfs.renamePromise(contentFilePath, tmpPath);
          const content = await baseFs.readFilePromise(srcPath);
          await xfs.writeFilePromise(tmpPath, content);
          try {
            await xfs.linkPromise(tmpPath, contentFilePath);
            await xfs.unlinkPromise(tmpPath);
          } catch (e) {
          }
        }
        await xfs.linkPromise(contentFilePath, dstPath);
        doesContentFileExist = true;
      } catch (e) {
        doesContentFileExist = false;
      }
      if (!doesContentFileExist) {
        const content = await baseFs.readFilePromise(srcPath);
        await atomicFileWrite(globalHardlinksStore, contentFilePath, content);
        await xfs.linkPromise(contentFilePath, dstPath);
      }
    } else {
      await baseFs.copyFilePromise(srcPath, dstPath);
    }
    const mode = srcMode & 511;
    if (mode !== 420) {
      await xfs.chmodPromise(dstPath, mode);
    }
  }
  var DirEntryKind;
  (function(DirEntryKind2) {
    DirEntryKind2["FILE"] = `file`;
    DirEntryKind2["DIRECTORY"] = `directory`;
    DirEntryKind2["SYMLINK"] = `symlink`;
  })(DirEntryKind || (DirEntryKind = {}));
  var copyPromise2 = async (dstDir, srcDir, {baseFs, globalHardlinksStore, nmMode, packageChecksum}) => {
    await xfs.mkdirPromise(dstDir, {recursive: true});
    const getEntriesRecursive = async (relativePath = PortablePath.dot) => {
      const srcPath = ppath.join(srcDir, relativePath);
      const entries = await baseFs.readdirPromise(srcPath, {withFileTypes: true});
      const entryMap = new Map();
      for (const entry of entries) {
        const relativeEntryPath = ppath.join(relativePath, entry.name);
        let entryValue;
        const srcEntryPath = ppath.join(srcPath, entry.name);
        if (entry.isFile()) {
          entryValue = {kind: DirEntryKind.FILE, mode: (await baseFs.lstatPromise(srcEntryPath)).mode};
          if (nmMode === NodeModulesMode.HARDLINKS_GLOBAL) {
            const digest = await hashUtils_exports.checksumFile(srcEntryPath, {baseFs, algorithm: `sha1`});
            entryValue.digest = digest;
          }
        } else if (entry.isDirectory()) {
          entryValue = {kind: DirEntryKind.DIRECTORY};
        } else if (entry.isSymbolicLink()) {
          entryValue = {kind: DirEntryKind.SYMLINK, symlinkTo: await baseFs.readlinkPromise(srcEntryPath)};
        } else {
          throw new Error(`Unsupported file type (file: ${srcEntryPath}, mode: 0o${await baseFs.statSync(srcEntryPath).mode.toString(8).padStart(6, `0`)})`);
        }
        entryMap.set(relativeEntryPath, entryValue);
        if (entry.isDirectory() && relativeEntryPath !== NODE_MODULES3) {
          const childEntries = await getEntriesRecursive(relativeEntryPath);
          for (const [childRelativePath, childEntry] of childEntries) {
            entryMap.set(childRelativePath, childEntry);
          }
        }
      }
      return entryMap;
    };
    let allEntries;
    if (nmMode === NodeModulesMode.HARDLINKS_GLOBAL && globalHardlinksStore && packageChecksum) {
      const entriesJsonPath = ppath.join(globalHardlinksStore, packageChecksum.substring(0, 2), `${packageChecksum.substring(2)}.json`);
      try {
        allEntries = new Map(Object.entries(JSON.parse(await xfs.readFilePromise(entriesJsonPath, `utf8`))));
      } catch (e) {
        allEntries = await getEntriesRecursive();
        await atomicFileWrite(globalHardlinksStore, entriesJsonPath, Buffer.from(JSON.stringify(Object.fromEntries(allEntries))));
      }
    } else {
      allEntries = await getEntriesRecursive();
    }
    for (const [relativePath, entry] of allEntries) {
      const srcPath = ppath.join(srcDir, relativePath);
      const dstPath = ppath.join(dstDir, relativePath);
      if (entry.kind === DirEntryKind.DIRECTORY) {
        await xfs.mkdirPromise(dstPath, {recursive: true});
      } else if (entry.kind === DirEntryKind.FILE) {
        await copyFilePromise({srcPath, dstPath, srcMode: entry.mode, digest: entry.digest, nmMode, baseFs, globalHardlinksStore});
      } else if (entry.kind === DirEntryKind.SYMLINK) {
        await symlinkPromise(ppath.resolve(ppath.dirname(dstPath), entry.symlinkTo), dstPath);
      }
    }
  };
  function refineNodeModulesRoots(locationTree, binSymlinks) {
    const refinedLocationTree = new Map([...locationTree]);
    const refinedBinSymlinks = new Map([...binSymlinks]);
    for (const [workspaceRoot, node] of locationTree) {
      const nodeModulesRoot = ppath.join(workspaceRoot, NODE_MODULES3);
      if (!xfs.existsSync(nodeModulesRoot)) {
        node.children.delete(NODE_MODULES3);
        for (const location of refinedBinSymlinks.keys()) {
          if (ppath.contains(nodeModulesRoot, location) !== null) {
            refinedBinSymlinks.delete(location);
          }
        }
      }
    }
    return {locationTree: refinedLocationTree, binSymlinks: refinedBinSymlinks};
  }
  function isLinkLocator(locatorKey) {
    let descriptor = structUtils_exports.parseDescriptor(locatorKey);
    if (structUtils_exports.isVirtualDescriptor(descriptor))
      descriptor = structUtils_exports.devirtualizeDescriptor(descriptor);
    return descriptor.range.startsWith(`link:`);
  }
  async function createBinSymlinkMap(installState, locationTree, projectRoot, {loadManifest}) {
    const locatorScriptMap = new Map();
    for (const [locatorKey, {locations}] of installState) {
      const manifest = !isLinkLocator(locatorKey) ? await loadManifest(locatorKey, locations[0]) : null;
      const bin = new Map();
      if (manifest) {
        for (const [name, value] of manifest.bin) {
          const target = ppath.join(locations[0], value);
          if (value !== `` && xfs.existsSync(target)) {
            bin.set(name, value);
          }
        }
      }
      locatorScriptMap.set(locatorKey, bin);
    }
    const binSymlinks = new Map();
    const getBinSymlinks = (location, parentLocatorLocation, node) => {
      const symlinks = new Map();
      const internalPath = ppath.contains(projectRoot, location);
      if (node.locator && internalPath !== null) {
        const binScripts = locatorScriptMap.get(node.locator);
        for (const [filename, scriptPath] of binScripts) {
          const symlinkTarget = ppath.join(location, npath.toPortablePath(scriptPath));
          symlinks.set(toFilename(filename), symlinkTarget);
        }
        for (const [childLocation, childNode] of node.children) {
          const absChildLocation = ppath.join(location, childLocation);
          const childSymlinks = getBinSymlinks(absChildLocation, absChildLocation, childNode);
          if (childSymlinks.size > 0) {
            binSymlinks.set(location, new Map([...binSymlinks.get(location) || new Map(), ...childSymlinks]));
          }
        }
      } else {
        for (const [childLocation, childNode] of node.children) {
          const childSymlinks = getBinSymlinks(ppath.join(location, childLocation), parentLocatorLocation, childNode);
          for (const [name, symlinkTarget] of childSymlinks) {
            symlinks.set(name, symlinkTarget);
          }
        }
      }
      return symlinks;
    };
    for (const [location, node] of locationTree) {
      const symlinks = getBinSymlinks(location, location, node);
      if (symlinks.size > 0) {
        binSymlinks.set(location, new Map([...binSymlinks.get(location) || new Map(), ...symlinks]));
      }
    }
    return binSymlinks;
  }
  var areRealLocatorsEqual2 = (locatorKey1, locatorKey2) => {
    if (!locatorKey1 || !locatorKey2)
      return locatorKey1 === locatorKey2;
    let locator1 = structUtils_exports.parseLocator(locatorKey1);
    if (structUtils_exports.isVirtualLocator(locator1))
      locator1 = structUtils_exports.devirtualizeLocator(locator1);
    let locator2 = structUtils_exports.parseLocator(locatorKey2);
    if (structUtils_exports.isVirtualLocator(locator2))
      locator2 = structUtils_exports.devirtualizeLocator(locator2);
    return structUtils_exports.areLocatorsEqual(locator1, locator2);
  };
  function getGlobalHardlinksStore(configuration) {
    return ppath.join(configuration.get(`globalFolder`), `store`);
  }
  async function persistNodeModules(preinstallState, installState, {baseFs, project, report, loadManifest, realLocatorChecksums}) {
    const rootNmDirPath = ppath.join(project.cwd, NODE_MODULES3);
    const {locationTree: prevLocationTree, binSymlinks: prevBinSymlinks} = refineNodeModulesRoots(preinstallState.locationTree, preinstallState.binSymlinks);
    const locationTree = buildLocationTree(installState, {skipPrefix: project.cwd});
    const addQueue = [];
    const addModule = async ({srcDir, dstDir, linkType, globalHardlinksStore, nmMode: nmMode2, packageChecksum}) => {
      const promise = (async () => {
        try {
          if (linkType === LinkType.SOFT) {
            await xfs.mkdirPromise(ppath.dirname(dstDir), {recursive: true});
            await symlinkPromise(ppath.resolve(srcDir), dstDir);
          } else {
            await copyPromise2(dstDir, srcDir, {baseFs, globalHardlinksStore, nmMode: nmMode2, packageChecksum});
          }
        } catch (e) {
          e.message = `While persisting ${srcDir} -> ${dstDir} ${e.message}`;
          throw e;
        } finally {
          progress.tick();
        }
      })().then(() => addQueue.splice(addQueue.indexOf(promise), 1));
      addQueue.push(promise);
      if (addQueue.length > CONCURRENT_OPERATION_LIMIT) {
        await Promise.race(addQueue);
      }
    };
    const cloneModule = async (srcDir, dstDir, options) => {
      const promise = (async () => {
        const cloneDir = async (srcDir2, dstDir2, options2) => {
          try {
            if (!options2.innerLoop)
              await xfs.mkdirPromise(dstDir2, {recursive: true});
            const entries = await xfs.readdirPromise(srcDir2, {withFileTypes: true});
            for (const entry of entries) {
              if (!options2.innerLoop && entry.name === DOT_BIN)
                continue;
              const src = ppath.join(srcDir2, entry.name);
              const dst = ppath.join(dstDir2, entry.name);
              if (entry.isDirectory()) {
                if (entry.name !== NODE_MODULES3 || options2 && options2.innerLoop) {
                  await xfs.mkdirPromise(dst, {recursive: true});
                  await cloneDir(src, dst, __spreadProps(__spreadValues({}, options2), {innerLoop: true}));
                }
              } else {
                if (nmMode === NodeModulesMode.HARDLINKS_LOCAL || nmMode === NodeModulesMode.HARDLINKS_GLOBAL) {
                  await xfs.linkPromise(src, dst);
                } else {
                  await xfs.copyFilePromise(src, dst, import_fs11.default.constants.COPYFILE_FICLONE);
                }
              }
            }
          } catch (e) {
            if (!options2.innerLoop)
              e.message = `While cloning ${srcDir2} -> ${dstDir2} ${e.message}`;
            throw e;
          } finally {
            if (!options2.innerLoop) {
              progress.tick();
            }
          }
        };
        await cloneDir(srcDir, dstDir, options);
      })().then(() => addQueue.splice(addQueue.indexOf(promise), 1));
      addQueue.push(promise);
      if (addQueue.length > CONCURRENT_OPERATION_LIMIT) {
        await Promise.race(addQueue);
      }
    };
    const removeOutdatedDirs = async (location, prevNode, node) => {
      if (!node) {
        if (prevNode.children.has(NODE_MODULES3))
          await removeDir(ppath.join(location, NODE_MODULES3), {contentsOnly: false});
        await removeDir(location, {contentsOnly: location === rootNmDirPath});
      } else {
        for (const [segment, prevChildNode] of prevNode.children) {
          const childNode = node.children.get(segment);
          await removeOutdatedDirs(ppath.join(location, segment), prevChildNode, childNode);
        }
      }
    };
    for (const [location, prevNode] of prevLocationTree) {
      const node = locationTree.get(location);
      for (const [segment, prevChildNode] of prevNode.children) {
        if (segment === `.`)
          continue;
        const childNode = node ? node.children.get(segment) : node;
        await removeOutdatedDirs(ppath.join(location, segment), prevChildNode, childNode);
      }
    }
    const cleanNewDirs = async (location, node, prevNode) => {
      if (!prevNode) {
        if (node.children.has(NODE_MODULES3))
          await removeDir(ppath.join(location, NODE_MODULES3), {contentsOnly: true});
        await removeDir(location, {contentsOnly: node.linkType === LinkType.HARD});
      } else {
        if (!areRealLocatorsEqual2(node.locator, prevNode.locator))
          await removeDir(location, {contentsOnly: node.linkType === LinkType.HARD});
        for (const [segment, childNode] of node.children) {
          const prevChildNode = prevNode.children.get(segment);
          await cleanNewDirs(ppath.join(location, segment), childNode, prevChildNode);
        }
      }
    };
    for (const [location, node] of locationTree) {
      const prevNode = prevLocationTree.get(location);
      for (const [segment, childNode] of node.children) {
        if (segment === `.`)
          continue;
        const prevChildNode = prevNode ? prevNode.children.get(segment) : prevNode;
        await cleanNewDirs(ppath.join(location, segment), childNode, prevChildNode);
      }
    }
    const persistedLocations = new Map();
    const addList = [];
    for (const [prevLocator, {locations}] of preinstallState.locatorMap.entries()) {
      for (const location of locations) {
        const {locationRoot, segments} = parseLocation(location, {
          skipPrefix: project.cwd
        });
        let node = locationTree.get(locationRoot);
        let curLocation = locationRoot;
        if (node) {
          for (const segment of segments) {
            curLocation = ppath.join(curLocation, segment);
            node = node.children.get(segment);
            if (!node) {
              break;
            }
          }
          if (node) {
            const areLocatorsEqual2 = areRealLocatorsEqual2(node.locator, prevLocator);
            const info = installState.get(node.locator);
            const srcDir = info.target;
            const dstDir = curLocation;
            const linkType = info.linkType;
            if (areLocatorsEqual2) {
              if (!persistedLocations.has(srcDir)) {
                persistedLocations.set(srcDir, dstDir);
              }
            } else if (srcDir !== dstDir) {
              let realLocator = structUtils_exports.parseLocator(node.locator);
              if (structUtils_exports.isVirtualLocator(realLocator))
                realLocator = structUtils_exports.devirtualizeLocator(realLocator);
              addList.push({srcDir, dstDir, linkType, realLocatorHash: realLocator.locatorHash});
            }
          }
        }
      }
    }
    for (const [locator, {locations}] of installState.entries()) {
      for (const location of locations) {
        const {locationRoot, segments} = parseLocation(location, {
          skipPrefix: project.cwd
        });
        let prevTreeNode = prevLocationTree.get(locationRoot);
        let node = locationTree.get(locationRoot);
        let curLocation = locationRoot;
        const info = installState.get(locator);
        let realLocator = structUtils_exports.parseLocator(locator);
        if (structUtils_exports.isVirtualLocator(realLocator))
          realLocator = structUtils_exports.devirtualizeLocator(realLocator);
        const realLocatorHash = realLocator.locatorHash;
        const srcDir = info.target;
        const dstDir = location;
        if (srcDir === dstDir)
          continue;
        const linkType = info.linkType;
        for (const segment of segments)
          node = node.children.get(segment);
        if (!prevTreeNode) {
          addList.push({srcDir, dstDir, linkType, realLocatorHash});
        } else {
          for (const segment of segments) {
            curLocation = ppath.join(curLocation, segment);
            prevTreeNode = prevTreeNode.children.get(segment);
            if (!prevTreeNode) {
              addList.push({srcDir, dstDir, linkType, realLocatorHash});
              break;
            }
          }
        }
      }
    }
    const progress = Report.progressViaCounter(addList.length);
    const reportedProgress = report.reportProgress(progress);
    const nmMode = project.configuration.get(`nmMode`);
    try {
      const globalHardlinksStore = nmMode === NodeModulesMode.HARDLINKS_GLOBAL ? `${getGlobalHardlinksStore(project.configuration)}/v1` : null;
      if (globalHardlinksStore) {
        if (!await xfs.existsPromise(globalHardlinksStore)) {
          await xfs.mkdirpPromise(globalHardlinksStore);
          for (let idx = 0; idx < 256; idx++) {
            await xfs.mkdirPromise(ppath.join(globalHardlinksStore, idx.toString(16).padStart(2, `0`)));
          }
        }
      }
      for (const entry of addList) {
        if (entry.linkType === LinkType.SOFT || !persistedLocations.has(entry.srcDir)) {
          persistedLocations.set(entry.srcDir, entry.dstDir);
          await addModule(__spreadProps(__spreadValues({}, entry), {globalHardlinksStore, nmMode, packageChecksum: realLocatorChecksums.get(entry.realLocatorHash) || null}));
        }
      }
      await Promise.all(addQueue);
      addQueue.length = 0;
      for (const entry of addList) {
        const persistedDir = persistedLocations.get(entry.srcDir);
        if (entry.linkType !== LinkType.SOFT && entry.dstDir !== persistedDir) {
          await cloneModule(persistedDir, entry.dstDir, {nmMode});
        }
      }
      await Promise.all(addQueue);
      await xfs.mkdirPromise(rootNmDirPath, {recursive: true});
      const binSymlinks = await createBinSymlinkMap(installState, locationTree, project.cwd, {loadManifest});
      await persistBinSymlinks(prevBinSymlinks, binSymlinks, project.cwd);
      await writeInstallState(project, installState, binSymlinks, nmMode);
    } finally {
      reportedProgress.stop();
    }
  }
  async function persistBinSymlinks(previousBinSymlinks, binSymlinks, projectCwd) {
    for (const location of previousBinSymlinks.keys()) {
      if (ppath.contains(projectCwd, location) === null)
        throw new Error(`Assertion failed. Excepted bin symlink location to be inside project dir, instead it was at ${location}`);
      if (!binSymlinks.has(location)) {
        const binDir = ppath.join(location, NODE_MODULES3, DOT_BIN);
        await xfs.removePromise(binDir);
      }
    }
    for (const [location, symlinks] of binSymlinks) {
      if (ppath.contains(projectCwd, location) === null)
        throw new Error(`Assertion failed. Excepted bin symlink location to be inside project dir, instead it was at ${location}`);
      const binDir = ppath.join(location, NODE_MODULES3, DOT_BIN);
      const prevSymlinks = previousBinSymlinks.get(location) || new Map();
      await xfs.mkdirPromise(binDir, {recursive: true});
      for (const name of prevSymlinks.keys()) {
        if (!symlinks.has(name)) {
          await xfs.removePromise(ppath.join(binDir, name));
          if (process.platform === `win32`) {
            await xfs.removePromise(ppath.join(binDir, toFilename(`${name}.cmd`)));
          }
        }
      }
      for (const [name, target] of symlinks) {
        const prevTarget = prevSymlinks.get(name);
        const symlinkPath = ppath.join(binDir, name);
        if (prevTarget === target)
          continue;
        if (process.platform === `win32`) {
          await (0, import_cmd_shim.default)(npath.fromPortablePath(target), npath.fromPortablePath(symlinkPath), {createPwshFile: false});
        } else {
          await xfs.removePromise(symlinkPath);
          await symlinkPromise(target, symlinkPath);
          if (ppath.contains(projectCwd, await xfs.realpathPromise(target)) !== null) {
            await xfs.chmodPromise(target, 493);
          }
        }
      }
    }
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-node-modules-virtual-6c4ffdc97c/1/packages/plugin-node-modules/sources/PnpLooseLinker.ts
  var PnpLooseLinker = class extends PnpLinker {
    constructor() {
      super(...arguments);
      this.mode = `loose`;
    }
    makeInstaller(opts) {
      return new PnpLooseInstaller(opts);
    }
  };
  var PnpLooseInstaller = class extends PnpInstaller {
    constructor() {
      super(...arguments);
      this.mode = `loose`;
    }
    async transformPnpSettings(pnpSettings) {
      const defaultFsLayer = new VirtualFS({
        baseFs: new ZipOpenFS({
          libzip: await getLibzipPromise(),
          maxOpenFiles: 80,
          readOnlyArchives: true
        })
      });
      const pnp2 = makeRuntimeApi(pnpSettings, this.opts.project.cwd, defaultFsLayer);
      const {tree, errors: errors4} = buildNodeModulesTree(pnp2, {pnpifyFs: false, project: this.opts.project});
      if (!tree) {
        for (const {messageName, text} of errors4)
          this.opts.report.reportError(messageName, text);
        return;
      }
      const fallbackPool = new Map();
      pnpSettings.fallbackPool = fallbackPool;
      const registerFallback = (name, entry2) => {
        const locator = structUtils_exports.parseLocator(entry2.locator);
        const identStr = structUtils_exports.stringifyIdent(locator);
        if (identStr === name) {
          fallbackPool.set(name, locator.reference);
        } else {
          fallbackPool.set(name, [identStr, locator.reference]);
        }
      };
      const root = ppath.join(this.opts.project.cwd, Filename.nodeModules);
      const entry = tree.get(root);
      if (typeof entry === `undefined`)
        throw new Error(`Assertion failed: Expected a root junction point`);
      if (`target` in entry)
        throw new Error(`Assertion failed: Expected the root junction point to be a directory`);
      for (const childName of entry.dirList) {
        const childP = ppath.join(root, childName);
        const child = tree.get(childP);
        if (typeof child === `undefined`)
          throw new Error(`Assertion failed: Expected the child to have been registered`);
        if (`target` in child) {
          registerFallback(childName, child);
        } else {
          for (const subChildName of child.dirList) {
            const subChildP = ppath.join(childP, subChildName);
            const subChild = tree.get(subChildP);
            if (typeof subChild === `undefined`)
              throw new Error(`Assertion failed: Expected the subchild to have been registered`);
            if (`target` in subChild) {
              registerFallback(`${childName}/${subChildName}`, subChild);
            } else {
              throw new Error(`Assertion failed: Expected the leaf junction to be a package`);
            }
          }
        }
      }
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-node-modules-virtual-6c4ffdc97c/1/packages/plugin-node-modules/sources/index.ts
  var plugin11 = {
    hooks: {
      cleanGlobalArtifacts: async (configuration) => {
        const globalHardlinksDirectory = getGlobalHardlinksStore(configuration);
        await xfs.removePromise(globalHardlinksDirectory);
      }
    },
    configuration: {
      nmHoistingLimits: {
        description: `Prevent packages to be hoisted past specific levels`,
        type: SettingsType.STRING,
        values: [
          NodeModulesHoistingLimits.WORKSPACES,
          NodeModulesHoistingLimits.DEPENDENCIES,
          NodeModulesHoistingLimits.NONE
        ],
        default: NodeModulesHoistingLimits.NONE
      },
      nmMode: {
        description: `If set to "hardlinks-local" Yarn will utilize hardlinks to reduce disk space consumption inside "node_modules" directories. With "hardlinks-global" Yarn will use global content addressable storage to reduce "node_modules" size across all the projects using this option.`,
        type: SettingsType.STRING,
        values: [
          NodeModulesMode.CLASSIC,
          NodeModulesMode.HARDLINKS_LOCAL,
          NodeModulesMode.HARDLINKS_GLOBAL
        ],
        default: NodeModulesMode.CLASSIC
      }
    },
    linkers: [
      NodeModulesLinker,
      PnpLooseLinker
    ]
  };
  var sources_default13 = plugin11;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-npm-virtual-ac09774f7e/1/packages/plugin-npm/sources/index.ts
  var sources_exports18 = {};
  __export(sources_exports18, {
    default: () => sources_default15,
    npmConfigUtils: () => npmConfigUtils_exports,
    npmHttpUtils: () => npmHttpUtils_exports,
    npmPublishUtils: () => npmPublishUtils_exports
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-npm-virtual-ac09774f7e/1/packages/plugin-npm/sources/NpmHttpFetcher.ts
  var import_semver12 = __toModule(require_semver2());

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-npm-virtual-ac09774f7e/1/packages/plugin-npm/sources/constants.ts
  var PROTOCOL2 = `npm:`;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-npm-virtual-ac09774f7e/1/packages/plugin-npm/sources/npmHttpUtils.ts
  var npmHttpUtils_exports = {};
  __export(npmHttpUtils_exports, {
    AuthType: () => AuthType,
    customPackageError: () => customPackageError,
    del: () => del2,
    get: () => get2,
    getIdentUrl: () => getIdentUrl,
    handleInvalidAuthenticationError: () => handleInvalidAuthenticationError,
    post: () => post2,
    put: () => put2
  });
  var import_enquirer3 = __toModule(require_enquirer());
  var import_url5 = __toModule(require("url"));

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-npm-virtual-ac09774f7e/1/packages/plugin-npm/sources/npmConfigUtils.ts
  var npmConfigUtils_exports = {};
  __export(npmConfigUtils_exports, {
    RegistryType: () => RegistryType,
    getAuthConfiguration: () => getAuthConfiguration,
    getDefaultRegistry: () => getDefaultRegistry,
    getPublishRegistry: () => getPublishRegistry,
    getRegistryConfiguration: () => getRegistryConfiguration,
    getScopeConfiguration: () => getScopeConfiguration,
    getScopeRegistry: () => getScopeRegistry,
    normalizeRegistry: () => normalizeRegistry
  });
  var RegistryType;
  (function(RegistryType2) {
    RegistryType2["FETCH_REGISTRY"] = `npmRegistryServer`;
    RegistryType2["PUBLISH_REGISTRY"] = `npmPublishRegistry`;
  })(RegistryType || (RegistryType = {}));
  function normalizeRegistry(registry) {
    return registry.replace(/\/$/, ``);
  }
  function getPublishRegistry(manifest, {configuration}) {
    if (manifest.publishConfig && manifest.publishConfig.registry)
      return normalizeRegistry(manifest.publishConfig.registry);
    if (manifest.name)
      return getScopeRegistry(manifest.name.scope, {configuration, type: RegistryType.PUBLISH_REGISTRY});
    return getDefaultRegistry({configuration, type: RegistryType.PUBLISH_REGISTRY});
  }
  function getScopeRegistry(scope, {configuration, type = RegistryType.FETCH_REGISTRY}) {
    const scopeConfiguration = getScopeConfiguration(scope, {configuration});
    if (scopeConfiguration === null)
      return getDefaultRegistry({configuration, type});
    const scopeRegistry = scopeConfiguration.get(type);
    if (scopeRegistry === null)
      return getDefaultRegistry({configuration, type});
    return normalizeRegistry(scopeRegistry);
  }
  function getDefaultRegistry({configuration, type = RegistryType.FETCH_REGISTRY}) {
    const defaultRegistry = configuration.get(type);
    if (defaultRegistry !== null)
      return normalizeRegistry(defaultRegistry);
    return normalizeRegistry(configuration.get(RegistryType.FETCH_REGISTRY));
  }
  function getRegistryConfiguration(registry, {configuration}) {
    const registryConfigurations = configuration.get(`npmRegistries`);
    const exactEntry = registryConfigurations.get(registry);
    if (typeof exactEntry !== `undefined`)
      return exactEntry;
    const noProtocolEntry = registryConfigurations.get(registry.replace(/^[a-z]+:/, ``));
    if (typeof noProtocolEntry !== `undefined`)
      return noProtocolEntry;
    return null;
  }
  function getScopeConfiguration(scope, {configuration}) {
    if (scope === null)
      return null;
    const scopeConfigurations = configuration.get(`npmScopes`);
    const scopeConfiguration = scopeConfigurations.get(scope);
    if (!scopeConfiguration)
      return null;
    return scopeConfiguration;
  }
  function getAuthConfiguration(registry, {configuration, ident}) {
    const scopeConfiguration = ident && getScopeConfiguration(ident.scope, {configuration});
    if ((scopeConfiguration == null ? void 0 : scopeConfiguration.get(`npmAuthIdent`)) || (scopeConfiguration == null ? void 0 : scopeConfiguration.get(`npmAuthToken`)))
      return scopeConfiguration;
    const registryConfiguration = getRegistryConfiguration(registry, {configuration});
    return registryConfiguration || configuration;
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-npm-virtual-ac09774f7e/1/packages/plugin-npm/sources/npmHttpUtils.ts
  var AuthType;
  (function(AuthType2) {
    AuthType2[AuthType2["NO_AUTH"] = 0] = "NO_AUTH";
    AuthType2[AuthType2["BEST_EFFORT"] = 1] = "BEST_EFFORT";
    AuthType2[AuthType2["CONFIGURATION"] = 2] = "CONFIGURATION";
    AuthType2[AuthType2["ALWAYS_AUTH"] = 3] = "ALWAYS_AUTH";
  })(AuthType || (AuthType = {}));
  async function handleInvalidAuthenticationError(error, {attemptedAs, registry, headers, configuration}) {
    var _a2, _b;
    if (((_a2 = error.originalError) == null ? void 0 : _a2.name) === `HTTPError` && ((_b = error.originalError) == null ? void 0 : _b.response.statusCode) === 401) {
      throw new ReportError(MessageName.AUTHENTICATION_INVALID, `Invalid authentication (${typeof attemptedAs !== `string` ? `as ${await whoami(registry, headers, {configuration})}` : `attempted as ${attemptedAs}`})`);
    }
  }
  function customPackageError(error) {
    var _a2;
    return ((_a2 = error.response) == null ? void 0 : _a2.statusCode) === 404 ? `Package not found` : null;
  }
  function getIdentUrl(ident) {
    if (ident.scope) {
      return `/@${ident.scope}%2f${ident.name}`;
    } else {
      return `/${ident.name}`;
    }
  }
  async function get2(path3, _a2) {
    var _b = _a2, {configuration, headers, ident, authType, registry} = _b, rest = __objRest(_b, ["configuration", "headers", "ident", "authType", "registry"]);
    if (ident && typeof registry === `undefined`)
      registry = getScopeRegistry(ident.scope, {configuration});
    if (ident && ident.scope && typeof authType === `undefined`)
      authType = 1;
    if (typeof registry !== `string`)
      throw new Error(`Assertion failed: The registry should be a string`);
    const auth = await getAuthenticationHeader(registry, {authType, configuration, ident});
    if (auth)
      headers = __spreadProps(__spreadValues({}, headers), {authorization: auth});
    let url;
    try {
      url = new import_url5.URL(path3);
    } catch (e) {
      url = new import_url5.URL(registry + path3);
    }
    try {
      return await httpUtils_exports.get(url.href, __spreadValues({configuration, headers}, rest));
    } catch (error) {
      await handleInvalidAuthenticationError(error, {registry, configuration, headers});
      throw error;
    }
  }
  async function post2(path3, body, _a2) {
    var _b = _a2, {attemptedAs, configuration, headers, ident, authType = 3, registry} = _b, rest = __objRest(_b, ["attemptedAs", "configuration", "headers", "ident", "authType", "registry"]);
    if (ident && typeof registry === `undefined`)
      registry = getScopeRegistry(ident.scope, {configuration});
    if (typeof registry !== `string`)
      throw new Error(`Assertion failed: The registry should be a string`);
    const auth = await getAuthenticationHeader(registry, {authType, configuration, ident});
    if (auth)
      headers = __spreadProps(__spreadValues({}, headers), {authorization: auth});
    try {
      return await httpUtils_exports.post(registry + path3, body, __spreadValues({configuration, headers}, rest));
    } catch (error) {
      if (!isOtpError(error)) {
        await handleInvalidAuthenticationError(error, {attemptedAs, registry, configuration, headers});
        throw error;
      }
      const otp = await askForOtp();
      const headersWithOtp = __spreadValues(__spreadValues({}, headers), getOtpHeaders(otp));
      try {
        return await httpUtils_exports.post(`${registry}${path3}`, body, __spreadValues({configuration, headers: headersWithOtp}, rest));
      } catch (error2) {
        await handleInvalidAuthenticationError(error2, {attemptedAs, registry, configuration, headers});
        throw error2;
      }
    }
  }
  async function put2(path3, body, _a2) {
    var _b = _a2, {attemptedAs, configuration, headers, ident, authType = 3, registry} = _b, rest = __objRest(_b, ["attemptedAs", "configuration", "headers", "ident", "authType", "registry"]);
    if (ident && typeof registry === `undefined`)
      registry = getScopeRegistry(ident.scope, {configuration});
    if (typeof registry !== `string`)
      throw new Error(`Assertion failed: The registry should be a string`);
    const auth = await getAuthenticationHeader(registry, {authType, configuration, ident});
    if (auth)
      headers = __spreadProps(__spreadValues({}, headers), {authorization: auth});
    try {
      return await httpUtils_exports.put(registry + path3, body, __spreadValues({configuration, headers}, rest));
    } catch (error) {
      if (!isOtpError(error)) {
        await handleInvalidAuthenticationError(error, {attemptedAs, registry, configuration, headers});
        throw error;
      }
      const otp = await askForOtp();
      const headersWithOtp = __spreadValues(__spreadValues({}, headers), getOtpHeaders(otp));
      try {
        return await httpUtils_exports.put(`${registry}${path3}`, body, __spreadValues({configuration, headers: headersWithOtp}, rest));
      } catch (error2) {
        await handleInvalidAuthenticationError(error2, {attemptedAs, registry, configuration, headers});
        throw error2;
      }
    }
  }
  async function del2(path3, _a2) {
    var _b = _a2, {attemptedAs, configuration, headers, ident, authType = 3, registry} = _b, rest = __objRest(_b, ["attemptedAs", "configuration", "headers", "ident", "authType", "registry"]);
    if (ident && typeof registry === `undefined`)
      registry = getScopeRegistry(ident.scope, {configuration});
    if (typeof registry !== `string`)
      throw new Error(`Assertion failed: The registry should be a string`);
    const auth = await getAuthenticationHeader(registry, {authType, configuration, ident});
    if (auth)
      headers = __spreadProps(__spreadValues({}, headers), {authorization: auth});
    try {
      return await httpUtils_exports.del(registry + path3, __spreadValues({configuration, headers}, rest));
    } catch (error) {
      if (!isOtpError(error)) {
        await handleInvalidAuthenticationError(error, {attemptedAs, registry, configuration, headers});
        throw error;
      }
      const otp = await askForOtp();
      const headersWithOtp = __spreadValues(__spreadValues({}, headers), getOtpHeaders(otp));
      try {
        return await httpUtils_exports.del(`${registry}${path3}`, __spreadValues({configuration, headers: headersWithOtp}, rest));
      } catch (error2) {
        await handleInvalidAuthenticationError(error2, {attemptedAs, registry, configuration, headers});
        throw error2;
      }
    }
  }
  async function getAuthenticationHeader(registry, {authType = 2, configuration, ident}) {
    const effectiveConfiguration = getAuthConfiguration(registry, {configuration, ident});
    const mustAuthenticate = shouldAuthenticate(effectiveConfiguration, authType);
    if (!mustAuthenticate)
      return null;
    const header = await configuration.reduceHook((hooks) => {
      return hooks.getNpmAuthenticationHeader;
    }, void 0, registry, {configuration, ident});
    if (header)
      return header;
    if (effectiveConfiguration.get(`npmAuthToken`))
      return `Bearer ${effectiveConfiguration.get(`npmAuthToken`)}`;
    if (effectiveConfiguration.get(`npmAuthIdent`))
      return `Basic ${effectiveConfiguration.get(`npmAuthIdent`)}`;
    if (mustAuthenticate && authType !== 1) {
      throw new ReportError(MessageName.AUTHENTICATION_NOT_FOUND, `No authentication configured for request`);
    } else {
      return null;
    }
  }
  function shouldAuthenticate(authConfiguration, authType) {
    switch (authType) {
      case 2:
        return authConfiguration.get(`npmAlwaysAuth`);
      case 1:
      case 3:
        return true;
      case 0:
        return false;
      default:
        throw new Error(`Unreachable`);
    }
  }
  async function whoami(registry, headers, {configuration}) {
    var _a2;
    if (typeof headers === `undefined` || typeof headers.authorization === `undefined`)
      return `an anonymous user`;
    try {
      const response = await httpUtils_exports.get(new import_url5.URL(`${registry}/-/whoami`).href, {
        configuration,
        headers,
        jsonResponse: true
      });
      return (_a2 = response.username) != null ? _a2 : `an unknown user`;
    } catch {
      return `an unknown user`;
    }
  }
  async function askForOtp() {
    if (process.env.TEST_ENV)
      return process.env.TEST_NPM_2FA_TOKEN || ``;
    const {otp} = await (0, import_enquirer3.prompt)({
      type: `password`,
      name: `otp`,
      message: `One-time password:`,
      required: true,
      onCancel: () => process.exit(130)
    });
    return otp;
  }
  function isOtpError(error) {
    var _a2, _b;
    if (((_a2 = error.originalError) == null ? void 0 : _a2.name) !== `HTTPError`)
      return false;
    try {
      const authMethods = (_b = error.originalError) == null ? void 0 : _b.response.headers[`www-authenticate`].split(/,\s*/).map((s) => s.toLowerCase());
      return authMethods.includes(`otp`);
    } catch (e) {
      return false;
    }
  }
  function getOtpHeaders(otp) {
    return {
      [`npm-otp`]: otp
    };
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-npm-virtual-ac09774f7e/1/packages/plugin-npm/sources/NpmHttpFetcher.ts
  var NpmHttpFetcher = class {
    supports(locator, opts) {
      if (!locator.reference.startsWith(PROTOCOL2))
        return false;
      const {selector, params} = structUtils_exports.parseRange(locator.reference);
      if (!import_semver12.default.valid(selector))
        return false;
      if (params === null || typeof params.__archiveUrl !== `string`)
        return false;
      return true;
    }
    getLocalPath(locator, opts) {
      return null;
    }
    async fetch(locator, opts) {
      const expectedChecksum = opts.checksums.get(locator.locatorHash) || null;
      const [packageFs, releaseFs, checksum] = await opts.cache.fetchPackageFromCache(locator, expectedChecksum, {
        onHit: () => opts.report.reportCacheHit(locator),
        onMiss: () => opts.report.reportCacheMiss(locator, `${structUtils_exports.prettyLocator(opts.project.configuration, locator)} can't be found in the cache and will be fetched from the remote server`),
        loader: () => this.fetchFromNetwork(locator, opts),
        skipIntegrityCheck: opts.skipIntegrityCheck
      });
      return {
        packageFs,
        releaseFs,
        prefixPath: structUtils_exports.getIdentVendorPath(locator),
        checksum
      };
    }
    async fetchFromNetwork(locator, opts) {
      const {params} = structUtils_exports.parseRange(locator.reference);
      if (params === null || typeof params.__archiveUrl !== `string`)
        throw new Error(`Assertion failed: The archiveUrl querystring parameter should have been available`);
      const sourceBuffer = await get2(params.__archiveUrl, {
        configuration: opts.project.configuration,
        ident: locator
      });
      return await tgzUtils_exports.convertToZip(sourceBuffer, {
        compressionLevel: opts.project.configuration.get(`compressionLevel`),
        prefixPath: structUtils_exports.getIdentVendorPath(locator),
        stripComponents: 1
      });
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-npm-virtual-ac09774f7e/1/packages/plugin-npm/sources/NpmRemapResolver.ts
  var NpmRemapResolver = class {
    supportsDescriptor(descriptor, opts) {
      if (!descriptor.range.startsWith(PROTOCOL2))
        return false;
      if (!structUtils_exports.tryParseDescriptor(descriptor.range.slice(PROTOCOL2.length), true))
        return false;
      return true;
    }
    supportsLocator(locator, opts) {
      return false;
    }
    shouldPersistResolution(locator, opts) {
      throw new Error(`Unreachable`);
    }
    bindDescriptor(descriptor, fromLocator, opts) {
      return descriptor;
    }
    getResolutionDependencies(descriptor, opts) {
      const nextDescriptor = structUtils_exports.parseDescriptor(descriptor.range.slice(PROTOCOL2.length), true);
      return opts.resolver.getResolutionDependencies(nextDescriptor, opts);
    }
    async getCandidates(descriptor, dependencies, opts) {
      const nextDescriptor = structUtils_exports.parseDescriptor(descriptor.range.slice(PROTOCOL2.length), true);
      return await opts.resolver.getCandidates(nextDescriptor, dependencies, opts);
    }
    async getSatisfying(descriptor, references, opts) {
      const nextDescriptor = structUtils_exports.parseDescriptor(descriptor.range.slice(PROTOCOL2.length), true);
      return opts.resolver.getSatisfying(nextDescriptor, references, opts);
    }
    resolve(locator, opts) {
      throw new Error(`Unreachable`);
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-npm-virtual-ac09774f7e/1/packages/plugin-npm/sources/NpmSemverFetcher.ts
  var import_semver13 = __toModule(require_semver2());
  var import_url6 = __toModule(require("url"));
  var NpmSemverFetcher = class {
    supports(locator, opts) {
      if (!locator.reference.startsWith(PROTOCOL2))
        return false;
      const url = new import_url6.URL(locator.reference);
      if (!import_semver13.default.valid(url.pathname))
        return false;
      if (url.searchParams.has(`__archiveUrl`))
        return false;
      return true;
    }
    getLocalPath(locator, opts) {
      return null;
    }
    async fetch(locator, opts) {
      const expectedChecksum = opts.checksums.get(locator.locatorHash) || null;
      const [packageFs, releaseFs, checksum] = await opts.cache.fetchPackageFromCache(locator, expectedChecksum, {
        onHit: () => opts.report.reportCacheHit(locator),
        onMiss: () => opts.report.reportCacheMiss(locator, `${structUtils_exports.prettyLocator(opts.project.configuration, locator)} can't be found in the cache and will be fetched from the remote registry`),
        loader: () => this.fetchFromNetwork(locator, opts),
        skipIntegrityCheck: opts.skipIntegrityCheck
      });
      return {
        packageFs,
        releaseFs,
        prefixPath: structUtils_exports.getIdentVendorPath(locator),
        checksum
      };
    }
    async fetchFromNetwork(locator, opts) {
      let sourceBuffer;
      try {
        sourceBuffer = await get2(NpmSemverFetcher.getLocatorUrl(locator), {
          configuration: opts.project.configuration,
          ident: locator
        });
      } catch (error) {
        sourceBuffer = await get2(NpmSemverFetcher.getLocatorUrl(locator).replace(/%2f/g, `/`), {
          configuration: opts.project.configuration,
          ident: locator
        });
      }
      return await tgzUtils_exports.convertToZip(sourceBuffer, {
        compressionLevel: opts.project.configuration.get(`compressionLevel`),
        prefixPath: structUtils_exports.getIdentVendorPath(locator),
        stripComponents: 1
      });
    }
    static isConventionalTarballUrl(locator, url, {configuration}) {
      let registry = getScopeRegistry(locator.scope, {configuration});
      const path3 = NpmSemverFetcher.getLocatorUrl(locator);
      url = url.replace(/^https?:(\/\/(?:[^/]+\.)?npmjs.org(?:$|\/))/, `https:$1`);
      registry = registry.replace(/^https:\/\/registry\.npmjs\.org($|\/)/, `https://registry.yarnpkg.com$1`);
      url = url.replace(/^https:\/\/registry\.npmjs\.org($|\/)/, `https://registry.yarnpkg.com$1`);
      if (url === registry + path3)
        return true;
      if (url === registry + path3.replace(/%2f/g, `/`))
        return true;
      return false;
    }
    static getLocatorUrl(locator) {
      const version = import_semver13.default.clean(locator.reference.slice(PROTOCOL2.length));
      if (version === null)
        throw new ReportError(MessageName.RESOLVER_NOT_FOUND, `The npm semver resolver got selected, but the version isn't semver`);
      return `${getIdentUrl(locator)}/-/${locator.name}-${version}.tgz`;
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-npm-virtual-ac09774f7e/1/packages/plugin-npm/sources/NpmSemverResolver.ts
  var import_semver14 = __toModule(require_semver2());
  var NODE_GYP_IDENT = structUtils_exports.makeIdent(null, `node-gyp`);
  var NODE_GYP_MATCH = /\b(node-gyp|prebuild-install)\b/;
  var NpmSemverResolver = class {
    supportsDescriptor(descriptor, opts) {
      if (!descriptor.range.startsWith(PROTOCOL2))
        return false;
      return !!semverUtils_exports.validRange(descriptor.range.slice(PROTOCOL2.length));
    }
    supportsLocator(locator, opts) {
      if (!locator.reference.startsWith(PROTOCOL2))
        return false;
      const {selector} = structUtils_exports.parseRange(locator.reference);
      if (!import_semver14.default.valid(selector))
        return false;
      return true;
    }
    shouldPersistResolution(locator, opts) {
      return true;
    }
    bindDescriptor(descriptor, fromLocator, opts) {
      return descriptor;
    }
    getResolutionDependencies(descriptor, opts) {
      return [];
    }
    async getCandidates(descriptor, dependencies, opts) {
      const range = semverUtils_exports.validRange(descriptor.range.slice(PROTOCOL2.length));
      if (range === null)
        throw new Error(`Expected a valid range, got ${descriptor.range.slice(PROTOCOL2.length)}`);
      const registryData = await get2(getIdentUrl(descriptor), {
        configuration: opts.project.configuration,
        ident: descriptor,
        jsonResponse: true
      });
      const candidates = miscUtils_exports.mapAndFilter(Object.keys(registryData.versions), (version) => {
        try {
          const candidate = new semverUtils_exports.SemVer(version);
          if (range.test(candidate)) {
            return candidate;
          }
        } catch {
        }
        return miscUtils_exports.mapAndFilter.skip;
      });
      const noDeprecatedCandidates = candidates.filter((version) => {
        return !registryData.versions[version.raw].deprecated;
      });
      const finalCandidates = noDeprecatedCandidates.length > 0 ? noDeprecatedCandidates : candidates;
      finalCandidates.sort((a, b) => {
        return -a.compare(b);
      });
      return finalCandidates.map((version) => {
        const versionLocator = structUtils_exports.makeLocator(descriptor, `${PROTOCOL2}${version.raw}`);
        const archiveUrl = registryData.versions[version.raw].dist.tarball;
        if (NpmSemverFetcher.isConventionalTarballUrl(versionLocator, archiveUrl, {configuration: opts.project.configuration})) {
          return versionLocator;
        } else {
          return structUtils_exports.bindLocator(versionLocator, {__archiveUrl: archiveUrl});
        }
      });
    }
    async getSatisfying(descriptor, references, opts) {
      const range = semverUtils_exports.validRange(descriptor.range.slice(PROTOCOL2.length));
      if (range === null)
        throw new Error(`Expected a valid range, got ${descriptor.range.slice(PROTOCOL2.length)}`);
      return miscUtils_exports.mapAndFilter(references, (reference) => {
        try {
          const {selector} = structUtils_exports.parseRange(reference, {requireProtocol: PROTOCOL2});
          const version = new semverUtils_exports.SemVer(selector);
          if (range.test(version)) {
            return {reference, version};
          }
        } catch {
        }
        return miscUtils_exports.mapAndFilter.skip;
      }).sort((a, b) => -a.version.compare(b.version)).map(({reference}) => structUtils_exports.makeLocator(descriptor, reference));
    }
    async resolve(locator, opts) {
      const {selector} = structUtils_exports.parseRange(locator.reference);
      const version = import_semver14.default.clean(selector);
      if (version === null)
        throw new ReportError(MessageName.RESOLVER_NOT_FOUND, `The npm semver resolver got selected, but the version isn't semver`);
      const registryData = await get2(getIdentUrl(locator), {
        configuration: opts.project.configuration,
        ident: locator,
        jsonResponse: true
      });
      if (!Object.prototype.hasOwnProperty.call(registryData, `versions`))
        throw new ReportError(MessageName.REMOTE_INVALID, `Registry returned invalid data for - missing "versions" field`);
      if (!Object.prototype.hasOwnProperty.call(registryData.versions, version))
        throw new ReportError(MessageName.REMOTE_NOT_FOUND, `Registry failed to return reference "${version}"`);
      const manifest = new Manifest();
      manifest.load(registryData.versions[version]);
      if (!manifest.dependencies.has(NODE_GYP_IDENT.identHash) && !manifest.peerDependencies.has(NODE_GYP_IDENT.identHash)) {
        for (const value of manifest.scripts.values()) {
          if (value.match(NODE_GYP_MATCH)) {
            manifest.dependencies.set(NODE_GYP_IDENT.identHash, structUtils_exports.makeDescriptor(NODE_GYP_IDENT, `latest`));
            opts.report.reportWarning(MessageName.NODE_GYP_INJECTED, `${structUtils_exports.prettyLocator(opts.project.configuration, locator)}: Implicit dependencies on node-gyp are discouraged`);
            break;
          }
        }
      }
      if (typeof manifest.raw.deprecated === `string`)
        opts.report.reportWarningOnce(MessageName.DEPRECATED_PACKAGE, `${structUtils_exports.prettyLocator(opts.project.configuration, locator)} is deprecated: ${manifest.raw.deprecated}`);
      return __spreadProps(__spreadValues({}, locator), {
        version,
        languageName: `node`,
        linkType: LinkType.HARD,
        dependencies: manifest.dependencies,
        peerDependencies: manifest.peerDependencies,
        dependenciesMeta: manifest.dependenciesMeta,
        peerDependenciesMeta: manifest.peerDependenciesMeta,
        bin: manifest.bin
      });
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-npm-virtual-ac09774f7e/1/packages/plugin-npm/sources/NpmTagResolver.ts
  var NpmTagResolver = class {
    supportsDescriptor(descriptor, opts) {
      if (!descriptor.range.startsWith(PROTOCOL2))
        return false;
      if (!TAG_REGEXP.test(descriptor.range.slice(PROTOCOL2.length)))
        return false;
      return true;
    }
    supportsLocator(locator, opts) {
      return false;
    }
    shouldPersistResolution(locator, opts) {
      throw new Error(`Unreachable`);
    }
    bindDescriptor(descriptor, fromLocator, opts) {
      return descriptor;
    }
    getResolutionDependencies(descriptor, opts) {
      return [];
    }
    async getCandidates(descriptor, dependencies, opts) {
      const tag = descriptor.range.slice(PROTOCOL2.length);
      const registryData = await get2(getIdentUrl(descriptor), {
        configuration: opts.project.configuration,
        ident: descriptor,
        jsonResponse: true
      });
      if (!Object.prototype.hasOwnProperty.call(registryData, `dist-tags`))
        throw new ReportError(MessageName.REMOTE_INVALID, `Registry returned invalid data - missing "dist-tags" field`);
      const distTags = registryData[`dist-tags`];
      if (!Object.prototype.hasOwnProperty.call(distTags, tag))
        throw new ReportError(MessageName.REMOTE_NOT_FOUND, `Registry failed to return tag "${tag}"`);
      const version = distTags[tag];
      const versionLocator = structUtils_exports.makeLocator(descriptor, `${PROTOCOL2}${version}`);
      const archiveUrl = registryData.versions[version].dist.tarball;
      if (NpmSemverFetcher.isConventionalTarballUrl(versionLocator, archiveUrl, {configuration: opts.project.configuration})) {
        return [versionLocator];
      } else {
        return [structUtils_exports.bindLocator(versionLocator, {__archiveUrl: archiveUrl})];
      }
    }
    async getSatisfying(descriptor, references, opts) {
      return null;
    }
    async resolve(locator, opts) {
      throw new Error(`Unreachable`);
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-npm-virtual-ac09774f7e/1/packages/plugin-npm/sources/npmPublishUtils.ts
  var npmPublishUtils_exports = {};
  __export(npmPublishUtils_exports, {
    makePublishBody: () => makePublishBody
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-pack-virtual-1c63a696a4/1/packages/plugin-pack/sources/index.ts
  var sources_exports17 = {};
  __export(sources_exports17, {
    default: () => sources_default14,
    packUtils: () => packUtils_exports
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-pack-virtual-1c63a696a4/1/packages/plugin-pack/sources/packUtils.ts
  var packUtils_exports = {};
  __export(packUtils_exports, {
    genPackList: () => genPackList,
    genPackStream: () => genPackStream,
    genPackageManifest: () => genPackageManifest,
    hasPackScripts: () => hasPackScripts,
    prepareForPack: () => prepareForPack
  });
  var import_micromatch10 = __toModule(require_micromatch());
  var import_tar_stream = __toModule(require_tar_stream());
  var import_zlib3 = __toModule(require("zlib"));
  var NEVER_IGNORE = [
    `/package.json`,
    `/readme`,
    `/readme.*`,
    `/license`,
    `/license.*`,
    `/licence`,
    `/licence.*`,
    `/changelog`,
    `/changelog.*`
  ];
  var ALWAYS_IGNORE = [
    `/package.tgz`,
    `.github`,
    `.git`,
    `.hg`,
    `node_modules`,
    `.npmignore`,
    `.gitignore`,
    `.#*`,
    `.DS_Store`
  ];
  async function hasPackScripts(workspace) {
    if (scriptUtils_exports.hasWorkspaceScript(workspace, `prepack`))
      return true;
    if (scriptUtils_exports.hasWorkspaceScript(workspace, `postpack`))
      return true;
    return false;
  }
  async function prepareForPack(workspace, {report}, cb) {
    await scriptUtils_exports.maybeExecuteWorkspaceLifecycleScript(workspace, `prepack`, {report});
    try {
      await cb();
    } finally {
      await scriptUtils_exports.maybeExecuteWorkspaceLifecycleScript(workspace, `postpack`, {report});
    }
  }
  async function genPackStream(workspace, files) {
    var _a2, _b;
    if (typeof files === `undefined`)
      files = await genPackList(workspace);
    const executableFiles = new Set();
    for (const value of (_b = (_a2 = workspace.manifest.publishConfig) == null ? void 0 : _a2.executableFiles) != null ? _b : new Set())
      executableFiles.add(ppath.normalize(value));
    for (const value of workspace.manifest.bin.values())
      executableFiles.add(ppath.normalize(value));
    const pack = import_tar_stream.default.pack();
    process.nextTick(async () => {
      for (const fileRequest of files) {
        const file = ppath.normalize(fileRequest);
        const source = ppath.resolve(workspace.cwd, file);
        const dest = ppath.join(`package`, file);
        const stat = await xfs.lstatPromise(source);
        const opts = {
          name: dest,
          mtime: new Date(tgzUtils_exports.safeTime * 1e3)
        };
        const mode = executableFiles.has(file) ? 493 : 420;
        let resolveFn;
        let rejectFn;
        const awaitTarget = new Promise((resolve, reject) => {
          resolveFn = resolve;
          rejectFn = reject;
        });
        const cb = (error) => {
          if (error) {
            rejectFn(error);
          } else {
            resolveFn();
          }
        };
        if (stat.isFile()) {
          let content;
          if (file === `package.json`)
            content = Buffer.from(JSON.stringify(await genPackageManifest(workspace), null, 2));
          else
            content = await xfs.readFilePromise(source);
          pack.entry(__spreadProps(__spreadValues({}, opts), {mode, type: `file`}), content, cb);
        } else if (stat.isSymbolicLink()) {
          pack.entry(__spreadProps(__spreadValues({}, opts), {mode, type: `symlink`, linkname: await xfs.readlinkPromise(source)}), cb);
        } else {
          cb(new Error(`Unsupported file type ${stat.mode} for ${npath.fromPortablePath(file)}`));
        }
        await awaitTarget;
      }
      pack.finalize();
    });
    const tgz = (0, import_zlib3.createGzip)();
    pack.pipe(tgz);
    return tgz;
  }
  async function genPackageManifest(workspace) {
    const data = JSON.parse(JSON.stringify(workspace.manifest.raw));
    await workspace.project.configuration.triggerHook((hooks) => hooks.beforeWorkspacePacking, workspace, data);
    return data;
  }
  async function genPackList(workspace) {
    var _a2, _b, _c, _d, _e, _f, _g, _h;
    const project = workspace.project;
    const configuration = project.configuration;
    const globalList = {
      accept: [],
      reject: []
    };
    for (const pattern of ALWAYS_IGNORE)
      globalList.reject.push(pattern);
    for (const pattern of NEVER_IGNORE)
      globalList.accept.push(pattern);
    globalList.reject.push(configuration.get(`rcFilename`));
    const maybeRejectPath = (path3) => {
      if (path3 === null || !path3.startsWith(`${workspace.cwd}/`))
        return;
      const workspaceRelativePath = ppath.relative(workspace.cwd, path3);
      const workspaceAbsolutePath = ppath.resolve(PortablePath.root, workspaceRelativePath);
      globalList.reject.push(workspaceAbsolutePath);
    };
    maybeRejectPath(ppath.resolve(project.cwd, configuration.get(`lockfileFilename`)));
    maybeRejectPath(configuration.get(`cacheFolder`));
    maybeRejectPath(configuration.get(`globalFolder`));
    maybeRejectPath(configuration.get(`installStatePath`));
    maybeRejectPath(configuration.get(`virtualFolder`));
    maybeRejectPath(configuration.get(`yarnPath`));
    await configuration.triggerHook((hooks) => {
      return hooks.populateYarnPaths;
    }, project, (path3) => {
      maybeRejectPath(path3);
    });
    for (const otherWorkspace of project.workspaces) {
      const rel = ppath.relative(workspace.cwd, otherWorkspace.cwd);
      if (rel !== `` && !rel.match(/^(\.\.)?\//)) {
        globalList.reject.push(`/${rel}`);
      }
    }
    const ignoreList = {
      accept: [],
      reject: []
    };
    const main2 = (_b = (_a2 = workspace.manifest.publishConfig) == null ? void 0 : _a2.main) != null ? _b : workspace.manifest.main;
    const module = (_d = (_c = workspace.manifest.publishConfig) == null ? void 0 : _c.module) != null ? _d : workspace.manifest.module;
    const browser = (_f = (_e = workspace.manifest.publishConfig) == null ? void 0 : _e.browser) != null ? _f : workspace.manifest.browser;
    const bins = (_h = (_g = workspace.manifest.publishConfig) == null ? void 0 : _g.bin) != null ? _h : workspace.manifest.bin;
    if (main2 != null)
      ignoreList.accept.push(ppath.resolve(PortablePath.root, main2));
    if (module != null)
      ignoreList.accept.push(ppath.resolve(PortablePath.root, module));
    if (typeof browser === `string`)
      ignoreList.accept.push(ppath.resolve(PortablePath.root, browser));
    for (const path3 of bins.values())
      ignoreList.accept.push(ppath.resolve(PortablePath.root, path3));
    if (browser instanceof Map) {
      for (const [original, replacement] of browser.entries()) {
        ignoreList.accept.push(ppath.resolve(PortablePath.root, original));
        if (typeof replacement === `string`) {
          ignoreList.accept.push(ppath.resolve(PortablePath.root, replacement));
        }
      }
    }
    const hasExplicitFileList = workspace.manifest.files !== null;
    if (hasExplicitFileList) {
      ignoreList.reject.push(`/*`);
      for (const pattern of workspace.manifest.files) {
        addIgnorePattern(ignoreList.accept, pattern, {cwd: PortablePath.root});
      }
    }
    return await walk(workspace.cwd, {
      hasExplicitFileList,
      globalList,
      ignoreList
    });
  }
  async function walk(initialCwd, {hasExplicitFileList, globalList, ignoreList}) {
    const list = [];
    const cwdFs = new JailFS(initialCwd);
    const cwdList = [[PortablePath.root, [ignoreList]]];
    while (cwdList.length > 0) {
      const [cwd, ignoreLists] = cwdList.pop();
      const stat = await cwdFs.lstatPromise(cwd);
      if (isIgnored(cwd, {globalList, ignoreLists: stat.isDirectory() ? null : ignoreLists}))
        continue;
      if (stat.isDirectory()) {
        const entries = await cwdFs.readdirPromise(cwd);
        let hasGitIgnore = false;
        let hasNpmIgnore = false;
        if (!hasExplicitFileList || cwd !== PortablePath.root) {
          for (const entry of entries) {
            hasGitIgnore = hasGitIgnore || entry === `.gitignore`;
            hasNpmIgnore = hasNpmIgnore || entry === `.npmignore`;
          }
        }
        const localIgnoreList = hasNpmIgnore ? await loadIgnoreList(cwdFs, cwd, `.npmignore`) : hasGitIgnore ? await loadIgnoreList(cwdFs, cwd, `.gitignore`) : null;
        let nextIgnoreLists = localIgnoreList !== null ? [localIgnoreList].concat(ignoreLists) : ignoreLists;
        if (isIgnored(cwd, {globalList, ignoreLists}))
          nextIgnoreLists = [...ignoreLists, {accept: [], reject: [`**/*`]}];
        for (const entry of entries) {
          cwdList.push([ppath.resolve(cwd, entry), nextIgnoreLists]);
        }
      } else if (stat.isFile() || stat.isSymbolicLink()) {
        list.push(ppath.relative(PortablePath.root, cwd));
      }
    }
    return list.sort();
  }
  async function loadIgnoreList(fs8, cwd, filename) {
    const ignoreList = {
      accept: [],
      reject: []
    };
    const data = await fs8.readFilePromise(ppath.join(cwd, filename), `utf8`);
    for (const pattern of data.split(/\n/g))
      addIgnorePattern(ignoreList.reject, pattern, {cwd});
    return ignoreList;
  }
  function normalizePattern(pattern, {cwd}) {
    const negated = pattern[0] === `!`;
    if (negated)
      pattern = pattern.slice(1);
    if (pattern.match(/\.{0,1}\//))
      pattern = ppath.resolve(cwd, pattern);
    if (negated)
      pattern = `!${pattern}`;
    return pattern;
  }
  function addIgnorePattern(target, pattern, {cwd}) {
    const trimed = pattern.trim();
    if (trimed === `` || trimed[0] === `#`)
      return;
    target.push(normalizePattern(trimed, {cwd}));
  }
  function isIgnored(cwd, {globalList, ignoreLists}) {
    if (isMatch(cwd, globalList.accept))
      return false;
    if (isMatch(cwd, globalList.reject))
      return true;
    if (ignoreLists !== null) {
      for (const ignoreList of ignoreLists) {
        if (isMatch(cwd, ignoreList.accept))
          return false;
        if (isMatch(cwd, ignoreList.reject)) {
          return true;
        }
      }
    }
    return false;
  }
  function isMatch(path3, patterns) {
    let inclusives = patterns;
    const exclusives = [];
    for (let t5 = 0; t5 < patterns.length; ++t5) {
      if (patterns[t5][0] !== `!`) {
        if (inclusives !== patterns) {
          inclusives.push(patterns[t5]);
        }
      } else {
        if (inclusives === patterns)
          inclusives = patterns.slice(0, t5);
        exclusives.push(patterns[t5].slice(1));
      }
    }
    if (isMatchBasename(path3, exclusives))
      return false;
    if (isMatchBasename(path3, inclusives))
      return true;
    return false;
  }
  function isMatchBasename(path3, patterns) {
    let paths = patterns;
    const basenames = [];
    for (let t5 = 0; t5 < patterns.length; ++t5) {
      if (patterns[t5].includes(`/`)) {
        if (paths !== patterns) {
          paths.push(patterns[t5]);
        }
      } else {
        if (paths === patterns)
          paths = patterns.slice(0, t5);
        basenames.push(patterns[t5]);
      }
    }
    if (import_micromatch10.default.isMatch(path3, paths, {dot: true, nocase: true}))
      return true;
    if (import_micromatch10.default.isMatch(path3, basenames, {dot: true, basename: true, nocase: true}))
      return true;
    return false;
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-pack-virtual-1c63a696a4/1/packages/plugin-pack/sources/commands/pack.ts
  var PackCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.installIfNeeded = options_exports.Boolean(`--install-if-needed`, false, {
        description: `Run a preliminary \`yarn install\` if the package contains build scripts`
      });
      this.dryRun = options_exports.Boolean(`-n,--dry-run`, false, {
        description: `Print the file paths without actually generating the package archive`
      });
      this.json = options_exports.Boolean(`--json`, false, {
        description: `Format the output as an NDJSON stream`
      });
      this.out = options_exports.String(`-o,--out`, {
        description: `Create the archive at the specified path`
      });
      this.filename = options_exports.String(`--filename`, {hidden: true});
    }
    async execute() {
      var _a2;
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const {project, workspace} = await Project.find(configuration, this.context.cwd);
      if (!workspace)
        throw new WorkspaceRequiredError(project.cwd, this.context.cwd);
      if (await hasPackScripts(workspace)) {
        if (this.installIfNeeded) {
          await project.install({
            cache: await Cache.find(configuration),
            report: new ThrowReport()
          });
        } else {
          await project.restoreInstallState();
        }
      }
      const out = (_a2 = this.out) != null ? _a2 : this.filename;
      const target = typeof out !== `undefined` ? ppath.resolve(this.context.cwd, interpolateOutputName(out, {workspace})) : ppath.resolve(workspace.cwd, `package.tgz`);
      const report = await StreamReport.start({
        configuration,
        stdout: this.context.stdout,
        json: this.json
      }, async (report2) => {
        await prepareForPack(workspace, {report: report2}, async () => {
          report2.reportJson({base: workspace.cwd});
          const files = await genPackList(workspace);
          for (const file of files) {
            report2.reportInfo(null, file);
            report2.reportJson({location: file});
          }
          if (!this.dryRun) {
            const pack = await genPackStream(workspace, files);
            const write = xfs.createWriteStream(target);
            pack.pipe(write);
            await new Promise((resolve) => {
              write.on(`finish`, resolve);
            });
          }
        });
        if (!this.dryRun) {
          report2.reportInfo(MessageName.UNNAMED, `Package archive generated in ${formatUtils_exports.pretty(configuration, target, formatUtils_exports.Type.PATH)}`);
          report2.reportJson({output: target});
        }
      });
      return report.exitCode();
    }
  };
  PackCommand.paths = [
    [`pack`]
  ];
  PackCommand.usage = Command.Usage({
    description: `generate a tarball from the active workspace`,
    details: `
      This command will turn the active workspace into a compressed archive suitable for publishing. The archive will by default be stored at the root of the workspace (\`package.tgz\`).

      If the \`-o,---out\` is set the archive will be created at the specified path. The \`%s\` and \`%v\` variables can be used within the path and will be respectively replaced by the package name and version.
    `,
    examples: [[
      `Create an archive from the active workspace`,
      `yarn pack`
    ], [
      `List the files that would be made part of the workspace's archive`,
      `yarn pack --dry-run`
    ], [
      `Name and output the archive in a dedicated folder`,
      `yarn pack --out /artifacts/%s-%v.tgz`
    ]]
  });
  var pack_default = PackCommand;
  function interpolateOutputName(name, {workspace}) {
    const interpolated = name.replace(`%s`, prettyWorkspaceIdent(workspace)).replace(`%v`, prettyWorkspaceVersion(workspace));
    return npath.toPortablePath(interpolated);
  }
  function prettyWorkspaceIdent(workspace) {
    if (workspace.manifest.name !== null) {
      return structUtils_exports.slugifyIdent(workspace.manifest.name);
    } else {
      return `package`;
    }
  }
  function prettyWorkspaceVersion(workspace) {
    if (workspace.manifest.version !== null) {
      return workspace.manifest.version;
    } else {
      return `unknown`;
    }
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-pack-virtual-1c63a696a4/1/packages/plugin-pack/sources/index.ts
  var DEPENDENCY_TYPES = [`dependencies`, `devDependencies`, `peerDependencies`];
  var WORKSPACE_PROTOCOL = `workspace:`;
  var beforeWorkspacePacking = (workspace, rawManifest) => {
    var _a2;
    if (rawManifest.publishConfig) {
      if (rawManifest.publishConfig.main)
        rawManifest.main = rawManifest.publishConfig.main;
      if (rawManifest.publishConfig.browser)
        rawManifest.browser = rawManifest.publishConfig.browser;
      if (rawManifest.publishConfig.module)
        rawManifest.module = rawManifest.publishConfig.module;
      if (rawManifest.publishConfig.browser)
        rawManifest.browser = rawManifest.publishConfig.browser;
      if (rawManifest.publishConfig.exports)
        rawManifest.exports = rawManifest.publishConfig.exports;
      if (rawManifest.publishConfig.bin) {
        rawManifest.bin = rawManifest.publishConfig.bin;
      }
    }
    const project = workspace.project;
    for (const dependencyType of DEPENDENCY_TYPES) {
      for (const descriptor of workspace.manifest.getForScope(dependencyType).values()) {
        const matchingWorkspace = project.tryWorkspaceByDescriptor(descriptor);
        const range = structUtils_exports.parseRange(descriptor.range);
        if (range.protocol !== WORKSPACE_PROTOCOL)
          continue;
        if (matchingWorkspace === null) {
          if (project.tryWorkspaceByIdent(descriptor) === null) {
            throw new ReportError(MessageName.WORKSPACE_NOT_FOUND, `${structUtils_exports.prettyDescriptor(project.configuration, descriptor)}: No local workspace found for this range`);
          }
        } else {
          let versionToWrite;
          if (structUtils_exports.areDescriptorsEqual(descriptor, matchingWorkspace.anchoredDescriptor) || range.selector === `*`)
            versionToWrite = (_a2 = matchingWorkspace.manifest.version) != null ? _a2 : `0.0.0`;
          else
            versionToWrite = range.selector;
          rawManifest[dependencyType][structUtils_exports.stringifyIdent(descriptor)] = versionToWrite;
        }
      }
    }
  };
  var plugin12 = {
    hooks: {
      beforeWorkspacePacking
    },
    commands: [
      pack_default
    ]
  };
  var sources_default14 = plugin12;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-npm-virtual-ac09774f7e/1/packages/plugin-npm/sources/npmPublishUtils.ts
  var import_crypto4 = __toModule(require("crypto"));
  var import_ssri = __toModule(require_ssri());
  var import_url7 = __toModule(require("url"));
  async function makePublishBody(workspace, buffer, {access, tag, registry}) {
    const configuration = workspace.project.configuration;
    const ident = workspace.manifest.name;
    const version = workspace.manifest.version;
    const name = structUtils_exports.stringifyIdent(ident);
    const shasum = (0, import_crypto4.createHash)(`sha1`).update(buffer).digest(`hex`);
    const integrity = import_ssri.default.fromData(buffer).toString();
    if (typeof access === `undefined`) {
      if (workspace.manifest.publishConfig && typeof workspace.manifest.publishConfig.access === `string`) {
        access = workspace.manifest.publishConfig.access;
      } else if (configuration.get(`npmPublishAccess`) !== null) {
        access = configuration.get(`npmPublishAccess`);
      } else if (ident.scope) {
        access = `restricted`;
      } else {
        access = `public`;
      }
    }
    const raw = await packUtils_exports.genPackageManifest(workspace);
    const tarballName = `${name}-${version}.tgz`;
    const tarballURL = new import_url7.URL(`${name}/-/${tarballName}`, registry);
    return {
      _id: name,
      _attachments: {
        [tarballName]: {
          [`content_type`]: `application/octet-stream`,
          data: buffer.toString(`base64`),
          length: buffer.length
        }
      },
      name,
      access,
      [`dist-tags`]: {
        [tag]: version
      },
      versions: {
        [version]: __spreadProps(__spreadValues({}, raw), {
          _id: `${name}@${version}`,
          name,
          version,
          dist: {
            shasum,
            integrity,
            tarball: tarballURL.toString()
          }
        })
      }
    };
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-npm-virtual-ac09774f7e/1/packages/plugin-npm/sources/index.ts
  var authSettings = {
    npmAlwaysAuth: {
      description: `URL of the selected npm registry (note: npm enterprise isn't supported)`,
      type: SettingsType.BOOLEAN,
      default: false
    },
    npmAuthIdent: {
      description: `Authentication identity for the npm registry (_auth in npm and yarn v1)`,
      type: SettingsType.SECRET,
      default: null
    },
    npmAuthToken: {
      description: `Authentication token for the npm registry (_authToken in npm and yarn v1)`,
      type: SettingsType.SECRET,
      default: null
    }
  };
  var registrySettings = {
    npmPublishRegistry: {
      description: `Registry to push packages to`,
      type: SettingsType.STRING,
      default: null
    },
    npmRegistryServer: {
      description: `URL of the selected npm registry (note: npm enterprise isn't supported)`,
      type: SettingsType.STRING,
      default: `https://registry.yarnpkg.com`
    }
  };
  var plugin13 = {
    configuration: __spreadProps(__spreadValues(__spreadValues({}, authSettings), registrySettings), {
      npmScopes: {
        description: `Settings per package scope`,
        type: SettingsType.MAP,
        valueDefinition: {
          description: ``,
          type: SettingsType.SHAPE,
          properties: __spreadValues(__spreadValues({}, authSettings), registrySettings)
        }
      },
      npmRegistries: {
        description: `Settings per registry`,
        type: SettingsType.MAP,
        normalizeKeys: normalizeRegistry,
        valueDefinition: {
          description: ``,
          type: SettingsType.SHAPE,
          properties: __spreadValues({}, authSettings)
        }
      }
    }),
    fetchers: [
      NpmHttpFetcher,
      NpmSemverFetcher
    ],
    resolvers: [
      NpmRemapResolver,
      NpmSemverResolver,
      NpmTagResolver
    ]
  };
  var sources_default15 = plugin13;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-npm-cli-virtual-2e644aaeac/1/packages/plugin-npm-cli/sources/index.ts
  var sources_exports19 = {};
  __export(sources_exports19, {
    default: () => sources_default16
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-npm-cli-virtual-2e644aaeac/1/packages/plugin-npm-cli/sources/commands/npm/audit.ts
  init_lib();

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-npm-cli-virtual-2e644aaeac/1/packages/plugin-npm-cli/sources/npmAuditTypes.ts
  var Environment;
  (function(Environment2) {
    Environment2["All"] = `all`;
    Environment2["Production"] = `production`;
    Environment2["Development"] = `development`;
  })(Environment || (Environment = {}));
  var Severity;
  (function(Severity2) {
    Severity2["Info"] = `info`;
    Severity2["Low"] = `low`;
    Severity2["Moderate"] = `moderate`;
    Severity2["High"] = `high`;
    Severity2["Critical"] = `critical`;
  })(Severity || (Severity = {}));

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-npm-cli-virtual-2e644aaeac/1/packages/plugin-npm-cli/sources/npmAuditUtils.ts
  var allSeverities = [
    Severity.Info,
    Severity.Low,
    Severity.Moderate,
    Severity.High,
    Severity.Critical
  ];
  function getTransitiveDependencies(project, roots) {
    const queue = [];
    const descriptorHashes = new Set();
    const enqueue = (descriptorHash) => {
      if (descriptorHashes.has(descriptorHash))
        return;
      descriptorHashes.add(descriptorHash);
      queue.push(descriptorHash);
    };
    for (const root of roots)
      enqueue(root);
    const transitiveDependencies = new Set();
    while (queue.length > 0) {
      const descriptorHash = queue.shift();
      const locatorHash = project.storedResolutions.get(descriptorHash);
      if (typeof locatorHash === `undefined`)
        throw new Error(`Assertion failed: Expected the resolution to have been registered`);
      const pkg = project.storedPackages.get(locatorHash);
      if (!pkg)
        continue;
      transitiveDependencies.add(descriptorHash);
      for (const dependency of pkg.dependencies.values()) {
        enqueue(dependency.descriptorHash);
      }
    }
    return transitiveDependencies;
  }
  function setDifference(x, y) {
    return new Set([...x].filter((value) => !y.has(value)));
  }
  function getTransitiveDevDependencies(project, workspace, {all}) {
    const workspaces = all ? project.workspaces : [workspace];
    const manifests = workspaces.map((workspace2) => {
      return workspace2.manifest;
    });
    const productionDependencyIdentSet = new Set(manifests.map((manifest) => [...manifest.dependencies].map(([identHash, descriptor]) => identHash)).flat());
    const developmentDependencyIdentSet = new Set(manifests.map((manifest) => [...manifest.devDependencies].map(([identHash, descriptor]) => identHash)).flat());
    const workspaceDependencies = workspaces.map((workspace2) => [...workspace2.dependencies.values()]).flat();
    const productionRoots = workspaceDependencies.filter((dependency) => productionDependencyIdentSet.has(dependency.identHash)).map((dependency) => dependency.descriptorHash);
    const developmentRoots = workspaceDependencies.filter((dependency) => developmentDependencyIdentSet.has(dependency.identHash)).map((dependency) => dependency.descriptorHash);
    const productionDependencies = getTransitiveDependencies(project, productionRoots);
    const developmentDependencies = getTransitiveDependencies(project, developmentRoots);
    return setDifference(developmentDependencies, productionDependencies);
  }
  function transformDescriptorIterableToRequiresObject(descriptors) {
    const data = {};
    for (const descriptor of descriptors)
      data[structUtils_exports.stringifyIdent(descriptor)] = structUtils_exports.parseRange(descriptor.range).selector;
    return data;
  }
  function getSeverityInclusions(severity) {
    if (typeof severity === `undefined`)
      return new Set();
    const severityIndex = allSeverities.indexOf(severity);
    const severities = allSeverities.slice(severityIndex);
    return new Set(severities);
  }
  function filterVulnerabilities(vulnerabilities, severity) {
    const inclusions = getSeverityInclusions(severity);
    const filteredVulnerabilities = {};
    for (const key of inclusions)
      filteredVulnerabilities[key] = vulnerabilities[key];
    return filteredVulnerabilities;
  }
  function isError(vulnerabilities, severity) {
    var _a2;
    const filteredVulnerabilities = filterVulnerabilities(vulnerabilities, severity);
    for (const key of Object.keys(filteredVulnerabilities))
      if ((_a2 = filteredVulnerabilities[key]) != null ? _a2 : 0 > 0)
        return true;
    return false;
  }
  function getReportTree(result, severity) {
    const auditTreeChildren = {};
    const auditTree = {children: auditTreeChildren};
    let advisories = Object.values(result.advisories);
    if (severity != null) {
      const inclusions = getSeverityInclusions(severity);
      advisories = advisories.filter((advisory) => inclusions.has(advisory.severity));
    }
    for (const advisory of miscUtils_exports.sortMap(advisories, (advisory2) => advisory2.module_name)) {
      auditTreeChildren[advisory.module_name] = {
        label: advisory.module_name,
        value: formatUtils_exports.tuple(formatUtils_exports.Type.RANGE, advisory.findings.map((finding) => finding.version).join(`, `)),
        children: {
          Issue: {
            label: `Issue`,
            value: formatUtils_exports.tuple(formatUtils_exports.Type.NO_HINT, advisory.title)
          },
          URL: {
            label: `URL`,
            value: formatUtils_exports.tuple(formatUtils_exports.Type.URL, advisory.url)
          },
          Severity: {
            label: `Severity`,
            value: formatUtils_exports.tuple(formatUtils_exports.Type.NO_HINT, advisory.severity)
          },
          [`Vulnerable Versions`]: {
            label: `Vulnerable Versions`,
            value: formatUtils_exports.tuple(formatUtils_exports.Type.RANGE, advisory.vulnerable_versions)
          },
          [`Patched Versions`]: {
            label: `Patched Versions`,
            value: formatUtils_exports.tuple(formatUtils_exports.Type.RANGE, advisory.patched_versions)
          },
          Via: {
            label: `Via`,
            value: formatUtils_exports.tuple(formatUtils_exports.Type.NO_HINT, Array.from(new Set(advisory.findings.map((finding) => finding.paths).flat().map((path3) => path3.split(`>`)[0]))).join(`, `))
          },
          Recommendation: {
            label: `Recommendation`,
            value: formatUtils_exports.tuple(formatUtils_exports.Type.NO_HINT, advisory.recommendation.replace(/\n/g, ` `))
          }
        }
      };
    }
    return auditTree;
  }
  function getRequires(project, workspace, {all, environment}) {
    const workspaces = all ? project.workspaces : [workspace];
    const includeDependencies = [
      Environment.All,
      Environment.Production
    ].includes(environment);
    const requiredDependencies = [];
    if (includeDependencies)
      for (const workspace2 of workspaces)
        for (const dependency of workspace2.manifest.dependencies.values())
          requiredDependencies.push(dependency);
    const includeDevDependencies = [
      Environment.All,
      Environment.Development
    ].includes(environment);
    const requiredDevDependencies = [];
    if (includeDevDependencies)
      for (const workspace2 of workspaces)
        for (const dependency of workspace2.manifest.devDependencies.values())
          requiredDevDependencies.push(dependency);
    return transformDescriptorIterableToRequiresObject([
      ...requiredDependencies,
      ...requiredDevDependencies
    ].filter((dependency) => {
      return structUtils_exports.parseRange(dependency.range).protocol === null;
    }));
  }
  function getDependencies(project, workspace, {all}) {
    var _a2;
    const transitiveDevDependencies = getTransitiveDevDependencies(project, workspace, {all});
    const data = {};
    for (const pkg of project.storedPackages.values()) {
      data[structUtils_exports.stringifyIdent(pkg)] = {
        version: (_a2 = pkg.version) != null ? _a2 : `0.0.0`,
        integrity: pkg.identHash,
        requires: transformDescriptorIterableToRequiresObject(pkg.dependencies.values()),
        dev: transitiveDevDependencies.has(structUtils_exports.convertLocatorToDescriptor(pkg).descriptorHash)
      };
    }
    return data;
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-npm-cli-virtual-2e644aaeac/1/packages/plugin-npm-cli/sources/commands/npm/audit.ts
  var AuditCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.all = options_exports.Boolean(`-A,--all`, false, {
        description: `Audit dependencies from all workspaces`
      });
      this.recursive = options_exports.Boolean(`-R,--recursive`, false, {
        description: `Audit transitive dependencies as well`
      });
      this.environment = options_exports.String(`--environment`, Environment.All, {
        description: `Which environments to cover`,
        validator: isEnum(Environment)
      });
      this.json = options_exports.Boolean(`--json`, false, {
        description: `Format the output as an NDJSON stream`
      });
      this.severity = options_exports.String(`--severity`, Severity.Info, {
        description: `Minimal severity requested for packages to be displayed`,
        validator: isEnum(Severity)
      });
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const {project, workspace} = await Project.find(configuration, this.context.cwd);
      if (!workspace)
        throw new WorkspaceRequiredError(project.cwd, this.context.cwd);
      await project.restoreInstallState();
      const requires = getRequires(project, workspace, {all: this.all, environment: this.environment});
      const dependencies = getDependencies(project, workspace, {all: this.all});
      if (!this.recursive) {
        for (const key of Object.keys(dependencies)) {
          if (!Object.prototype.hasOwnProperty.call(requires, key)) {
            delete dependencies[key];
          } else {
            dependencies[key].requires = {};
          }
        }
      }
      const body = {
        requires,
        dependencies
      };
      const registry = npmConfigUtils_exports.getPublishRegistry(workspace.manifest, {
        configuration
      });
      let result;
      const httpReport = await LightReport.start({
        configuration,
        stdout: this.context.stdout
      }, async () => {
        result = await npmHttpUtils_exports.post(`/-/npm/v1/security/audits/quick`, body, {
          authType: npmHttpUtils_exports.AuthType.NO_AUTH,
          configuration,
          jsonResponse: true,
          registry
        });
      });
      if (httpReport.hasErrors())
        return httpReport.exitCode();
      const hasError = isError(result.metadata.vulnerabilities, this.severity);
      if (!this.json && hasError) {
        treeUtils_exports.emitTree(getReportTree(result, this.severity), {
          configuration,
          json: this.json,
          stdout: this.context.stdout,
          separators: 2
        });
        return 1;
      }
      const outReport = await StreamReport.start({
        configuration,
        includeFooter: false,
        json: this.json,
        stdout: this.context.stdout
      }, async (report) => {
        report.reportJson(result);
        if (!hasError) {
          report.reportInfo(MessageName.EXCEPTION, `No audit suggestions`);
        }
      });
      return outReport.exitCode();
    }
  };
  AuditCommand.paths = [
    [`npm`, `audit`]
  ];
  AuditCommand.usage = Command.Usage({
    description: `perform a vulnerability audit against the installed packages`,
    details: `
      This command checks for known security reports on the packages you use. The reports are by default extracted from the npm registry, and may or may not be relevant to your actual program (not all vulnerabilities affect all code paths).

      For consistency with our other commands the default is to only check the direct dependencies for the active workspace. To extend this search to all workspaces, use \`-A,--all\`. To extend this search to both direct and transitive dependencies, use \`-R,--recursive\`.

      Applying the \`--severity\` flag will limit the audit table to vulnerabilities of the corresponding severity and above. Valid values are ${allSeverities.map((value) => `\`${value}\``).join(`, `)}.

      If the \`--json\` flag is set, Yarn will print the output exactly as received from the registry. Regardless of this flag, the process will exit with a non-zero exit code if a report is found for the selected packages.

      To understand the dependency tree requiring vulnerable packages, check the raw report with the \`--json\` flag or use \`yarn why <package>\` to get more information as to who depends on them.
    `,
    examples: [[
      `Checks for known security issues with the installed packages. The output is a list of known issues.`,
      `yarn npm audit`
    ], [
      `Audit dependencies in all workspaces`,
      `yarn npm audit --all`
    ], [
      `Limit auditing to \`dependencies\` (excludes \`devDependencies\`)`,
      `yarn npm audit --environment production`
    ], [
      `Show audit report as valid JSON`,
      `yarn npm audit --json`
    ], [
      `Audit all direct and transitive dependencies`,
      `yarn npm audit --recursive`
    ], [
      `Output moderate (or more severe) vulnerabilities`,
      `yarn npm audit --severity moderate`
    ]]
  });
  var audit_default = AuditCommand;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-npm-cli-virtual-2e644aaeac/1/packages/plugin-npm-cli/sources/commands/npm/info.ts
  var import_path17 = __toModule(require("path"));
  var import_semver15 = __toModule(require_semver2());
  var import_util12 = __toModule(require("util"));
  var InfoCommand2 = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.fields = options_exports.String(`-f,--fields`, {
        description: `A comma-separated list of manifest fields that should be displayed`
      });
      this.json = options_exports.Boolean(`--json`, false, {
        description: `Format the output as an NDJSON stream`
      });
      this.packages = options_exports.Rest();
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const {project} = await Project.find(configuration, this.context.cwd);
      const fields = typeof this.fields !== `undefined` ? new Set([`name`, ...this.fields.split(/\s*,\s*/)]) : null;
      const infos = [];
      let leadWithSeparator = false;
      const report = await StreamReport.start({
        configuration,
        includeFooter: false,
        json: this.json,
        stdout: this.context.stdout
      }, async (report2) => {
        for (const identStr of this.packages) {
          let descriptor;
          if (identStr === `.`) {
            const workspace = project.topLevelWorkspace;
            if (!workspace.manifest.name)
              throw new UsageError(`Missing 'name' field in ${import_path17.default.join(workspace.cwd, `package.json`)}`);
            descriptor = structUtils_exports.makeDescriptor(workspace.manifest.name, `unknown`);
          } else {
            descriptor = structUtils_exports.parseDescriptor(identStr);
          }
          const identUrl = npmHttpUtils_exports.getIdentUrl(descriptor);
          const result = clean(await npmHttpUtils_exports.get(identUrl, {
            configuration,
            ident: descriptor,
            jsonResponse: true,
            customErrorMessage: npmHttpUtils_exports.customPackageError
          }));
          const versions = Object.keys(result.versions).sort(import_semver15.default.compareLoose);
          const fallbackVersion = result[`dist-tags`].latest || versions[versions.length - 1];
          let version = fallbackVersion;
          const validRange2 = semverUtils_exports.validRange(descriptor.range);
          if (validRange2) {
            const maxSatisfyingVersion = import_semver15.default.maxSatisfying(versions, validRange2);
            if (maxSatisfyingVersion !== null) {
              version = maxSatisfyingVersion;
            } else {
              report2.reportWarning(MessageName.UNNAMED, `Unmet range ${structUtils_exports.prettyRange(configuration, descriptor.range)}; falling back to the latest version`);
              leadWithSeparator = true;
            }
          } else if (descriptor.range !== `unknown`) {
            report2.reportWarning(MessageName.UNNAMED, `Invalid range ${structUtils_exports.prettyRange(configuration, descriptor.range)}; falling back to the latest version`);
            leadWithSeparator = true;
          }
          const release = result.versions[version];
          const packageInformation = __spreadProps(__spreadValues(__spreadValues({}, result), release), {
            version,
            versions
          });
          let serialized;
          if (fields !== null) {
            serialized = {};
            for (const field of fields) {
              const value = packageInformation[field];
              if (typeof value !== `undefined`) {
                serialized[field] = value;
              } else {
                report2.reportWarning(MessageName.EXCEPTION, `The '${field}' field doesn't exist inside ${structUtils_exports.prettyIdent(configuration, descriptor)}'s informations`);
                leadWithSeparator = true;
                continue;
              }
            }
          } else {
            if (!this.json) {
              delete packageInformation.dist;
              delete packageInformation.readme;
              delete packageInformation.users;
            }
            serialized = packageInformation;
          }
          report2.reportJson(serialized);
          if (!this.json) {
            infos.push(serialized);
          }
        }
      });
      import_util12.inspect.styles.name = `cyan`;
      for (const serialized of infos) {
        if (serialized !== infos[0] || leadWithSeparator)
          this.context.stdout.write(`
`);
        this.context.stdout.write(`${(0, import_util12.inspect)(serialized, {
          depth: Infinity,
          colors: true,
          compact: false
        })}
`);
      }
      return report.exitCode();
    }
  };
  InfoCommand2.paths = [
    [`npm`, `info`]
  ];
  InfoCommand2.usage = Command.Usage({
    category: `Npm-related commands`,
    description: `show information about a package`,
    details: `
      This command will fetch information about a package from the npm registry, and prints it in a tree format.

      The package does not have to be installed locally, but needs to have been published (in particular, local changes will be ignored even for workspaces).

      Append \`@<range>\` to the package argument to provide information specific to the latest version that satisfies the range. If the range is invalid or if there is no version satisfying the range, the command will print a warning and fall back to the latest version.

      If the \`-f,--fields\` option is set, it's a comma-separated list of fields which will be used to only display part of the package informations.

      By default, this command won't return the \`dist\`, \`readme\`, and \`users\` fields, since they are often very long. To explicitly request those fields, explicitly list them with the \`--fields\` flag or request the output in JSON mode.
    `,
    examples: [[
      `Show all available information about react (except the \`dist\`, \`readme\`, and \`users\` fields)`,
      `yarn npm info react`
    ], [
      `Show all available information about react as valid JSON (including the \`dist\`, \`readme\`, and \`users\` fields)`,
      `yarn npm info react --json`
    ], [
      `Show all available information about react 16.12.0`,
      `yarn npm info react@16.12.0`
    ], [
      `Show the description of react`,
      `yarn npm info react --fields description`
    ], [
      `Show all available versions of react`,
      `yarn npm info react --fields versions`
    ], [
      `Show the readme of react`,
      `yarn npm info react --fields readme`
    ], [
      `Show a few fields of react`,
      `yarn npm info react --fields homepage,repository`
    ]]
  });
  var info_default2 = InfoCommand2;
  function clean(value) {
    if (Array.isArray(value)) {
      const result = [];
      for (let item of value) {
        item = clean(item);
        if (item) {
          result.push(item);
        }
      }
      return result;
    } else if (typeof value === `object` && value !== null) {
      const result = {};
      for (const key of Object.keys(value)) {
        if (key.startsWith(`_`))
          continue;
        const item = clean(value[key]);
        if (item) {
          result[key] = item;
        }
      }
      return result;
    } else if (value) {
      return value;
    } else {
      return null;
    }
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-npm-cli-virtual-2e644aaeac/1/packages/plugin-npm-cli/sources/commands/npm/login.ts
  var import_enquirer4 = __toModule(require_enquirer());
  var NpmLoginCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.scope = options_exports.String(`-s,--scope`, {
        description: `Login to the registry configured for a given scope`
      });
      this.publish = options_exports.Boolean(`--publish`, false, {
        description: `Login to the publish registry`
      });
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const registry = await getRegistry({
        configuration,
        cwd: this.context.cwd,
        publish: this.publish,
        scope: this.scope
      });
      const report = await StreamReport.start({
        configuration,
        stdout: this.context.stdout
      }, async (report2) => {
        const credentials = await getCredentials({
          registry,
          report: report2,
          stdin: this.context.stdin,
          stdout: this.context.stdout
        });
        const url = `/-/user/org.couchdb.user:${encodeURIComponent(credentials.name)}`;
        const response = await npmHttpUtils_exports.put(url, credentials, {
          attemptedAs: credentials.name,
          configuration,
          registry,
          jsonResponse: true,
          authType: npmHttpUtils_exports.AuthType.NO_AUTH
        });
        await setAuthToken(registry, response.token, {configuration, scope: this.scope});
        return report2.reportInfo(MessageName.UNNAMED, `Successfully logged in`);
      });
      return report.exitCode();
    }
  };
  NpmLoginCommand.paths = [
    [`npm`, `login`]
  ];
  NpmLoginCommand.usage = Command.Usage({
    category: `Npm-related commands`,
    description: `store new login info to access the npm registry`,
    details: `
      This command will ask you for your username, password, and 2FA One-Time-Password (when it applies). It will then modify your local configuration (in your home folder, never in the project itself) to reference the new tokens thus generated.

      Adding the \`-s,--scope\` flag will cause the authentication to be done against whatever registry is configured for the associated scope (see also \`npmScopes\`).

      Adding the \`--publish\` flag will cause the authentication to be done against the registry used when publishing the package (see also \`publishConfig.registry\` and \`npmPublishRegistry\`).
    `,
    examples: [[
      `Login to the default registry`,
      `yarn npm login`
    ], [
      `Login to the registry linked to the @my-scope registry`,
      `yarn npm login --scope my-scope`
    ], [
      `Login to the publish registry for the current package`,
      `yarn npm login --publish`
    ]]
  });
  var login_default = NpmLoginCommand;
  async function getRegistry({scope, publish, configuration, cwd}) {
    if (scope && publish)
      return npmConfigUtils_exports.getScopeRegistry(scope, {configuration, type: npmConfigUtils_exports.RegistryType.PUBLISH_REGISTRY});
    if (scope)
      return npmConfigUtils_exports.getScopeRegistry(scope, {configuration});
    if (publish)
      return npmConfigUtils_exports.getPublishRegistry((await openWorkspace(configuration, cwd)).manifest, {configuration});
    return npmConfigUtils_exports.getDefaultRegistry({configuration});
  }
  async function setAuthToken(registry, npmAuthToken, {configuration, scope}) {
    const makeUpdater = (entryName) => (unknownStore) => {
      const store = miscUtils_exports.isIndexableObject(unknownStore) ? unknownStore : {};
      const entryUnknown = store[entryName];
      const entry = miscUtils_exports.isIndexableObject(entryUnknown) ? entryUnknown : {};
      return __spreadProps(__spreadValues({}, store), {
        [entryName]: __spreadProps(__spreadValues({}, entry), {
          npmAuthToken
        })
      });
    };
    const update = scope ? {npmScopes: makeUpdater(scope)} : {npmRegistries: makeUpdater(registry)};
    return await Configuration.updateHomeConfiguration(update);
  }
  async function getCredentials({registry, report, stdin, stdout}) {
    if (process.env.TEST_ENV) {
      return {
        name: process.env.TEST_NPM_USER || ``,
        password: process.env.TEST_NPM_PASSWORD || ``
      };
    }
    report.reportInfo(MessageName.UNNAMED, `Logging in to ${registry}`);
    let isToken = false;
    if (registry.match(/^https:\/\/npm\.pkg\.github\.com(\/|$)/)) {
      report.reportInfo(MessageName.UNNAMED, `You seem to be using the GitHub Package Registry. Tokens must be generated with the 'repo', 'write:packages', and 'read:packages' permissions.`);
      isToken = true;
    }
    report.reportSeparator();
    const {username, password} = await (0, import_enquirer4.prompt)([{
      type: `input`,
      name: `username`,
      message: `Username:`,
      required: true,
      onCancel: () => process.exit(130),
      stdin,
      stdout
    }, {
      type: `password`,
      name: `password`,
      message: isToken ? `Token:` : `Password:`,
      required: true,
      onCancel: () => process.exit(130),
      stdin,
      stdout
    }]);
    report.reportSeparator();
    return {
      name: username,
      password
    };
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-npm-cli-virtual-2e644aaeac/1/packages/plugin-npm-cli/sources/commands/npm/logout.ts
  var LOGOUT_KEYS = new Set([
    `npmAuthIdent`,
    `npmAuthToken`
  ]);
  var NpmLogoutCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.scope = options_exports.String(`-s,--scope`, {
        description: `Logout of the registry configured for a given scope`
      });
      this.publish = options_exports.Boolean(`--publish`, false, {
        description: `Logout of the publish registry`
      });
      this.all = options_exports.Boolean(`-A,--all`, false, {
        description: `Logout of all registries`
      });
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const checkLogout = async () => {
        var _a2;
        const registry = await getRegistry({
          configuration,
          cwd: this.context.cwd,
          publish: this.publish,
          scope: this.scope
        });
        const refreshedConfiguration = await Configuration.find(this.context.cwd, this.context.plugins);
        const fakeIdent = structUtils_exports.makeIdent((_a2 = this.scope) != null ? _a2 : null, `pkg`);
        const authConfiguration = npmConfigUtils_exports.getAuthConfiguration(registry, {
          configuration: refreshedConfiguration,
          ident: fakeIdent
        });
        return !authConfiguration.get(`npmAuthToken`);
      };
      const report = await StreamReport.start({
        configuration,
        stdout: this.context.stdout
      }, async (report2) => {
        if (this.all) {
          await logoutFromEverything();
          report2.reportInfo(MessageName.UNNAMED, `Successfully logged out from everything`);
        }
        if (this.scope) {
          await logoutFrom(`npmScopes`, this.scope);
          if (await checkLogout())
            report2.reportInfo(MessageName.UNNAMED, `Successfully logged out from ${this.scope}`);
          else
            report2.reportWarning(MessageName.UNNAMED, `Scope authentication settings removed, but some other ones settings still apply to it`);
          return;
        }
        const registry = await getRegistry({
          configuration,
          cwd: this.context.cwd,
          publish: this.publish
        });
        await logoutFrom(`npmRegistries`, registry);
        if (await checkLogout()) {
          report2.reportInfo(MessageName.UNNAMED, `Successfully logged out from ${registry}`);
        } else {
          report2.reportWarning(MessageName.UNNAMED, `Registry authentication settings removed, but some other ones settings still apply to it`);
        }
      });
      return report.exitCode();
    }
  };
  NpmLogoutCommand.paths = [
    [`npm`, `logout`]
  ];
  NpmLogoutCommand.usage = Command.Usage({
    category: `Npm-related commands`,
    description: `logout of the npm registry`,
    details: `
      This command will log you out by modifying your local configuration (in your home folder, never in the project itself) to delete all credentials linked to a registry.

      Adding the \`-s,--scope\` flag will cause the deletion to be done against whatever registry is configured for the associated scope (see also \`npmScopes\`).

      Adding the \`--publish\` flag will cause the deletion to be done against the registry used when publishing the package (see also \`publishConfig.registry\` and \`npmPublishRegistry\`).

      Adding the \`-A,--all\` flag will cause the deletion to be done against all registries and scopes.
    `,
    examples: [[
      `Logout of the default registry`,
      `yarn npm logout`
    ], [
      `Logout of the @my-scope scope`,
      `yarn npm logout --scope my-scope`
    ], [
      `Logout of the publish registry for the current package`,
      `yarn npm logout --publish`
    ], [
      `Logout of all registries`,
      `yarn npm logout --all`
    ]]
  });
  var logout_default = NpmLogoutCommand;
  function removeTokenFromStore(nextStore, entryName) {
    const entry = nextStore[entryName];
    if (!miscUtils_exports.isIndexableObject(entry))
      return false;
    const keys = new Set(Object.keys(entry));
    if ([...LOGOUT_KEYS].every((key) => !keys.has(key)))
      return false;
    for (const key of LOGOUT_KEYS)
      keys.delete(key);
    if (keys.size === 0) {
      nextStore[entryName] = void 0;
      return true;
    }
    const nextEntry = __spreadValues({}, entry);
    for (const key of LOGOUT_KEYS)
      delete nextEntry[key];
    nextStore[entryName] = nextEntry;
    return true;
  }
  async function logoutFromEverything() {
    const updater = (unknownStore) => {
      let updated = false;
      const nextStore = miscUtils_exports.isIndexableObject(unknownStore) ? __spreadValues({}, unknownStore) : {};
      if (nextStore.npmAuthToken) {
        delete nextStore.npmAuthToken;
        updated = true;
      }
      for (const entryName of Object.keys(nextStore))
        if (removeTokenFromStore(nextStore, entryName))
          updated = true;
      if (Object.keys(nextStore).length === 0)
        return void 0;
      if (updated) {
        return nextStore;
      } else {
        return unknownStore;
      }
    };
    return await Configuration.updateHomeConfiguration({
      npmRegistries: updater,
      npmScopes: updater
    });
  }
  async function logoutFrom(entryType, entryName) {
    return await Configuration.updateHomeConfiguration({
      [entryType]: (unknownStore) => {
        const nextStore = miscUtils_exports.isIndexableObject(unknownStore) ? unknownStore : {};
        if (!Object.prototype.hasOwnProperty.call(nextStore, entryName))
          return unknownStore;
        const unknownEntry = nextStore[entryName];
        const nextEntry = miscUtils_exports.isIndexableObject(unknownEntry) ? unknownEntry : {};
        const keys = new Set(Object.keys(nextEntry));
        if ([...LOGOUT_KEYS].every((key) => !keys.has(key)))
          return unknownStore;
        for (const key of LOGOUT_KEYS)
          keys.delete(key);
        if (keys.size === 0) {
          if (Object.keys(nextStore).length === 1)
            return void 0;
          return __spreadProps(__spreadValues({}, nextStore), {
            [entryName]: void 0
          });
        }
        const eraser = {};
        for (const key of LOGOUT_KEYS)
          eraser[key] = void 0;
        return __spreadProps(__spreadValues({}, nextStore), {
          [entryName]: __spreadValues(__spreadValues({}, nextEntry), eraser)
        });
      }
    });
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-npm-cli-virtual-2e644aaeac/1/packages/plugin-npm-cli/sources/commands/npm/publish.ts
  var NpmPublishCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.access = options_exports.String(`--access`, {
        description: `The access for the published package (public or restricted)`
      });
      this.tag = options_exports.String(`--tag`, `latest`, {
        description: `The tag on the registry that the package should be attached to`
      });
      this.tolerateRepublish = options_exports.Boolean(`--tolerate-republish`, false, {
        description: `Warn and exit when republishing an already existing version of a package`
      });
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const {project, workspace} = await Project.find(configuration, this.context.cwd);
      if (!workspace)
        throw new WorkspaceRequiredError(project.cwd, this.context.cwd);
      if (workspace.manifest.private)
        throw new UsageError(`Private workspaces cannot be published`);
      if (workspace.manifest.name === null || workspace.manifest.version === null)
        throw new UsageError(`Workspaces must have valid names and versions to be published on an external registry`);
      await project.restoreInstallState();
      const ident = workspace.manifest.name;
      const version = workspace.manifest.version;
      const registry = npmConfigUtils_exports.getPublishRegistry(workspace.manifest, {configuration});
      const report = await StreamReport.start({
        configuration,
        stdout: this.context.stdout
      }, async (report2) => {
        var _a2, _b;
        if (this.tolerateRepublish) {
          try {
            const registryData = await npmHttpUtils_exports.get(npmHttpUtils_exports.getIdentUrl(ident), {
              configuration,
              registry,
              ident,
              jsonResponse: true
            });
            if (!Object.prototype.hasOwnProperty.call(registryData, `versions`))
              throw new ReportError(MessageName.REMOTE_INVALID, `Registry returned invalid data for - missing "versions" field`);
            if (Object.prototype.hasOwnProperty.call(registryData.versions, version)) {
              report2.reportWarning(MessageName.UNNAMED, `Registry already knows about version ${version}; skipping.`);
              return;
            }
          } catch (err) {
            if (((_b = (_a2 = err.originalError) == null ? void 0 : _a2.response) == null ? void 0 : _b.statusCode) !== 404) {
              throw err;
            }
          }
        }
        await scriptUtils_exports.maybeExecuteWorkspaceLifecycleScript(workspace, `prepublish`, {report: report2});
        await packUtils_exports.prepareForPack(workspace, {report: report2}, async () => {
          const files = await packUtils_exports.genPackList(workspace);
          for (const file of files)
            report2.reportInfo(null, file);
          const pack = await packUtils_exports.genPackStream(workspace, files);
          const buffer = await miscUtils_exports.bufferStream(pack);
          const body = await npmPublishUtils_exports.makePublishBody(workspace, buffer, {
            access: this.access,
            tag: this.tag,
            registry
          });
          await npmHttpUtils_exports.put(npmHttpUtils_exports.getIdentUrl(ident), body, {
            configuration,
            registry,
            ident,
            jsonResponse: true
          });
        });
        report2.reportInfo(MessageName.UNNAMED, `Package archive published`);
      });
      return report.exitCode();
    }
  };
  NpmPublishCommand.paths = [
    [`npm`, `publish`]
  ];
  NpmPublishCommand.usage = Command.Usage({
    category: `Npm-related commands`,
    description: `publish the active workspace to the npm registry`,
    details: `
      This command will pack the active workspace into a fresh archive and upload it to the npm registry.

      The package will by default be attached to the \`latest\` tag on the registry, but this behavior can be overriden by using the \`--tag\` option.

      Note that for legacy reasons scoped packages are by default published with an access set to \`restricted\` (aka "private packages"). This requires you to register for a paid npm plan. In case you simply wish to publish a public scoped package to the registry (for free), just add the \`--access public\` flag. This behavior can be enabled by default through the \`npmPublishAccess\` settings.
    `,
    examples: [[
      `Publish the active workspace`,
      `yarn npm publish`
    ]]
  });
  var publish_default = NpmPublishCommand;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-npm-cli-virtual-2e644aaeac/1/packages/plugin-npm-cli/sources/commands/npm/tag/add.ts
  var import_semver16 = __toModule(require_semver2());

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-npm-cli-virtual-2e644aaeac/1/packages/plugin-npm-cli/sources/commands/npm/tag/list.ts
  var NpmTagListCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.json = options_exports.Boolean(`--json`, false, {
        description: `Format the output as an NDJSON stream`
      });
      this.package = options_exports.String({required: false});
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const {project, workspace} = await Project.find(configuration, this.context.cwd);
      let ident;
      if (typeof this.package !== `undefined`) {
        ident = structUtils_exports.parseIdent(this.package);
      } else {
        if (!workspace)
          throw new WorkspaceRequiredError(project.cwd, this.context.cwd);
        if (!workspace.manifest.name)
          throw new UsageError(`Missing 'name' field in ${ppath.join(workspace.cwd, Filename.manifest)}`);
        ident = workspace.manifest.name;
      }
      const distTags = await getDistTags(ident, configuration);
      const distTagEntries = miscUtils_exports.sortMap(Object.entries(distTags), ([tag]) => tag);
      const tree = {
        children: distTagEntries.map(([tag, version]) => ({
          value: formatUtils_exports.tuple(formatUtils_exports.Type.RESOLUTION, {
            descriptor: structUtils_exports.makeDescriptor(ident, tag),
            locator: structUtils_exports.makeLocator(ident, version)
          })
        }))
      };
      return treeUtils_exports.emitTree(tree, {
        configuration,
        json: this.json,
        stdout: this.context.stdout
      });
    }
  };
  NpmTagListCommand.paths = [
    [`npm`, `tag`, `list`]
  ];
  NpmTagListCommand.usage = Command.Usage({
    category: `Npm-related commands`,
    description: `list all dist-tags of a package`,
    details: `
      This command will list all tags of a package from the npm registry.

      If the package is not specified, Yarn will default to the current workspace.
    `,
    examples: [[
      `List all tags of package \`my-pkg\``,
      `yarn npm tag list my-pkg`
    ]]
  });
  var list_default3 = NpmTagListCommand;
  async function getDistTags(ident, configuration) {
    const url = `/-/package${npmHttpUtils_exports.getIdentUrl(ident)}/dist-tags`;
    return npmHttpUtils_exports.get(url, {
      configuration,
      ident,
      jsonResponse: true,
      customErrorMessage: npmHttpUtils_exports.customPackageError
    });
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-npm-cli-virtual-2e644aaeac/1/packages/plugin-npm-cli/sources/commands/npm/tag/add.ts
  var NpmTagAddCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.package = options_exports.String();
      this.tag = options_exports.String();
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const {project, workspace} = await Project.find(configuration, this.context.cwd);
      if (!workspace)
        throw new WorkspaceRequiredError(project.cwd, this.context.cwd);
      const descriptor = structUtils_exports.parseDescriptor(this.package, true);
      const version = descriptor.range;
      if (!import_semver16.default.valid(version))
        throw new UsageError(`The range ${formatUtils_exports.pretty(configuration, descriptor.range, formatUtils_exports.Type.RANGE)} must be a valid semver version`);
      const registry = npmConfigUtils_exports.getPublishRegistry(workspace.manifest, {configuration});
      const prettyIdent2 = formatUtils_exports.pretty(configuration, descriptor, formatUtils_exports.Type.IDENT);
      const prettyVersion = formatUtils_exports.pretty(configuration, version, formatUtils_exports.Type.RANGE);
      const prettyTag = formatUtils_exports.pretty(configuration, this.tag, formatUtils_exports.Type.CODE);
      const report = await StreamReport.start({
        configuration,
        stdout: this.context.stdout
      }, async (report2) => {
        const distTags = await getDistTags(descriptor, configuration);
        if (Object.prototype.hasOwnProperty.call(distTags, this.tag) && distTags[this.tag] === version)
          report2.reportWarning(MessageName.UNNAMED, `Tag ${prettyTag} is already set to version ${prettyVersion}`);
        const url = `/-/package${npmHttpUtils_exports.getIdentUrl(descriptor)}/dist-tags/${encodeURIComponent(this.tag)}`;
        await npmHttpUtils_exports.put(url, version, {
          configuration,
          registry,
          ident: descriptor,
          jsonRequest: true,
          jsonResponse: true
        });
        report2.reportInfo(MessageName.UNNAMED, `Tag ${prettyTag} added to version ${prettyVersion} of package ${prettyIdent2}`);
      });
      return report.exitCode();
    }
  };
  NpmTagAddCommand.paths = [
    [`npm`, `tag`, `add`]
  ];
  NpmTagAddCommand.usage = Command.Usage({
    category: `Npm-related commands`,
    description: `add a tag for a specific version of a package`,
    details: `
      This command will add a tag to the npm registry for a specific version of a package. If the tag already exists, it will be overwritten.
    `,
    examples: [[
      `Add a \`beta\` tag for version \`2.3.4-beta.4\` of package \`my-pkg\``,
      `yarn npm tag add my-pkg@2.3.4-beta.4 beta`
    ]]
  });
  var add_default2 = NpmTagAddCommand;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-npm-cli-virtual-2e644aaeac/1/packages/plugin-npm-cli/sources/commands/npm/tag/remove.ts
  var NpmTagRemoveCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.package = options_exports.String();
      this.tag = options_exports.String();
    }
    async execute() {
      if (this.tag === `latest`)
        throw new UsageError(`The 'latest' tag cannot be removed.`);
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const {project, workspace} = await Project.find(configuration, this.context.cwd);
      if (!workspace)
        throw new WorkspaceRequiredError(project.cwd, this.context.cwd);
      const ident = structUtils_exports.parseIdent(this.package);
      const registry = npmConfigUtils_exports.getPublishRegistry(workspace.manifest, {configuration});
      const prettyTag = formatUtils_exports.pretty(configuration, this.tag, formatUtils_exports.Type.CODE);
      const prettyIdent2 = formatUtils_exports.pretty(configuration, ident, formatUtils_exports.Type.IDENT);
      const distTags = await getDistTags(ident, configuration);
      if (!Object.prototype.hasOwnProperty.call(distTags, this.tag))
        throw new UsageError(`${prettyTag} is not a tag of package ${prettyIdent2}`);
      const report = await StreamReport.start({
        configuration,
        stdout: this.context.stdout
      }, async (report2) => {
        const url = `/-/package${npmHttpUtils_exports.getIdentUrl(ident)}/dist-tags/${encodeURIComponent(this.tag)}`;
        await npmHttpUtils_exports.del(url, {
          configuration,
          registry,
          ident,
          jsonResponse: true
        });
        report2.reportInfo(MessageName.UNNAMED, `Tag ${prettyTag} removed from package ${prettyIdent2}`);
      });
      return report.exitCode();
    }
  };
  NpmTagRemoveCommand.paths = [
    [`npm`, `tag`, `remove`]
  ];
  NpmTagRemoveCommand.usage = Command.Usage({
    category: `Npm-related commands`,
    description: `remove a tag from a package`,
    details: `
      This command will remove a tag from a package from the npm registry.
    `,
    examples: [[
      `Remove the \`beta\` tag from package \`my-pkg\``,
      `yarn npm tag remove my-pkg beta`
    ]]
  });
  var remove_default3 = NpmTagRemoveCommand;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-npm-cli-virtual-2e644aaeac/1/packages/plugin-npm-cli/sources/commands/npm/whoami.ts
  var NpmWhoamiCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.scope = options_exports.String(`-s,--scope`, {
        description: `Print username for the registry configured for a given scope`
      });
      this.publish = options_exports.Boolean(`--publish`, false, {
        description: `Print username for the publish registry`
      });
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      let registry;
      if (this.scope && this.publish)
        registry = npmConfigUtils_exports.getScopeRegistry(this.scope, {configuration, type: npmConfigUtils_exports.RegistryType.PUBLISH_REGISTRY});
      else if (this.scope)
        registry = npmConfigUtils_exports.getScopeRegistry(this.scope, {configuration});
      else if (this.publish)
        registry = npmConfigUtils_exports.getPublishRegistry((await openWorkspace(configuration, this.context.cwd)).manifest, {configuration});
      else
        registry = npmConfigUtils_exports.getDefaultRegistry({configuration});
      const report = await StreamReport.start({
        configuration,
        stdout: this.context.stdout
      }, async (report2) => {
        var _a2, _b;
        let response;
        try {
          response = await npmHttpUtils_exports.get(`/-/whoami`, {
            configuration,
            registry,
            authType: npmHttpUtils_exports.AuthType.ALWAYS_AUTH,
            jsonResponse: true,
            ident: this.scope ? structUtils_exports.makeIdent(this.scope, ``) : void 0
          });
        } catch (err) {
          if (((_a2 = err.response) == null ? void 0 : _a2.statusCode) === 401 || ((_b = err.response) == null ? void 0 : _b.statusCode) === 403) {
            report2.reportError(MessageName.AUTHENTICATION_INVALID, `Authentication failed - your credentials may have expired`);
            return;
          } else {
            throw err;
          }
        }
        report2.reportInfo(MessageName.UNNAMED, response.username);
      });
      return report.exitCode();
    }
  };
  NpmWhoamiCommand.paths = [
    [`npm`, `whoami`]
  ];
  NpmWhoamiCommand.usage = Command.Usage({
    category: `Npm-related commands`,
    description: `display the name of the authenticated user`,
    details: `
      Print the username associated with the current authentication settings to the standard output.

      When using \`-s,--scope\`, the username printed will be the one that matches the authentication settings of the registry associated with the given scope (those settings can be overriden using the \`npmRegistries\` map, and the registry associated with the scope is configured via the \`npmScopes\` map).

      When using \`--publish\`, the registry we'll select will by default be the one used when publishing packages (\`publishConfig.registry\` or \`npmPublishRegistry\` if available, otherwise we'll fallback to the regular \`npmRegistryServer\`).
    `,
    examples: [[
      `Print username for the default registry`,
      `yarn npm whoami`
    ], [
      `Print username for the registry on a given scope`,
      `yarn npm whoami --scope company`
    ]]
  });
  var whoami_default = NpmWhoamiCommand;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-npm-cli-virtual-2e644aaeac/1/packages/plugin-npm-cli/sources/index.ts
  var plugin14 = {
    configuration: {
      npmPublishAccess: {
        description: `Default access of the published packages`,
        type: SettingsType.STRING,
        default: null
      }
    },
    commands: [
      audit_default,
      info_default2,
      login_default,
      logout_default,
      publish_default,
      add_default2,
      list_default3,
      remove_default3,
      whoami_default
    ]
  };
  var sources_default16 = plugin14;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-patch-virtual-8a5ab312c8/1/packages/plugin-patch/sources/index.ts
  var sources_exports20 = {};
  __export(sources_exports20, {
    default: () => sources_default17,
    patchUtils: () => patchUtils_exports
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-patch-virtual-8a5ab312c8/1/packages/plugin-patch/sources/patchUtils.ts
  var patchUtils_exports = {};
  __export(patchUtils_exports, {
    applyPatchFile: () => applyPatchFile,
    diffFolders: () => diffFolders,
    extractPackageToDisk: () => extractPackageToDisk,
    extractPatchFlags: () => extractPatchFlags,
    isParentRequired: () => isParentRequired,
    loadPatchFiles: () => loadPatchFiles,
    makeDescriptor: () => makeDescriptor2,
    makeLocator: () => makeLocator4,
    parseDescriptor: () => parseDescriptor2,
    parseLocator: () => parseLocator2,
    parsePatchFile: () => parsePatchFile
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-patch-virtual-8a5ab312c8/1/packages/plugin-patch/sources/tools/UnmatchedHunkError.ts
  var UnmatchedHunkError = class extends Error {
    constructor(index, hunk) {
      super(`Cannot apply hunk #${index + 1}`);
      this.hunk = hunk;
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-patch-virtual-8a5ab312c8/1/packages/plugin-patch/sources/tools/parse.ts
  var HEADER_REGEXP = /^@@ -(\d+)(,(\d+))? \+(\d+)(,(\d+))? @@.*/;
  function getPath3(p) {
    return ppath.relative(PortablePath.root, ppath.resolve(PortablePath.root, npath.toPortablePath(p)));
  }
  function parseHunkHeaderLine(headerLine) {
    const match2 = headerLine.trim().match(HEADER_REGEXP);
    if (!match2)
      throw new Error(`Bad header line: '${headerLine}'`);
    return {
      original: {
        start: Math.max(Number(match2[1]), 1),
        length: Number(match2[3] || 1)
      },
      patched: {
        start: Math.max(Number(match2[4]), 1),
        length: Number(match2[6] || 1)
      }
    };
  }
  var NON_EXECUTABLE_FILE_MODE = 420;
  var EXECUTABLE_FILE_MODE = 493;
  var PatchMutationType;
  (function(PatchMutationType2) {
    PatchMutationType2["Context"] = `context`;
    PatchMutationType2["Insertion"] = `insertion`;
    PatchMutationType2["Deletion"] = `deletion`;
  })(PatchMutationType || (PatchMutationType = {}));
  var emptyFilePatch = () => ({
    semverExclusivity: null,
    diffLineFromPath: null,
    diffLineToPath: null,
    oldMode: null,
    newMode: null,
    deletedFileMode: null,
    newFileMode: null,
    renameFrom: null,
    renameTo: null,
    beforeHash: null,
    afterHash: null,
    fromPath: null,
    toPath: null,
    hunks: null
  });
  var emptyHunk = (headerLine) => ({
    header: parseHunkHeaderLine(headerLine),
    parts: []
  });
  var hunkLinetypes = {
    [`@`]: `header`,
    [`-`]: PatchMutationType.Deletion,
    [`+`]: PatchMutationType.Insertion,
    [` `]: PatchMutationType.Context,
    [`\\`]: `pragma`,
    undefined: PatchMutationType.Context
  };
  function parsePatchLines(lines) {
    const result = [];
    let currentFilePatch = emptyFilePatch();
    let state = `parsing header`;
    let currentHunk = null;
    let currentHunkMutationPart = null;
    function commitHunk() {
      if (currentHunk) {
        if (currentHunkMutationPart) {
          currentHunk.parts.push(currentHunkMutationPart);
          currentHunkMutationPart = null;
        }
        currentFilePatch.hunks.push(currentHunk);
        currentHunk = null;
      }
    }
    function commitFilePatch() {
      commitHunk();
      result.push(currentFilePatch);
      currentFilePatch = emptyFilePatch();
    }
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      if (state === `parsing header`) {
        if (line.startsWith(`@@`)) {
          state = `parsing hunks`;
          currentFilePatch.hunks = [];
          i -= 1;
        } else if (line.startsWith(`diff --git `)) {
          if (currentFilePatch && currentFilePatch.diffLineFromPath)
            commitFilePatch();
          const match2 = line.match(/^diff --git a\/(.*?) b\/(.*?)\s*$/);
          if (!match2)
            throw new Error(`Bad diff line: ${line}`);
          currentFilePatch.diffLineFromPath = match2[1];
          currentFilePatch.diffLineToPath = match2[2];
        } else if (line.startsWith(`old mode `)) {
          currentFilePatch.oldMode = line.slice(`old mode `.length).trim();
        } else if (line.startsWith(`new mode `)) {
          currentFilePatch.newMode = line.slice(`new mode `.length).trim();
        } else if (line.startsWith(`deleted file mode `)) {
          currentFilePatch.deletedFileMode = line.slice(`deleted file mode `.length).trim();
        } else if (line.startsWith(`new file mode `)) {
          currentFilePatch.newFileMode = line.slice(`new file mode `.length).trim();
        } else if (line.startsWith(`rename from `)) {
          currentFilePatch.renameFrom = line.slice(`rename from `.length).trim();
        } else if (line.startsWith(`rename to `)) {
          currentFilePatch.renameTo = line.slice(`rename to `.length).trim();
        } else if (line.startsWith(`index `)) {
          const match2 = line.match(/(\w+)\.\.(\w+)/);
          if (!match2)
            continue;
          currentFilePatch.beforeHash = match2[1];
          currentFilePatch.afterHash = match2[2];
        } else if (line.startsWith(`semver exclusivity `)) {
          currentFilePatch.semverExclusivity = line.slice(`semver exclusivity `.length).trim();
        } else if (line.startsWith(`--- `)) {
          currentFilePatch.fromPath = line.slice(`--- a/`.length).trim();
        } else if (line.startsWith(`+++ `)) {
          currentFilePatch.toPath = line.slice(`+++ b/`.length).trim();
        }
      } else {
        const lineType = hunkLinetypes[line[0]] || null;
        switch (lineType) {
          case `header`:
            {
              commitHunk();
              currentHunk = emptyHunk(line);
            }
            break;
          case null:
            {
              state = `parsing header`;
              commitFilePatch();
              i -= 1;
            }
            break;
          case `pragma`:
            {
              if (!line.startsWith(`\\ No newline at end of file`))
                throw new Error(`Unrecognized pragma in patch file: ${line}`);
              if (!currentHunkMutationPart)
                throw new Error(`Bad parser state: No newline at EOF pragma encountered without context`);
              currentHunkMutationPart.noNewlineAtEndOfFile = true;
            }
            break;
          case PatchMutationType.Context:
          case PatchMutationType.Deletion:
          case PatchMutationType.Insertion:
            {
              if (!currentHunk)
                throw new Error(`Bad parser state: Hunk lines encountered before hunk header`);
              if (currentHunkMutationPart && currentHunkMutationPart.type !== lineType) {
                currentHunk.parts.push(currentHunkMutationPart);
                currentHunkMutationPart = null;
              }
              if (!currentHunkMutationPart) {
                currentHunkMutationPart = {
                  type: lineType,
                  lines: [],
                  noNewlineAtEndOfFile: false
                };
              }
              currentHunkMutationPart.lines.push(line.slice(1));
            }
            break;
          default:
            {
              miscUtils_exports.assertNever(lineType);
            }
            break;
        }
      }
    }
    commitFilePatch();
    for (const {hunks} of result)
      if (hunks)
        for (const hunk of hunks)
          verifyHunkIntegrity(hunk);
    return result;
  }
  function interpretParsedPatchFile(files) {
    const result = [];
    for (const file of files) {
      const {
        semverExclusivity,
        diffLineFromPath,
        diffLineToPath,
        oldMode,
        newMode,
        deletedFileMode,
        newFileMode,
        renameFrom,
        renameTo,
        beforeHash,
        afterHash,
        fromPath,
        toPath,
        hunks
      } = file;
      const type = renameFrom ? `rename` : deletedFileMode ? `file deletion` : newFileMode ? `file creation` : hunks && hunks.length > 0 ? `patch` : `mode change`;
      let destinationFilePath = null;
      switch (type) {
        case `rename`:
          {
            if (!renameFrom || !renameTo)
              throw new Error(`Bad parser state: rename from & to not given`);
            result.push({
              type: `rename`,
              semverExclusivity,
              fromPath: getPath3(renameFrom),
              toPath: getPath3(renameTo)
            });
            destinationFilePath = renameTo;
          }
          break;
        case `file deletion`:
          {
            const path3 = diffLineFromPath || fromPath;
            if (!path3)
              throw new Error(`Bad parse state: no path given for file deletion`);
            result.push({
              type: `file deletion`,
              semverExclusivity,
              hunk: hunks && hunks[0] || null,
              path: getPath3(path3),
              mode: parseFileMode(deletedFileMode),
              hash: beforeHash
            });
          }
          break;
        case `file creation`:
          {
            const path3 = diffLineToPath || toPath;
            if (!path3)
              throw new Error(`Bad parse state: no path given for file creation`);
            result.push({
              type: `file creation`,
              semverExclusivity,
              hunk: hunks && hunks[0] || null,
              path: getPath3(path3),
              mode: parseFileMode(newFileMode),
              hash: afterHash
            });
          }
          break;
        case `patch`:
        case `mode change`:
          {
            destinationFilePath = toPath || diffLineToPath;
          }
          break;
        default:
          {
            miscUtils_exports.assertNever(type);
          }
          break;
      }
      if (destinationFilePath && oldMode && newMode && oldMode !== newMode) {
        result.push({
          type: `mode change`,
          semverExclusivity,
          path: getPath3(destinationFilePath),
          oldMode: parseFileMode(oldMode),
          newMode: parseFileMode(newMode)
        });
      }
      if (destinationFilePath && hunks && hunks.length) {
        result.push({
          type: `patch`,
          semverExclusivity,
          path: getPath3(destinationFilePath),
          hunks,
          beforeHash,
          afterHash
        });
      }
    }
    if (result.length === 0)
      throw new Error(`Unable to parse patch file: No changes found. Make sure the patch is a valid UTF8 encoded string`);
    return result;
  }
  function parseFileMode(mode) {
    const parsedMode = parseInt(mode, 8) & 511;
    if (parsedMode !== NON_EXECUTABLE_FILE_MODE && parsedMode !== EXECUTABLE_FILE_MODE)
      throw new Error(`Unexpected file mode string: ${mode}`);
    return parsedMode;
  }
  function parsePatchFile(file) {
    const lines = file.split(/\n/g);
    if (lines[lines.length - 1] === ``)
      lines.pop();
    return interpretParsedPatchFile(parsePatchLines(lines));
  }
  function verifyHunkIntegrity(hunk) {
    let originalLength = 0;
    let patchedLength = 0;
    for (const {type, lines} of hunk.parts) {
      switch (type) {
        case PatchMutationType.Context:
          {
            patchedLength += lines.length;
            originalLength += lines.length;
          }
          break;
        case PatchMutationType.Deletion:
          {
            originalLength += lines.length;
          }
          break;
        case PatchMutationType.Insertion:
          {
            patchedLength += lines.length;
          }
          break;
        default:
          {
            miscUtils_exports.assertNever(type);
          }
          break;
      }
    }
    if (originalLength !== hunk.header.original.length || patchedLength !== hunk.header.patched.length) {
      const format = (n) => n < 0 ? n : `+${n}`;
      throw new Error(`hunk header integrity check failed (expected @@ ${format(hunk.header.original.length)} ${format(hunk.header.patched.length)} @@, got @@ ${format(originalLength)} ${format(patchedLength)} @@)`);
    }
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-patch-virtual-8a5ab312c8/1/packages/plugin-patch/sources/tools/apply.ts
  var DEFAULT_TIME = 315532800;
  async function preserveTime(baseFs, p, cb) {
    const stat = await baseFs.lstatPromise(p);
    const result = await cb();
    if (typeof result !== `undefined`)
      p = result;
    if (baseFs.lutimesPromise) {
      await baseFs.lutimesPromise(p, stat.atime, stat.mtime);
    } else if (!stat.isSymbolicLink()) {
      await baseFs.utimesPromise(p, stat.atime, stat.mtime);
    } else {
      throw new Error(`Cannot preserve the time values of a symlink`);
    }
  }
  async function applyPatchFile(effects, {baseFs = new NodeFS(), dryRun = false, version = null} = {}) {
    for (const eff of effects) {
      if (eff.semverExclusivity !== null && version !== null) {
        if (!semverUtils_exports.satisfiesWithPrereleases(version, eff.semverExclusivity))
          continue;
      }
      switch (eff.type) {
        case `file deletion`:
          {
            if (dryRun) {
              if (!baseFs.existsSync(eff.path)) {
                throw new Error(`Trying to delete a file that doesn't exist: ${eff.path}`);
              }
            } else {
              await preserveTime(baseFs, ppath.dirname(eff.path), async () => {
                await baseFs.unlinkPromise(eff.path);
              });
            }
          }
          break;
        case `rename`:
          {
            if (dryRun) {
              if (!baseFs.existsSync(eff.fromPath)) {
                throw new Error(`Trying to move a file that doesn't exist: ${eff.fromPath}`);
              }
            } else {
              await preserveTime(baseFs, ppath.dirname(eff.fromPath), async () => {
                await preserveTime(baseFs, ppath.dirname(eff.toPath), async () => {
                  await preserveTime(baseFs, eff.fromPath, async () => {
                    await baseFs.movePromise(eff.fromPath, eff.toPath);
                    return eff.toPath;
                  });
                });
              });
            }
          }
          break;
        case `file creation`:
          {
            if (dryRun) {
              if (baseFs.existsSync(eff.path)) {
                throw new Error(`Trying to create a file that already exists: ${eff.path}`);
              }
            } else {
              const fileContents = eff.hunk ? eff.hunk.parts[0].lines.join(`
`) + (eff.hunk.parts[0].noNewlineAtEndOfFile ? `` : `
`) : ``;
              await baseFs.mkdirpPromise(ppath.dirname(eff.path), {chmod: 493, utimes: [DEFAULT_TIME, DEFAULT_TIME]});
              await baseFs.writeFilePromise(eff.path, fileContents, {mode: eff.mode});
              await baseFs.utimesPromise(eff.path, DEFAULT_TIME, DEFAULT_TIME);
            }
          }
          break;
        case `patch`:
          {
            await preserveTime(baseFs, eff.path, async () => {
              await applyPatch(eff, {baseFs, dryRun});
            });
          }
          break;
        case `mode change`:
          {
            const currentStat = await baseFs.statPromise(eff.path);
            const currentMode = currentStat.mode;
            if (isExecutable(eff.newMode) !== isExecutable(currentMode))
              continue;
            await preserveTime(baseFs, eff.path, async () => {
              await baseFs.chmodPromise(eff.path, eff.newMode);
            });
          }
          break;
        default:
          {
            miscUtils_exports.assertNever(eff);
          }
          break;
      }
    }
  }
  function isExecutable(fileMode) {
    return (fileMode & 64) > 0;
  }
  function trimRight(s) {
    return s.replace(/\s+$/, ``);
  }
  function linesAreEqual(a, b) {
    return trimRight(a) === trimRight(b);
  }
  async function applyPatch({hunks, path: path3}, {baseFs, dryRun = false}) {
    const mode = await baseFs.statSync(path3).mode;
    const fileContents = await baseFs.readFileSync(path3, `utf8`);
    const fileLines = fileContents.split(/\n/);
    const result = [];
    let fixupOffset = 0;
    let maxFrozenLine = 0;
    for (const hunk of hunks) {
      const firstGuess = Math.max(maxFrozenLine, hunk.header.patched.start + fixupOffset);
      const maxPrefixFuzz = Math.max(0, firstGuess - maxFrozenLine);
      const maxSuffixFuzz = Math.max(0, fileLines.length - firstGuess - hunk.header.original.length);
      const maxFuzz = Math.max(maxPrefixFuzz, maxSuffixFuzz);
      let offset = 0;
      let location = 0;
      let modifications = null;
      while (offset <= maxFuzz) {
        if (offset <= maxPrefixFuzz) {
          location = firstGuess - offset;
          modifications = evaluateHunk(hunk, fileLines, location);
          if (modifications !== null) {
            offset = -offset;
            break;
          }
        }
        if (offset <= maxSuffixFuzz) {
          location = firstGuess + offset;
          modifications = evaluateHunk(hunk, fileLines, location);
          if (modifications !== null) {
            break;
          }
        }
        offset += 1;
      }
      if (modifications === null)
        throw new UnmatchedHunkError(hunks.indexOf(hunk), hunk);
      result.push(modifications);
      fixupOffset += offset;
      maxFrozenLine = location + hunk.header.original.length;
    }
    if (dryRun)
      return;
    let diffOffset = 0;
    for (const modifications of result) {
      for (const modification of modifications) {
        switch (modification.type) {
          case `splice`:
            {
              const firstLine = modification.index + diffOffset;
              fileLines.splice(firstLine, modification.numToDelete, ...modification.linesToInsert);
              diffOffset += modification.linesToInsert.length - modification.numToDelete;
            }
            break;
          case `pop`:
            {
              fileLines.pop();
            }
            break;
          case `push`:
            {
              fileLines.push(modification.line);
            }
            break;
          default:
            {
              miscUtils_exports.assertNever(modification);
            }
            break;
        }
      }
    }
    await baseFs.writeFilePromise(path3, fileLines.join(`
`), {mode});
  }
  function evaluateHunk(hunk, fileLines, offset) {
    const result = [];
    for (const part of hunk.parts) {
      switch (part.type) {
        case PatchMutationType.Context:
        case PatchMutationType.Deletion:
          {
            for (const line of part.lines) {
              const originalLine = fileLines[offset];
              if (originalLine == null || !linesAreEqual(originalLine, line))
                return null;
              offset += 1;
            }
            if (part.type === PatchMutationType.Deletion) {
              result.push({
                type: `splice`,
                index: offset - part.lines.length,
                numToDelete: part.lines.length,
                linesToInsert: []
              });
              if (part.noNewlineAtEndOfFile) {
                result.push({
                  type: `push`,
                  line: ``
                });
              }
            }
          }
          break;
        case PatchMutationType.Insertion:
          {
            result.push({
              type: `splice`,
              index: offset,
              numToDelete: 0,
              linesToInsert: part.lines
            });
            if (part.noNewlineAtEndOfFile) {
              result.push({type: `pop`});
            }
          }
          break;
        default:
          {
            miscUtils_exports.assertNever(part.type);
          }
          break;
      }
    }
    return result;
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-patch-virtual-8a5ab312c8/1/packages/plugin-patch/sources/patchUtils.ts
  var BUILTIN_REGEXP = /^builtin<([^>]+)>$/;
  function parseSpec2(spec, sourceParser) {
    const {source, selector, params} = structUtils_exports.parseRange(spec);
    if (source === null)
      throw new Error(`Patch locators must explicitly define their source`);
    const patchPaths = selector ? selector.split(/&/).map((path3) => npath.toPortablePath(path3)) : [];
    const parentLocator = params && typeof params.locator === `string` ? structUtils_exports.parseLocator(params.locator) : null;
    const sourceVersion = params && typeof params.version === `string` ? params.version : null;
    const sourceItem = sourceParser(source);
    return {parentLocator, sourceItem, patchPaths, sourceVersion};
  }
  function parseDescriptor2(descriptor) {
    const _a2 = parseSpec2(descriptor.range, structUtils_exports.parseDescriptor), {sourceItem} = _a2, rest = __objRest(_a2, ["sourceItem"]);
    return __spreadProps(__spreadValues({}, rest), {sourceDescriptor: sourceItem});
  }
  function parseLocator2(locator) {
    const _a2 = parseSpec2(locator.reference, structUtils_exports.parseLocator), {sourceItem} = _a2, rest = __objRest(_a2, ["sourceItem"]);
    return __spreadProps(__spreadValues({}, rest), {sourceLocator: sourceItem});
  }
  function makeSpec2({parentLocator, sourceItem, patchPaths, sourceVersion, patchHash}, sourceStringifier) {
    const parentLocatorSpread = parentLocator !== null ? {locator: structUtils_exports.stringifyLocator(parentLocator)} : {};
    const sourceVersionSpread = typeof sourceVersion !== `undefined` ? {version: sourceVersion} : {};
    const patchHashSpread = typeof patchHash !== `undefined` ? {hash: patchHash} : {};
    return structUtils_exports.makeRange({
      protocol: `patch:`,
      source: sourceStringifier(sourceItem),
      selector: patchPaths.join(`&`),
      params: __spreadValues(__spreadValues(__spreadValues({}, sourceVersionSpread), patchHashSpread), parentLocatorSpread)
    });
  }
  function makeDescriptor2(ident, {parentLocator, sourceDescriptor, patchPaths}) {
    return structUtils_exports.makeLocator(ident, makeSpec2({parentLocator, sourceItem: sourceDescriptor, patchPaths}, structUtils_exports.stringifyDescriptor));
  }
  function makeLocator4(ident, {parentLocator, sourcePackage, patchPaths, patchHash}) {
    return structUtils_exports.makeLocator(ident, makeSpec2({parentLocator, sourceItem: sourcePackage, sourceVersion: sourcePackage.version, patchPaths, patchHash}, structUtils_exports.stringifyLocator));
  }
  function visitPatchPath({onAbsolute, onRelative, onBuiltin}, patchPath) {
    const optional = patchPath.startsWith(`~`);
    if (optional)
      patchPath = patchPath.slice(1);
    const builtinMatch = patchPath.match(BUILTIN_REGEXP);
    if (builtinMatch !== null)
      return onBuiltin(builtinMatch[1]);
    if (ppath.isAbsolute(patchPath)) {
      return onAbsolute(patchPath);
    } else {
      return onRelative(patchPath);
    }
  }
  function extractPatchFlags(patchPath) {
    const optional = patchPath.startsWith(`~`);
    if (optional)
      patchPath = patchPath.slice(1);
    return {optional};
  }
  function isParentRequired(patchPath) {
    return visitPatchPath({
      onAbsolute: () => false,
      onRelative: () => true,
      onBuiltin: () => false
    }, patchPath);
  }
  async function loadPatchFiles(parentLocator, patchPaths, opts) {
    const parentFetch = parentLocator !== null ? await opts.fetcher.fetch(parentLocator, opts) : null;
    const effectiveParentFetch = parentFetch && parentFetch.localPath ? {packageFs: new CwdFS(PortablePath.root), prefixPath: ppath.relative(PortablePath.root, parentFetch.localPath)} : parentFetch;
    if (parentFetch && parentFetch !== effectiveParentFetch && parentFetch.releaseFs)
      parentFetch.releaseFs();
    const patchFiles = await miscUtils_exports.releaseAfterUseAsync(async () => {
      return await Promise.all(patchPaths.map(async (patchPath) => {
        const flags = extractPatchFlags(patchPath);
        const source = await visitPatchPath({
          onAbsolute: async () => {
            return await xfs.readFilePromise(patchPath, `utf8`);
          },
          onRelative: async () => {
            if (effectiveParentFetch === null)
              throw new Error(`Assertion failed: The parent locator should have been fetched`);
            return await effectiveParentFetch.packageFs.readFilePromise(ppath.join(effectiveParentFetch.prefixPath, patchPath), `utf8`);
          },
          onBuiltin: async (name) => {
            return await opts.project.configuration.firstHook((hooks) => {
              return hooks.getBuiltinPatch;
            }, opts.project, name);
          }
        }, patchPath);
        return __spreadProps(__spreadValues({}, flags), {source});
      }));
    });
    for (const spec of patchFiles)
      if (typeof spec.source === `string`)
        spec.source = spec.source.replace(/\r\n?/g, `
`);
    return patchFiles;
  }
  async function extractPackageToDisk(locator, {cache: cache2, project}) {
    const pkg = project.storedPackages.get(locator.locatorHash);
    if (typeof pkg === `undefined`)
      throw new Error(`Assertion failed: Expected the package to be registered`);
    const checksums = project.storedChecksums;
    const report = new ThrowReport();
    const fetcher = project.configuration.makeFetcher();
    const fetchResult = await fetcher.fetch(locator, {cache: cache2, project, fetcher, checksums, report});
    const temp = await xfs.mktempPromise();
    const sourcePath = ppath.join(temp, `source`);
    const userPath = ppath.join(temp, `user`);
    const metaPath = ppath.join(temp, `.yarn-patch.json`);
    await Promise.all([
      xfs.copyPromise(sourcePath, fetchResult.prefixPath, {
        baseFs: fetchResult.packageFs
      }),
      xfs.copyPromise(userPath, fetchResult.prefixPath, {
        baseFs: fetchResult.packageFs
      }),
      xfs.writeJsonPromise(metaPath, {
        locator: structUtils_exports.stringifyLocator(locator),
        version: pkg.version
      })
    ]);
    xfs.detachTemp(temp);
    return userPath;
  }
  async function diffFolders(folderA, folderB) {
    const folderAN = npath.fromPortablePath(folderA).replace(/\\/g, `/`);
    const folderBN = npath.fromPortablePath(folderB).replace(/\\/g, `/`);
    const {stdout, stderr} = await execUtils_exports.execvp(`git`, [`-c`, `core.safecrlf=false`, `diff`, `--src-prefix=a/`, `--dst-prefix=b/`, `--ignore-cr-at-eol`, `--full-index`, `--no-index`, `--text`, folderAN, folderBN], {
      cwd: npath.toPortablePath(process.cwd()),
      env: __spreadProps(__spreadValues({}, process.env), {
        GIT_CONFIG_NOSYSTEM: `1`,
        HOME: ``,
        XDG_CONFIG_HOME: ``,
        USERPROFILE: ``
      })
    });
    if (stderr.length > 0)
      throw new Error(`Unable to diff directories. Make sure you have a recent version of 'git' available in PATH.
The following error was reported by 'git':
${stderr}`);
    const normalizePath = folderAN.startsWith(`/`) ? (p) => p.slice(1) : (p) => p;
    return stdout.replace(new RegExp(`(a|b)(${miscUtils_exports.escapeRegExp(`/${normalizePath(folderAN)}/`)})`, `g`), `$1/`).replace(new RegExp(`(a|b)${miscUtils_exports.escapeRegExp(`/${normalizePath(folderBN)}/`)}`, `g`), `$1/`).replace(new RegExp(miscUtils_exports.escapeRegExp(`${folderAN}/`), `g`), ``).replace(new RegExp(miscUtils_exports.escapeRegExp(`${folderBN}/`), `g`), ``);
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-patch-virtual-8a5ab312c8/1/packages/plugin-patch/sources/tools/format.ts
  function reportHunk(hunk, {configuration, report}) {
    for (const part of hunk.parts) {
      for (const line of part.lines) {
        switch (part.type) {
          case PatchMutationType.Context:
            {
              report.reportInfo(null, `  ${formatUtils_exports.pretty(configuration, line, `grey`)}`);
            }
            break;
          case PatchMutationType.Deletion:
            {
              report.reportError(MessageName.FROZEN_LOCKFILE_EXCEPTION, `- ${formatUtils_exports.pretty(configuration, line, formatUtils_exports.Type.REMOVED)}`);
            }
            break;
          case PatchMutationType.Insertion:
            {
              report.reportError(MessageName.FROZEN_LOCKFILE_EXCEPTION, `+ ${formatUtils_exports.pretty(configuration, line, formatUtils_exports.Type.ADDED)}`);
            }
            break;
          default: {
            miscUtils_exports.assertNever(part.type);
          }
        }
      }
    }
  }

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-patch-virtual-8a5ab312c8/1/packages/plugin-patch/sources/PatchFetcher.ts
  var PatchFetcher = class {
    supports(locator, opts) {
      if (!locator.reference.startsWith(`patch:`))
        return false;
      return true;
    }
    getLocalPath(locator, opts) {
      return null;
    }
    async fetch(locator, opts) {
      const expectedChecksum = opts.checksums.get(locator.locatorHash) || null;
      const [packageFs, releaseFs, checksum] = await opts.cache.fetchPackageFromCache(locator, expectedChecksum, {
        onHit: () => opts.report.reportCacheHit(locator),
        onMiss: () => opts.report.reportCacheMiss(locator, `${structUtils_exports.prettyLocator(opts.project.configuration, locator)} can't be found in the cache and will be fetched from the disk`),
        loader: () => this.patchPackage(locator, opts),
        skipIntegrityCheck: opts.skipIntegrityCheck
      });
      return {
        packageFs,
        releaseFs,
        prefixPath: structUtils_exports.getIdentVendorPath(locator),
        localPath: this.getLocalPath(locator, opts),
        checksum
      };
    }
    async patchPackage(locator, opts) {
      const {parentLocator, sourceLocator, sourceVersion, patchPaths} = parseLocator2(locator);
      const patchFiles = await loadPatchFiles(parentLocator, patchPaths, opts);
      const tmpDir = await xfs.mktempPromise();
      const currentFile = ppath.join(tmpDir, `current.zip`);
      const sourceFetch = await opts.fetcher.fetch(sourceLocator, opts);
      const prefixPath = structUtils_exports.getIdentVendorPath(locator);
      const libzip = await getLibzipPromise();
      const initialCopy = new ZipFS(currentFile, {
        libzip,
        create: true,
        level: opts.project.configuration.get(`compressionLevel`)
      });
      await initialCopy.mkdirpPromise(prefixPath);
      await miscUtils_exports.releaseAfterUseAsync(async () => {
        await initialCopy.copyPromise(prefixPath, sourceFetch.prefixPath, {baseFs: sourceFetch.packageFs, stableSort: true});
      }, sourceFetch.releaseFs);
      initialCopy.saveAndClose();
      for (const {source, optional} of patchFiles) {
        if (source === null)
          continue;
        const patchedPackage = new ZipFS(currentFile, {
          libzip,
          level: opts.project.configuration.get(`compressionLevel`)
        });
        const patchFs3 = new CwdFS(ppath.resolve(PortablePath.root, prefixPath), {
          baseFs: patchedPackage
        });
        try {
          await applyPatchFile(parsePatchFile(source), {
            baseFs: patchFs3,
            version: sourceVersion
          });
        } catch (err) {
          if (!(err instanceof UnmatchedHunkError))
            throw err;
          const enableInlineHunks = opts.project.configuration.get(`enableInlineHunks`);
          const suggestion = !enableInlineHunks && !optional ? ` (set enableInlineHunks for details)` : ``;
          const message = `${structUtils_exports.prettyLocator(opts.project.configuration, locator)}: ${err.message}${suggestion}`;
          const reportExtra = (report) => {
            if (!enableInlineHunks)
              return;
            reportHunk(err.hunk, {
              configuration: opts.project.configuration,
              report
            });
          };
          patchedPackage.discardAndClose();
          if (optional) {
            opts.report.reportWarningOnce(MessageName.PATCH_HUNK_FAILED, message, {reportExtra});
            continue;
          } else {
            throw new ReportError(MessageName.PATCH_HUNK_FAILED, message, reportExtra);
          }
        }
        patchedPackage.saveAndClose();
      }
      return new ZipFS(currentFile, {
        libzip,
        level: opts.project.configuration.get(`compressionLevel`)
      });
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-patch-virtual-8a5ab312c8/1/packages/plugin-patch/sources/PatchResolver.ts
  var CACHE_VERSION3 = 2;
  var PatchResolver = class {
    supportsDescriptor(descriptor, opts) {
      if (!descriptor.range.startsWith(`patch:`))
        return false;
      return true;
    }
    supportsLocator(locator, opts) {
      if (!locator.reference.startsWith(`patch:`))
        return false;
      return true;
    }
    shouldPersistResolution(locator, opts) {
      return false;
    }
    bindDescriptor(descriptor, fromLocator, opts) {
      const {patchPaths} = parseDescriptor2(descriptor);
      if (patchPaths.every((patchPath) => !isParentRequired(patchPath)))
        return descriptor;
      return structUtils_exports.bindDescriptor(descriptor, {
        locator: structUtils_exports.stringifyLocator(fromLocator)
      });
    }
    getResolutionDependencies(descriptor, opts) {
      const {sourceDescriptor} = parseDescriptor2(descriptor);
      return [sourceDescriptor];
    }
    async getCandidates(descriptor, dependencies, opts) {
      if (!opts.fetchOptions)
        throw new Error(`Assertion failed: This resolver cannot be used unless a fetcher is configured`);
      const {parentLocator, sourceDescriptor, patchPaths} = parseDescriptor2(descriptor);
      const patchFiles = await loadPatchFiles(parentLocator, patchPaths, opts.fetchOptions);
      const sourcePackage = dependencies.get(sourceDescriptor.descriptorHash);
      if (typeof sourcePackage === `undefined`)
        throw new Error(`Assertion failed: The dependency should have been resolved`);
      const patchHash = hashUtils_exports.makeHash(`${CACHE_VERSION3}`, ...patchFiles.map((spec) => JSON.stringify(spec))).slice(0, 6);
      return [makeLocator4(descriptor, {parentLocator, sourcePackage, patchPaths, patchHash})];
    }
    async getSatisfying(descriptor, references, opts) {
      return null;
    }
    async resolve(locator, opts) {
      const {sourceLocator} = parseLocator2(locator);
      const sourcePkg = await opts.resolver.resolve(sourceLocator, opts);
      return __spreadValues(__spreadValues({}, sourcePkg), locator);
    }
  };

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-patch-virtual-8a5ab312c8/1/packages/plugin-patch/sources/commands/patchCommit.ts
  var PatchCommitCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.save = options_exports.Boolean(`-s,--save`, false, {
        description: `Add the patch to your resolution entries`
      });
      this.patchFolder = options_exports.String();
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const {project, workspace} = await Project.find(configuration, this.context.cwd);
      if (!workspace)
        throw new WorkspaceRequiredError(project.cwd, this.context.cwd);
      await project.restoreInstallState();
      const folderPath = ppath.resolve(this.context.cwd, npath.toPortablePath(this.patchFolder));
      const sourcePath = ppath.join(folderPath, `../source`);
      const metaPath = ppath.join(folderPath, `../.yarn-patch.json`);
      if (!xfs.existsSync(sourcePath))
        throw new UsageError(`The argument folder didn't get created by 'yarn patch'`);
      const diff = await diffFolders(sourcePath, folderPath);
      const meta = await xfs.readJsonPromise(metaPath);
      const locator = structUtils_exports.parseLocator(meta.locator, true);
      if (!project.storedPackages.has(locator.locatorHash))
        throw new UsageError(`No package found in the project for the given locator`);
      if (!this.save) {
        this.context.stdout.write(diff);
        return;
      }
      const patchFolder = configuration.get(`patchFolder`);
      const patchPath = ppath.join(patchFolder, structUtils_exports.slugifyLocator(locator));
      await xfs.mkdirPromise(patchFolder, {recursive: true});
      await xfs.writeFilePromise(patchPath, diff);
      const relPath = ppath.relative(project.cwd, patchPath);
      project.topLevelWorkspace.manifest.resolutions.push({
        pattern: {descriptor: {fullName: structUtils_exports.stringifyIdent(locator), description: meta.version}},
        reference: `patch:${structUtils_exports.stringifyLocator(locator)}#${relPath}`
      });
      await project.persist();
    }
  };
  PatchCommitCommand.paths = [
    [`patch-commit`]
  ];
  PatchCommitCommand.usage = Command.Usage({
    description: `generate a patch out of a directory`,
    details: `
      This will print a patchfile on stdout based on the diff between the folder passed in and the original version of the package. Such file is suitable for consumption with the \`patch:\` protocol.

      Only folders generated by \`yarn patch\` are accepted as valid input for \`yarn patch-commit\`.
    `
  });
  var patchCommit_default = PatchCommitCommand;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-patch-virtual-8a5ab312c8/1/packages/plugin-patch/sources/commands/patch.ts
  var PatchCommand = class extends BaseCommand {
    constructor() {
      super(...arguments);
      this.json = options_exports.Boolean(`--json`, false, {
        description: `Format the output as an NDJSON stream`
      });
      this.package = options_exports.String();
    }
    async execute() {
      const configuration = await Configuration.find(this.context.cwd, this.context.plugins);
      const {project, workspace} = await Project.find(configuration, this.context.cwd);
      const cache2 = await Cache.find(configuration);
      if (!workspace)
        throw new WorkspaceRequiredError(project.cwd, this.context.cwd);
      await project.restoreInstallState();
      let locator = structUtils_exports.parseLocator(this.package);
      if (locator.reference === `unknown`) {
        const candidateLocators = miscUtils_exports.mapAndFilter([...project.storedPackages.values()], (pkg) => {
          if (pkg.identHash !== locator.identHash)
            return miscUtils_exports.mapAndFilter.skip;
          if (structUtils_exports.isVirtualLocator(pkg))
            return miscUtils_exports.mapAndFilter.skip;
          return pkg;
        });
        if (candidateLocators.length === 0)
          throw new UsageError(`No package found in the project for the given locator`);
        if (candidateLocators.length > 1)
          throw new UsageError(`Multiple candidate packages found; explicitly choose one of them (use \`yarn why <package>\` to get more information as to who depends on them):
${candidateLocators.map((locator2) => `
- ${structUtils_exports.prettyLocator(configuration, locator2)}`).join(``)}`);
        locator = candidateLocators[0];
      }
      if (!project.storedPackages.has(locator.locatorHash))
        throw new UsageError(`No package found in the project for the given locator`);
      await StreamReport.start({
        configuration,
        json: this.json,
        stdout: this.context.stdout
      }, async (report) => {
        const temp = await extractPackageToDisk(locator, {cache: cache2, project});
        report.reportJson({
          locator: structUtils_exports.stringifyLocator(locator),
          path: npath.fromPortablePath(temp)
        });
        report.reportInfo(MessageName.UNNAMED, `Package ${structUtils_exports.prettyLocator(configuration, locator)} got extracted with success!`);
        report.reportInfo(MessageName.UNNAMED, `You can now edit the following folder: ${formatUtils_exports.pretty(configuration, npath.fromPortablePath(temp), `magenta`)}`);
        report.reportInfo(MessageName.UNNAMED, `Once you are done run ${formatUtils_exports.pretty(configuration, `yarn patch-commit ${process.platform === `win32` ? `"` : ``}${npath.fromPortablePath(temp)}${process.platform === `win32` ? `"` : ``}`, `cyan`)} and Yarn will store a patchfile based on your changes.`);
      });
    }
  };
  PatchCommand.paths = [
    [`patch`]
  ];
  PatchCommand.usage = Command.Usage({
    description: `prepare a package for patching`,
    details: `
      This command will cause a package to be extracted in a temporary directory (under a folder named "patch-workdir"). This folder will be editable at will; running \`yarn patch\` inside it will then cause Yarn to generate a patchfile and register it into your top-level manifest (cf the \`patch:\` protocol).
    `
  });
  var patch_default = PatchCommand;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/.yarn/__virtual__/@yarnpkg-plugin-patch-virtual-8a5ab312c8/1/packages/plugin-patch/sources/index.ts
  var plugin15 = {
    configuration: {
      enableInlineHunks: {
        description: `If true, the installs will print unmatched patch hunks`,
        type: SettingsType.BOOLEAN,
        default: false
      },
      patchFolder: {
        description: `Folder where the patch files must be written`,
        type: SettingsType.ABSOLUTE_PATH,
        default: `./.yarn/patches`
      }
    },
    commands: [
      patchCommit_default,
      patch_default
    ],
    fetchers: [
      PatchFetcher
    ],
    resolvers: [
      PatchResolver
    ]
  };
  var sources_default17 = plugin15;

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-cli/sources/tools/getPluginConfiguration.ts
  var getPluginConfiguration = () => ({
    modules: new Map([
      ["@yarnpkg/cli", sources_exports5],
      ["@yarnpkg/core", sources_exports4],
      ["@yarnpkg/fslib", sources_exports],
      ["@yarnpkg/libzip", sync_exports],
      ["@yarnpkg/parsers", sources_exports2],
      ["@yarnpkg/shell", sources_exports3],
      ["clipanion", backportClipanionCompatibility(advanced_exports)],
      ["semver", _7],
      ["typanion", lib_exports],
      ["yup", _9],
      ["@yarnpkg/plugin-essentials", sources_exports6],
      ["@yarnpkg/plugin-compat", sources_exports7],
      ["@yarnpkg/plugin-dlx", sources_exports8],
      ["@yarnpkg/plugin-file", sources_exports9],
      ["@yarnpkg/plugin-git", sources_exports10],
      ["@yarnpkg/plugin-github", sources_exports11],
      ["@yarnpkg/plugin-http", sources_exports12],
      ["@yarnpkg/plugin-init", sources_exports13],
      ["@yarnpkg/plugin-link", sources_exports14],
      ["@yarnpkg/plugin-node-modules", sources_exports16],
      ["@yarnpkg/plugin-npm", sources_exports18],
      ["@yarnpkg/plugin-npm-cli", sources_exports19],
      ["@yarnpkg/plugin-pack", sources_exports17],
      ["@yarnpkg/plugin-patch", sources_exports20],
      ["@yarnpkg/plugin-pnp", sources_exports15]
    ]),
    plugins: new Set([
      "@yarnpkg/plugin-essentials",
      "@yarnpkg/plugin-compat",
      "@yarnpkg/plugin-dlx",
      "@yarnpkg/plugin-file",
      "@yarnpkg/plugin-git",
      "@yarnpkg/plugin-github",
      "@yarnpkg/plugin-http",
      "@yarnpkg/plugin-init",
      "@yarnpkg/plugin-link",
      "@yarnpkg/plugin-node-modules",
      "@yarnpkg/plugin-npm",
      "@yarnpkg/plugin-npm-cli",
      "@yarnpkg/plugin-pack",
      "@yarnpkg/plugin-patch",
      "@yarnpkg/plugin-pnp"
    ])
  });

  // pnp:/private/var/folders/9f/kl_c86q5651fqmhmzf63jb0x5t_d9j/T/yarnpkg-sources/d0a670/packages/yarnpkg-cli/sources/cli.ts
  main({
    binaryVersion: YarnVersion || `<unknown>`,
    pluginConfiguration: getPluginConfiguration()
  });
})();
/*!
 * buildToken
 * Builds OAuth token prefix (helper function)
 *
 * @name buildToken
 * @function
 * @param {GitUrl} obj The parsed Git url object.
 * @return {String} token prefix
 */
/*!
 * fill-range <https://github.com/jonschlinkert/fill-range>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Licensed under the MIT License.
 */
/*!
 * is-extglob <https://github.com/jonschlinkert/is-extglob>
 *
 * Copyright (c) 2014-2016, Jon Schlinkert.
 * Licensed under the MIT License.
 */
/*!
 * is-glob <https://github.com/jonschlinkert/is-glob>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */
/*!
 * is-number <https://github.com/jonschlinkert/is-number>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Released under the MIT License.
 */
/*!
 * is-windows <https://github.com/jonschlinkert/is-windows>
 *
 * Copyright © 2015-2018, Jon Schlinkert.
 * Released under the MIT License.
 */
/*!
 * to-regex-range <https://github.com/micromatch/to-regex-range>
 *
 * Copyright (c) 2015-present, Jon Schlinkert.
 * Released under the MIT License.
 */
